
FREERTOS_SAM_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005f58  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405f58  00405f58  00015f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000874  20400000  00405f60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000268  20400874  004067d4  00020874  2**2
                  ALLOC
  4 .stack        00002004  20400adc  00406a3c  00020874  2**0
                  ALLOC
  5 .heap         00000200  20402ae0  00408a40  00020874  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020874  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208a2  2**0
                  CONTENTS, READONLY
  8 .debug_info   00011c3e  00000000  00000000  000208fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002bdb  00000000  00000000  00032539  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008980  00000000  00000000  00035114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e08  00000000  00000000  0003da94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ea0  00000000  00000000  0003e89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000208d5  00000000  00000000  0003f73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f7a8  00000000  00000000  00060011  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000926af  00000000  00000000  0006f7b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002d4c  00000000  00000000  00101e68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20402ae0 	.word	0x20402ae0
  400004:	0040082d 	.word	0x0040082d
  400008:	00400829 	.word	0x00400829
  40000c:	00400829 	.word	0x00400829
  400010:	00400829 	.word	0x00400829
  400014:	00400829 	.word	0x00400829
  400018:	00400829 	.word	0x00400829
	...
  40002c:	00400c05 	.word	0x00400c05
  400030:	00400829 	.word	0x00400829
  400034:	00000000 	.word	0x00000000
  400038:	00400ca5 	.word	0x00400ca5
  40003c:	00400d0d 	.word	0x00400d0d
  400040:	00400829 	.word	0x00400829
  400044:	00400829 	.word	0x00400829
  400048:	00400829 	.word	0x00400829
  40004c:	00400829 	.word	0x00400829
  400050:	00400829 	.word	0x00400829
  400054:	00400829 	.word	0x00400829
  400058:	00400829 	.word	0x00400829
  40005c:	00400829 	.word	0x00400829
  400060:	00400829 	.word	0x00400829
  400064:	00000000 	.word	0x00000000
  400068:	00400505 	.word	0x00400505
  40006c:	00400519 	.word	0x00400519
  400070:	0040052d 	.word	0x0040052d
  400074:	00400829 	.word	0x00400829
  400078:	00400829 	.word	0x00400829
  40007c:	00400829 	.word	0x00400829
  400080:	00400541 	.word	0x00400541
  400084:	00400555 	.word	0x00400555
  400088:	00400829 	.word	0x00400829
  40008c:	00400829 	.word	0x00400829
  400090:	00400829 	.word	0x00400829
  400094:	00400829 	.word	0x00400829
  400098:	00400829 	.word	0x00400829
  40009c:	00400829 	.word	0x00400829
  4000a0:	00400829 	.word	0x00400829
  4000a4:	00400829 	.word	0x00400829
  4000a8:	00400829 	.word	0x00400829
  4000ac:	00400829 	.word	0x00400829
  4000b0:	00400829 	.word	0x00400829
  4000b4:	00400829 	.word	0x00400829
  4000b8:	00400829 	.word	0x00400829
  4000bc:	00400829 	.word	0x00400829
  4000c0:	00400829 	.word	0x00400829
  4000c4:	00400829 	.word	0x00400829
  4000c8:	00400829 	.word	0x00400829
  4000cc:	00400829 	.word	0x00400829
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00400829 	.word	0x00400829
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00400829 	.word	0x00400829
  4000e0:	00400829 	.word	0x00400829
  4000e4:	00400829 	.word	0x00400829
  4000e8:	00400829 	.word	0x00400829
  4000ec:	00400829 	.word	0x00400829
  4000f0:	00400829 	.word	0x00400829
  4000f4:	00400829 	.word	0x00400829
  4000f8:	00400829 	.word	0x00400829
  4000fc:	00400829 	.word	0x00400829
  400100:	00400829 	.word	0x00400829
  400104:	00400829 	.word	0x00400829
  400108:	00400829 	.word	0x00400829
  40010c:	00400829 	.word	0x00400829
  400110:	00400829 	.word	0x00400829
	...
  400120:	00400829 	.word	0x00400829
  400124:	00400829 	.word	0x00400829
  400128:	00400829 	.word	0x00400829
  40012c:	00400829 	.word	0x00400829
  400130:	00400829 	.word	0x00400829
  400134:	00000000 	.word	0x00000000
  400138:	00400829 	.word	0x00400829
  40013c:	00400829 	.word	0x00400829

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400874 	.word	0x20400874
  40015c:	00000000 	.word	0x00000000
  400160:	00405f60 	.word	0x00405f60

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400878 	.word	0x20400878
  400190:	00405f60 	.word	0x00405f60
  400194:	00405f60 	.word	0x00405f60
  400198:	00000000 	.word	0x00000000

0040019c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40019c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40019e:	4810      	ldr	r0, [pc, #64]	; (4001e0 <sysclk_init+0x44>)
  4001a0:	4b10      	ldr	r3, [pc, #64]	; (4001e4 <sysclk_init+0x48>)
  4001a2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001a4:	213e      	movs	r1, #62	; 0x3e
  4001a6:	2000      	movs	r0, #0
  4001a8:	4b0f      	ldr	r3, [pc, #60]	; (4001e8 <sysclk_init+0x4c>)
  4001aa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001ac:	4c0f      	ldr	r4, [pc, #60]	; (4001ec <sysclk_init+0x50>)
  4001ae:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001b0:	2800      	cmp	r0, #0
  4001b2:	d0fc      	beq.n	4001ae <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001b4:	4b0e      	ldr	r3, [pc, #56]	; (4001f0 <sysclk_init+0x54>)
  4001b6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001b8:	4a0e      	ldr	r2, [pc, #56]	; (4001f4 <sysclk_init+0x58>)
  4001ba:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x5c>)
  4001bc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001be:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x60>)
  4001c0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001c2:	2800      	cmp	r0, #0
  4001c4:	d0fc      	beq.n	4001c0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001c6:	2002      	movs	r0, #2
  4001c8:	4b0d      	ldr	r3, [pc, #52]	; (400200 <sysclk_init+0x64>)
  4001ca:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001cc:	2000      	movs	r0, #0
  4001ce:	4b0d      	ldr	r3, [pc, #52]	; (400204 <sysclk_init+0x68>)
  4001d0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001d2:	4b0d      	ldr	r3, [pc, #52]	; (400208 <sysclk_init+0x6c>)
  4001d4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001d6:	4802      	ldr	r0, [pc, #8]	; (4001e0 <sysclk_init+0x44>)
  4001d8:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
  4001dc:	bd10      	pop	{r4, pc}
  4001de:	bf00      	nop
  4001e0:	11e1a300 	.word	0x11e1a300
  4001e4:	00400a19 	.word	0x00400a19
  4001e8:	0040060d 	.word	0x0040060d
  4001ec:	00400661 	.word	0x00400661
  4001f0:	00400671 	.word	0x00400671
  4001f4:	20183f01 	.word	0x20183f01
  4001f8:	400e0600 	.word	0x400e0600
  4001fc:	00400681 	.word	0x00400681
  400200:	00400569 	.word	0x00400569
  400204:	004005a5 	.word	0x004005a5
  400208:	00400909 	.word	0x00400909

0040020c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40020c:	b990      	cbnz	r0, 400234 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40020e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400212:	460c      	mov	r4, r1
  400214:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400216:	2a00      	cmp	r2, #0
  400218:	dd0f      	ble.n	40023a <_read+0x2e>
  40021a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40021c:	4e08      	ldr	r6, [pc, #32]	; (400240 <_read+0x34>)
  40021e:	4d09      	ldr	r5, [pc, #36]	; (400244 <_read+0x38>)
  400220:	6830      	ldr	r0, [r6, #0]
  400222:	4621      	mov	r1, r4
  400224:	682b      	ldr	r3, [r5, #0]
  400226:	4798      	blx	r3
		ptr++;
  400228:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40022a:	42a7      	cmp	r7, r4
  40022c:	d1f8      	bne.n	400220 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40022e:	4640      	mov	r0, r8
  400230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400234:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  400238:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40023a:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40023c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400240:	20400a94 	.word	0x20400a94
  400244:	20400a8c 	.word	0x20400a8c

00400248 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400248:	3801      	subs	r0, #1
  40024a:	2802      	cmp	r0, #2
  40024c:	d815      	bhi.n	40027a <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40024e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400252:	460e      	mov	r6, r1
  400254:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400256:	b19a      	cbz	r2, 400280 <_write+0x38>
  400258:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40025a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400294 <_write+0x4c>
  40025e:	4f0c      	ldr	r7, [pc, #48]	; (400290 <_write+0x48>)
  400260:	f8d8 0000 	ldr.w	r0, [r8]
  400264:	f815 1b01 	ldrb.w	r1, [r5], #1
  400268:	683b      	ldr	r3, [r7, #0]
  40026a:	4798      	blx	r3
  40026c:	2800      	cmp	r0, #0
  40026e:	db0a      	blt.n	400286 <_write+0x3e>
  400270:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400272:	3c01      	subs	r4, #1
  400274:	d1f4      	bne.n	400260 <_write+0x18>
  400276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40027a:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  40027e:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400280:	2000      	movs	r0, #0
  400282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400286:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40028a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40028e:	bf00      	nop
  400290:	20400a90 	.word	0x20400a90
  400294:	20400a94 	.word	0x20400a94

00400298 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40029a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40029e:	4b57      	ldr	r3, [pc, #348]	; (4003fc <board_init+0x164>)
  4002a0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002a2:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4002a6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002aa:	4b55      	ldr	r3, [pc, #340]	; (400400 <board_init+0x168>)
  4002ac:	2200      	movs	r2, #0
  4002ae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002b2:	695a      	ldr	r2, [r3, #20]
  4002b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002b8:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002ba:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4002be:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002c2:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4002c6:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002ca:	f006 0707 	and.w	r7, r6, #7
  4002ce:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4002d0:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4002d4:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  4002d8:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002dc:	f3bf 8f4f 	dsb	sy

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4002e0:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4002e2:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4002e4:	fa05 f107 	lsl.w	r1, r5, r7
  4002e8:	fa03 f200 	lsl.w	r2, r3, r0
  4002ec:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  4002ee:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  4002f2:	3b01      	subs	r3, #1
  4002f4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002f8:	d1f6      	bne.n	4002e8 <board_init+0x50>
        } while(sets--);
  4002fa:	3d01      	subs	r5, #1
  4002fc:	f1b5 3fff 	cmp.w	r5, #4294967295
  400300:	d1ef      	bne.n	4002e2 <board_init+0x4a>
  400302:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400306:	4b3e      	ldr	r3, [pc, #248]	; (400400 <board_init+0x168>)
  400308:	695a      	ldr	r2, [r3, #20]
  40030a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40030e:	615a      	str	r2, [r3, #20]
  400310:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400314:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400318:	4a3a      	ldr	r2, [pc, #232]	; (400404 <board_init+0x16c>)
  40031a:	493b      	ldr	r1, [pc, #236]	; (400408 <board_init+0x170>)
  40031c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40031e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400322:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400324:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400328:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40032c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400330:	f022 0201 	bic.w	r2, r2, #1
  400334:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400338:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40033c:	f022 0201 	bic.w	r2, r2, #1
  400340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400344:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400348:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40034c:	200a      	movs	r0, #10
  40034e:	4c2f      	ldr	r4, [pc, #188]	; (40040c <board_init+0x174>)
  400350:	47a0      	blx	r4
  400352:	200b      	movs	r0, #11
  400354:	47a0      	blx	r4
  400356:	200c      	movs	r0, #12
  400358:	47a0      	blx	r4
  40035a:	2010      	movs	r0, #16
  40035c:	47a0      	blx	r4
  40035e:	2011      	movs	r0, #17
  400360:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400362:	4b2b      	ldr	r3, [pc, #172]	; (400410 <board_init+0x178>)
  400364:	f44f 7280 	mov.w	r2, #256	; 0x100
  400368:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40036a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40036e:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400370:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400374:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400378:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40037a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40037e:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400380:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400384:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  400386:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40038c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40038e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400392:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400394:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400396:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40039a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40039c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003a0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003ac:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003b2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003b4:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003bc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003c0:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003c2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003c4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003c8:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ca:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4003cc:	4a11      	ldr	r2, [pc, #68]	; (400414 <board_init+0x17c>)
  4003ce:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4003d2:	f043 0310 	orr.w	r3, r3, #16
  4003d6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003da:	4b0f      	ldr	r3, [pc, #60]	; (400418 <board_init+0x180>)
  4003dc:	2210      	movs	r2, #16
  4003de:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003e4:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003e6:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4003ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003ee:	4311      	orrs	r1, r2
  4003f0:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  4003f2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003f4:	4311      	orrs	r1, r2
  4003f6:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003f8:	605a      	str	r2, [r3, #4]
  4003fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4003fc:	400e1850 	.word	0x400e1850
  400400:	e000ed00 	.word	0xe000ed00
  400404:	400e0c00 	.word	0x400e0c00
  400408:	5a00080c 	.word	0x5a00080c
  40040c:	00400691 	.word	0x00400691
  400410:	400e1200 	.word	0x400e1200
  400414:	40088000 	.word	0x40088000
  400418:	400e1000 	.word	0x400e1000

0040041c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40041c:	6301      	str	r1, [r0, #48]	; 0x30
  40041e:	4770      	bx	lr

00400420 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400420:	6341      	str	r1, [r0, #52]	; 0x34
  400422:	4770      	bx	lr

00400424 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400424:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400428:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40042c:	d101      	bne.n	400432 <pio_get+0xe>
		ul_reg = p_pio->PIO_ODSR;
  40042e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400430:	e000      	b.n	400434 <pio_get+0x10>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  400432:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400434:	4213      	tst	r3, r2
	if ((ul_reg & ul_mask) == 0) {
		return 0;
	} else {
		return 1;
	}
}
  400436:	bf14      	ite	ne
  400438:	2001      	movne	r0, #1
  40043a:	2000      	moveq	r0, #0
  40043c:	4770      	bx	lr
  40043e:	bf00      	nop

00400440 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400440:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400442:	f012 0f01 	tst.w	r2, #1
  400446:	d001      	beq.n	40044c <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  400448:	6641      	str	r1, [r0, #100]	; 0x64
  40044a:	e000      	b.n	40044e <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40044c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40044e:	f012 0f0a 	tst.w	r2, #10
  400452:	d001      	beq.n	400458 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  400454:	6201      	str	r1, [r0, #32]
  400456:	e000      	b.n	40045a <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400458:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40045a:	f012 0f02 	tst.w	r2, #2
  40045e:	d002      	beq.n	400466 <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  400460:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400464:	e004      	b.n	400470 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400466:	f012 0f08 	tst.w	r2, #8
  40046a:	d001      	beq.n	400470 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40046c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400470:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400472:	6001      	str	r1, [r0, #0]
  400474:	4770      	bx	lr
  400476:	bf00      	nop

00400478 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400478:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40047a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40047c:	9c01      	ldr	r4, [sp, #4]
  40047e:	b10c      	cbz	r4, 400484 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400480:	6641      	str	r1, [r0, #100]	; 0x64
  400482:	e000      	b.n	400486 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400484:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400486:	b10b      	cbz	r3, 40048c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400488:	6501      	str	r1, [r0, #80]	; 0x50
  40048a:	e000      	b.n	40048e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40048c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40048e:	b10a      	cbz	r2, 400494 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400490:	6301      	str	r1, [r0, #48]	; 0x30
  400492:	e000      	b.n	400496 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400494:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400496:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400498:	6001      	str	r1, [r0, #0]
}
  40049a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40049e:	4770      	bx	lr

004004a0 <pio_get_output_data_status>:
 * \retval 0 All PIOs are configured to output a low level.
 */
uint32_t pio_get_output_data_status(const Pio *p_pio,
		const uint32_t ul_mask)
{
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  4004a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4004a2:	420b      	tst	r3, r1
		return 0;
	} else {
		return 1;
	}
}
  4004a4:	bf14      	ite	ne
  4004a6:	2001      	movne	r0, #1
  4004a8:	2000      	moveq	r0, #0
  4004aa:	4770      	bx	lr

004004ac <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4004ac:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4004ae:	4770      	bx	lr

004004b0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4004b0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4004b2:	4770      	bx	lr

004004b4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4004b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004b8:	4604      	mov	r4, r0
  4004ba:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4004bc:	4b0e      	ldr	r3, [pc, #56]	; (4004f8 <pio_handler_process+0x44>)
  4004be:	4798      	blx	r3
  4004c0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4004c2:	4620      	mov	r0, r4
  4004c4:	4b0d      	ldr	r3, [pc, #52]	; (4004fc <pio_handler_process+0x48>)
  4004c6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4004c8:	4005      	ands	r5, r0
  4004ca:	d013      	beq.n	4004f4 <pio_handler_process+0x40>
  4004cc:	4c0c      	ldr	r4, [pc, #48]	; (400500 <pio_handler_process+0x4c>)
  4004ce:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4004d2:	6823      	ldr	r3, [r4, #0]
  4004d4:	4543      	cmp	r3, r8
  4004d6:	d108      	bne.n	4004ea <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4004d8:	6861      	ldr	r1, [r4, #4]
  4004da:	4229      	tst	r1, r5
  4004dc:	d005      	beq.n	4004ea <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4004de:	68e3      	ldr	r3, [r4, #12]
  4004e0:	4640      	mov	r0, r8
  4004e2:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4004e4:	6863      	ldr	r3, [r4, #4]
  4004e6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4004ea:	42b4      	cmp	r4, r6
  4004ec:	d002      	beq.n	4004f4 <pio_handler_process+0x40>
  4004ee:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4004f0:	2d00      	cmp	r5, #0
  4004f2:	d1ee      	bne.n	4004d2 <pio_handler_process+0x1e>
  4004f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004f8:	004004ad 	.word	0x004004ad
  4004fc:	004004b1 	.word	0x004004b1
  400500:	20400890 	.word	0x20400890

00400504 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400504:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400506:	210a      	movs	r1, #10
  400508:	4801      	ldr	r0, [pc, #4]	; (400510 <PIOA_Handler+0xc>)
  40050a:	4b02      	ldr	r3, [pc, #8]	; (400514 <PIOA_Handler+0x10>)
  40050c:	4798      	blx	r3
  40050e:	bd08      	pop	{r3, pc}
  400510:	400e0e00 	.word	0x400e0e00
  400514:	004004b5 	.word	0x004004b5

00400518 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400518:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40051a:	210b      	movs	r1, #11
  40051c:	4801      	ldr	r0, [pc, #4]	; (400524 <PIOB_Handler+0xc>)
  40051e:	4b02      	ldr	r3, [pc, #8]	; (400528 <PIOB_Handler+0x10>)
  400520:	4798      	blx	r3
  400522:	bd08      	pop	{r3, pc}
  400524:	400e1000 	.word	0x400e1000
  400528:	004004b5 	.word	0x004004b5

0040052c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40052c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40052e:	210c      	movs	r1, #12
  400530:	4801      	ldr	r0, [pc, #4]	; (400538 <PIOC_Handler+0xc>)
  400532:	4b02      	ldr	r3, [pc, #8]	; (40053c <PIOC_Handler+0x10>)
  400534:	4798      	blx	r3
  400536:	bd08      	pop	{r3, pc}
  400538:	400e1200 	.word	0x400e1200
  40053c:	004004b5 	.word	0x004004b5

00400540 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400540:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400542:	2110      	movs	r1, #16
  400544:	4801      	ldr	r0, [pc, #4]	; (40054c <PIOD_Handler+0xc>)
  400546:	4b02      	ldr	r3, [pc, #8]	; (400550 <PIOD_Handler+0x10>)
  400548:	4798      	blx	r3
  40054a:	bd08      	pop	{r3, pc}
  40054c:	400e1400 	.word	0x400e1400
  400550:	004004b5 	.word	0x004004b5

00400554 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400554:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400556:	2111      	movs	r1, #17
  400558:	4801      	ldr	r0, [pc, #4]	; (400560 <PIOE_Handler+0xc>)
  40055a:	4b02      	ldr	r3, [pc, #8]	; (400564 <PIOE_Handler+0x10>)
  40055c:	4798      	blx	r3
  40055e:	bd08      	pop	{r3, pc}
  400560:	400e1600 	.word	0x400e1600
  400564:	004004b5 	.word	0x004004b5

00400568 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400568:	2803      	cmp	r0, #3
  40056a:	d007      	beq.n	40057c <pmc_mck_set_division+0x14>
  40056c:	2804      	cmp	r0, #4
  40056e:	d008      	beq.n	400582 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400570:	2802      	cmp	r0, #2
  400572:	bf0c      	ite	eq
  400574:	f44f 7280 	moveq.w	r2, #256	; 0x100
  400578:	2200      	movne	r2, #0
  40057a:	e004      	b.n	400586 <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40057c:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  400580:	e001      	b.n	400586 <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400582:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400586:	4906      	ldr	r1, [pc, #24]	; (4005a0 <pmc_mck_set_division+0x38>)
  400588:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40058a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40058e:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  400590:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400592:	460a      	mov	r2, r1
  400594:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400596:	f013 0f08 	tst.w	r3, #8
  40059a:	d0fb      	beq.n	400594 <pmc_mck_set_division+0x2c>
}
  40059c:	4770      	bx	lr
  40059e:	bf00      	nop
  4005a0:	400e0600 	.word	0x400e0600

004005a4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4005a4:	4a18      	ldr	r2, [pc, #96]	; (400608 <pmc_switch_mck_to_pllack+0x64>)
  4005a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4005ac:	4318      	orrs	r0, r3
  4005ae:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005b2:	f013 0f08 	tst.w	r3, #8
  4005b6:	d003      	beq.n	4005c0 <pmc_switch_mck_to_pllack+0x1c>
  4005b8:	e009      	b.n	4005ce <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005ba:	3b01      	subs	r3, #1
  4005bc:	d103      	bne.n	4005c6 <pmc_switch_mck_to_pllack+0x22>
  4005be:	e01e      	b.n	4005fe <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4005c4:	4910      	ldr	r1, [pc, #64]	; (400608 <pmc_switch_mck_to_pllack+0x64>)
  4005c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005c8:	f012 0f08 	tst.w	r2, #8
  4005cc:	d0f5      	beq.n	4005ba <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4005ce:	4a0e      	ldr	r2, [pc, #56]	; (400608 <pmc_switch_mck_to_pllack+0x64>)
  4005d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005d2:	f023 0303 	bic.w	r3, r3, #3
  4005d6:	f043 0302 	orr.w	r3, r3, #2
  4005da:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005dc:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4005de:	f010 0008 	ands.w	r0, r0, #8
  4005e2:	d004      	beq.n	4005ee <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4005e4:	2000      	movs	r0, #0
  4005e6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005e8:	3b01      	subs	r3, #1
  4005ea:	d103      	bne.n	4005f4 <pmc_switch_mck_to_pllack+0x50>
  4005ec:	e009      	b.n	400602 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4005f2:	4905      	ldr	r1, [pc, #20]	; (400608 <pmc_switch_mck_to_pllack+0x64>)
  4005f4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005f6:	f012 0f08 	tst.w	r2, #8
  4005fa:	d0f5      	beq.n	4005e8 <pmc_switch_mck_to_pllack+0x44>
  4005fc:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4005fe:	2001      	movs	r0, #1
  400600:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400602:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400604:	4770      	bx	lr
  400606:	bf00      	nop
  400608:	400e0600 	.word	0x400e0600

0040060c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40060c:	b138      	cbz	r0, 40061e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40060e:	490e      	ldr	r1, [pc, #56]	; (400648 <pmc_switch_mainck_to_xtal+0x3c>)
  400610:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400612:	4a0e      	ldr	r2, [pc, #56]	; (40064c <pmc_switch_mainck_to_xtal+0x40>)
  400614:	401a      	ands	r2, r3
  400616:	4b0e      	ldr	r3, [pc, #56]	; (400650 <pmc_switch_mainck_to_xtal+0x44>)
  400618:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40061a:	620b      	str	r3, [r1, #32]
  40061c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40061e:	480a      	ldr	r0, [pc, #40]	; (400648 <pmc_switch_mainck_to_xtal+0x3c>)
  400620:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400622:	0209      	lsls	r1, r1, #8
  400624:	b289      	uxth	r1, r1
  400626:	4a0b      	ldr	r2, [pc, #44]	; (400654 <pmc_switch_mainck_to_xtal+0x48>)
  400628:	401a      	ands	r2, r3
  40062a:	4b0b      	ldr	r3, [pc, #44]	; (400658 <pmc_switch_mainck_to_xtal+0x4c>)
  40062c:	4313      	orrs	r3, r2
  40062e:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400630:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400632:	4602      	mov	r2, r0
  400634:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400636:	f013 0f01 	tst.w	r3, #1
  40063a:	d0fb      	beq.n	400634 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40063c:	4a02      	ldr	r2, [pc, #8]	; (400648 <pmc_switch_mainck_to_xtal+0x3c>)
  40063e:	6a11      	ldr	r1, [r2, #32]
  400640:	4b06      	ldr	r3, [pc, #24]	; (40065c <pmc_switch_mainck_to_xtal+0x50>)
  400642:	430b      	orrs	r3, r1
  400644:	6213      	str	r3, [r2, #32]
  400646:	4770      	bx	lr
  400648:	400e0600 	.word	0x400e0600
  40064c:	fec8fffc 	.word	0xfec8fffc
  400650:	01370002 	.word	0x01370002
  400654:	ffc8fffc 	.word	0xffc8fffc
  400658:	00370001 	.word	0x00370001
  40065c:	01370000 	.word	0x01370000

00400660 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400660:	4b02      	ldr	r3, [pc, #8]	; (40066c <pmc_osc_is_ready_mainck+0xc>)
  400662:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400664:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400668:	4770      	bx	lr
  40066a:	bf00      	nop
  40066c:	400e0600 	.word	0x400e0600

00400670 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400670:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400674:	4b01      	ldr	r3, [pc, #4]	; (40067c <pmc_disable_pllack+0xc>)
  400676:	629a      	str	r2, [r3, #40]	; 0x28
  400678:	4770      	bx	lr
  40067a:	bf00      	nop
  40067c:	400e0600 	.word	0x400e0600

00400680 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400680:	4b02      	ldr	r3, [pc, #8]	; (40068c <pmc_is_locked_pllack+0xc>)
  400682:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400684:	f000 0002 	and.w	r0, r0, #2
  400688:	4770      	bx	lr
  40068a:	bf00      	nop
  40068c:	400e0600 	.word	0x400e0600

00400690 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400690:	283f      	cmp	r0, #63	; 0x3f
  400692:	d81e      	bhi.n	4006d2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400694:	281f      	cmp	r0, #31
  400696:	d80c      	bhi.n	4006b2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400698:	4b11      	ldr	r3, [pc, #68]	; (4006e0 <pmc_enable_periph_clk+0x50>)
  40069a:	699a      	ldr	r2, [r3, #24]
  40069c:	2301      	movs	r3, #1
  40069e:	4083      	lsls	r3, r0
  4006a0:	4393      	bics	r3, r2
  4006a2:	d018      	beq.n	4006d6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4006a4:	2301      	movs	r3, #1
  4006a6:	fa03 f000 	lsl.w	r0, r3, r0
  4006aa:	4b0d      	ldr	r3, [pc, #52]	; (4006e0 <pmc_enable_periph_clk+0x50>)
  4006ac:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4006ae:	2000      	movs	r0, #0
  4006b0:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4006b2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4006b4:	4b0a      	ldr	r3, [pc, #40]	; (4006e0 <pmc_enable_periph_clk+0x50>)
  4006b6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4006ba:	2301      	movs	r3, #1
  4006bc:	4083      	lsls	r3, r0
  4006be:	4393      	bics	r3, r2
  4006c0:	d00b      	beq.n	4006da <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4006c2:	2301      	movs	r3, #1
  4006c4:	fa03 f000 	lsl.w	r0, r3, r0
  4006c8:	4b05      	ldr	r3, [pc, #20]	; (4006e0 <pmc_enable_periph_clk+0x50>)
  4006ca:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4006ce:	2000      	movs	r0, #0
  4006d0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4006d2:	2001      	movs	r0, #1
  4006d4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4006d6:	2000      	movs	r0, #0
  4006d8:	4770      	bx	lr
  4006da:	2000      	movs	r0, #0
}
  4006dc:	4770      	bx	lr
  4006de:	bf00      	nop
  4006e0:	400e0600 	.word	0x400e0600

004006e4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4006e4:	6943      	ldr	r3, [r0, #20]
  4006e6:	f013 0f02 	tst.w	r3, #2
  4006ea:	d002      	beq.n	4006f2 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4006ec:	61c1      	str	r1, [r0, #28]
	return 0;
  4006ee:	2000      	movs	r0, #0
  4006f0:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4006f2:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4006f4:	4770      	bx	lr
  4006f6:	bf00      	nop

004006f8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4006f8:	6943      	ldr	r3, [r0, #20]
  4006fa:	f013 0f01 	tst.w	r3, #1
  4006fe:	d003      	beq.n	400708 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400700:	6983      	ldr	r3, [r0, #24]
  400702:	700b      	strb	r3, [r1, #0]
	return 0;
  400704:	2000      	movs	r0, #0
  400706:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400708:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  40070a:	4770      	bx	lr

0040070c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40070c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40070e:	010c      	lsls	r4, r1, #4
  400710:	4294      	cmp	r4, r2
  400712:	d90f      	bls.n	400734 <usart_set_async_baudrate+0x28>
  400714:	e01a      	b.n	40074c <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400716:	6841      	ldr	r1, [r0, #4]
  400718:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40071c:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40071e:	0412      	lsls	r2, r2, #16
  400720:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400724:	431a      	orrs	r2, r3
  400726:	6202      	str	r2, [r0, #32]

	return 0;
  400728:	2000      	movs	r0, #0
  40072a:	e01c      	b.n	400766 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  40072c:	2001      	movs	r0, #1
  40072e:	e01a      	b.n	400766 <usart_set_async_baudrate+0x5a>
  400730:	2001      	movs	r0, #1
  400732:	e018      	b.n	400766 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400734:	0863      	lsrs	r3, r4, #1
  400736:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40073a:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  40073e:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400740:	1e5c      	subs	r4, r3, #1
  400742:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400746:	428c      	cmp	r4, r1
  400748:	d9e9      	bls.n	40071e <usart_set_async_baudrate+0x12>
  40074a:	e7ef      	b.n	40072c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40074c:	00c9      	lsls	r1, r1, #3
  40074e:	084b      	lsrs	r3, r1, #1
  400750:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400754:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400758:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40075a:	1e5c      	subs	r4, r3, #1
  40075c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400760:	428c      	cmp	r4, r1
  400762:	d8e5      	bhi.n	400730 <usart_set_async_baudrate+0x24>
  400764:	e7d7      	b.n	400716 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  400766:	f85d 4b04 	ldr.w	r4, [sp], #4
  40076a:	4770      	bx	lr

0040076c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40076c:	4b08      	ldr	r3, [pc, #32]	; (400790 <usart_reset+0x24>)
  40076e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400772:	2300      	movs	r3, #0
  400774:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400776:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400778:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40077a:	2388      	movs	r3, #136	; 0x88
  40077c:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40077e:	2324      	movs	r3, #36	; 0x24
  400780:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  400782:	f44f 7380 	mov.w	r3, #256	; 0x100
  400786:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  400788:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40078c:	6003      	str	r3, [r0, #0]
  40078e:	4770      	bx	lr
  400790:	55534100 	.word	0x55534100

00400794 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400794:	b570      	push	{r4, r5, r6, lr}
  400796:	4605      	mov	r5, r0
  400798:	460c      	mov	r4, r1
  40079a:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40079c:	4b0f      	ldr	r3, [pc, #60]	; (4007dc <usart_init_rs232+0x48>)
  40079e:	4798      	blx	r3

	ul_reg_val = 0;
  4007a0:	2200      	movs	r2, #0
  4007a2:	4b0f      	ldr	r3, [pc, #60]	; (4007e0 <usart_init_rs232+0x4c>)
  4007a4:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4007a6:	b19c      	cbz	r4, 4007d0 <usart_init_rs232+0x3c>
  4007a8:	4632      	mov	r2, r6
  4007aa:	6821      	ldr	r1, [r4, #0]
  4007ac:	4628      	mov	r0, r5
  4007ae:	4b0d      	ldr	r3, [pc, #52]	; (4007e4 <usart_init_rs232+0x50>)
  4007b0:	4798      	blx	r3
  4007b2:	4602      	mov	r2, r0
  4007b4:	b970      	cbnz	r0, 4007d4 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4007b6:	6861      	ldr	r1, [r4, #4]
  4007b8:	68a3      	ldr	r3, [r4, #8]
  4007ba:	4319      	orrs	r1, r3
  4007bc:	6923      	ldr	r3, [r4, #16]
  4007be:	4319      	orrs	r1, r3
  4007c0:	68e3      	ldr	r3, [r4, #12]
  4007c2:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007c4:	4906      	ldr	r1, [pc, #24]	; (4007e0 <usart_init_rs232+0x4c>)
  4007c6:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  4007c8:	6869      	ldr	r1, [r5, #4]
  4007ca:	430b      	orrs	r3, r1
  4007cc:	606b      	str	r3, [r5, #4]

	return 0;
  4007ce:	e002      	b.n	4007d6 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4007d0:	2201      	movs	r2, #1
  4007d2:	e000      	b.n	4007d6 <usart_init_rs232+0x42>
  4007d4:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  4007d6:	4610      	mov	r0, r2
  4007d8:	bd70      	pop	{r4, r5, r6, pc}
  4007da:	bf00      	nop
  4007dc:	0040076d 	.word	0x0040076d
  4007e0:	20400900 	.word	0x20400900
  4007e4:	0040070d 	.word	0x0040070d

004007e8 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  4007e8:	2340      	movs	r3, #64	; 0x40
  4007ea:	6003      	str	r3, [r0, #0]
  4007ec:	4770      	bx	lr
  4007ee:	bf00      	nop

004007f0 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  4007f0:	2310      	movs	r3, #16
  4007f2:	6003      	str	r3, [r0, #0]
  4007f4:	4770      	bx	lr
  4007f6:	bf00      	nop

004007f8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4007f8:	6943      	ldr	r3, [r0, #20]
  4007fa:	f013 0f02 	tst.w	r3, #2
  4007fe:	d004      	beq.n	40080a <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400800:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400804:	61c1      	str	r1, [r0, #28]
	return 0;
  400806:	2000      	movs	r0, #0
  400808:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  40080a:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  40080c:	4770      	bx	lr
  40080e:	bf00      	nop

00400810 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400810:	6943      	ldr	r3, [r0, #20]
  400812:	f013 0f01 	tst.w	r3, #1
  400816:	d005      	beq.n	400824 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400818:	6983      	ldr	r3, [r0, #24]
  40081a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40081e:	600b      	str	r3, [r1, #0]

	return 0;
  400820:	2000      	movs	r0, #0
  400822:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400824:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400826:	4770      	bx	lr

00400828 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400828:	e7fe      	b.n	400828 <Dummy_Handler>
  40082a:	bf00      	nop

0040082c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40082c:	b500      	push	{lr}
  40082e:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  400830:	4b27      	ldr	r3, [pc, #156]	; (4008d0 <Reset_Handler+0xa4>)
  400832:	4a28      	ldr	r2, [pc, #160]	; (4008d4 <Reset_Handler+0xa8>)
  400834:	429a      	cmp	r2, r3
  400836:	d003      	beq.n	400840 <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  400838:	4b27      	ldr	r3, [pc, #156]	; (4008d8 <Reset_Handler+0xac>)
  40083a:	4a25      	ldr	r2, [pc, #148]	; (4008d0 <Reset_Handler+0xa4>)
  40083c:	429a      	cmp	r2, r3
  40083e:	d304      	bcc.n	40084a <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400840:	4b26      	ldr	r3, [pc, #152]	; (4008dc <Reset_Handler+0xb0>)
  400842:	4a27      	ldr	r2, [pc, #156]	; (4008e0 <Reset_Handler+0xb4>)
  400844:	429a      	cmp	r2, r3
  400846:	d30f      	bcc.n	400868 <Reset_Handler+0x3c>
  400848:	e01a      	b.n	400880 <Reset_Handler+0x54>
  40084a:	4921      	ldr	r1, [pc, #132]	; (4008d0 <Reset_Handler+0xa4>)
  40084c:	4b25      	ldr	r3, [pc, #148]	; (4008e4 <Reset_Handler+0xb8>)
  40084e:	1a5b      	subs	r3, r3, r1
  400850:	f023 0303 	bic.w	r3, r3, #3
  400854:	3304      	adds	r3, #4
  400856:	4a1f      	ldr	r2, [pc, #124]	; (4008d4 <Reset_Handler+0xa8>)
  400858:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  40085a:	f852 0b04 	ldr.w	r0, [r2], #4
  40085e:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  400862:	429a      	cmp	r2, r3
  400864:	d1f9      	bne.n	40085a <Reset_Handler+0x2e>
  400866:	e7eb      	b.n	400840 <Reset_Handler+0x14>
  400868:	4b1f      	ldr	r3, [pc, #124]	; (4008e8 <Reset_Handler+0xbc>)
  40086a:	4a20      	ldr	r2, [pc, #128]	; (4008ec <Reset_Handler+0xc0>)
  40086c:	1ad2      	subs	r2, r2, r3
  40086e:	f022 0203 	bic.w	r2, r2, #3
  400872:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400874:	3b04      	subs	r3, #4
                *pDest++ = 0;
  400876:	2100      	movs	r1, #0
  400878:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40087c:	4293      	cmp	r3, r2
  40087e:	d1fb      	bne.n	400878 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400880:	4a1b      	ldr	r2, [pc, #108]	; (4008f0 <Reset_Handler+0xc4>)
  400882:	4b1c      	ldr	r3, [pc, #112]	; (4008f4 <Reset_Handler+0xc8>)
  400884:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400888:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40088a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40088e:	fab3 f383 	clz	r3, r3
  400892:	095b      	lsrs	r3, r3, #5
  400894:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400896:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400898:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40089c:	2200      	movs	r2, #0
  40089e:	4b16      	ldr	r3, [pc, #88]	; (4008f8 <Reset_Handler+0xcc>)
  4008a0:	701a      	strb	r2, [r3, #0]
	return flags;
  4008a2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4008a4:	4a15      	ldr	r2, [pc, #84]	; (4008fc <Reset_Handler+0xd0>)
  4008a6:	6813      	ldr	r3, [r2, #0]
  4008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4008ac:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4008ae:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4008b2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4008b6:	b129      	cbz	r1, 4008c4 <Reset_Handler+0x98>
		cpu_irq_enable();
  4008b8:	2201      	movs	r2, #1
  4008ba:	4b0f      	ldr	r3, [pc, #60]	; (4008f8 <Reset_Handler+0xcc>)
  4008bc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4008be:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4008c2:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4008c4:	4b0e      	ldr	r3, [pc, #56]	; (400900 <Reset_Handler+0xd4>)
  4008c6:	4798      	blx	r3

        /* Branch to main function */
        main();
  4008c8:	4b0e      	ldr	r3, [pc, #56]	; (400904 <Reset_Handler+0xd8>)
  4008ca:	4798      	blx	r3
  4008cc:	e7fe      	b.n	4008cc <Reset_Handler+0xa0>
  4008ce:	bf00      	nop
  4008d0:	20400000 	.word	0x20400000
  4008d4:	00405f60 	.word	0x00405f60
  4008d8:	20400874 	.word	0x20400874
  4008dc:	20400adc 	.word	0x20400adc
  4008e0:	20400874 	.word	0x20400874
  4008e4:	20400873 	.word	0x20400873
  4008e8:	20400878 	.word	0x20400878
  4008ec:	20400adf 	.word	0x20400adf
  4008f0:	e000ed00 	.word	0xe000ed00
  4008f4:	00400000 	.word	0x00400000
  4008f8:	20400000 	.word	0x20400000
  4008fc:	e000ed88 	.word	0xe000ed88
  400900:	00402d95 	.word	0x00402d95
  400904:	00402bd9 	.word	0x00402bd9

00400908 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400908:	4b3c      	ldr	r3, [pc, #240]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  40090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40090c:	f003 0303 	and.w	r3, r3, #3
  400910:	2b01      	cmp	r3, #1
  400912:	d00f      	beq.n	400934 <SystemCoreClockUpdate+0x2c>
  400914:	b113      	cbz	r3, 40091c <SystemCoreClockUpdate+0x14>
  400916:	2b02      	cmp	r3, #2
  400918:	d029      	beq.n	40096e <SystemCoreClockUpdate+0x66>
  40091a:	e057      	b.n	4009cc <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40091c:	4b38      	ldr	r3, [pc, #224]	; (400a00 <SystemCoreClockUpdate+0xf8>)
  40091e:	695b      	ldr	r3, [r3, #20]
  400920:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400924:	bf14      	ite	ne
  400926:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40092a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40092e:	4b35      	ldr	r3, [pc, #212]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  400930:	601a      	str	r2, [r3, #0]
  400932:	e04b      	b.n	4009cc <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400934:	4b31      	ldr	r3, [pc, #196]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  400936:	6a1b      	ldr	r3, [r3, #32]
  400938:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40093c:	d003      	beq.n	400946 <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40093e:	4a32      	ldr	r2, [pc, #200]	; (400a08 <SystemCoreClockUpdate+0x100>)
  400940:	4b30      	ldr	r3, [pc, #192]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  400942:	601a      	str	r2, [r3, #0]
  400944:	e042      	b.n	4009cc <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400946:	4a31      	ldr	r2, [pc, #196]	; (400a0c <SystemCoreClockUpdate+0x104>)
  400948:	4b2e      	ldr	r3, [pc, #184]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  40094a:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40094c:	4b2b      	ldr	r3, [pc, #172]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  40094e:	6a1b      	ldr	r3, [r3, #32]
  400950:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400954:	2b10      	cmp	r3, #16
  400956:	d002      	beq.n	40095e <SystemCoreClockUpdate+0x56>
  400958:	2b20      	cmp	r3, #32
  40095a:	d004      	beq.n	400966 <SystemCoreClockUpdate+0x5e>
  40095c:	e036      	b.n	4009cc <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40095e:	4a2c      	ldr	r2, [pc, #176]	; (400a10 <SystemCoreClockUpdate+0x108>)
  400960:	4b28      	ldr	r3, [pc, #160]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  400962:	601a      	str	r2, [r3, #0]
          break;
  400964:	e032      	b.n	4009cc <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  400966:	4a28      	ldr	r2, [pc, #160]	; (400a08 <SystemCoreClockUpdate+0x100>)
  400968:	4b26      	ldr	r3, [pc, #152]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  40096a:	601a      	str	r2, [r3, #0]
          break;
  40096c:	e02e      	b.n	4009cc <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40096e:	4b23      	ldr	r3, [pc, #140]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  400970:	6a1b      	ldr	r3, [r3, #32]
  400972:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400976:	d003      	beq.n	400980 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400978:	4a23      	ldr	r2, [pc, #140]	; (400a08 <SystemCoreClockUpdate+0x100>)
  40097a:	4b22      	ldr	r3, [pc, #136]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  40097c:	601a      	str	r2, [r3, #0]
  40097e:	e012      	b.n	4009a6 <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400980:	4a22      	ldr	r2, [pc, #136]	; (400a0c <SystemCoreClockUpdate+0x104>)
  400982:	4b20      	ldr	r3, [pc, #128]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  400984:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400986:	4b1d      	ldr	r3, [pc, #116]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  400988:	6a1b      	ldr	r3, [r3, #32]
  40098a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40098e:	2b10      	cmp	r3, #16
  400990:	d002      	beq.n	400998 <SystemCoreClockUpdate+0x90>
  400992:	2b20      	cmp	r3, #32
  400994:	d004      	beq.n	4009a0 <SystemCoreClockUpdate+0x98>
  400996:	e006      	b.n	4009a6 <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  400998:	4a1d      	ldr	r2, [pc, #116]	; (400a10 <SystemCoreClockUpdate+0x108>)
  40099a:	4b1a      	ldr	r3, [pc, #104]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  40099c:	601a      	str	r2, [r3, #0]
          break;
  40099e:	e002      	b.n	4009a6 <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4009a0:	4a19      	ldr	r2, [pc, #100]	; (400a08 <SystemCoreClockUpdate+0x100>)
  4009a2:	4b18      	ldr	r3, [pc, #96]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  4009a4:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4009a6:	4b15      	ldr	r3, [pc, #84]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  4009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009aa:	f003 0303 	and.w	r3, r3, #3
  4009ae:	2b02      	cmp	r3, #2
  4009b0:	d10c      	bne.n	4009cc <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4009b2:	4a12      	ldr	r2, [pc, #72]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  4009b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4009b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4009b8:	4812      	ldr	r0, [pc, #72]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  4009ba:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4009be:	6803      	ldr	r3, [r0, #0]
  4009c0:	fb01 3303 	mla	r3, r1, r3, r3
  4009c4:	b2d2      	uxtb	r2, r2
  4009c6:	fbb3 f3f2 	udiv	r3, r3, r2
  4009ca:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4009cc:	4b0b      	ldr	r3, [pc, #44]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  4009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009d4:	2b70      	cmp	r3, #112	; 0x70
  4009d6:	d107      	bne.n	4009e8 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  4009d8:	4a0a      	ldr	r2, [pc, #40]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  4009da:	6813      	ldr	r3, [r2, #0]
  4009dc:	490d      	ldr	r1, [pc, #52]	; (400a14 <SystemCoreClockUpdate+0x10c>)
  4009de:	fba1 1303 	umull	r1, r3, r1, r3
  4009e2:	085b      	lsrs	r3, r3, #1
  4009e4:	6013      	str	r3, [r2, #0]
  4009e6:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4009e8:	4b04      	ldr	r3, [pc, #16]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  4009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009ec:	4905      	ldr	r1, [pc, #20]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  4009ee:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4009f2:	680b      	ldr	r3, [r1, #0]
  4009f4:	40d3      	lsrs	r3, r2
  4009f6:	600b      	str	r3, [r1, #0]
  4009f8:	4770      	bx	lr
  4009fa:	bf00      	nop
  4009fc:	400e0600 	.word	0x400e0600
  400a00:	400e1810 	.word	0x400e1810
  400a04:	20400004 	.word	0x20400004
  400a08:	00b71b00 	.word	0x00b71b00
  400a0c:	003d0900 	.word	0x003d0900
  400a10:	007a1200 	.word	0x007a1200
  400a14:	aaaaaaab 	.word	0xaaaaaaab

00400a18 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400a18:	4b12      	ldr	r3, [pc, #72]	; (400a64 <system_init_flash+0x4c>)
  400a1a:	4298      	cmp	r0, r3
  400a1c:	d804      	bhi.n	400a28 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a22:	4b11      	ldr	r3, [pc, #68]	; (400a68 <system_init_flash+0x50>)
  400a24:	601a      	str	r2, [r3, #0]
  400a26:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400a28:	4b10      	ldr	r3, [pc, #64]	; (400a6c <system_init_flash+0x54>)
  400a2a:	4298      	cmp	r0, r3
  400a2c:	d803      	bhi.n	400a36 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a2e:	4a10      	ldr	r2, [pc, #64]	; (400a70 <system_init_flash+0x58>)
  400a30:	4b0d      	ldr	r3, [pc, #52]	; (400a68 <system_init_flash+0x50>)
  400a32:	601a      	str	r2, [r3, #0]
  400a34:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400a36:	4b0f      	ldr	r3, [pc, #60]	; (400a74 <system_init_flash+0x5c>)
  400a38:	4298      	cmp	r0, r3
  400a3a:	d803      	bhi.n	400a44 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a3c:	4a0e      	ldr	r2, [pc, #56]	; (400a78 <system_init_flash+0x60>)
  400a3e:	4b0a      	ldr	r3, [pc, #40]	; (400a68 <system_init_flash+0x50>)
  400a40:	601a      	str	r2, [r3, #0]
  400a42:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400a44:	4b0d      	ldr	r3, [pc, #52]	; (400a7c <system_init_flash+0x64>)
  400a46:	4298      	cmp	r0, r3
  400a48:	d803      	bhi.n	400a52 <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a4a:	4a0d      	ldr	r2, [pc, #52]	; (400a80 <system_init_flash+0x68>)
  400a4c:	4b06      	ldr	r3, [pc, #24]	; (400a68 <system_init_flash+0x50>)
  400a4e:	601a      	str	r2, [r3, #0]
  400a50:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400a52:	4b0c      	ldr	r3, [pc, #48]	; (400a84 <system_init_flash+0x6c>)
  400a54:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a56:	bf94      	ite	ls
  400a58:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a5c:	4a0a      	ldrhi	r2, [pc, #40]	; (400a88 <system_init_flash+0x70>)
  400a5e:	4b02      	ldr	r3, [pc, #8]	; (400a68 <system_init_flash+0x50>)
  400a60:	601a      	str	r2, [r3, #0]
  400a62:	4770      	bx	lr
  400a64:	01312cff 	.word	0x01312cff
  400a68:	400e0c00 	.word	0x400e0c00
  400a6c:	026259ff 	.word	0x026259ff
  400a70:	04000100 	.word	0x04000100
  400a74:	039386ff 	.word	0x039386ff
  400a78:	04000200 	.word	0x04000200
  400a7c:	04c4b3ff 	.word	0x04c4b3ff
  400a80:	04000300 	.word	0x04000300
  400a84:	05f5e0ff 	.word	0x05f5e0ff
  400a88:	04000500 	.word	0x04000500

00400a8c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400a8c:	4b09      	ldr	r3, [pc, #36]	; (400ab4 <_sbrk+0x28>)
  400a8e:	681b      	ldr	r3, [r3, #0]
  400a90:	b913      	cbnz	r3, 400a98 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400a92:	4a09      	ldr	r2, [pc, #36]	; (400ab8 <_sbrk+0x2c>)
  400a94:	4b07      	ldr	r3, [pc, #28]	; (400ab4 <_sbrk+0x28>)
  400a96:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400a98:	4b06      	ldr	r3, [pc, #24]	; (400ab4 <_sbrk+0x28>)
  400a9a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400a9c:	181a      	adds	r2, r3, r0
  400a9e:	4907      	ldr	r1, [pc, #28]	; (400abc <_sbrk+0x30>)
  400aa0:	4291      	cmp	r1, r2
  400aa2:	db04      	blt.n	400aae <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400aa4:	4610      	mov	r0, r2
  400aa6:	4a03      	ldr	r2, [pc, #12]	; (400ab4 <_sbrk+0x28>)
  400aa8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400aaa:	4618      	mov	r0, r3
  400aac:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400aae:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400ab2:	4770      	bx	lr
  400ab4:	20400904 	.word	0x20400904
  400ab8:	20402ce0 	.word	0x20402ce0
  400abc:	2045fffc 	.word	0x2045fffc

00400ac0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400ac0:	f04f 30ff 	mov.w	r0, #4294967295
  400ac4:	4770      	bx	lr
  400ac6:	bf00      	nop

00400ac8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400acc:	604b      	str	r3, [r1, #4]

	return 0;
}
  400ace:	2000      	movs	r0, #0
  400ad0:	4770      	bx	lr
  400ad2:	bf00      	nop

00400ad4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400ad4:	2001      	movs	r0, #1
  400ad6:	4770      	bx	lr

00400ad8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400ad8:	2000      	movs	r0, #0
  400ada:	4770      	bx	lr

00400adc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400adc:	f100 0308 	add.w	r3, r0, #8
  400ae0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400ae2:	f04f 32ff 	mov.w	r2, #4294967295
  400ae6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ae8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400aea:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400aec:	2300      	movs	r3, #0
  400aee:	6003      	str	r3, [r0, #0]
  400af0:	4770      	bx	lr
  400af2:	bf00      	nop

00400af4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400af4:	2300      	movs	r3, #0
  400af6:	6103      	str	r3, [r0, #16]
  400af8:	4770      	bx	lr
  400afa:	bf00      	nop

00400afc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400afc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400afe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400b00:	689a      	ldr	r2, [r3, #8]
  400b02:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400b04:	689a      	ldr	r2, [r3, #8]
  400b06:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400b08:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400b0a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400b0c:	6803      	ldr	r3, [r0, #0]
  400b0e:	3301      	adds	r3, #1
  400b10:	6003      	str	r3, [r0, #0]
  400b12:	4770      	bx	lr

00400b14 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400b14:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400b16:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400b18:	f1b5 3fff 	cmp.w	r5, #4294967295
  400b1c:	d101      	bne.n	400b22 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400b1e:	6902      	ldr	r2, [r0, #16]
  400b20:	e007      	b.n	400b32 <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400b22:	f100 0208 	add.w	r2, r0, #8
  400b26:	e000      	b.n	400b2a <vListInsert+0x16>
  400b28:	461a      	mov	r2, r3
  400b2a:	6853      	ldr	r3, [r2, #4]
  400b2c:	681c      	ldr	r4, [r3, #0]
  400b2e:	42a5      	cmp	r5, r4
  400b30:	d2fa      	bcs.n	400b28 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400b32:	6853      	ldr	r3, [r2, #4]
  400b34:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400b36:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400b38:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400b3a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400b3c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400b3e:	6803      	ldr	r3, [r0, #0]
  400b40:	3301      	adds	r3, #1
  400b42:	6003      	str	r3, [r0, #0]
}
  400b44:	bc30      	pop	{r4, r5}
  400b46:	4770      	bx	lr

00400b48 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400b48:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400b4a:	6842      	ldr	r2, [r0, #4]
  400b4c:	6881      	ldr	r1, [r0, #8]
  400b4e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400b50:	6882      	ldr	r2, [r0, #8]
  400b52:	6841      	ldr	r1, [r0, #4]
  400b54:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400b56:	685a      	ldr	r2, [r3, #4]
  400b58:	4290      	cmp	r0, r2
  400b5a:	d101      	bne.n	400b60 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400b5c:	6882      	ldr	r2, [r0, #8]
  400b5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400b60:	2200      	movs	r2, #0
  400b62:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400b64:	6818      	ldr	r0, [r3, #0]
  400b66:	3801      	subs	r0, #1
  400b68:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400b6a:	4770      	bx	lr

00400b6c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400b6c:	4b0d      	ldr	r3, [pc, #52]	; (400ba4 <prvTaskExitError+0x38>)
  400b6e:	681b      	ldr	r3, [r3, #0]
  400b70:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b74:	d00a      	beq.n	400b8c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400b76:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b7a:	b672      	cpsid	i
  400b7c:	f383 8811 	msr	BASEPRI, r3
  400b80:	f3bf 8f6f 	isb	sy
  400b84:	f3bf 8f4f 	dsb	sy
  400b88:	b662      	cpsie	i
  400b8a:	e7fe      	b.n	400b8a <prvTaskExitError+0x1e>
  400b8c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b90:	b672      	cpsid	i
  400b92:	f383 8811 	msr	BASEPRI, r3
  400b96:	f3bf 8f6f 	isb	sy
  400b9a:	f3bf 8f4f 	dsb	sy
  400b9e:	b662      	cpsie	i
  400ba0:	e7fe      	b.n	400ba0 <prvTaskExitError+0x34>
  400ba2:	bf00      	nop
  400ba4:	20400008 	.word	0x20400008

00400ba8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400ba8:	4806      	ldr	r0, [pc, #24]	; (400bc4 <prvPortStartFirstTask+0x1c>)
  400baa:	6800      	ldr	r0, [r0, #0]
  400bac:	6800      	ldr	r0, [r0, #0]
  400bae:	f380 8808 	msr	MSP, r0
  400bb2:	b662      	cpsie	i
  400bb4:	b661      	cpsie	f
  400bb6:	f3bf 8f4f 	dsb	sy
  400bba:	f3bf 8f6f 	isb	sy
  400bbe:	df00      	svc	0
  400bc0:	bf00      	nop
  400bc2:	0000      	.short	0x0000
  400bc4:	e000ed08 	.word	0xe000ed08

00400bc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400bc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400bd8 <vPortEnableVFP+0x10>
  400bcc:	6801      	ldr	r1, [r0, #0]
  400bce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400bd2:	6001      	str	r1, [r0, #0]
  400bd4:	4770      	bx	lr
  400bd6:	0000      	.short	0x0000
  400bd8:	e000ed88 	.word	0xe000ed88

00400bdc <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400be0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400be4:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400be8:	4b05      	ldr	r3, [pc, #20]	; (400c00 <pxPortInitialiseStack+0x24>)
  400bea:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400bee:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400bf2:	f06f 0302 	mvn.w	r3, #2
  400bf6:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  400bfa:	3844      	subs	r0, #68	; 0x44
  400bfc:	4770      	bx	lr
  400bfe:	bf00      	nop
  400c00:	00400b6d 	.word	0x00400b6d

00400c04 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  400c04:	4b06      	ldr	r3, [pc, #24]	; (400c20 <pxCurrentTCBConst2>)
  400c06:	6819      	ldr	r1, [r3, #0]
  400c08:	6808      	ldr	r0, [r1, #0]
  400c0a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c0e:	f380 8809 	msr	PSP, r0
  400c12:	f3bf 8f6f 	isb	sy
  400c16:	f04f 0000 	mov.w	r0, #0
  400c1a:	f380 8811 	msr	BASEPRI, r0
  400c1e:	4770      	bx	lr

00400c20 <pxCurrentTCBConst2>:
  400c20:	204009b4 	.word	0x204009b4
  400c24:	4770      	bx	lr
  400c26:	bf00      	nop

00400c28 <vPortEnterCritical>:
  400c28:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c2c:	b672      	cpsid	i
  400c2e:	f383 8811 	msr	BASEPRI, r3
  400c32:	f3bf 8f6f 	isb	sy
  400c36:	f3bf 8f4f 	dsb	sy
  400c3a:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  400c3c:	4a0b      	ldr	r2, [pc, #44]	; (400c6c <vPortEnterCritical+0x44>)
  400c3e:	6813      	ldr	r3, [r2, #0]
  400c40:	3301      	adds	r3, #1
  400c42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  400c44:	2b01      	cmp	r3, #1
  400c46:	d10f      	bne.n	400c68 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400c48:	4b09      	ldr	r3, [pc, #36]	; (400c70 <vPortEnterCritical+0x48>)
  400c4a:	681b      	ldr	r3, [r3, #0]
  400c4c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400c50:	d00a      	beq.n	400c68 <vPortEnterCritical+0x40>
  400c52:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c56:	b672      	cpsid	i
  400c58:	f383 8811 	msr	BASEPRI, r3
  400c5c:	f3bf 8f6f 	isb	sy
  400c60:	f3bf 8f4f 	dsb	sy
  400c64:	b662      	cpsie	i
  400c66:	e7fe      	b.n	400c66 <vPortEnterCritical+0x3e>
  400c68:	4770      	bx	lr
  400c6a:	bf00      	nop
  400c6c:	20400008 	.word	0x20400008
  400c70:	e000ed04 	.word	0xe000ed04

00400c74 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  400c74:	4b0a      	ldr	r3, [pc, #40]	; (400ca0 <vPortExitCritical+0x2c>)
  400c76:	681b      	ldr	r3, [r3, #0]
  400c78:	b953      	cbnz	r3, 400c90 <vPortExitCritical+0x1c>
  400c7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c7e:	b672      	cpsid	i
  400c80:	f383 8811 	msr	BASEPRI, r3
  400c84:	f3bf 8f6f 	isb	sy
  400c88:	f3bf 8f4f 	dsb	sy
  400c8c:	b662      	cpsie	i
  400c8e:	e7fe      	b.n	400c8e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400c90:	3b01      	subs	r3, #1
  400c92:	4a03      	ldr	r2, [pc, #12]	; (400ca0 <vPortExitCritical+0x2c>)
  400c94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400c96:	b90b      	cbnz	r3, 400c9c <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400c98:	f383 8811 	msr	BASEPRI, r3
  400c9c:	4770      	bx	lr
  400c9e:	bf00      	nop
  400ca0:	20400008 	.word	0x20400008

00400ca4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  400ca4:	f3ef 8009 	mrs	r0, PSP
  400ca8:	f3bf 8f6f 	isb	sy
  400cac:	4b15      	ldr	r3, [pc, #84]	; (400d04 <pxCurrentTCBConst>)
  400cae:	681a      	ldr	r2, [r3, #0]
  400cb0:	f01e 0f10 	tst.w	lr, #16
  400cb4:	bf08      	it	eq
  400cb6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400cba:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400cbe:	6010      	str	r0, [r2, #0]
  400cc0:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400cc4:	f04f 0080 	mov.w	r0, #128	; 0x80
  400cc8:	b672      	cpsid	i
  400cca:	f380 8811 	msr	BASEPRI, r0
  400cce:	f3bf 8f4f 	dsb	sy
  400cd2:	f3bf 8f6f 	isb	sy
  400cd6:	b662      	cpsie	i
  400cd8:	f001 f898 	bl	401e0c <vTaskSwitchContext>
  400cdc:	f04f 0000 	mov.w	r0, #0
  400ce0:	f380 8811 	msr	BASEPRI, r0
  400ce4:	bc08      	pop	{r3}
  400ce6:	6819      	ldr	r1, [r3, #0]
  400ce8:	6808      	ldr	r0, [r1, #0]
  400cea:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400cee:	f01e 0f10 	tst.w	lr, #16
  400cf2:	bf08      	it	eq
  400cf4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400cf8:	f380 8809 	msr	PSP, r0
  400cfc:	f3bf 8f6f 	isb	sy
  400d00:	4770      	bx	lr
  400d02:	bf00      	nop

00400d04 <pxCurrentTCBConst>:
  400d04:	204009b4 	.word	0x204009b4
  400d08:	4770      	bx	lr
  400d0a:	bf00      	nop

00400d0c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  400d0c:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400d0e:	f3ef 8311 	mrs	r3, BASEPRI
  400d12:	f04f 0280 	mov.w	r2, #128	; 0x80
  400d16:	b672      	cpsid	i
  400d18:	f382 8811 	msr	BASEPRI, r2
  400d1c:	f3bf 8f6f 	isb	sy
  400d20:	f3bf 8f4f 	dsb	sy
  400d24:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  400d26:	4b05      	ldr	r3, [pc, #20]	; (400d3c <SysTick_Handler+0x30>)
  400d28:	4798      	blx	r3
  400d2a:	b118      	cbz	r0, 400d34 <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d30:	4b03      	ldr	r3, [pc, #12]	; (400d40 <SysTick_Handler+0x34>)
  400d32:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400d34:	2300      	movs	r3, #0
  400d36:	f383 8811 	msr	BASEPRI, r3
  400d3a:	bd08      	pop	{r3, pc}
  400d3c:	00401a8d 	.word	0x00401a8d
  400d40:	e000ed04 	.word	0xe000ed04

00400d44 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400d44:	4a03      	ldr	r2, [pc, #12]	; (400d54 <vPortSetupTimerInterrupt+0x10>)
  400d46:	4b04      	ldr	r3, [pc, #16]	; (400d58 <vPortSetupTimerInterrupt+0x14>)
  400d48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400d4a:	2207      	movs	r2, #7
  400d4c:	3b04      	subs	r3, #4
  400d4e:	601a      	str	r2, [r3, #0]
  400d50:	4770      	bx	lr
  400d52:	bf00      	nop
  400d54:	000927bf 	.word	0x000927bf
  400d58:	e000e014 	.word	0xe000e014

00400d5c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  400d5c:	b500      	push	{lr}
  400d5e:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400d60:	4b25      	ldr	r3, [pc, #148]	; (400df8 <xPortStartScheduler+0x9c>)
  400d62:	781a      	ldrb	r2, [r3, #0]
  400d64:	b2d2      	uxtb	r2, r2
  400d66:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400d68:	22ff      	movs	r2, #255	; 0xff
  400d6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400d6c:	781b      	ldrb	r3, [r3, #0]
  400d6e:	b2db      	uxtb	r3, r3
  400d70:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400d74:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400d7c:	4a1f      	ldr	r2, [pc, #124]	; (400dfc <xPortStartScheduler+0xa0>)
  400d7e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400d80:	2207      	movs	r2, #7
  400d82:	4b1f      	ldr	r3, [pc, #124]	; (400e00 <xPortStartScheduler+0xa4>)
  400d84:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400d86:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400d8a:	f013 0f80 	tst.w	r3, #128	; 0x80
  400d8e:	d010      	beq.n	400db2 <xPortStartScheduler+0x56>
  400d90:	2206      	movs	r2, #6
  400d92:	e000      	b.n	400d96 <xPortStartScheduler+0x3a>
  400d94:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400d96:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400d9a:	005b      	lsls	r3, r3, #1
  400d9c:	b2db      	uxtb	r3, r3
  400d9e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400da2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400da6:	1e51      	subs	r1, r2, #1
  400da8:	f013 0f80 	tst.w	r3, #128	; 0x80
  400dac:	d1f2      	bne.n	400d94 <xPortStartScheduler+0x38>
  400dae:	4b14      	ldr	r3, [pc, #80]	; (400e00 <xPortStartScheduler+0xa4>)
  400db0:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400db2:	4a13      	ldr	r2, [pc, #76]	; (400e00 <xPortStartScheduler+0xa4>)
  400db4:	6813      	ldr	r3, [r2, #0]
  400db6:	021b      	lsls	r3, r3, #8
  400db8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400dbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400dbe:	9b01      	ldr	r3, [sp, #4]
  400dc0:	b2db      	uxtb	r3, r3
  400dc2:	4a0d      	ldr	r2, [pc, #52]	; (400df8 <xPortStartScheduler+0x9c>)
  400dc4:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400dc6:	4b0f      	ldr	r3, [pc, #60]	; (400e04 <xPortStartScheduler+0xa8>)
  400dc8:	681a      	ldr	r2, [r3, #0]
  400dca:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400dce:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400dd0:	681a      	ldr	r2, [r3, #0]
  400dd2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400dd6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  400dd8:	4b0b      	ldr	r3, [pc, #44]	; (400e08 <xPortStartScheduler+0xac>)
  400dda:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400ddc:	2200      	movs	r2, #0
  400dde:	4b0b      	ldr	r3, [pc, #44]	; (400e0c <xPortStartScheduler+0xb0>)
  400de0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400de2:	4b0b      	ldr	r3, [pc, #44]	; (400e10 <xPortStartScheduler+0xb4>)
  400de4:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400de6:	4a0b      	ldr	r2, [pc, #44]	; (400e14 <xPortStartScheduler+0xb8>)
  400de8:	6813      	ldr	r3, [r2, #0]
  400dea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400dee:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400df0:	4b09      	ldr	r3, [pc, #36]	; (400e18 <xPortStartScheduler+0xbc>)
  400df2:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  400df4:	4b09      	ldr	r3, [pc, #36]	; (400e1c <xPortStartScheduler+0xc0>)
  400df6:	4798      	blx	r3
  400df8:	e000e400 	.word	0xe000e400
  400dfc:	20400908 	.word	0x20400908
  400e00:	2040090c 	.word	0x2040090c
  400e04:	e000ed20 	.word	0xe000ed20
  400e08:	00400d45 	.word	0x00400d45
  400e0c:	20400008 	.word	0x20400008
  400e10:	00400bc9 	.word	0x00400bc9
  400e14:	e000ef34 	.word	0xe000ef34
  400e18:	00400ba9 	.word	0x00400ba9
  400e1c:	00400b6d 	.word	0x00400b6d

00400e20 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400e20:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400e24:	2b0f      	cmp	r3, #15
  400e26:	d911      	bls.n	400e4c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400e28:	4a12      	ldr	r2, [pc, #72]	; (400e74 <vPortValidateInterruptPriority+0x54>)
  400e2a:	5c9b      	ldrb	r3, [r3, r2]
  400e2c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400e2e:	4a12      	ldr	r2, [pc, #72]	; (400e78 <vPortValidateInterruptPriority+0x58>)
  400e30:	7812      	ldrb	r2, [r2, #0]
  400e32:	429a      	cmp	r2, r3
  400e34:	d90a      	bls.n	400e4c <vPortValidateInterruptPriority+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400e36:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e3a:	b672      	cpsid	i
  400e3c:	f383 8811 	msr	BASEPRI, r3
  400e40:	f3bf 8f6f 	isb	sy
  400e44:	f3bf 8f4f 	dsb	sy
  400e48:	b662      	cpsie	i
  400e4a:	e7fe      	b.n	400e4a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400e4c:	4b0b      	ldr	r3, [pc, #44]	; (400e7c <vPortValidateInterruptPriority+0x5c>)
  400e4e:	681b      	ldr	r3, [r3, #0]
  400e50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400e54:	4a0a      	ldr	r2, [pc, #40]	; (400e80 <vPortValidateInterruptPriority+0x60>)
  400e56:	6812      	ldr	r2, [r2, #0]
  400e58:	4293      	cmp	r3, r2
  400e5a:	d90a      	bls.n	400e72 <vPortValidateInterruptPriority+0x52>
  400e5c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e60:	b672      	cpsid	i
  400e62:	f383 8811 	msr	BASEPRI, r3
  400e66:	f3bf 8f6f 	isb	sy
  400e6a:	f3bf 8f4f 	dsb	sy
  400e6e:	b662      	cpsie	i
  400e70:	e7fe      	b.n	400e70 <vPortValidateInterruptPriority+0x50>
  400e72:	4770      	bx	lr
  400e74:	e000e3f0 	.word	0xe000e3f0
  400e78:	20400908 	.word	0x20400908
  400e7c:	e000ed0c 	.word	0xe000ed0c
  400e80:	2040090c 	.word	0x2040090c

00400e84 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400e84:	b510      	push	{r4, lr}
  400e86:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  400e88:	4b06      	ldr	r3, [pc, #24]	; (400ea4 <pvPortMalloc+0x20>)
  400e8a:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  400e8c:	4620      	mov	r0, r4
  400e8e:	4b06      	ldr	r3, [pc, #24]	; (400ea8 <pvPortMalloc+0x24>)
  400e90:	4798      	blx	r3
  400e92:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400e94:	4b05      	ldr	r3, [pc, #20]	; (400eac <pvPortMalloc+0x28>)
  400e96:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  400e98:	b90c      	cbnz	r4, 400e9e <pvPortMalloc+0x1a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
  400e9a:	4b05      	ldr	r3, [pc, #20]	; (400eb0 <pvPortMalloc+0x2c>)
  400e9c:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  400e9e:	4620      	mov	r0, r4
  400ea0:	bd10      	pop	{r4, pc}
  400ea2:	bf00      	nop
  400ea4:	00401a71 	.word	0x00401a71
  400ea8:	00402e0d 	.word	0x00402e0d
  400eac:	00401bd5 	.word	0x00401bd5
  400eb0:	00402b49 	.word	0x00402b49

00400eb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  400eb4:	b148      	cbz	r0, 400eca <vPortFree+0x16>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  400eb6:	b510      	push	{r4, lr}
  400eb8:	4604      	mov	r4, r0
	if( pv )
	{
		vTaskSuspendAll();
  400eba:	4b04      	ldr	r3, [pc, #16]	; (400ecc <vPortFree+0x18>)
  400ebc:	4798      	blx	r3
		{
			free( pv );
  400ebe:	4620      	mov	r0, r4
  400ec0:	4b03      	ldr	r3, [pc, #12]	; (400ed0 <vPortFree+0x1c>)
  400ec2:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  400ec4:	4b03      	ldr	r3, [pc, #12]	; (400ed4 <vPortFree+0x20>)
  400ec6:	4798      	blx	r3
  400ec8:	bd10      	pop	{r4, pc}
  400eca:	4770      	bx	lr
  400ecc:	00401a71 	.word	0x00401a71
  400ed0:	00402e1d 	.word	0x00402e1d
  400ed4:	00401bd5 	.word	0x00401bd5

00400ed8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400ed8:	b538      	push	{r3, r4, r5, lr}
  400eda:	4604      	mov	r4, r0
  400edc:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400ede:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400ee0:	b942      	cbnz	r2, 400ef4 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400ee2:	6803      	ldr	r3, [r0, #0]
  400ee4:	2b00      	cmp	r3, #0
  400ee6:	d12b      	bne.n	400f40 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400ee8:	6840      	ldr	r0, [r0, #4]
  400eea:	4b1b      	ldr	r3, [pc, #108]	; (400f58 <prvCopyDataToQueue+0x80>)
  400eec:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400eee:	2300      	movs	r3, #0
  400ef0:	6063      	str	r3, [r4, #4]
  400ef2:	e02c      	b.n	400f4e <prvCopyDataToQueue+0x76>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  400ef4:	b96d      	cbnz	r5, 400f12 <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400ef6:	6880      	ldr	r0, [r0, #8]
  400ef8:	4b18      	ldr	r3, [pc, #96]	; (400f5c <prvCopyDataToQueue+0x84>)
  400efa:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400efc:	68a2      	ldr	r2, [r4, #8]
  400efe:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400f00:	4413      	add	r3, r2
  400f02:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400f04:	6862      	ldr	r2, [r4, #4]
  400f06:	4293      	cmp	r3, r2
  400f08:	d31c      	bcc.n	400f44 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400f0a:	6823      	ldr	r3, [r4, #0]
  400f0c:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400f0e:	2000      	movs	r0, #0
  400f10:	e01d      	b.n	400f4e <prvCopyDataToQueue+0x76>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400f12:	68c0      	ldr	r0, [r0, #12]
  400f14:	4b11      	ldr	r3, [pc, #68]	; (400f5c <prvCopyDataToQueue+0x84>)
  400f16:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400f18:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400f1a:	425b      	negs	r3, r3
  400f1c:	68e2      	ldr	r2, [r4, #12]
  400f1e:	441a      	add	r2, r3
  400f20:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400f22:	6821      	ldr	r1, [r4, #0]
  400f24:	428a      	cmp	r2, r1
  400f26:	d202      	bcs.n	400f2e <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400f28:	6862      	ldr	r2, [r4, #4]
  400f2a:	4413      	add	r3, r2
  400f2c:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  400f2e:	2d02      	cmp	r5, #2
  400f30:	d10a      	bne.n	400f48 <prvCopyDataToQueue+0x70>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400f32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f34:	b153      	cbz	r3, 400f4c <prvCopyDataToQueue+0x74>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  400f36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f38:	3b01      	subs	r3, #1
  400f3a:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400f3c:	2000      	movs	r0, #0
  400f3e:	e006      	b.n	400f4e <prvCopyDataToQueue+0x76>
  400f40:	2000      	movs	r0, #0
  400f42:	e004      	b.n	400f4e <prvCopyDataToQueue+0x76>
  400f44:	2000      	movs	r0, #0
  400f46:	e002      	b.n	400f4e <prvCopyDataToQueue+0x76>
  400f48:	2000      	movs	r0, #0
  400f4a:	e000      	b.n	400f4e <prvCopyDataToQueue+0x76>
  400f4c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400f4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f50:	3301      	adds	r3, #1
  400f52:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400f54:	bd38      	pop	{r3, r4, r5, pc}
  400f56:	bf00      	nop
  400f58:	0040220d 	.word	0x0040220d
  400f5c:	0040339d 	.word	0x0040339d

00400f60 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400f60:	b530      	push	{r4, r5, lr}
  400f62:	b083      	sub	sp, #12
  400f64:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400f66:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400f68:	b954      	cbnz	r4, 400f80 <prvNotifyQueueSetContainer+0x20>
  400f6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f6e:	b672      	cpsid	i
  400f70:	f383 8811 	msr	BASEPRI, r3
  400f74:	f3bf 8f6f 	isb	sy
  400f78:	f3bf 8f4f 	dsb	sy
  400f7c:	b662      	cpsie	i
  400f7e:	e7fe      	b.n	400f7e <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400f80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f84:	429a      	cmp	r2, r3
  400f86:	d30a      	bcc.n	400f9e <prvNotifyQueueSetContainer+0x3e>
  400f88:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f8c:	b672      	cpsid	i
  400f8e:	f383 8811 	msr	BASEPRI, r3
  400f92:	f3bf 8f6f 	isb	sy
  400f96:	f3bf 8f4f 	dsb	sy
  400f9a:	b662      	cpsie	i
  400f9c:	e7fe      	b.n	400f9c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400f9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400fa0:	4293      	cmp	r3, r2
  400fa2:	d917      	bls.n	400fd4 <prvNotifyQueueSetContainer+0x74>
  400fa4:	460a      	mov	r2, r1
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400fa6:	a901      	add	r1, sp, #4
  400fa8:	4620      	mov	r0, r4
  400faa:	4b0c      	ldr	r3, [pc, #48]	; (400fdc <prvNotifyQueueSetContainer+0x7c>)
  400fac:	4798      	blx	r3
  400fae:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400fb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fb6:	d109      	bne.n	400fcc <prvNotifyQueueSetContainer+0x6c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400fba:	b163      	cbz	r3, 400fd6 <prvNotifyQueueSetContainer+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400fbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fc0:	4b07      	ldr	r3, [pc, #28]	; (400fe0 <prvNotifyQueueSetContainer+0x80>)
  400fc2:	4798      	blx	r3
  400fc4:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  400fc6:	bf18      	it	ne
  400fc8:	2501      	movne	r5, #1
  400fca:	e004      	b.n	400fd6 <prvNotifyQueueSetContainer+0x76>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  400fcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fce:	3301      	adds	r3, #1
  400fd0:	64a3      	str	r3, [r4, #72]	; 0x48
  400fd2:	e000      	b.n	400fd6 <prvNotifyQueueSetContainer+0x76>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  400fd4:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400fd6:	4628      	mov	r0, r5
  400fd8:	b003      	add	sp, #12
  400fda:	bd30      	pop	{r4, r5, pc}
  400fdc:	00400ed9 	.word	0x00400ed9
  400fe0:	00401fdd 	.word	0x00401fdd

00400fe4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400fe4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400fe6:	b172      	cbz	r2, 401006 <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  400fe8:	b510      	push	{r4, lr}
  400fea:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400fec:	68c4      	ldr	r4, [r0, #12]
  400fee:	4414      	add	r4, r2
  400ff0:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400ff2:	6840      	ldr	r0, [r0, #4]
  400ff4:	4284      	cmp	r4, r0
  400ff6:	d301      	bcc.n	400ffc <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400ff8:	6818      	ldr	r0, [r3, #0]
  400ffa:	60d8      	str	r0, [r3, #12]
  400ffc:	4608      	mov	r0, r1
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400ffe:	68d9      	ldr	r1, [r3, #12]
  401000:	4b01      	ldr	r3, [pc, #4]	; (401008 <prvCopyDataFromQueue+0x24>)
  401002:	4798      	blx	r3
  401004:	bd10      	pop	{r4, pc}
  401006:	4770      	bx	lr
  401008:	0040339d 	.word	0x0040339d

0040100c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  40100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40100e:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  401010:	4b20      	ldr	r3, [pc, #128]	; (401094 <prvUnlockQueue+0x88>)
  401012:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401014:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401016:	2b00      	cmp	r3, #0
  401018:	dd18      	ble.n	40104c <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40101a:	4d1f      	ldr	r5, [pc, #124]	; (401098 <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  40101c:	4f1f      	ldr	r7, [pc, #124]	; (40109c <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40101e:	4e20      	ldr	r6, [pc, #128]	; (4010a0 <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  401020:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401022:	b133      	cbz	r3, 401032 <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401024:	2100      	movs	r1, #0
  401026:	4620      	mov	r0, r4
  401028:	47a8      	blx	r5
  40102a:	2801      	cmp	r0, #1
  40102c:	d108      	bne.n	401040 <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  40102e:	47b8      	blx	r7
  401030:	e006      	b.n	401040 <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401032:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401034:	b153      	cbz	r3, 40104c <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401036:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40103a:	47b0      	blx	r6
  40103c:	b100      	cbz	r0, 401040 <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  40103e:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  401040:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401042:	3b01      	subs	r3, #1
  401044:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401046:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401048:	2b00      	cmp	r3, #0
  40104a:	dce9      	bgt.n	401020 <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  40104c:	f04f 33ff 	mov.w	r3, #4294967295
  401050:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  401052:	4b14      	ldr	r3, [pc, #80]	; (4010a4 <prvUnlockQueue+0x98>)
  401054:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  401056:	4b0f      	ldr	r3, [pc, #60]	; (401094 <prvUnlockQueue+0x88>)
  401058:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40105a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40105c:	2b00      	cmp	r3, #0
  40105e:	dd13      	ble.n	401088 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401060:	6923      	ldr	r3, [r4, #16]
  401062:	b91b      	cbnz	r3, 40106c <prvUnlockQueue+0x60>
  401064:	e010      	b.n	401088 <prvUnlockQueue+0x7c>
  401066:	6923      	ldr	r3, [r4, #16]
  401068:	b923      	cbnz	r3, 401074 <prvUnlockQueue+0x68>
  40106a:	e00d      	b.n	401088 <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40106c:	f104 0610 	add.w	r6, r4, #16
  401070:	4d0b      	ldr	r5, [pc, #44]	; (4010a0 <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  401072:	4f0a      	ldr	r7, [pc, #40]	; (40109c <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401074:	4630      	mov	r0, r6
  401076:	47a8      	blx	r5
  401078:	b100      	cbz	r0, 40107c <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  40107a:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  40107c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40107e:	3b01      	subs	r3, #1
  401080:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401082:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401084:	2b00      	cmp	r3, #0
  401086:	dcee      	bgt.n	401066 <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  401088:	f04f 33ff 	mov.w	r3, #4294967295
  40108c:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  40108e:	4b05      	ldr	r3, [pc, #20]	; (4010a4 <prvUnlockQueue+0x98>)
  401090:	4798      	blx	r3
  401092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401094:	00400c29 	.word	0x00400c29
  401098:	00400f61 	.word	0x00400f61
  40109c:	00402139 	.word	0x00402139
  4010a0:	00401fdd 	.word	0x00401fdd
  4010a4:	00400c75 	.word	0x00400c75

004010a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  4010a8:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4010aa:	b950      	cbnz	r0, 4010c2 <xQueueGenericReset+0x1a>
  4010ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010b0:	b672      	cpsid	i
  4010b2:	f383 8811 	msr	BASEPRI, r3
  4010b6:	f3bf 8f6f 	isb	sy
  4010ba:	f3bf 8f4f 	dsb	sy
  4010be:	b662      	cpsie	i
  4010c0:	e7fe      	b.n	4010c0 <xQueueGenericReset+0x18>
  4010c2:	4604      	mov	r4, r0
  4010c4:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  4010c6:	4b18      	ldr	r3, [pc, #96]	; (401128 <xQueueGenericReset+0x80>)
  4010c8:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4010ca:	6822      	ldr	r2, [r4, #0]
  4010cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4010ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4010d0:	fb03 f301 	mul.w	r3, r3, r1
  4010d4:	18d0      	adds	r0, r2, r3
  4010d6:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4010d8:	2000      	movs	r0, #0
  4010da:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4010dc:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4010de:	1a5b      	subs	r3, r3, r1
  4010e0:	4413      	add	r3, r2
  4010e2:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4010e4:	f04f 33ff 	mov.w	r3, #4294967295
  4010e8:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4010ea:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  4010ec:	b985      	cbnz	r5, 401110 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4010ee:	6923      	ldr	r3, [r4, #16]
  4010f0:	b1ab      	cbz	r3, 40111e <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4010f2:	f104 0010 	add.w	r0, r4, #16
  4010f6:	4b0d      	ldr	r3, [pc, #52]	; (40112c <xQueueGenericReset+0x84>)
  4010f8:	4798      	blx	r3
  4010fa:	2801      	cmp	r0, #1
  4010fc:	d10f      	bne.n	40111e <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
  4010fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401102:	4b0b      	ldr	r3, [pc, #44]	; (401130 <xQueueGenericReset+0x88>)
  401104:	601a      	str	r2, [r3, #0]
  401106:	f3bf 8f4f 	dsb	sy
  40110a:	f3bf 8f6f 	isb	sy
  40110e:	e006      	b.n	40111e <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401110:	f104 0010 	add.w	r0, r4, #16
  401114:	4d07      	ldr	r5, [pc, #28]	; (401134 <xQueueGenericReset+0x8c>)
  401116:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401118:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40111c:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  40111e:	4b06      	ldr	r3, [pc, #24]	; (401138 <xQueueGenericReset+0x90>)
  401120:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  401122:	2001      	movs	r0, #1
  401124:	bd38      	pop	{r3, r4, r5, pc}
  401126:	bf00      	nop
  401128:	00400c29 	.word	0x00400c29
  40112c:	00401fdd 	.word	0x00401fdd
  401130:	e000ed04 	.word	0xe000ed04
  401134:	00400add 	.word	0x00400add
  401138:	00400c75 	.word	0x00400c75

0040113c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  40113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40113e:	b950      	cbnz	r0, 401156 <xQueueGenericCreate+0x1a>
  401140:	f04f 0380 	mov.w	r3, #128	; 0x80
  401144:	b672      	cpsid	i
  401146:	f383 8811 	msr	BASEPRI, r3
  40114a:	f3bf 8f6f 	isb	sy
  40114e:	f3bf 8f4f 	dsb	sy
  401152:	b662      	cpsie	i
  401154:	e7fe      	b.n	401154 <xQueueGenericCreate+0x18>
  401156:	4606      	mov	r6, r0
  401158:	4617      	mov	r7, r2
  40115a:	460d      	mov	r5, r1

	if( uxItemSize == ( UBaseType_t ) 0 )
  40115c:	b1c1      	cbz	r1, 401190 <xQueueGenericCreate+0x54>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40115e:	fb01 f000 	mul.w	r0, r1, r0
  401162:	3059      	adds	r0, #89	; 0x59
  401164:	4b14      	ldr	r3, [pc, #80]	; (4011b8 <xQueueGenericCreate+0x7c>)
  401166:	4798      	blx	r3

	if( pxNewQueue != NULL )
  401168:	4604      	mov	r4, r0
  40116a:	b910      	cbnz	r0, 401172 <xQueueGenericCreate+0x36>
  40116c:	e005      	b.n	40117a <xQueueGenericCreate+0x3e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40116e:	6024      	str	r4, [r4, #0]
  401170:	e015      	b.n	40119e <xQueueGenericCreate+0x62>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401172:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401176:	6003      	str	r3, [r0, #0]
  401178:	e011      	b.n	40119e <xQueueGenericCreate+0x62>
  40117a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40117e:	b672      	cpsid	i
  401180:	f383 8811 	msr	BASEPRI, r3
  401184:	f3bf 8f6f 	isb	sy
  401188:	f3bf 8f4f 	dsb	sy
  40118c:	b662      	cpsie	i
  40118e:	e7fe      	b.n	40118e <xQueueGenericCreate+0x52>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401190:	2058      	movs	r0, #88	; 0x58
  401192:	4b09      	ldr	r3, [pc, #36]	; (4011b8 <xQueueGenericCreate+0x7c>)
  401194:	4798      	blx	r3

	if( pxNewQueue != NULL )
  401196:	4604      	mov	r4, r0
  401198:	2800      	cmp	r0, #0
  40119a:	d1e8      	bne.n	40116e <xQueueGenericCreate+0x32>
  40119c:	e7ed      	b.n	40117a <xQueueGenericCreate+0x3e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  40119e:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4011a0:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4011a2:	2101      	movs	r1, #1
  4011a4:	4620      	mov	r0, r4
  4011a6:	4b05      	ldr	r3, [pc, #20]	; (4011bc <xQueueGenericCreate+0x80>)
  4011a8:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  4011aa:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  4011ae:	2300      	movs	r3, #0
  4011b0:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  4011b2:	4620      	mov	r0, r4
  4011b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011b6:	bf00      	nop
  4011b8:	00400e85 	.word	0x00400e85
  4011bc:	004010a9 	.word	0x004010a9

004011c0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  4011c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011c4:	b085      	sub	sp, #20
  4011c6:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4011c8:	b950      	cbnz	r0, 4011e0 <xQueueGenericSend+0x20>
  4011ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011ce:	b672      	cpsid	i
  4011d0:	f383 8811 	msr	BASEPRI, r3
  4011d4:	f3bf 8f6f 	isb	sy
  4011d8:	f3bf 8f4f 	dsb	sy
  4011dc:	b662      	cpsie	i
  4011de:	e7fe      	b.n	4011de <xQueueGenericSend+0x1e>
  4011e0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4011e2:	b961      	cbnz	r1, 4011fe <xQueueGenericSend+0x3e>
  4011e4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4011e6:	b152      	cbz	r2, 4011fe <xQueueGenericSend+0x3e>
  4011e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011ec:	b672      	cpsid	i
  4011ee:	f383 8811 	msr	BASEPRI, r3
  4011f2:	f3bf 8f6f 	isb	sy
  4011f6:	f3bf 8f4f 	dsb	sy
  4011fa:	b662      	cpsie	i
  4011fc:	e7fe      	b.n	4011fc <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4011fe:	2b02      	cmp	r3, #2
  401200:	d10d      	bne.n	40121e <xQueueGenericSend+0x5e>
  401202:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401204:	2a01      	cmp	r2, #1
  401206:	d00a      	beq.n	40121e <xQueueGenericSend+0x5e>
  401208:	f04f 0380 	mov.w	r3, #128	; 0x80
  40120c:	b672      	cpsid	i
  40120e:	f383 8811 	msr	BASEPRI, r3
  401212:	f3bf 8f6f 	isb	sy
  401216:	f3bf 8f4f 	dsb	sy
  40121a:	b662      	cpsie	i
  40121c:	e7fe      	b.n	40121c <xQueueGenericSend+0x5c>
  40121e:	461d      	mov	r5, r3
  401220:	9100      	str	r1, [sp, #0]
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401222:	4b51      	ldr	r3, [pc, #324]	; (401368 <xQueueGenericSend+0x1a8>)
  401224:	4798      	blx	r3
  401226:	b960      	cbnz	r0, 401242 <xQueueGenericSend+0x82>
  401228:	9b01      	ldr	r3, [sp, #4]
  40122a:	b163      	cbz	r3, 401246 <xQueueGenericSend+0x86>
  40122c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401230:	b672      	cpsid	i
  401232:	f383 8811 	msr	BASEPRI, r3
  401236:	f3bf 8f6f 	isb	sy
  40123a:	f3bf 8f4f 	dsb	sy
  40123e:	b662      	cpsie	i
  401240:	e7fe      	b.n	401240 <xQueueGenericSend+0x80>
  401242:	2700      	movs	r7, #0
  401244:	e000      	b.n	401248 <xQueueGenericSend+0x88>
  401246:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401248:	4e48      	ldr	r6, [pc, #288]	; (40136c <xQueueGenericSend+0x1ac>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40124a:	f8df 914c 	ldr.w	r9, [pc, #332]	; 401398 <xQueueGenericSend+0x1d8>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  40124e:	f8df 8128 	ldr.w	r8, [pc, #296]	; 401378 <xQueueGenericSend+0x1b8>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401252:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401254:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401256:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401258:	429a      	cmp	r2, r3
  40125a:	d301      	bcc.n	401260 <xQueueGenericSend+0xa0>
  40125c:	2d02      	cmp	r5, #2
  40125e:	d133      	bne.n	4012c8 <xQueueGenericSend+0x108>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401260:	462a      	mov	r2, r5
  401262:	9900      	ldr	r1, [sp, #0]
  401264:	4620      	mov	r0, r4
  401266:	4b42      	ldr	r3, [pc, #264]	; (401370 <xQueueGenericSend+0x1b0>)
  401268:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  40126a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40126c:	b173      	cbz	r3, 40128c <xQueueGenericSend+0xcc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  40126e:	4629      	mov	r1, r5
  401270:	4620      	mov	r0, r4
  401272:	4b40      	ldr	r3, [pc, #256]	; (401374 <xQueueGenericSend+0x1b4>)
  401274:	4798      	blx	r3
  401276:	2801      	cmp	r0, #1
  401278:	d122      	bne.n	4012c0 <xQueueGenericSend+0x100>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  40127a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40127e:	4b3e      	ldr	r3, [pc, #248]	; (401378 <xQueueGenericSend+0x1b8>)
  401280:	601a      	str	r2, [r3, #0]
  401282:	f3bf 8f4f 	dsb	sy
  401286:	f3bf 8f6f 	isb	sy
  40128a:	e019      	b.n	4012c0 <xQueueGenericSend+0x100>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40128c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40128e:	b173      	cbz	r3, 4012ae <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401290:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401294:	4b39      	ldr	r3, [pc, #228]	; (40137c <xQueueGenericSend+0x1bc>)
  401296:	4798      	blx	r3
  401298:	2801      	cmp	r0, #1
  40129a:	d111      	bne.n	4012c0 <xQueueGenericSend+0x100>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  40129c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012a0:	4b35      	ldr	r3, [pc, #212]	; (401378 <xQueueGenericSend+0x1b8>)
  4012a2:	601a      	str	r2, [r3, #0]
  4012a4:	f3bf 8f4f 	dsb	sy
  4012a8:	f3bf 8f6f 	isb	sy
  4012ac:	e008      	b.n	4012c0 <xQueueGenericSend+0x100>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  4012ae:	b138      	cbz	r0, 4012c0 <xQueueGenericSend+0x100>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  4012b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012b4:	4b30      	ldr	r3, [pc, #192]	; (401378 <xQueueGenericSend+0x1b8>)
  4012b6:	601a      	str	r2, [r3, #0]
  4012b8:	f3bf 8f4f 	dsb	sy
  4012bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  4012c0:	4b2f      	ldr	r3, [pc, #188]	; (401380 <xQueueGenericSend+0x1c0>)
  4012c2:	4798      	blx	r3
				return pdPASS;
  4012c4:	2001      	movs	r0, #1
  4012c6:	e04b      	b.n	401360 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  4012c8:	9b01      	ldr	r3, [sp, #4]
  4012ca:	b91b      	cbnz	r3, 4012d4 <xQueueGenericSend+0x114>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4012cc:	4b2c      	ldr	r3, [pc, #176]	; (401380 <xQueueGenericSend+0x1c0>)
  4012ce:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4012d0:	2000      	movs	r0, #0
  4012d2:	e045      	b.n	401360 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
  4012d4:	b917      	cbnz	r7, 4012dc <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4012d6:	a802      	add	r0, sp, #8
  4012d8:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  4012da:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  4012dc:	4b28      	ldr	r3, [pc, #160]	; (401380 <xQueueGenericSend+0x1c0>)
  4012de:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4012e0:	4b28      	ldr	r3, [pc, #160]	; (401384 <xQueueGenericSend+0x1c4>)
  4012e2:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4012e4:	47b0      	blx	r6
  4012e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012ec:	d101      	bne.n	4012f2 <xQueueGenericSend+0x132>
  4012ee:	2300      	movs	r3, #0
  4012f0:	6463      	str	r3, [r4, #68]	; 0x44
  4012f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012f8:	d101      	bne.n	4012fe <xQueueGenericSend+0x13e>
  4012fa:	2300      	movs	r3, #0
  4012fc:	64a3      	str	r3, [r4, #72]	; 0x48
  4012fe:	4b20      	ldr	r3, [pc, #128]	; (401380 <xQueueGenericSend+0x1c0>)
  401300:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401302:	a901      	add	r1, sp, #4
  401304:	a802      	add	r0, sp, #8
  401306:	4b20      	ldr	r3, [pc, #128]	; (401388 <xQueueGenericSend+0x1c8>)
  401308:	4798      	blx	r3
  40130a:	bb18      	cbnz	r0, 401354 <xQueueGenericSend+0x194>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  40130c:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  40130e:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401312:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  401316:	4b1a      	ldr	r3, [pc, #104]	; (401380 <xQueueGenericSend+0x1c0>)
  401318:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40131a:	45d3      	cmp	fp, sl
  40131c:	d114      	bne.n	401348 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40131e:	9901      	ldr	r1, [sp, #4]
  401320:	f104 0010 	add.w	r0, r4, #16
  401324:	4b19      	ldr	r3, [pc, #100]	; (40138c <xQueueGenericSend+0x1cc>)
  401326:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  401328:	4620      	mov	r0, r4
  40132a:	4b19      	ldr	r3, [pc, #100]	; (401390 <xQueueGenericSend+0x1d0>)
  40132c:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  40132e:	4b19      	ldr	r3, [pc, #100]	; (401394 <xQueueGenericSend+0x1d4>)
  401330:	4798      	blx	r3
  401332:	2800      	cmp	r0, #0
  401334:	d18d      	bne.n	401252 <xQueueGenericSend+0x92>
				{
					portYIELD_WITHIN_API();
  401336:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40133a:	f8c8 3000 	str.w	r3, [r8]
  40133e:	f3bf 8f4f 	dsb	sy
  401342:	f3bf 8f6f 	isb	sy
  401346:	e784      	b.n	401252 <xQueueGenericSend+0x92>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401348:	4620      	mov	r0, r4
  40134a:	4b11      	ldr	r3, [pc, #68]	; (401390 <xQueueGenericSend+0x1d0>)
  40134c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40134e:	4b11      	ldr	r3, [pc, #68]	; (401394 <xQueueGenericSend+0x1d4>)
  401350:	4798      	blx	r3
  401352:	e77e      	b.n	401252 <xQueueGenericSend+0x92>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  401354:	4620      	mov	r0, r4
  401356:	4b0e      	ldr	r3, [pc, #56]	; (401390 <xQueueGenericSend+0x1d0>)
  401358:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40135a:	4b0e      	ldr	r3, [pc, #56]	; (401394 <xQueueGenericSend+0x1d4>)
  40135c:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  40135e:	2000      	movs	r0, #0
		}
	}
}
  401360:	b005      	add	sp, #20
  401362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401366:	bf00      	nop
  401368:	00402145 	.word	0x00402145
  40136c:	00400c29 	.word	0x00400c29
  401370:	00400ed9 	.word	0x00400ed9
  401374:	00400f61 	.word	0x00400f61
  401378:	e000ed04 	.word	0xe000ed04
  40137c:	00401fdd 	.word	0x00401fdd
  401380:	00400c75 	.word	0x00400c75
  401384:	00401a71 	.word	0x00401a71
  401388:	004020a5 	.word	0x004020a5
  40138c:	00401ed9 	.word	0x00401ed9
  401390:	0040100d 	.word	0x0040100d
  401394:	00401bd5 	.word	0x00401bd5
  401398:	00402075 	.word	0x00402075

0040139c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
  40139c:	b570      	push	{r4, r5, r6, lr}
  40139e:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
  4013a0:	2058      	movs	r0, #88	; 0x58
  4013a2:	4b11      	ldr	r3, [pc, #68]	; (4013e8 <xQueueCreateMutex+0x4c>)
  4013a4:	4798      	blx	r3
		if( pxNewQueue != NULL )
  4013a6:	4604      	mov	r4, r0
  4013a8:	b1d8      	cbz	r0, 4013e2 <xQueueCreateMutex+0x46>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
  4013aa:	2500      	movs	r5, #0
  4013ac:	6045      	str	r5, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
  4013ae:	6005      	str	r5, [r0, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
  4013b0:	6085      	str	r5, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
  4013b2:	60c5      	str	r5, [r0, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4013b4:	6385      	str	r5, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
  4013b6:	2301      	movs	r3, #1
  4013b8:	63c3      	str	r3, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
  4013ba:	6405      	str	r5, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
  4013bc:	f04f 33ff 	mov.w	r3, #4294967295
  4013c0:	6443      	str	r3, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
  4013c2:	6483      	str	r3, [r0, #72]	; 0x48

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
  4013c4:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
			}
			#endif

			#if ( configUSE_QUEUE_SETS == 1 )
			{
				pxNewQueue->pxQueueSetContainer = NULL;
  4013c8:	6545      	str	r5, [r0, #84]	; 0x54
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
  4013ca:	3010      	adds	r0, #16
  4013cc:	4e07      	ldr	r6, [pc, #28]	; (4013ec <xQueueCreateMutex+0x50>)
  4013ce:	47b0      	blx	r6
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
  4013d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4013d4:	47b0      	blx	r6

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
  4013d6:	462b      	mov	r3, r5
  4013d8:	462a      	mov	r2, r5
  4013da:	4629      	mov	r1, r5
  4013dc:	4620      	mov	r0, r4
  4013de:	4d04      	ldr	r5, [pc, #16]	; (4013f0 <xQueueCreateMutex+0x54>)
  4013e0:	47a8      	blx	r5
		{
			traceCREATE_MUTEX_FAILED();
		}

		return pxNewQueue;
	}
  4013e2:	4620      	mov	r0, r4
  4013e4:	bd70      	pop	{r4, r5, r6, pc}
  4013e6:	bf00      	nop
  4013e8:	00400e85 	.word	0x00400e85
  4013ec:	00400add 	.word	0x00400add
  4013f0:	004011c1 	.word	0x004011c1

004013f4 <xQueueGenericSendFromISR>:
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4013f4:	b950      	cbnz	r0, 40140c <xQueueGenericSendFromISR+0x18>
  4013f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013fa:	b672      	cpsid	i
  4013fc:	f383 8811 	msr	BASEPRI, r3
  401400:	f3bf 8f6f 	isb	sy
  401404:	f3bf 8f4f 	dsb	sy
  401408:	b662      	cpsie	i
  40140a:	e7fe      	b.n	40140a <xQueueGenericSendFromISR+0x16>

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  40140c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401410:	4604      	mov	r4, r0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401412:	b961      	cbnz	r1, 40142e <xQueueGenericSendFromISR+0x3a>
  401414:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401416:	b150      	cbz	r0, 40142e <xQueueGenericSendFromISR+0x3a>
  401418:	f04f 0380 	mov.w	r3, #128	; 0x80
  40141c:	b672      	cpsid	i
  40141e:	f383 8811 	msr	BASEPRI, r3
  401422:	f3bf 8f6f 	isb	sy
  401426:	f3bf 8f4f 	dsb	sy
  40142a:	b662      	cpsie	i
  40142c:	e7fe      	b.n	40142c <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40142e:	2b02      	cmp	r3, #2
  401430:	d10d      	bne.n	40144e <xQueueGenericSendFromISR+0x5a>
  401432:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401434:	2801      	cmp	r0, #1
  401436:	d00a      	beq.n	40144e <xQueueGenericSendFromISR+0x5a>
  401438:	f04f 0380 	mov.w	r3, #128	; 0x80
  40143c:	b672      	cpsid	i
  40143e:	f383 8811 	msr	BASEPRI, r3
  401442:	f3bf 8f6f 	isb	sy
  401446:	f3bf 8f4f 	dsb	sy
  40144a:	b662      	cpsie	i
  40144c:	e7fe      	b.n	40144c <xQueueGenericSendFromISR+0x58>
  40144e:	461e      	mov	r6, r3
  401450:	4615      	mov	r5, r2
  401452:	4688      	mov	r8, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401454:	4b21      	ldr	r3, [pc, #132]	; (4014dc <xQueueGenericSendFromISR+0xe8>)
  401456:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  401458:	f3ef 8711 	mrs	r7, BASEPRI
  40145c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401460:	b672      	cpsid	i
  401462:	f383 8811 	msr	BASEPRI, r3
  401466:	f3bf 8f6f 	isb	sy
  40146a:	f3bf 8f4f 	dsb	sy
  40146e:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401470:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401472:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401474:	429a      	cmp	r2, r3
  401476:	d301      	bcc.n	40147c <xQueueGenericSendFromISR+0x88>
  401478:	2e02      	cmp	r6, #2
  40147a:	d123      	bne.n	4014c4 <xQueueGenericSendFromISR+0xd0>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40147c:	4632      	mov	r2, r6
  40147e:	4641      	mov	r1, r8
  401480:	4620      	mov	r0, r4
  401482:	4b17      	ldr	r3, [pc, #92]	; (4014e0 <xQueueGenericSendFromISR+0xec>)
  401484:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  401486:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401488:	f1b3 3fff 	cmp.w	r3, #4294967295
  40148c:	d115      	bne.n	4014ba <xQueueGenericSendFromISR+0xc6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  40148e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401490:	b143      	cbz	r3, 4014a4 <xQueueGenericSendFromISR+0xb0>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401492:	4631      	mov	r1, r6
  401494:	4620      	mov	r0, r4
  401496:	4b13      	ldr	r3, [pc, #76]	; (4014e4 <xQueueGenericSendFromISR+0xf0>)
  401498:	4798      	blx	r3
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  40149a:	b1ad      	cbz	r5, 4014c8 <xQueueGenericSendFromISR+0xd4>
  40149c:	2801      	cmp	r0, #1
  40149e:	d113      	bne.n	4014c8 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  4014a0:	6028      	str	r0, [r5, #0]
  4014a2:	e016      	b.n	4014d2 <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4014a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014a6:	b18b      	cbz	r3, 4014cc <xQueueGenericSendFromISR+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4014a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014ac:	4b0e      	ldr	r3, [pc, #56]	; (4014e8 <xQueueGenericSendFromISR+0xf4>)
  4014ae:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  4014b0:	b175      	cbz	r5, 4014d0 <xQueueGenericSendFromISR+0xdc>
  4014b2:	b168      	cbz	r0, 4014d0 <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  4014b4:	2001      	movs	r0, #1
  4014b6:	6028      	str	r0, [r5, #0]
  4014b8:	e00b      	b.n	4014d2 <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  4014ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014bc:	3301      	adds	r3, #1
  4014be:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  4014c0:	2001      	movs	r0, #1
  4014c2:	e006      	b.n	4014d2 <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  4014c4:	2000      	movs	r0, #0
  4014c6:	e004      	b.n	4014d2 <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  4014c8:	2001      	movs	r0, #1
  4014ca:	e002      	b.n	4014d2 <xQueueGenericSendFromISR+0xde>
  4014cc:	2001      	movs	r0, #1
  4014ce:	e000      	b.n	4014d2 <xQueueGenericSendFromISR+0xde>
  4014d0:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4014d2:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  4014d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014da:	bf00      	nop
  4014dc:	00400e21 	.word	0x00400e21
  4014e0:	00400ed9 	.word	0x00400ed9
  4014e4:	00400f61 	.word	0x00400f61
  4014e8:	00401fdd 	.word	0x00401fdd

004014ec <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  4014ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014f0:	b085      	sub	sp, #20
  4014f2:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4014f4:	b950      	cbnz	r0, 40150c <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4014f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014fa:	b672      	cpsid	i
  4014fc:	f383 8811 	msr	BASEPRI, r3
  401500:	f3bf 8f6f 	isb	sy
  401504:	f3bf 8f4f 	dsb	sy
  401508:	b662      	cpsie	i
  40150a:	e7fe      	b.n	40150a <xQueueGenericReceive+0x1e>
  40150c:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40150e:	b961      	cbnz	r1, 40152a <xQueueGenericReceive+0x3e>
  401510:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401512:	b152      	cbz	r2, 40152a <xQueueGenericReceive+0x3e>
  401514:	f04f 0380 	mov.w	r3, #128	; 0x80
  401518:	b672      	cpsid	i
  40151a:	f383 8811 	msr	BASEPRI, r3
  40151e:	f3bf 8f6f 	isb	sy
  401522:	f3bf 8f4f 	dsb	sy
  401526:	b662      	cpsie	i
  401528:	e7fe      	b.n	401528 <xQueueGenericReceive+0x3c>
  40152a:	4698      	mov	r8, r3
  40152c:	468b      	mov	fp, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40152e:	4b52      	ldr	r3, [pc, #328]	; (401678 <xQueueGenericReceive+0x18c>)
  401530:	4798      	blx	r3
  401532:	b960      	cbnz	r0, 40154e <xQueueGenericReceive+0x62>
  401534:	9b01      	ldr	r3, [sp, #4]
  401536:	b163      	cbz	r3, 401552 <xQueueGenericReceive+0x66>
  401538:	f04f 0380 	mov.w	r3, #128	; 0x80
  40153c:	b672      	cpsid	i
  40153e:	f383 8811 	msr	BASEPRI, r3
  401542:	f3bf 8f6f 	isb	sy
  401546:	f3bf 8f4f 	dsb	sy
  40154a:	b662      	cpsie	i
  40154c:	e7fe      	b.n	40154c <xQueueGenericReceive+0x60>
  40154e:	2600      	movs	r6, #0
  401550:	e000      	b.n	401554 <xQueueGenericReceive+0x68>
  401552:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401554:	4d49      	ldr	r5, [pc, #292]	; (40167c <xQueueGenericReceive+0x190>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401556:	f8df a154 	ldr.w	sl, [pc, #340]	; 4016ac <xQueueGenericReceive+0x1c0>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  40155a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 40168c <xQueueGenericReceive+0x1a0>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  40155e:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401560:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401562:	2b00      	cmp	r3, #0
  401564:	d034      	beq.n	4015d0 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401566:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401568:	4659      	mov	r1, fp
  40156a:	4620      	mov	r0, r4
  40156c:	4b44      	ldr	r3, [pc, #272]	; (401680 <xQueueGenericReceive+0x194>)
  40156e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  401570:	f1b8 0f00 	cmp.w	r8, #0
  401574:	d118      	bne.n	4015a8 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  401576:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401578:	3b01      	subs	r3, #1
  40157a:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40157c:	6823      	ldr	r3, [r4, #0]
  40157e:	b913      	cbnz	r3, 401586 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401580:	4b40      	ldr	r3, [pc, #256]	; (401684 <xQueueGenericReceive+0x198>)
  401582:	4798      	blx	r3
  401584:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401586:	6923      	ldr	r3, [r4, #16]
  401588:	b1f3      	cbz	r3, 4015c8 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40158a:	f104 0010 	add.w	r0, r4, #16
  40158e:	4b3e      	ldr	r3, [pc, #248]	; (401688 <xQueueGenericReceive+0x19c>)
  401590:	4798      	blx	r3
  401592:	2801      	cmp	r0, #1
  401594:	d118      	bne.n	4015c8 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
  401596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40159a:	4b3c      	ldr	r3, [pc, #240]	; (40168c <xQueueGenericReceive+0x1a0>)
  40159c:	601a      	str	r2, [r3, #0]
  40159e:	f3bf 8f4f 	dsb	sy
  4015a2:	f3bf 8f6f 	isb	sy
  4015a6:	e00f      	b.n	4015c8 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4015a8:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4015aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4015ac:	b163      	cbz	r3, 4015c8 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4015ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015b2:	4b35      	ldr	r3, [pc, #212]	; (401688 <xQueueGenericReceive+0x19c>)
  4015b4:	4798      	blx	r3
  4015b6:	b138      	cbz	r0, 4015c8 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  4015b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015bc:	4b33      	ldr	r3, [pc, #204]	; (40168c <xQueueGenericReceive+0x1a0>)
  4015be:	601a      	str	r2, [r3, #0]
  4015c0:	f3bf 8f4f 	dsb	sy
  4015c4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  4015c8:	4b31      	ldr	r3, [pc, #196]	; (401690 <xQueueGenericReceive+0x1a4>)
  4015ca:	4798      	blx	r3
				return pdPASS;
  4015cc:	2001      	movs	r0, #1
  4015ce:	e04f      	b.n	401670 <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  4015d0:	9b01      	ldr	r3, [sp, #4]
  4015d2:	b91b      	cbnz	r3, 4015dc <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4015d4:	4b2e      	ldr	r3, [pc, #184]	; (401690 <xQueueGenericReceive+0x1a4>)
  4015d6:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  4015d8:	2000      	movs	r0, #0
  4015da:	e049      	b.n	401670 <xQueueGenericReceive+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
  4015dc:	b916      	cbnz	r6, 4015e4 <xQueueGenericReceive+0xf8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4015de:	a802      	add	r0, sp, #8
  4015e0:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  4015e2:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  4015e4:	4b2a      	ldr	r3, [pc, #168]	; (401690 <xQueueGenericReceive+0x1a4>)
  4015e6:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4015e8:	4b2a      	ldr	r3, [pc, #168]	; (401694 <xQueueGenericReceive+0x1a8>)
  4015ea:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4015ec:	47a8      	blx	r5
  4015ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015f4:	d101      	bne.n	4015fa <xQueueGenericReceive+0x10e>
  4015f6:	2300      	movs	r3, #0
  4015f8:	6463      	str	r3, [r4, #68]	; 0x44
  4015fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
  401600:	d101      	bne.n	401606 <xQueueGenericReceive+0x11a>
  401602:	2300      	movs	r3, #0
  401604:	64a3      	str	r3, [r4, #72]	; 0x48
  401606:	4b22      	ldr	r3, [pc, #136]	; (401690 <xQueueGenericReceive+0x1a4>)
  401608:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40160a:	a901      	add	r1, sp, #4
  40160c:	a802      	add	r0, sp, #8
  40160e:	4b22      	ldr	r3, [pc, #136]	; (401698 <xQueueGenericReceive+0x1ac>)
  401610:	4798      	blx	r3
  401612:	bb38      	cbnz	r0, 401664 <xQueueGenericReceive+0x178>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401614:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401616:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  401618:	4b1d      	ldr	r3, [pc, #116]	; (401690 <xQueueGenericReceive+0x1a4>)
  40161a:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40161c:	b9e7      	cbnz	r7, 401658 <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40161e:	6823      	ldr	r3, [r4, #0]
  401620:	b92b      	cbnz	r3, 40162e <xQueueGenericReceive+0x142>
					{
						taskENTER_CRITICAL();
  401622:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401624:	6860      	ldr	r0, [r4, #4]
  401626:	4b1d      	ldr	r3, [pc, #116]	; (40169c <xQueueGenericReceive+0x1b0>)
  401628:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  40162a:	4b19      	ldr	r3, [pc, #100]	; (401690 <xQueueGenericReceive+0x1a4>)
  40162c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40162e:	9901      	ldr	r1, [sp, #4]
  401630:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401634:	4b1a      	ldr	r3, [pc, #104]	; (4016a0 <xQueueGenericReceive+0x1b4>)
  401636:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401638:	4620      	mov	r0, r4
  40163a:	4b1a      	ldr	r3, [pc, #104]	; (4016a4 <xQueueGenericReceive+0x1b8>)
  40163c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40163e:	4b1a      	ldr	r3, [pc, #104]	; (4016a8 <xQueueGenericReceive+0x1bc>)
  401640:	4798      	blx	r3
  401642:	2800      	cmp	r0, #0
  401644:	d18b      	bne.n	40155e <xQueueGenericReceive+0x72>
				{
					portYIELD_WITHIN_API();
  401646:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40164a:	f8c9 3000 	str.w	r3, [r9]
  40164e:	f3bf 8f4f 	dsb	sy
  401652:	f3bf 8f6f 	isb	sy
  401656:	e782      	b.n	40155e <xQueueGenericReceive+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401658:	4620      	mov	r0, r4
  40165a:	4b12      	ldr	r3, [pc, #72]	; (4016a4 <xQueueGenericReceive+0x1b8>)
  40165c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40165e:	4b12      	ldr	r3, [pc, #72]	; (4016a8 <xQueueGenericReceive+0x1bc>)
  401660:	4798      	blx	r3
  401662:	e77c      	b.n	40155e <xQueueGenericReceive+0x72>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  401664:	4620      	mov	r0, r4
  401666:	4b0f      	ldr	r3, [pc, #60]	; (4016a4 <xQueueGenericReceive+0x1b8>)
  401668:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40166a:	4b0f      	ldr	r3, [pc, #60]	; (4016a8 <xQueueGenericReceive+0x1bc>)
  40166c:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  40166e:	2000      	movs	r0, #0
		}
	}
}
  401670:	b005      	add	sp, #20
  401672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401676:	bf00      	nop
  401678:	00402145 	.word	0x00402145
  40167c:	00400c29 	.word	0x00400c29
  401680:	00400fe5 	.word	0x00400fe5
  401684:	004022cd 	.word	0x004022cd
  401688:	00401fdd 	.word	0x00401fdd
  40168c:	e000ed04 	.word	0xe000ed04
  401690:	00400c75 	.word	0x00400c75
  401694:	00401a71 	.word	0x00401a71
  401698:	004020a5 	.word	0x004020a5
  40169c:	00402165 	.word	0x00402165
  4016a0:	00401ed9 	.word	0x00401ed9
  4016a4:	0040100d 	.word	0x0040100d
  4016a8:	00401bd5 	.word	0x00401bd5
  4016ac:	00402075 	.word	0x00402075

004016b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  4016b0:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4016b2:	4b0b      	ldr	r3, [pc, #44]	; (4016e0 <vQueueAddToRegistry+0x30>)
  4016b4:	681b      	ldr	r3, [r3, #0]
  4016b6:	b12b      	cbz	r3, 4016c4 <vQueueAddToRegistry+0x14>
  4016b8:	2301      	movs	r3, #1
  4016ba:	4c09      	ldr	r4, [pc, #36]	; (4016e0 <vQueueAddToRegistry+0x30>)
  4016bc:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4016c0:	b942      	cbnz	r2, 4016d4 <vQueueAddToRegistry+0x24>
  4016c2:	e000      	b.n	4016c6 <vQueueAddToRegistry+0x16>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4016c4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4016c6:	4a06      	ldr	r2, [pc, #24]	; (4016e0 <vQueueAddToRegistry+0x30>)
  4016c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4016cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4016d0:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  4016d2:	e002      	b.n	4016da <vQueueAddToRegistry+0x2a>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4016d4:	3301      	adds	r3, #1
  4016d6:	2b08      	cmp	r3, #8
  4016d8:	d1f0      	bne.n	4016bc <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  4016da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4016de:	4770      	bx	lr
  4016e0:	20400a98 	.word	0x20400a98

004016e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  4016e4:	b570      	push	{r4, r5, r6, lr}
  4016e6:	4604      	mov	r4, r0
  4016e8:	460d      	mov	r5, r1
  4016ea:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  4016ec:	4b0d      	ldr	r3, [pc, #52]	; (401724 <vQueueWaitForMessageRestricted+0x40>)
  4016ee:	4798      	blx	r3
  4016f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4016f2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4016f6:	d101      	bne.n	4016fc <vQueueWaitForMessageRestricted+0x18>
  4016f8:	2300      	movs	r3, #0
  4016fa:	6463      	str	r3, [r4, #68]	; 0x44
  4016fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4016fe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401702:	d101      	bne.n	401708 <vQueueWaitForMessageRestricted+0x24>
  401704:	2300      	movs	r3, #0
  401706:	64a3      	str	r3, [r4, #72]	; 0x48
  401708:	4b07      	ldr	r3, [pc, #28]	; (401728 <vQueueWaitForMessageRestricted+0x44>)
  40170a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  40170c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40170e:	b92b      	cbnz	r3, 40171c <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401710:	4632      	mov	r2, r6
  401712:	4629      	mov	r1, r5
  401714:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401718:	4b04      	ldr	r3, [pc, #16]	; (40172c <vQueueWaitForMessageRestricted+0x48>)
  40171a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  40171c:	4620      	mov	r0, r4
  40171e:	4b04      	ldr	r3, [pc, #16]	; (401730 <vQueueWaitForMessageRestricted+0x4c>)
  401720:	4798      	blx	r3
  401722:	bd70      	pop	{r4, r5, r6, pc}
  401724:	00400c29 	.word	0x00400c29
  401728:	00400c75 	.word	0x00400c75
  40172c:	00401f5d 	.word	0x00401f5d
  401730:	0040100d 	.word	0x0040100d

00401734 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401734:	4b08      	ldr	r3, [pc, #32]	; (401758 <prvResetNextTaskUnblockTime+0x24>)
  401736:	681b      	ldr	r3, [r3, #0]
  401738:	681b      	ldr	r3, [r3, #0]
  40173a:	b923      	cbnz	r3, 401746 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  40173c:	f04f 32ff 	mov.w	r2, #4294967295
  401740:	4b06      	ldr	r3, [pc, #24]	; (40175c <prvResetNextTaskUnblockTime+0x28>)
  401742:	601a      	str	r2, [r3, #0]
  401744:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401746:	4b04      	ldr	r3, [pc, #16]	; (401758 <prvResetNextTaskUnblockTime+0x24>)
  401748:	681b      	ldr	r3, [r3, #0]
  40174a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40174c:	68db      	ldr	r3, [r3, #12]
  40174e:	685a      	ldr	r2, [r3, #4]
  401750:	4b02      	ldr	r3, [pc, #8]	; (40175c <prvResetNextTaskUnblockTime+0x28>)
  401752:	601a      	str	r2, [r3, #0]
  401754:	4770      	bx	lr
  401756:	bf00      	nop
  401758:	20400914 	.word	0x20400914
  40175c:	204009d4 	.word	0x204009d4

00401760 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  401760:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401762:	4b0f      	ldr	r3, [pc, #60]	; (4017a0 <prvAddCurrentTaskToDelayedList+0x40>)
  401764:	681b      	ldr	r3, [r3, #0]
  401766:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  401768:	4b0e      	ldr	r3, [pc, #56]	; (4017a4 <prvAddCurrentTaskToDelayedList+0x44>)
  40176a:	681b      	ldr	r3, [r3, #0]
  40176c:	4298      	cmp	r0, r3
  40176e:	d207      	bcs.n	401780 <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401770:	4b0d      	ldr	r3, [pc, #52]	; (4017a8 <prvAddCurrentTaskToDelayedList+0x48>)
  401772:	6818      	ldr	r0, [r3, #0]
  401774:	4b0a      	ldr	r3, [pc, #40]	; (4017a0 <prvAddCurrentTaskToDelayedList+0x40>)
  401776:	6819      	ldr	r1, [r3, #0]
  401778:	3104      	adds	r1, #4
  40177a:	4b0c      	ldr	r3, [pc, #48]	; (4017ac <prvAddCurrentTaskToDelayedList+0x4c>)
  40177c:	4798      	blx	r3
  40177e:	bd10      	pop	{r4, pc}
  401780:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401782:	4b0b      	ldr	r3, [pc, #44]	; (4017b0 <prvAddCurrentTaskToDelayedList+0x50>)
  401784:	6818      	ldr	r0, [r3, #0]
  401786:	4b06      	ldr	r3, [pc, #24]	; (4017a0 <prvAddCurrentTaskToDelayedList+0x40>)
  401788:	6819      	ldr	r1, [r3, #0]
  40178a:	3104      	adds	r1, #4
  40178c:	4b07      	ldr	r3, [pc, #28]	; (4017ac <prvAddCurrentTaskToDelayedList+0x4c>)
  40178e:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  401790:	4b08      	ldr	r3, [pc, #32]	; (4017b4 <prvAddCurrentTaskToDelayedList+0x54>)
  401792:	681b      	ldr	r3, [r3, #0]
  401794:	429c      	cmp	r4, r3
  401796:	d201      	bcs.n	40179c <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  401798:	4b06      	ldr	r3, [pc, #24]	; (4017b4 <prvAddCurrentTaskToDelayedList+0x54>)
  40179a:	601c      	str	r4, [r3, #0]
  40179c:	bd10      	pop	{r4, pc}
  40179e:	bf00      	nop
  4017a0:	204009b4 	.word	0x204009b4
  4017a4:	204009d0 	.word	0x204009d0
  4017a8:	20400934 	.word	0x20400934
  4017ac:	00400b15 	.word	0x00400b15
  4017b0:	20400914 	.word	0x20400914
  4017b4:	204009d4 	.word	0x204009d4

004017b8 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  4017b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4017bc:	b083      	sub	sp, #12
  4017be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4017c0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4017c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  4017c6:	b950      	cbnz	r0, 4017de <xTaskGenericCreate+0x26>
  4017c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017cc:	b672      	cpsid	i
  4017ce:	f383 8811 	msr	BASEPRI, r3
  4017d2:	f3bf 8f6f 	isb	sy
  4017d6:	f3bf 8f4f 	dsb	sy
  4017da:	b662      	cpsie	i
  4017dc:	e7fe      	b.n	4017dc <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4017de:	2f04      	cmp	r7, #4
  4017e0:	d90a      	bls.n	4017f8 <xTaskGenericCreate+0x40>
  4017e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017e6:	b672      	cpsid	i
  4017e8:	f383 8811 	msr	BASEPRI, r3
  4017ec:	f3bf 8f6f 	isb	sy
  4017f0:	f3bf 8f4f 	dsb	sy
  4017f4:	b662      	cpsie	i
  4017f6:	e7fe      	b.n	4017f6 <xTaskGenericCreate+0x3e>
  4017f8:	9001      	str	r0, [sp, #4]
  4017fa:	9300      	str	r3, [sp, #0]
  4017fc:	4690      	mov	r8, r2
  4017fe:	460e      	mov	r6, r1
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401800:	b935      	cbnz	r5, 401810 <xTaskGenericCreate+0x58>
  401802:	0090      	lsls	r0, r2, #2
  401804:	4b5f      	ldr	r3, [pc, #380]	; (401984 <xTaskGenericCreate+0x1cc>)
  401806:	4798      	blx	r3

		if( pxStack != NULL )
  401808:	4605      	mov	r5, r0
  40180a:	2800      	cmp	r0, #0
  40180c:	f000 80b4 	beq.w	401978 <xTaskGenericCreate+0x1c0>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401810:	2058      	movs	r0, #88	; 0x58
  401812:	4b5c      	ldr	r3, [pc, #368]	; (401984 <xTaskGenericCreate+0x1cc>)
  401814:	4798      	blx	r3

			if( pxNewTCB != NULL )
  401816:	4604      	mov	r4, r0
  401818:	b1a0      	cbz	r0, 401844 <xTaskGenericCreate+0x8c>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  40181a:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  40181c:	ea4f 0288 	mov.w	r2, r8, lsl #2
  401820:	21a5      	movs	r1, #165	; 0xa5
  401822:	4628      	mov	r0, r5
  401824:	4b58      	ldr	r3, [pc, #352]	; (401988 <xTaskGenericCreate+0x1d0>)
  401826:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401828:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  40182c:	4445      	add	r5, r8
  40182e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401830:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  401834:	f023 0507 	bic.w	r5, r3, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401838:	7833      	ldrb	r3, [r6, #0]
  40183a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  40183e:	7833      	ldrb	r3, [r6, #0]
  401840:	b923      	cbnz	r3, 40184c <xTaskGenericCreate+0x94>
  401842:	e00f      	b.n	401864 <xTaskGenericCreate+0xac>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  401844:	4628      	mov	r0, r5
  401846:	4b51      	ldr	r3, [pc, #324]	; (40198c <xTaskGenericCreate+0x1d4>)
  401848:	4798      	blx	r3
  40184a:	e095      	b.n	401978 <xTaskGenericCreate+0x1c0>
  40184c:	4633      	mov	r3, r6
  40184e:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401852:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401854:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401858:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  40185c:	7819      	ldrb	r1, [r3, #0]
  40185e:	b109      	cbz	r1, 401864 <xTaskGenericCreate+0xac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401860:	429e      	cmp	r6, r3
  401862:	d1f7      	bne.n	401854 <xTaskGenericCreate+0x9c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401864:	f04f 0800 	mov.w	r8, #0
  401868:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  40186c:	463e      	mov	r6, r7
  40186e:	2f04      	cmp	r7, #4
  401870:	bf28      	it	cs
  401872:	2604      	movcs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  401874:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  401876:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401878:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40187c:	f104 0904 	add.w	r9, r4, #4
  401880:	4648      	mov	r0, r9
  401882:	f8df b154 	ldr.w	fp, [pc, #340]	; 4019d8 <xTaskGenericCreate+0x220>
  401886:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401888:	f104 0018 	add.w	r0, r4, #24
  40188c:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40188e:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401890:	f1c6 0605 	rsb	r6, r6, #5
  401894:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401896:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  401898:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  40189c:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4018a0:	9a00      	ldr	r2, [sp, #0]
  4018a2:	9901      	ldr	r1, [sp, #4]
  4018a4:	4628      	mov	r0, r5
  4018a6:	4b3a      	ldr	r3, [pc, #232]	; (401990 <xTaskGenericCreate+0x1d8>)
  4018a8:	4798      	blx	r3
  4018aa:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  4018ac:	f1ba 0f00 	cmp.w	sl, #0
  4018b0:	d001      	beq.n	4018b6 <xTaskGenericCreate+0xfe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4018b2:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  4018b6:	4b37      	ldr	r3, [pc, #220]	; (401994 <xTaskGenericCreate+0x1dc>)
  4018b8:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4018ba:	4a37      	ldr	r2, [pc, #220]	; (401998 <xTaskGenericCreate+0x1e0>)
  4018bc:	6813      	ldr	r3, [r2, #0]
  4018be:	3301      	adds	r3, #1
  4018c0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4018c2:	4b36      	ldr	r3, [pc, #216]	; (40199c <xTaskGenericCreate+0x1e4>)
  4018c4:	681b      	ldr	r3, [r3, #0]
  4018c6:	bb0b      	cbnz	r3, 40190c <xTaskGenericCreate+0x154>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4018c8:	4b34      	ldr	r3, [pc, #208]	; (40199c <xTaskGenericCreate+0x1e4>)
  4018ca:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4018cc:	6813      	ldr	r3, [r2, #0]
  4018ce:	2b01      	cmp	r3, #1
  4018d0:	d126      	bne.n	401920 <xTaskGenericCreate+0x168>
  4018d2:	4d33      	ldr	r5, [pc, #204]	; (4019a0 <xTaskGenericCreate+0x1e8>)
  4018d4:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4018d8:	4e32      	ldr	r6, [pc, #200]	; (4019a4 <xTaskGenericCreate+0x1ec>)
  4018da:	4628      	mov	r0, r5
  4018dc:	47b0      	blx	r6
  4018de:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4018e0:	4545      	cmp	r5, r8
  4018e2:	d1fa      	bne.n	4018da <xTaskGenericCreate+0x122>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  4018e4:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 4019dc <xTaskGenericCreate+0x224>
  4018e8:	4640      	mov	r0, r8
  4018ea:	4d2e      	ldr	r5, [pc, #184]	; (4019a4 <xTaskGenericCreate+0x1ec>)
  4018ec:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  4018ee:	4e2e      	ldr	r6, [pc, #184]	; (4019a8 <xTaskGenericCreate+0x1f0>)
  4018f0:	4630      	mov	r0, r6
  4018f2:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  4018f4:	482d      	ldr	r0, [pc, #180]	; (4019ac <xTaskGenericCreate+0x1f4>)
  4018f6:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  4018f8:	482d      	ldr	r0, [pc, #180]	; (4019b0 <xTaskGenericCreate+0x1f8>)
  4018fa:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  4018fc:	482d      	ldr	r0, [pc, #180]	; (4019b4 <xTaskGenericCreate+0x1fc>)
  4018fe:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401900:	4b2d      	ldr	r3, [pc, #180]	; (4019b8 <xTaskGenericCreate+0x200>)
  401902:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401906:	4b2d      	ldr	r3, [pc, #180]	; (4019bc <xTaskGenericCreate+0x204>)
  401908:	601e      	str	r6, [r3, #0]
  40190a:	e009      	b.n	401920 <xTaskGenericCreate+0x168>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  40190c:	4b2c      	ldr	r3, [pc, #176]	; (4019c0 <xTaskGenericCreate+0x208>)
  40190e:	681b      	ldr	r3, [r3, #0]
  401910:	b933      	cbnz	r3, 401920 <xTaskGenericCreate+0x168>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401912:	4b22      	ldr	r3, [pc, #136]	; (40199c <xTaskGenericCreate+0x1e4>)
  401914:	681b      	ldr	r3, [r3, #0]
  401916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401918:	429f      	cmp	r7, r3
  40191a:	d301      	bcc.n	401920 <xTaskGenericCreate+0x168>
					{
						pxCurrentTCB = pxNewTCB;
  40191c:	4b1f      	ldr	r3, [pc, #124]	; (40199c <xTaskGenericCreate+0x1e4>)
  40191e:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  401920:	4a28      	ldr	r2, [pc, #160]	; (4019c4 <xTaskGenericCreate+0x20c>)
  401922:	6813      	ldr	r3, [r2, #0]
  401924:	3301      	adds	r3, #1
  401926:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401928:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  40192a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40192c:	4926      	ldr	r1, [pc, #152]	; (4019c8 <xTaskGenericCreate+0x210>)
  40192e:	680b      	ldr	r3, [r1, #0]
  401930:	2201      	movs	r2, #1
  401932:	4082      	lsls	r2, r0
  401934:	4313      	orrs	r3, r2
  401936:	600b      	str	r3, [r1, #0]
  401938:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40193c:	4649      	mov	r1, r9
  40193e:	4b18      	ldr	r3, [pc, #96]	; (4019a0 <xTaskGenericCreate+0x1e8>)
  401940:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401944:	4b21      	ldr	r3, [pc, #132]	; (4019cc <xTaskGenericCreate+0x214>)
  401946:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  401948:	4b21      	ldr	r3, [pc, #132]	; (4019d0 <xTaskGenericCreate+0x218>)
  40194a:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  40194c:	4b1c      	ldr	r3, [pc, #112]	; (4019c0 <xTaskGenericCreate+0x208>)
  40194e:	681b      	ldr	r3, [r3, #0]
  401950:	b173      	cbz	r3, 401970 <xTaskGenericCreate+0x1b8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  401952:	4b12      	ldr	r3, [pc, #72]	; (40199c <xTaskGenericCreate+0x1e4>)
  401954:	681b      	ldr	r3, [r3, #0]
  401956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401958:	429f      	cmp	r7, r3
  40195a:	d90b      	bls.n	401974 <xTaskGenericCreate+0x1bc>
			{
				taskYIELD_IF_USING_PREEMPTION();
  40195c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401960:	4b1c      	ldr	r3, [pc, #112]	; (4019d4 <xTaskGenericCreate+0x21c>)
  401962:	601a      	str	r2, [r3, #0]
  401964:	f3bf 8f4f 	dsb	sy
  401968:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  40196c:	2001      	movs	r0, #1
  40196e:	e005      	b.n	40197c <xTaskGenericCreate+0x1c4>
  401970:	2001      	movs	r0, #1
  401972:	e003      	b.n	40197c <xTaskGenericCreate+0x1c4>
  401974:	2001      	movs	r0, #1
  401976:	e001      	b.n	40197c <xTaskGenericCreate+0x1c4>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401978:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  40197c:	b003      	add	sp, #12
  40197e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401982:	bf00      	nop
  401984:	00400e85 	.word	0x00400e85
  401988:	004034d1 	.word	0x004034d1
  40198c:	00400eb5 	.word	0x00400eb5
  401990:	00400bdd 	.word	0x00400bdd
  401994:	00400c29 	.word	0x00400c29
  401998:	204009dc 	.word	0x204009dc
  40199c:	204009b4 	.word	0x204009b4
  4019a0:	2040093c 	.word	0x2040093c
  4019a4:	00400add 	.word	0x00400add
  4019a8:	204009e0 	.word	0x204009e0
  4019ac:	204009b8 	.word	0x204009b8
  4019b0:	204009a0 	.word	0x204009a0
  4019b4:	204009f4 	.word	0x204009f4
  4019b8:	20400914 	.word	0x20400914
  4019bc:	20400934 	.word	0x20400934
  4019c0:	20400918 	.word	0x20400918
  4019c4:	204009d8 	.word	0x204009d8
  4019c8:	20400a08 	.word	0x20400a08
  4019cc:	00400afd 	.word	0x00400afd
  4019d0:	00400c75 	.word	0x00400c75
  4019d4:	e000ed04 	.word	0xe000ed04
  4019d8:	00400af5 	.word	0x00400af5
  4019dc:	20400920 	.word	0x20400920

004019e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  4019e0:	b510      	push	{r4, lr}
  4019e2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4019e4:	2300      	movs	r3, #0
  4019e6:	9303      	str	r3, [sp, #12]
  4019e8:	9302      	str	r3, [sp, #8]
  4019ea:	9301      	str	r3, [sp, #4]
  4019ec:	9300      	str	r3, [sp, #0]
  4019ee:	2282      	movs	r2, #130	; 0x82
  4019f0:	4917      	ldr	r1, [pc, #92]	; (401a50 <vTaskStartScheduler+0x70>)
  4019f2:	4818      	ldr	r0, [pc, #96]	; (401a54 <vTaskStartScheduler+0x74>)
  4019f4:	4c18      	ldr	r4, [pc, #96]	; (401a58 <vTaskStartScheduler+0x78>)
  4019f6:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  4019f8:	2801      	cmp	r0, #1
  4019fa:	d11a      	bne.n	401a32 <vTaskStartScheduler+0x52>
		{
			xReturn = xTimerCreateTimerTask();
  4019fc:	4b17      	ldr	r3, [pc, #92]	; (401a5c <vTaskStartScheduler+0x7c>)
  4019fe:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  401a00:	2801      	cmp	r0, #1
  401a02:	d116      	bne.n	401a32 <vTaskStartScheduler+0x52>
  401a04:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a08:	b672      	cpsid	i
  401a0a:	f383 8811 	msr	BASEPRI, r3
  401a0e:	f3bf 8f6f 	isb	sy
  401a12:	f3bf 8f4f 	dsb	sy
  401a16:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  401a18:	f04f 32ff 	mov.w	r2, #4294967295
  401a1c:	4b10      	ldr	r3, [pc, #64]	; (401a60 <vTaskStartScheduler+0x80>)
  401a1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401a20:	2201      	movs	r2, #1
  401a22:	4b10      	ldr	r3, [pc, #64]	; (401a64 <vTaskStartScheduler+0x84>)
  401a24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401a26:	2200      	movs	r2, #0
  401a28:	4b0f      	ldr	r3, [pc, #60]	; (401a68 <vTaskStartScheduler+0x88>)
  401a2a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  401a2c:	4b0f      	ldr	r3, [pc, #60]	; (401a6c <vTaskStartScheduler+0x8c>)
  401a2e:	4798      	blx	r3
  401a30:	e00b      	b.n	401a4a <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  401a32:	b950      	cbnz	r0, 401a4a <vTaskStartScheduler+0x6a>
  401a34:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a38:	b672      	cpsid	i
  401a3a:	f383 8811 	msr	BASEPRI, r3
  401a3e:	f3bf 8f6f 	isb	sy
  401a42:	f3bf 8f4f 	dsb	sy
  401a46:	b662      	cpsie	i
  401a48:	e7fe      	b.n	401a48 <vTaskStartScheduler+0x68>
	}
}
  401a4a:	b004      	add	sp, #16
  401a4c:	bd10      	pop	{r4, pc}
  401a4e:	bf00      	nop
  401a50:	00405df0 	.word	0x00405df0
  401a54:	00401d7d 	.word	0x00401d7d
  401a58:	004017b9 	.word	0x004017b9
  401a5c:	004023b5 	.word	0x004023b5
  401a60:	204009d4 	.word	0x204009d4
  401a64:	20400918 	.word	0x20400918
  401a68:	204009d0 	.word	0x204009d0
  401a6c:	00400d5d 	.word	0x00400d5d

00401a70 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  401a70:	4a02      	ldr	r2, [pc, #8]	; (401a7c <vTaskSuspendAll+0xc>)
  401a72:	6813      	ldr	r3, [r2, #0]
  401a74:	3301      	adds	r3, #1
  401a76:	6013      	str	r3, [r2, #0]
  401a78:	4770      	bx	lr
  401a7a:	bf00      	nop
  401a7c:	204009cc 	.word	0x204009cc

00401a80 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  401a80:	4b01      	ldr	r3, [pc, #4]	; (401a88 <xTaskGetTickCount+0x8>)
  401a82:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  401a84:	4770      	bx	lr
  401a86:	bf00      	nop
  401a88:	204009d0 	.word	0x204009d0

00401a8c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  401a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401a90:	4b41      	ldr	r3, [pc, #260]	; (401b98 <xTaskIncrementTick+0x10c>)
  401a92:	681b      	ldr	r3, [r3, #0]
  401a94:	2b00      	cmp	r3, #0
  401a96:	d16f      	bne.n	401b78 <xTaskIncrementTick+0xec>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  401a98:	4b40      	ldr	r3, [pc, #256]	; (401b9c <xTaskIncrementTick+0x110>)
  401a9a:	681a      	ldr	r2, [r3, #0]
  401a9c:	3201      	adds	r2, #1
  401a9e:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  401aa0:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  401aa2:	b9d6      	cbnz	r6, 401ada <xTaskIncrementTick+0x4e>
			{
				taskSWITCH_DELAYED_LISTS();
  401aa4:	4b3e      	ldr	r3, [pc, #248]	; (401ba0 <xTaskIncrementTick+0x114>)
  401aa6:	681b      	ldr	r3, [r3, #0]
  401aa8:	681b      	ldr	r3, [r3, #0]
  401aaa:	b153      	cbz	r3, 401ac2 <xTaskIncrementTick+0x36>
  401aac:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ab0:	b672      	cpsid	i
  401ab2:	f383 8811 	msr	BASEPRI, r3
  401ab6:	f3bf 8f6f 	isb	sy
  401aba:	f3bf 8f4f 	dsb	sy
  401abe:	b662      	cpsie	i
  401ac0:	e7fe      	b.n	401ac0 <xTaskIncrementTick+0x34>
  401ac2:	4a37      	ldr	r2, [pc, #220]	; (401ba0 <xTaskIncrementTick+0x114>)
  401ac4:	6811      	ldr	r1, [r2, #0]
  401ac6:	4b37      	ldr	r3, [pc, #220]	; (401ba4 <xTaskIncrementTick+0x118>)
  401ac8:	6818      	ldr	r0, [r3, #0]
  401aca:	6010      	str	r0, [r2, #0]
  401acc:	6019      	str	r1, [r3, #0]
  401ace:	4a36      	ldr	r2, [pc, #216]	; (401ba8 <xTaskIncrementTick+0x11c>)
  401ad0:	6813      	ldr	r3, [r2, #0]
  401ad2:	3301      	adds	r3, #1
  401ad4:	6013      	str	r3, [r2, #0]
  401ad6:	4b35      	ldr	r3, [pc, #212]	; (401bac <xTaskIncrementTick+0x120>)
  401ad8:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  401ada:	4b35      	ldr	r3, [pc, #212]	; (401bb0 <xTaskIncrementTick+0x124>)
  401adc:	681b      	ldr	r3, [r3, #0]
  401ade:	429e      	cmp	r6, r3
  401ae0:	d201      	bcs.n	401ae6 <xTaskIncrementTick+0x5a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401ae2:	2400      	movs	r4, #0
  401ae4:	e037      	b.n	401b56 <xTaskIncrementTick+0xca>
  401ae6:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401ae8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 401ba0 <xTaskIncrementTick+0x114>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401aec:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 401bd0 <xTaskIncrementTick+0x144>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401af0:	4f30      	ldr	r7, [pc, #192]	; (401bb4 <xTaskIncrementTick+0x128>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401af2:	f8d9 3000 	ldr.w	r3, [r9]
  401af6:	681b      	ldr	r3, [r3, #0]
  401af8:	b923      	cbnz	r3, 401b04 <xTaskIncrementTick+0x78>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  401afa:	f04f 32ff 	mov.w	r2, #4294967295
  401afe:	4b2c      	ldr	r3, [pc, #176]	; (401bb0 <xTaskIncrementTick+0x124>)
  401b00:	601a      	str	r2, [r3, #0]
						break;
  401b02:	e028      	b.n	401b56 <xTaskIncrementTick+0xca>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401b04:	f8d9 3000 	ldr.w	r3, [r9]
  401b08:	68db      	ldr	r3, [r3, #12]
  401b0a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401b0c:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  401b0e:	429e      	cmp	r6, r3
  401b10:	d202      	bcs.n	401b18 <xTaskIncrementTick+0x8c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  401b12:	4a27      	ldr	r2, [pc, #156]	; (401bb0 <xTaskIncrementTick+0x124>)
  401b14:	6013      	str	r3, [r2, #0]
							break;
  401b16:	e01e      	b.n	401b56 <xTaskIncrementTick+0xca>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b18:	f105 0a04 	add.w	sl, r5, #4
  401b1c:	4650      	mov	r0, sl
  401b1e:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401b20:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401b22:	b113      	cbz	r3, 401b2a <xTaskIncrementTick+0x9e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401b24:	f105 0018 	add.w	r0, r5, #24
  401b28:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401b2a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401b2c:	683b      	ldr	r3, [r7, #0]
  401b2e:	2201      	movs	r2, #1
  401b30:	4082      	lsls	r2, r0
  401b32:	4313      	orrs	r3, r2
  401b34:	603b      	str	r3, [r7, #0]
  401b36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b3a:	4651      	mov	r1, sl
  401b3c:	4b1e      	ldr	r3, [pc, #120]	; (401bb8 <xTaskIncrementTick+0x12c>)
  401b3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b42:	4b1e      	ldr	r3, [pc, #120]	; (401bbc <xTaskIncrementTick+0x130>)
  401b44:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401b46:	4b1e      	ldr	r3, [pc, #120]	; (401bc0 <xTaskIncrementTick+0x134>)
  401b48:	681b      	ldr	r3, [r3, #0]
  401b4a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  401b4e:	429a      	cmp	r2, r3
  401b50:	bf28      	it	cs
  401b52:	2401      	movcs	r4, #1
  401b54:	e7cd      	b.n	401af2 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401b56:	4b1a      	ldr	r3, [pc, #104]	; (401bc0 <xTaskIncrementTick+0x134>)
  401b58:	681b      	ldr	r3, [r3, #0]
  401b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401b60:	4a15      	ldr	r2, [pc, #84]	; (401bb8 <xTaskIncrementTick+0x12c>)
  401b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  401b66:	2b02      	cmp	r3, #2
  401b68:	bf28      	it	cs
  401b6a:	2401      	movcs	r4, #1

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401b6c:	4b15      	ldr	r3, [pc, #84]	; (401bc4 <xTaskIncrementTick+0x138>)
  401b6e:	681b      	ldr	r3, [r3, #0]
  401b70:	b94b      	cbnz	r3, 401b86 <xTaskIncrementTick+0xfa>
			{
				vApplicationTickHook();
  401b72:	4b15      	ldr	r3, [pc, #84]	; (401bc8 <xTaskIncrementTick+0x13c>)
  401b74:	4798      	blx	r3
  401b76:	e006      	b.n	401b86 <xTaskIncrementTick+0xfa>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  401b78:	4a12      	ldr	r2, [pc, #72]	; (401bc4 <xTaskIncrementTick+0x138>)
  401b7a:	6813      	ldr	r3, [r2, #0]
  401b7c:	3301      	adds	r3, #1
  401b7e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
  401b80:	4b11      	ldr	r3, [pc, #68]	; (401bc8 <xTaskIncrementTick+0x13c>)
  401b82:	4798      	blx	r3

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401b84:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  401b86:	4b11      	ldr	r3, [pc, #68]	; (401bcc <xTaskIncrementTick+0x140>)
  401b88:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  401b8a:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  401b8c:	bf0c      	ite	eq
  401b8e:	4620      	moveq	r0, r4
  401b90:	2001      	movne	r0, #1
  401b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401b96:	bf00      	nop
  401b98:	204009cc 	.word	0x204009cc
  401b9c:	204009d0 	.word	0x204009d0
  401ba0:	20400914 	.word	0x20400914
  401ba4:	20400934 	.word	0x20400934
  401ba8:	20400910 	.word	0x20400910
  401bac:	00401735 	.word	0x00401735
  401bb0:	204009d4 	.word	0x204009d4
  401bb4:	20400a08 	.word	0x20400a08
  401bb8:	2040093c 	.word	0x2040093c
  401bbc:	00400afd 	.word	0x00400afd
  401bc0:	204009b4 	.word	0x204009b4
  401bc4:	20400938 	.word	0x20400938
  401bc8:	00402b45 	.word	0x00402b45
  401bcc:	20400a0c 	.word	0x20400a0c
  401bd0:	00400b49 	.word	0x00400b49

00401bd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  401bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401bd8:	4b36      	ldr	r3, [pc, #216]	; (401cb4 <xTaskResumeAll+0xe0>)
  401bda:	681b      	ldr	r3, [r3, #0]
  401bdc:	b953      	cbnz	r3, 401bf4 <xTaskResumeAll+0x20>
  401bde:	f04f 0380 	mov.w	r3, #128	; 0x80
  401be2:	b672      	cpsid	i
  401be4:	f383 8811 	msr	BASEPRI, r3
  401be8:	f3bf 8f6f 	isb	sy
  401bec:	f3bf 8f4f 	dsb	sy
  401bf0:	b662      	cpsie	i
  401bf2:	e7fe      	b.n	401bf2 <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401bf4:	4b30      	ldr	r3, [pc, #192]	; (401cb8 <xTaskResumeAll+0xe4>)
  401bf6:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401bf8:	4b2e      	ldr	r3, [pc, #184]	; (401cb4 <xTaskResumeAll+0xe0>)
  401bfa:	681a      	ldr	r2, [r3, #0]
  401bfc:	3a01      	subs	r2, #1
  401bfe:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c00:	681b      	ldr	r3, [r3, #0]
  401c02:	2b00      	cmp	r3, #0
  401c04:	d14d      	bne.n	401ca2 <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401c06:	4b2d      	ldr	r3, [pc, #180]	; (401cbc <xTaskResumeAll+0xe8>)
  401c08:	681b      	ldr	r3, [r3, #0]
  401c0a:	bb0b      	cbnz	r3, 401c50 <xTaskResumeAll+0x7c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401c0c:	2400      	movs	r4, #0
  401c0e:	e04b      	b.n	401ca8 <xTaskResumeAll+0xd4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401c10:	68fb      	ldr	r3, [r7, #12]
  401c12:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401c14:	f104 0018 	add.w	r0, r4, #24
  401c18:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401c1a:	f104 0804 	add.w	r8, r4, #4
  401c1e:	4640      	mov	r0, r8
  401c20:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401c22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c24:	682b      	ldr	r3, [r5, #0]
  401c26:	2201      	movs	r2, #1
  401c28:	4082      	lsls	r2, r0
  401c2a:	4313      	orrs	r3, r2
  401c2c:	602b      	str	r3, [r5, #0]
  401c2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c32:	4641      	mov	r1, r8
  401c34:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401c38:	4b21      	ldr	r3, [pc, #132]	; (401cc0 <xTaskResumeAll+0xec>)
  401c3a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401c3c:	4b21      	ldr	r3, [pc, #132]	; (401cc4 <xTaskResumeAll+0xf0>)
  401c3e:	681b      	ldr	r3, [r3, #0]
  401c40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c44:	429a      	cmp	r2, r3
  401c46:	d308      	bcc.n	401c5a <xTaskResumeAll+0x86>
					{
						xYieldPending = pdTRUE;
  401c48:	2201      	movs	r2, #1
  401c4a:	4b1f      	ldr	r3, [pc, #124]	; (401cc8 <xTaskResumeAll+0xf4>)
  401c4c:	601a      	str	r2, [r3, #0]
  401c4e:	e004      	b.n	401c5a <xTaskResumeAll+0x86>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401c50:	4f1e      	ldr	r7, [pc, #120]	; (401ccc <xTaskResumeAll+0xf8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401c52:	4e1f      	ldr	r6, [pc, #124]	; (401cd0 <xTaskResumeAll+0xfc>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  401c54:	4d1f      	ldr	r5, [pc, #124]	; (401cd4 <xTaskResumeAll+0x100>)
  401c56:	f8df 9090 	ldr.w	r9, [pc, #144]	; 401ce8 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401c5a:	683b      	ldr	r3, [r7, #0]
  401c5c:	2b00      	cmp	r3, #0
  401c5e:	d1d7      	bne.n	401c10 <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401c60:	4b1d      	ldr	r3, [pc, #116]	; (401cd8 <xTaskResumeAll+0x104>)
  401c62:	681b      	ldr	r3, [r3, #0]
  401c64:	b17b      	cbz	r3, 401c86 <xTaskResumeAll+0xb2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401c66:	4b1c      	ldr	r3, [pc, #112]	; (401cd8 <xTaskResumeAll+0x104>)
  401c68:	681b      	ldr	r3, [r3, #0]
  401c6a:	b163      	cbz	r3, 401c86 <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  401c6c:	4e1b      	ldr	r6, [pc, #108]	; (401cdc <xTaskResumeAll+0x108>)
						{
							xYieldPending = pdTRUE;
  401c6e:	4d16      	ldr	r5, [pc, #88]	; (401cc8 <xTaskResumeAll+0xf4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401c70:	4c19      	ldr	r4, [pc, #100]	; (401cd8 <xTaskResumeAll+0x104>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  401c72:	47b0      	blx	r6
  401c74:	b108      	cbz	r0, 401c7a <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
  401c76:	2301      	movs	r3, #1
  401c78:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401c7a:	6823      	ldr	r3, [r4, #0]
  401c7c:	3b01      	subs	r3, #1
  401c7e:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401c80:	6823      	ldr	r3, [r4, #0]
  401c82:	2b00      	cmp	r3, #0
  401c84:	d1f5      	bne.n	401c72 <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  401c86:	4b10      	ldr	r3, [pc, #64]	; (401cc8 <xTaskResumeAll+0xf4>)
  401c88:	681b      	ldr	r3, [r3, #0]
  401c8a:	2b01      	cmp	r3, #1
  401c8c:	d10b      	bne.n	401ca6 <xTaskResumeAll+0xd2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  401c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c92:	4b13      	ldr	r3, [pc, #76]	; (401ce0 <xTaskResumeAll+0x10c>)
  401c94:	601a      	str	r2, [r3, #0]
  401c96:	f3bf 8f4f 	dsb	sy
  401c9a:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  401c9e:	2401      	movs	r4, #1
  401ca0:	e002      	b.n	401ca8 <xTaskResumeAll+0xd4>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401ca2:	2400      	movs	r4, #0
  401ca4:	e000      	b.n	401ca8 <xTaskResumeAll+0xd4>
  401ca6:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401ca8:	4b0e      	ldr	r3, [pc, #56]	; (401ce4 <xTaskResumeAll+0x110>)
  401caa:	4798      	blx	r3

	return xAlreadyYielded;
}
  401cac:	4620      	mov	r0, r4
  401cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401cb2:	bf00      	nop
  401cb4:	204009cc 	.word	0x204009cc
  401cb8:	00400c29 	.word	0x00400c29
  401cbc:	204009dc 	.word	0x204009dc
  401cc0:	00400afd 	.word	0x00400afd
  401cc4:	204009b4 	.word	0x204009b4
  401cc8:	20400a0c 	.word	0x20400a0c
  401ccc:	204009b8 	.word	0x204009b8
  401cd0:	00400b49 	.word	0x00400b49
  401cd4:	20400a08 	.word	0x20400a08
  401cd8:	20400938 	.word	0x20400938
  401cdc:	00401a8d 	.word	0x00401a8d
  401ce0:	e000ed04 	.word	0xe000ed04
  401ce4:	00400c75 	.word	0x00400c75
  401ce8:	2040093c 	.word	0x2040093c

00401cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  401cec:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  401cee:	2800      	cmp	r0, #0
  401cf0:	d029      	beq.n	401d46 <vTaskDelay+0x5a>
  401cf2:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  401cf4:	4b18      	ldr	r3, [pc, #96]	; (401d58 <vTaskDelay+0x6c>)
  401cf6:	681b      	ldr	r3, [r3, #0]
  401cf8:	b153      	cbz	r3, 401d10 <vTaskDelay+0x24>
  401cfa:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cfe:	b672      	cpsid	i
  401d00:	f383 8811 	msr	BASEPRI, r3
  401d04:	f3bf 8f6f 	isb	sy
  401d08:	f3bf 8f4f 	dsb	sy
  401d0c:	b662      	cpsie	i
  401d0e:	e7fe      	b.n	401d0e <vTaskDelay+0x22>
			vTaskSuspendAll();
  401d10:	4b12      	ldr	r3, [pc, #72]	; (401d5c <vTaskDelay+0x70>)
  401d12:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  401d14:	4b12      	ldr	r3, [pc, #72]	; (401d60 <vTaskDelay+0x74>)
  401d16:	681b      	ldr	r3, [r3, #0]
  401d18:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401d1a:	4b12      	ldr	r3, [pc, #72]	; (401d64 <vTaskDelay+0x78>)
  401d1c:	6818      	ldr	r0, [r3, #0]
  401d1e:	3004      	adds	r0, #4
  401d20:	4b11      	ldr	r3, [pc, #68]	; (401d68 <vTaskDelay+0x7c>)
  401d22:	4798      	blx	r3
  401d24:	b948      	cbnz	r0, 401d3a <vTaskDelay+0x4e>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401d26:	4b0f      	ldr	r3, [pc, #60]	; (401d64 <vTaskDelay+0x78>)
  401d28:	681a      	ldr	r2, [r3, #0]
  401d2a:	4910      	ldr	r1, [pc, #64]	; (401d6c <vTaskDelay+0x80>)
  401d2c:	680b      	ldr	r3, [r1, #0]
  401d2e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401d30:	2201      	movs	r2, #1
  401d32:	4082      	lsls	r2, r0
  401d34:	ea23 0302 	bic.w	r3, r3, r2
  401d38:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401d3a:	4620      	mov	r0, r4
  401d3c:	4b0c      	ldr	r3, [pc, #48]	; (401d70 <vTaskDelay+0x84>)
  401d3e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  401d40:	4b0c      	ldr	r3, [pc, #48]	; (401d74 <vTaskDelay+0x88>)
  401d42:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  401d44:	b938      	cbnz	r0, 401d56 <vTaskDelay+0x6a>
		{
			portYIELD_WITHIN_API();
  401d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d4a:	4b0b      	ldr	r3, [pc, #44]	; (401d78 <vTaskDelay+0x8c>)
  401d4c:	601a      	str	r2, [r3, #0]
  401d4e:	f3bf 8f4f 	dsb	sy
  401d52:	f3bf 8f6f 	isb	sy
  401d56:	bd10      	pop	{r4, pc}
  401d58:	204009cc 	.word	0x204009cc
  401d5c:	00401a71 	.word	0x00401a71
  401d60:	204009d0 	.word	0x204009d0
  401d64:	204009b4 	.word	0x204009b4
  401d68:	00400b49 	.word	0x00400b49
  401d6c:	20400a08 	.word	0x20400a08
  401d70:	00401761 	.word	0x00401761
  401d74:	00401bd5 	.word	0x00401bd5
  401d78:	e000ed04 	.word	0xe000ed04

00401d7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401d7c:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401d7e:	4d18      	ldr	r5, [pc, #96]	; (401de0 <prvIdleTask+0x64>)
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401d80:	4f18      	ldr	r7, [pc, #96]	; (401de4 <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401d82:	f8df 8080 	ldr.w	r8, [pc, #128]	; 401e04 <prvIdleTask+0x88>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
  401d86:	4e18      	ldr	r6, [pc, #96]	; (401de8 <prvIdleTask+0x6c>)
  401d88:	e019      	b.n	401dbe <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401d8a:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401d8c:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
  401d8e:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
  401d90:	b1ac      	cbz	r4, 401dbe <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  401d92:	4b16      	ldr	r3, [pc, #88]	; (401dec <prvIdleTask+0x70>)
  401d94:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401d96:	68fb      	ldr	r3, [r7, #12]
  401d98:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401d9a:	1d20      	adds	r0, r4, #4
  401d9c:	4b14      	ldr	r3, [pc, #80]	; (401df0 <prvIdleTask+0x74>)
  401d9e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401da0:	4a14      	ldr	r2, [pc, #80]	; (401df4 <prvIdleTask+0x78>)
  401da2:	6813      	ldr	r3, [r2, #0]
  401da4:	3b01      	subs	r3, #1
  401da6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401da8:	682b      	ldr	r3, [r5, #0]
  401daa:	3b01      	subs	r3, #1
  401dac:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  401dae:	4b12      	ldr	r3, [pc, #72]	; (401df8 <prvIdleTask+0x7c>)
  401db0:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  401db2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401db4:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401e08 <prvIdleTask+0x8c>
  401db8:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  401dba:	4620      	mov	r0, r4
  401dbc:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401dbe:	682b      	ldr	r3, [r5, #0]
  401dc0:	2b00      	cmp	r3, #0
  401dc2:	d1e2      	bne.n	401d8a <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401dc4:	4b0d      	ldr	r3, [pc, #52]	; (401dfc <prvIdleTask+0x80>)
  401dc6:	681b      	ldr	r3, [r3, #0]
  401dc8:	2b01      	cmp	r3, #1
  401dca:	d9dc      	bls.n	401d86 <prvIdleTask+0xa>
			{
				taskYIELD();
  401dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401dd0:	4b0b      	ldr	r3, [pc, #44]	; (401e00 <prvIdleTask+0x84>)
  401dd2:	601a      	str	r2, [r3, #0]
  401dd4:	f3bf 8f4f 	dsb	sy
  401dd8:	f3bf 8f6f 	isb	sy
  401ddc:	e7d1      	b.n	401d82 <prvIdleTask+0x6>
  401dde:	bf00      	nop
  401de0:	2040091c 	.word	0x2040091c
  401de4:	204009a0 	.word	0x204009a0
  401de8:	00401bd5 	.word	0x00401bd5
  401dec:	00400c29 	.word	0x00400c29
  401df0:	00400b49 	.word	0x00400b49
  401df4:	204009dc 	.word	0x204009dc
  401df8:	00400c75 	.word	0x00400c75
  401dfc:	2040093c 	.word	0x2040093c
  401e00:	e000ed04 	.word	0xe000ed04
  401e04:	00401a71 	.word	0x00401a71
  401e08:	00400eb5 	.word	0x00400eb5

00401e0c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401e0c:	4b2c      	ldr	r3, [pc, #176]	; (401ec0 <vTaskSwitchContext+0xb4>)
  401e0e:	681b      	ldr	r3, [r3, #0]
  401e10:	b11b      	cbz	r3, 401e1a <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  401e12:	2201      	movs	r2, #1
  401e14:	4b2b      	ldr	r3, [pc, #172]	; (401ec4 <vTaskSwitchContext+0xb8>)
  401e16:	601a      	str	r2, [r3, #0]
  401e18:	4770      	bx	lr

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401e1a:	b510      	push	{r4, lr}
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
  401e1c:	2200      	movs	r2, #0
  401e1e:	4b29      	ldr	r3, [pc, #164]	; (401ec4 <vTaskSwitchContext+0xb8>)
  401e20:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
  401e22:	4b29      	ldr	r3, [pc, #164]	; (401ec8 <vTaskSwitchContext+0xbc>)
  401e24:	681b      	ldr	r3, [r3, #0]
  401e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e28:	681a      	ldr	r2, [r3, #0]
  401e2a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401e2e:	d10b      	bne.n	401e48 <vTaskSwitchContext+0x3c>
  401e30:	685a      	ldr	r2, [r3, #4]
  401e32:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401e36:	d107      	bne.n	401e48 <vTaskSwitchContext+0x3c>
  401e38:	689a      	ldr	r2, [r3, #8]
  401e3a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401e3e:	d103      	bne.n	401e48 <vTaskSwitchContext+0x3c>
  401e40:	68db      	ldr	r3, [r3, #12]
  401e42:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401e46:	d005      	beq.n	401e54 <vTaskSwitchContext+0x48>
  401e48:	4b1f      	ldr	r3, [pc, #124]	; (401ec8 <vTaskSwitchContext+0xbc>)
  401e4a:	6818      	ldr	r0, [r3, #0]
  401e4c:	6819      	ldr	r1, [r3, #0]
  401e4e:	3134      	adds	r1, #52	; 0x34
  401e50:	4b1e      	ldr	r3, [pc, #120]	; (401ecc <vTaskSwitchContext+0xc0>)
  401e52:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401e54:	4b1e      	ldr	r3, [pc, #120]	; (401ed0 <vTaskSwitchContext+0xc4>)
  401e56:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401e58:	fab3 f383 	clz	r3, r3
  401e5c:	b2db      	uxtb	r3, r3
  401e5e:	f1c3 031f 	rsb	r3, r3, #31
  401e62:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401e66:	4a1b      	ldr	r2, [pc, #108]	; (401ed4 <vTaskSwitchContext+0xc8>)
  401e68:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401e6c:	b952      	cbnz	r2, 401e84 <vTaskSwitchContext+0x78>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401e6e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e72:	b672      	cpsid	i
  401e74:	f383 8811 	msr	BASEPRI, r3
  401e78:	f3bf 8f6f 	isb	sy
  401e7c:	f3bf 8f4f 	dsb	sy
  401e80:	b662      	cpsie	i
  401e82:	e7fe      	b.n	401e82 <vTaskSwitchContext+0x76>
  401e84:	4a13      	ldr	r2, [pc, #76]	; (401ed4 <vTaskSwitchContext+0xc8>)
  401e86:	0099      	lsls	r1, r3, #2
  401e88:	18c8      	adds	r0, r1, r3
  401e8a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401e8e:	6844      	ldr	r4, [r0, #4]
  401e90:	6864      	ldr	r4, [r4, #4]
  401e92:	6044      	str	r4, [r0, #4]
  401e94:	4602      	mov	r2, r0
  401e96:	3208      	adds	r2, #8
  401e98:	4294      	cmp	r4, r2
  401e9a:	d106      	bne.n	401eaa <vTaskSwitchContext+0x9e>
  401e9c:	6860      	ldr	r0, [r4, #4]
  401e9e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401ea2:	4a0c      	ldr	r2, [pc, #48]	; (401ed4 <vTaskSwitchContext+0xc8>)
  401ea4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401ea8:	6050      	str	r0, [r2, #4]
  401eaa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401eae:	4a09      	ldr	r2, [pc, #36]	; (401ed4 <vTaskSwitchContext+0xc8>)
  401eb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401eb4:	685b      	ldr	r3, [r3, #4]
  401eb6:	68da      	ldr	r2, [r3, #12]
  401eb8:	4b03      	ldr	r3, [pc, #12]	; (401ec8 <vTaskSwitchContext+0xbc>)
  401eba:	601a      	str	r2, [r3, #0]
  401ebc:	bd10      	pop	{r4, pc}
  401ebe:	bf00      	nop
  401ec0:	204009cc 	.word	0x204009cc
  401ec4:	20400a0c 	.word	0x20400a0c
  401ec8:	204009b4 	.word	0x204009b4
  401ecc:	00402b2d 	.word	0x00402b2d
  401ed0:	20400a08 	.word	0x20400a08
  401ed4:	2040093c 	.word	0x2040093c

00401ed8 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  401ed8:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  401eda:	b950      	cbnz	r0, 401ef2 <vTaskPlaceOnEventList+0x1a>
  401edc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ee0:	b672      	cpsid	i
  401ee2:	f383 8811 	msr	BASEPRI, r3
  401ee6:	f3bf 8f6f 	isb	sy
  401eea:	f3bf 8f4f 	dsb	sy
  401eee:	b662      	cpsie	i
  401ef0:	e7fe      	b.n	401ef0 <vTaskPlaceOnEventList+0x18>
  401ef2:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401ef4:	4d11      	ldr	r5, [pc, #68]	; (401f3c <vTaskPlaceOnEventList+0x64>)
  401ef6:	6829      	ldr	r1, [r5, #0]
  401ef8:	3118      	adds	r1, #24
  401efa:	4b11      	ldr	r3, [pc, #68]	; (401f40 <vTaskPlaceOnEventList+0x68>)
  401efc:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401efe:	6828      	ldr	r0, [r5, #0]
  401f00:	3004      	adds	r0, #4
  401f02:	4b10      	ldr	r3, [pc, #64]	; (401f44 <vTaskPlaceOnEventList+0x6c>)
  401f04:	4798      	blx	r3
  401f06:	b940      	cbnz	r0, 401f1a <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401f08:	682a      	ldr	r2, [r5, #0]
  401f0a:	490f      	ldr	r1, [pc, #60]	; (401f48 <vTaskPlaceOnEventList+0x70>)
  401f0c:	680b      	ldr	r3, [r1, #0]
  401f0e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401f10:	2201      	movs	r2, #1
  401f12:	4082      	lsls	r2, r0
  401f14:	ea23 0302 	bic.w	r3, r3, r2
  401f18:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401f1a:	f1b4 3fff 	cmp.w	r4, #4294967295
  401f1e:	d106      	bne.n	401f2e <vTaskPlaceOnEventList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401f20:	4b06      	ldr	r3, [pc, #24]	; (401f3c <vTaskPlaceOnEventList+0x64>)
  401f22:	6819      	ldr	r1, [r3, #0]
  401f24:	3104      	adds	r1, #4
  401f26:	4809      	ldr	r0, [pc, #36]	; (401f4c <vTaskPlaceOnEventList+0x74>)
  401f28:	4b09      	ldr	r3, [pc, #36]	; (401f50 <vTaskPlaceOnEventList+0x78>)
  401f2a:	4798      	blx	r3
  401f2c:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  401f2e:	4b09      	ldr	r3, [pc, #36]	; (401f54 <vTaskPlaceOnEventList+0x7c>)
  401f30:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401f32:	4420      	add	r0, r4
  401f34:	4b08      	ldr	r3, [pc, #32]	; (401f58 <vTaskPlaceOnEventList+0x80>)
  401f36:	4798      	blx	r3
  401f38:	bd38      	pop	{r3, r4, r5, pc}
  401f3a:	bf00      	nop
  401f3c:	204009b4 	.word	0x204009b4
  401f40:	00400b15 	.word	0x00400b15
  401f44:	00400b49 	.word	0x00400b49
  401f48:	20400a08 	.word	0x20400a08
  401f4c:	204009f4 	.word	0x204009f4
  401f50:	00400afd 	.word	0x00400afd
  401f54:	204009d0 	.word	0x204009d0
  401f58:	00401761 	.word	0x00401761

00401f5c <vTaskPlaceOnEventListRestricted>:

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  401f5c:	b950      	cbnz	r0, 401f74 <vTaskPlaceOnEventListRestricted+0x18>
  401f5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f62:	b672      	cpsid	i
  401f64:	f383 8811 	msr	BASEPRI, r3
  401f68:	f3bf 8f6f 	isb	sy
  401f6c:	f3bf 8f4f 	dsb	sy
  401f70:	b662      	cpsie	i
  401f72:	e7fe      	b.n	401f72 <vTaskPlaceOnEventListRestricted+0x16>
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401f74:	b570      	push	{r4, r5, r6, lr}
  401f76:	4615      	mov	r5, r2
  401f78:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401f7a:	4e11      	ldr	r6, [pc, #68]	; (401fc0 <vTaskPlaceOnEventListRestricted+0x64>)
  401f7c:	6831      	ldr	r1, [r6, #0]
  401f7e:	3118      	adds	r1, #24
  401f80:	4b10      	ldr	r3, [pc, #64]	; (401fc4 <vTaskPlaceOnEventListRestricted+0x68>)
  401f82:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401f84:	6830      	ldr	r0, [r6, #0]
  401f86:	3004      	adds	r0, #4
  401f88:	4b0f      	ldr	r3, [pc, #60]	; (401fc8 <vTaskPlaceOnEventListRestricted+0x6c>)
  401f8a:	4798      	blx	r3
  401f8c:	b940      	cbnz	r0, 401fa0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401f8e:	6832      	ldr	r2, [r6, #0]
  401f90:	490e      	ldr	r1, [pc, #56]	; (401fcc <vTaskPlaceOnEventListRestricted+0x70>)
  401f92:	680b      	ldr	r3, [r1, #0]
  401f94:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401f96:	2201      	movs	r2, #1
  401f98:	4082      	lsls	r2, r0
  401f9a:	ea23 0302 	bic.w	r3, r3, r2
  401f9e:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  401fa0:	2d01      	cmp	r5, #1
  401fa2:	d106      	bne.n	401fb2 <vTaskPlaceOnEventListRestricted+0x56>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401fa4:	4b06      	ldr	r3, [pc, #24]	; (401fc0 <vTaskPlaceOnEventListRestricted+0x64>)
  401fa6:	6819      	ldr	r1, [r3, #0]
  401fa8:	3104      	adds	r1, #4
  401faa:	4809      	ldr	r0, [pc, #36]	; (401fd0 <vTaskPlaceOnEventListRestricted+0x74>)
  401fac:	4b05      	ldr	r3, [pc, #20]	; (401fc4 <vTaskPlaceOnEventListRestricted+0x68>)
  401fae:	4798      	blx	r3
  401fb0:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  401fb2:	4b08      	ldr	r3, [pc, #32]	; (401fd4 <vTaskPlaceOnEventListRestricted+0x78>)
  401fb4:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401fb6:	4420      	add	r0, r4
  401fb8:	4b07      	ldr	r3, [pc, #28]	; (401fd8 <vTaskPlaceOnEventListRestricted+0x7c>)
  401fba:	4798      	blx	r3
  401fbc:	bd70      	pop	{r4, r5, r6, pc}
  401fbe:	bf00      	nop
  401fc0:	204009b4 	.word	0x204009b4
  401fc4:	00400afd 	.word	0x00400afd
  401fc8:	00400b49 	.word	0x00400b49
  401fcc:	20400a08 	.word	0x20400a08
  401fd0:	204009f4 	.word	0x204009f4
  401fd4:	204009d0 	.word	0x204009d0
  401fd8:	00401761 	.word	0x00401761

00401fdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  401fdc:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401fde:	68c3      	ldr	r3, [r0, #12]
  401fe0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401fe2:	b954      	cbnz	r4, 401ffa <xTaskRemoveFromEventList+0x1e>
  401fe4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fe8:	b672      	cpsid	i
  401fea:	f383 8811 	msr	BASEPRI, r3
  401fee:	f3bf 8f6f 	isb	sy
  401ff2:	f3bf 8f4f 	dsb	sy
  401ff6:	b662      	cpsie	i
  401ff8:	e7fe      	b.n	401ff8 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401ffa:	f104 0518 	add.w	r5, r4, #24
  401ffe:	4628      	mov	r0, r5
  402000:	4b14      	ldr	r3, [pc, #80]	; (402054 <xTaskRemoveFromEventList+0x78>)
  402002:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402004:	4b14      	ldr	r3, [pc, #80]	; (402058 <xTaskRemoveFromEventList+0x7c>)
  402006:	681b      	ldr	r3, [r3, #0]
  402008:	b99b      	cbnz	r3, 402032 <xTaskRemoveFromEventList+0x56>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40200a:	1d25      	adds	r5, r4, #4
  40200c:	4628      	mov	r0, r5
  40200e:	4b11      	ldr	r3, [pc, #68]	; (402054 <xTaskRemoveFromEventList+0x78>)
  402010:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402012:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402014:	4911      	ldr	r1, [pc, #68]	; (40205c <xTaskRemoveFromEventList+0x80>)
  402016:	680b      	ldr	r3, [r1, #0]
  402018:	2201      	movs	r2, #1
  40201a:	4082      	lsls	r2, r0
  40201c:	4313      	orrs	r3, r2
  40201e:	600b      	str	r3, [r1, #0]
  402020:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402024:	4629      	mov	r1, r5
  402026:	4b0e      	ldr	r3, [pc, #56]	; (402060 <xTaskRemoveFromEventList+0x84>)
  402028:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40202c:	4b0d      	ldr	r3, [pc, #52]	; (402064 <xTaskRemoveFromEventList+0x88>)
  40202e:	4798      	blx	r3
  402030:	e003      	b.n	40203a <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402032:	4629      	mov	r1, r5
  402034:	480c      	ldr	r0, [pc, #48]	; (402068 <xTaskRemoveFromEventList+0x8c>)
  402036:	4b0b      	ldr	r3, [pc, #44]	; (402064 <xTaskRemoveFromEventList+0x88>)
  402038:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40203a:	4b0c      	ldr	r3, [pc, #48]	; (40206c <xTaskRemoveFromEventList+0x90>)
  40203c:	681b      	ldr	r3, [r3, #0]
  40203e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402042:	429a      	cmp	r2, r3
  402044:	d903      	bls.n	40204e <xTaskRemoveFromEventList+0x72>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  402046:	2001      	movs	r0, #1
  402048:	4b09      	ldr	r3, [pc, #36]	; (402070 <xTaskRemoveFromEventList+0x94>)
  40204a:	6018      	str	r0, [r3, #0]
  40204c:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
  40204e:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  402050:	bd38      	pop	{r3, r4, r5, pc}
  402052:	bf00      	nop
  402054:	00400b49 	.word	0x00400b49
  402058:	204009cc 	.word	0x204009cc
  40205c:	20400a08 	.word	0x20400a08
  402060:	2040093c 	.word	0x2040093c
  402064:	00400afd 	.word	0x00400afd
  402068:	204009b8 	.word	0x204009b8
  40206c:	204009b4 	.word	0x204009b4
  402070:	20400a0c 	.word	0x20400a0c

00402074 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
  402074:	b950      	cbnz	r0, 40208c <vTaskSetTimeOutState+0x18>
  402076:	f04f 0380 	mov.w	r3, #128	; 0x80
  40207a:	b672      	cpsid	i
  40207c:	f383 8811 	msr	BASEPRI, r3
  402080:	f3bf 8f6f 	isb	sy
  402084:	f3bf 8f4f 	dsb	sy
  402088:	b662      	cpsie	i
  40208a:	e7fe      	b.n	40208a <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40208c:	4a03      	ldr	r2, [pc, #12]	; (40209c <vTaskSetTimeOutState+0x28>)
  40208e:	6812      	ldr	r2, [r2, #0]
  402090:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402092:	4a03      	ldr	r2, [pc, #12]	; (4020a0 <vTaskSetTimeOutState+0x2c>)
  402094:	6812      	ldr	r2, [r2, #0]
  402096:	6042      	str	r2, [r0, #4]
  402098:	4770      	bx	lr
  40209a:	bf00      	nop
  40209c:	20400910 	.word	0x20400910
  4020a0:	204009d0 	.word	0x204009d0

004020a4 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  4020a4:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  4020a6:	b950      	cbnz	r0, 4020be <xTaskCheckForTimeOut+0x1a>
  4020a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020ac:	b672      	cpsid	i
  4020ae:	f383 8811 	msr	BASEPRI, r3
  4020b2:	f3bf 8f6f 	isb	sy
  4020b6:	f3bf 8f4f 	dsb	sy
  4020ba:	b662      	cpsie	i
  4020bc:	e7fe      	b.n	4020bc <xTaskCheckForTimeOut+0x18>
  4020be:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4020c0:	b951      	cbnz	r1, 4020d8 <xTaskCheckForTimeOut+0x34>
  4020c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020c6:	b672      	cpsid	i
  4020c8:	f383 8811 	msr	BASEPRI, r3
  4020cc:	f3bf 8f6f 	isb	sy
  4020d0:	f3bf 8f4f 	dsb	sy
  4020d4:	b662      	cpsie	i
  4020d6:	e7fe      	b.n	4020d6 <xTaskCheckForTimeOut+0x32>
  4020d8:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  4020da:	4b12      	ldr	r3, [pc, #72]	; (402124 <xTaskCheckForTimeOut+0x80>)
  4020dc:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  4020de:	4b12      	ldr	r3, [pc, #72]	; (402128 <xTaskCheckForTimeOut+0x84>)
  4020e0:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4020e2:	682b      	ldr	r3, [r5, #0]
  4020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4020e8:	d013      	beq.n	402112 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4020ea:	4a10      	ldr	r2, [pc, #64]	; (40212c <xTaskCheckForTimeOut+0x88>)
  4020ec:	6812      	ldr	r2, [r2, #0]
  4020ee:	6820      	ldr	r0, [r4, #0]
  4020f0:	4290      	cmp	r0, r2
  4020f2:	d002      	beq.n	4020fa <xTaskCheckForTimeOut+0x56>
  4020f4:	6862      	ldr	r2, [r4, #4]
  4020f6:	4291      	cmp	r1, r2
  4020f8:	d20d      	bcs.n	402116 <xTaskCheckForTimeOut+0x72>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4020fa:	6862      	ldr	r2, [r4, #4]
  4020fc:	1a88      	subs	r0, r1, r2
  4020fe:	4283      	cmp	r3, r0
  402100:	d90b      	bls.n	40211a <xTaskCheckForTimeOut+0x76>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402102:	1a52      	subs	r2, r2, r1
  402104:	4413      	add	r3, r2
  402106:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402108:	4620      	mov	r0, r4
  40210a:	4b09      	ldr	r3, [pc, #36]	; (402130 <xTaskCheckForTimeOut+0x8c>)
  40210c:	4798      	blx	r3
			xReturn = pdFALSE;
  40210e:	2400      	movs	r4, #0
  402110:	e004      	b.n	40211c <xTaskCheckForTimeOut+0x78>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  402112:	2400      	movs	r4, #0
  402114:	e002      	b.n	40211c <xTaskCheckForTimeOut+0x78>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  402116:	2401      	movs	r4, #1
  402118:	e000      	b.n	40211c <xTaskCheckForTimeOut+0x78>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  40211a:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  40211c:	4b05      	ldr	r3, [pc, #20]	; (402134 <xTaskCheckForTimeOut+0x90>)
  40211e:	4798      	blx	r3

	return xReturn;
}
  402120:	4620      	mov	r0, r4
  402122:	bd38      	pop	{r3, r4, r5, pc}
  402124:	00400c29 	.word	0x00400c29
  402128:	204009d0 	.word	0x204009d0
  40212c:	20400910 	.word	0x20400910
  402130:	00402075 	.word	0x00402075
  402134:	00400c75 	.word	0x00400c75

00402138 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  402138:	2201      	movs	r2, #1
  40213a:	4b01      	ldr	r3, [pc, #4]	; (402140 <vTaskMissedYield+0x8>)
  40213c:	601a      	str	r2, [r3, #0]
  40213e:	4770      	bx	lr
  402140:	20400a0c 	.word	0x20400a0c

00402144 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402144:	4b05      	ldr	r3, [pc, #20]	; (40215c <xTaskGetSchedulerState+0x18>)
  402146:	681b      	ldr	r3, [r3, #0]
  402148:	b133      	cbz	r3, 402158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40214a:	4b05      	ldr	r3, [pc, #20]	; (402160 <xTaskGetSchedulerState+0x1c>)
  40214c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40214e:	2b00      	cmp	r3, #0
  402150:	bf0c      	ite	eq
  402152:	2002      	moveq	r0, #2
  402154:	2000      	movne	r0, #0
  402156:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  402158:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  40215a:	4770      	bx	lr
  40215c:	20400918 	.word	0x20400918
  402160:	204009cc 	.word	0x204009cc

00402164 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402164:	2800      	cmp	r0, #0
  402166:	d045      	beq.n	4021f4 <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  402168:	b538      	push	{r3, r4, r5, lr}
  40216a:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  40216c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40216e:	4922      	ldr	r1, [pc, #136]	; (4021f8 <vTaskPriorityInherit+0x94>)
  402170:	6809      	ldr	r1, [r1, #0]
  402172:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402174:	428a      	cmp	r2, r1
  402176:	d23c      	bcs.n	4021f2 <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402178:	6981      	ldr	r1, [r0, #24]
  40217a:	2900      	cmp	r1, #0
  40217c:	db05      	blt.n	40218a <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40217e:	491e      	ldr	r1, [pc, #120]	; (4021f8 <vTaskPriorityInherit+0x94>)
  402180:	6809      	ldr	r1, [r1, #0]
  402182:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402184:	f1c1 0105 	rsb	r1, r1, #5
  402188:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40218a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40218e:	491b      	ldr	r1, [pc, #108]	; (4021fc <vTaskPriorityInherit+0x98>)
  402190:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402194:	6959      	ldr	r1, [r3, #20]
  402196:	4291      	cmp	r1, r2
  402198:	d127      	bne.n	4021ea <vTaskPriorityInherit+0x86>
  40219a:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40219c:	1d1d      	adds	r5, r3, #4
  40219e:	4628      	mov	r0, r5
  4021a0:	4b17      	ldr	r3, [pc, #92]	; (402200 <vTaskPriorityInherit+0x9c>)
  4021a2:	4798      	blx	r3
  4021a4:	b970      	cbnz	r0, 4021c4 <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4021a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4021a8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4021ac:	4a13      	ldr	r2, [pc, #76]	; (4021fc <vTaskPriorityInherit+0x98>)
  4021ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4021b2:	b93a      	cbnz	r2, 4021c4 <vTaskPriorityInherit+0x60>
  4021b4:	4813      	ldr	r0, [pc, #76]	; (402204 <vTaskPriorityInherit+0xa0>)
  4021b6:	6802      	ldr	r2, [r0, #0]
  4021b8:	2101      	movs	r1, #1
  4021ba:	fa01 f303 	lsl.w	r3, r1, r3
  4021be:	ea22 0303 	bic.w	r3, r2, r3
  4021c2:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4021c4:	4b0c      	ldr	r3, [pc, #48]	; (4021f8 <vTaskPriorityInherit+0x94>)
  4021c6:	681b      	ldr	r3, [r3, #0]
  4021c8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4021ca:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4021cc:	490d      	ldr	r1, [pc, #52]	; (402204 <vTaskPriorityInherit+0xa0>)
  4021ce:	680a      	ldr	r2, [r1, #0]
  4021d0:	2301      	movs	r3, #1
  4021d2:	4083      	lsls	r3, r0
  4021d4:	4313      	orrs	r3, r2
  4021d6:	600b      	str	r3, [r1, #0]
  4021d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4021dc:	4629      	mov	r1, r5
  4021de:	4b07      	ldr	r3, [pc, #28]	; (4021fc <vTaskPriorityInherit+0x98>)
  4021e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4021e4:	4b08      	ldr	r3, [pc, #32]	; (402208 <vTaskPriorityInherit+0xa4>)
  4021e6:	4798      	blx	r3
  4021e8:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4021ea:	4a03      	ldr	r2, [pc, #12]	; (4021f8 <vTaskPriorityInherit+0x94>)
  4021ec:	6812      	ldr	r2, [r2, #0]
  4021ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4021f0:	62da      	str	r2, [r3, #44]	; 0x2c
  4021f2:	bd38      	pop	{r3, r4, r5, pc}
  4021f4:	4770      	bx	lr
  4021f6:	bf00      	nop
  4021f8:	204009b4 	.word	0x204009b4
  4021fc:	2040093c 	.word	0x2040093c
  402200:	00400b49 	.word	0x00400b49
  402204:	20400a08 	.word	0x20400a08
  402208:	00400afd 	.word	0x00400afd

0040220c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  40220c:	2800      	cmp	r0, #0
  40220e:	d04e      	beq.n	4022ae <xTaskPriorityDisinherit+0xa2>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  402210:	b538      	push	{r3, r4, r5, lr}
  402212:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402214:	4a28      	ldr	r2, [pc, #160]	; (4022b8 <xTaskPriorityDisinherit+0xac>)
  402216:	6812      	ldr	r2, [r2, #0]
  402218:	4290      	cmp	r0, r2
  40221a:	d00a      	beq.n	402232 <xTaskPriorityDisinherit+0x26>
  40221c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402220:	b672      	cpsid	i
  402222:	f383 8811 	msr	BASEPRI, r3
  402226:	f3bf 8f6f 	isb	sy
  40222a:	f3bf 8f4f 	dsb	sy
  40222e:	b662      	cpsie	i
  402230:	e7fe      	b.n	402230 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402232:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402234:	b952      	cbnz	r2, 40224c <xTaskPriorityDisinherit+0x40>
  402236:	f04f 0380 	mov.w	r3, #128	; 0x80
  40223a:	b672      	cpsid	i
  40223c:	f383 8811 	msr	BASEPRI, r3
  402240:	f3bf 8f6f 	isb	sy
  402244:	f3bf 8f4f 	dsb	sy
  402248:	b662      	cpsie	i
  40224a:	e7fe      	b.n	40224a <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  40224c:	3a01      	subs	r2, #1
  40224e:	64c2      	str	r2, [r0, #76]	; 0x4c
			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402250:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402252:	6c99      	ldr	r1, [r3, #72]	; 0x48
  402254:	4288      	cmp	r0, r1
  402256:	d02c      	beq.n	4022b2 <xTaskPriorityDisinherit+0xa6>
  402258:	bb5a      	cbnz	r2, 4022b2 <xTaskPriorityDisinherit+0xa6>
  40225a:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40225c:	1d1d      	adds	r5, r3, #4
  40225e:	4628      	mov	r0, r5
  402260:	4b16      	ldr	r3, [pc, #88]	; (4022bc <xTaskPriorityDisinherit+0xb0>)
  402262:	4798      	blx	r3
  402264:	b968      	cbnz	r0, 402282 <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402266:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402268:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40226c:	4b14      	ldr	r3, [pc, #80]	; (4022c0 <xTaskPriorityDisinherit+0xb4>)
  40226e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402272:	b933      	cbnz	r3, 402282 <xTaskPriorityDisinherit+0x76>
  402274:	4813      	ldr	r0, [pc, #76]	; (4022c4 <xTaskPriorityDisinherit+0xb8>)
  402276:	6803      	ldr	r3, [r0, #0]
  402278:	2201      	movs	r2, #1
  40227a:	408a      	lsls	r2, r1
  40227c:	ea23 0302 	bic.w	r3, r3, r2
  402280:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402282:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402284:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402286:	f1c0 0305 	rsb	r3, r0, #5
  40228a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40228c:	4a0d      	ldr	r2, [pc, #52]	; (4022c4 <xTaskPriorityDisinherit+0xb8>)
  40228e:	6813      	ldr	r3, [r2, #0]
  402290:	2401      	movs	r4, #1
  402292:	fa04 f100 	lsl.w	r1, r4, r0
  402296:	430b      	orrs	r3, r1
  402298:	6013      	str	r3, [r2, #0]
  40229a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40229e:	4629      	mov	r1, r5
  4022a0:	4b07      	ldr	r3, [pc, #28]	; (4022c0 <xTaskPriorityDisinherit+0xb4>)
  4022a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4022a6:	4b08      	ldr	r3, [pc, #32]	; (4022c8 <xTaskPriorityDisinherit+0xbc>)
  4022a8:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4022aa:	4620      	mov	r0, r4
  4022ac:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  4022ae:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4022b0:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  4022b2:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4022b4:	bd38      	pop	{r3, r4, r5, pc}
  4022b6:	bf00      	nop
  4022b8:	204009b4 	.word	0x204009b4
  4022bc:	00400b49 	.word	0x00400b49
  4022c0:	2040093c 	.word	0x2040093c
  4022c4:	20400a08 	.word	0x20400a08
  4022c8:	00400afd 	.word	0x00400afd

004022cc <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4022cc:	4b05      	ldr	r3, [pc, #20]	; (4022e4 <pvTaskIncrementMutexHeldCount+0x18>)
  4022ce:	681b      	ldr	r3, [r3, #0]
  4022d0:	b123      	cbz	r3, 4022dc <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4022d2:	4b04      	ldr	r3, [pc, #16]	; (4022e4 <pvTaskIncrementMutexHeldCount+0x18>)
  4022d4:	681a      	ldr	r2, [r3, #0]
  4022d6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4022d8:	3301      	adds	r3, #1
  4022da:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  4022dc:	4b01      	ldr	r3, [pc, #4]	; (4022e4 <pvTaskIncrementMutexHeldCount+0x18>)
  4022de:	6818      	ldr	r0, [r3, #0]
	}
  4022e0:	4770      	bx	lr
  4022e2:	bf00      	nop
  4022e4:	204009b4 	.word	0x204009b4

004022e8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4022e8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4022ea:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4022ec:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4022ee:	4291      	cmp	r1, r2
  4022f0:	d80a      	bhi.n	402308 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  4022f2:	1ad2      	subs	r2, r2, r3
  4022f4:	6983      	ldr	r3, [r0, #24]
  4022f6:	429a      	cmp	r2, r3
  4022f8:	d211      	bcs.n	40231e <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4022fa:	1d01      	adds	r1, r0, #4
  4022fc:	4b0a      	ldr	r3, [pc, #40]	; (402328 <prvInsertTimerInActiveList+0x40>)
  4022fe:	6818      	ldr	r0, [r3, #0]
  402300:	4b0a      	ldr	r3, [pc, #40]	; (40232c <prvInsertTimerInActiveList+0x44>)
  402302:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  402304:	2000      	movs	r0, #0
  402306:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402308:	429a      	cmp	r2, r3
  40230a:	d201      	bcs.n	402310 <prvInsertTimerInActiveList+0x28>
  40230c:	4299      	cmp	r1, r3
  40230e:	d208      	bcs.n	402322 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402310:	1d01      	adds	r1, r0, #4
  402312:	4b07      	ldr	r3, [pc, #28]	; (402330 <prvInsertTimerInActiveList+0x48>)
  402314:	6818      	ldr	r0, [r3, #0]
  402316:	4b05      	ldr	r3, [pc, #20]	; (40232c <prvInsertTimerInActiveList+0x44>)
  402318:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  40231a:	2000      	movs	r0, #0
  40231c:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40231e:	2001      	movs	r0, #1
  402320:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402322:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402324:	bd08      	pop	{r3, pc}
  402326:	bf00      	nop
  402328:	20400a44 	.word	0x20400a44
  40232c:	00400b15 	.word	0x00400b15
  402330:	20400a10 	.word	0x20400a10

00402334 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402334:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402336:	4b14      	ldr	r3, [pc, #80]	; (402388 <prvCheckForValidListAndQueue+0x54>)
  402338:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40233a:	4b14      	ldr	r3, [pc, #80]	; (40238c <prvCheckForValidListAndQueue+0x58>)
  40233c:	681b      	ldr	r3, [r3, #0]
  40233e:	bb03      	cbnz	r3, 402382 <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
  402340:	4d13      	ldr	r5, [pc, #76]	; (402390 <prvCheckForValidListAndQueue+0x5c>)
  402342:	4628      	mov	r0, r5
  402344:	4e13      	ldr	r6, [pc, #76]	; (402394 <prvCheckForValidListAndQueue+0x60>)
  402346:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402348:	4c13      	ldr	r4, [pc, #76]	; (402398 <prvCheckForValidListAndQueue+0x64>)
  40234a:	4620      	mov	r0, r4
  40234c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  40234e:	4b13      	ldr	r3, [pc, #76]	; (40239c <prvCheckForValidListAndQueue+0x68>)
  402350:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402352:	4b13      	ldr	r3, [pc, #76]	; (4023a0 <prvCheckForValidListAndQueue+0x6c>)
  402354:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402356:	2200      	movs	r2, #0
  402358:	2110      	movs	r1, #16
  40235a:	2005      	movs	r0, #5
  40235c:	4b11      	ldr	r3, [pc, #68]	; (4023a4 <prvCheckForValidListAndQueue+0x70>)
  40235e:	4798      	blx	r3
  402360:	4b0a      	ldr	r3, [pc, #40]	; (40238c <prvCheckForValidListAndQueue+0x58>)
  402362:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402364:	b950      	cbnz	r0, 40237c <prvCheckForValidListAndQueue+0x48>
  402366:	f04f 0380 	mov.w	r3, #128	; 0x80
  40236a:	b672      	cpsid	i
  40236c:	f383 8811 	msr	BASEPRI, r3
  402370:	f3bf 8f6f 	isb	sy
  402374:	f3bf 8f4f 	dsb	sy
  402378:	b662      	cpsie	i
  40237a:	e7fe      	b.n	40237a <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  40237c:	490a      	ldr	r1, [pc, #40]	; (4023a8 <prvCheckForValidListAndQueue+0x74>)
  40237e:	4b0b      	ldr	r3, [pc, #44]	; (4023ac <prvCheckForValidListAndQueue+0x78>)
  402380:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402382:	4b0b      	ldr	r3, [pc, #44]	; (4023b0 <prvCheckForValidListAndQueue+0x7c>)
  402384:	4798      	blx	r3
  402386:	bd70      	pop	{r4, r5, r6, pc}
  402388:	00400c29 	.word	0x00400c29
  40238c:	20400a40 	.word	0x20400a40
  402390:	20400a14 	.word	0x20400a14
  402394:	00400add 	.word	0x00400add
  402398:	20400a28 	.word	0x20400a28
  40239c:	20400a10 	.word	0x20400a10
  4023a0:	20400a44 	.word	0x20400a44
  4023a4:	0040113d 	.word	0x0040113d
  4023a8:	00405e08 	.word	0x00405e08
  4023ac:	004016b1 	.word	0x004016b1
  4023b0:	00400c75 	.word	0x00400c75

004023b4 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  4023b4:	b510      	push	{r4, lr}
  4023b6:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4023b8:	4b0f      	ldr	r3, [pc, #60]	; (4023f8 <xTimerCreateTimerTask+0x44>)
  4023ba:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4023bc:	4b0f      	ldr	r3, [pc, #60]	; (4023fc <xTimerCreateTimerTask+0x48>)
  4023be:	681b      	ldr	r3, [r3, #0]
  4023c0:	b163      	cbz	r3, 4023dc <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4023c2:	2300      	movs	r3, #0
  4023c4:	9303      	str	r3, [sp, #12]
  4023c6:	9302      	str	r3, [sp, #8]
  4023c8:	9301      	str	r3, [sp, #4]
  4023ca:	2204      	movs	r2, #4
  4023cc:	9200      	str	r2, [sp, #0]
  4023ce:	f44f 7282 	mov.w	r2, #260	; 0x104
  4023d2:	490b      	ldr	r1, [pc, #44]	; (402400 <xTimerCreateTimerTask+0x4c>)
  4023d4:	480b      	ldr	r0, [pc, #44]	; (402404 <xTimerCreateTimerTask+0x50>)
  4023d6:	4c0c      	ldr	r4, [pc, #48]	; (402408 <xTimerCreateTimerTask+0x54>)
  4023d8:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  4023da:	b950      	cbnz	r0, 4023f2 <xTimerCreateTimerTask+0x3e>
  4023dc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023e0:	b672      	cpsid	i
  4023e2:	f383 8811 	msr	BASEPRI, r3
  4023e6:	f3bf 8f6f 	isb	sy
  4023ea:	f3bf 8f4f 	dsb	sy
  4023ee:	b662      	cpsie	i
  4023f0:	e7fe      	b.n	4023f0 <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
  4023f2:	b004      	add	sp, #16
  4023f4:	bd10      	pop	{r4, pc}
  4023f6:	bf00      	nop
  4023f8:	00402335 	.word	0x00402335
  4023fc:	20400a40 	.word	0x20400a40
  402400:	00405e10 	.word	0x00405e10
  402404:	00402539 	.word	0x00402539
  402408:	004017b9 	.word	0x004017b9

0040240c <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  40240c:	b950      	cbnz	r0, 402424 <xTimerGenericCommand+0x18>
  40240e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402412:	b672      	cpsid	i
  402414:	f383 8811 	msr	BASEPRI, r3
  402418:	f3bf 8f6f 	isb	sy
  40241c:	f3bf 8f4f 	dsb	sy
  402420:	b662      	cpsie	i
  402422:	e7fe      	b.n	402422 <xTimerGenericCommand+0x16>
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  402424:	b530      	push	{r4, r5, lr}
  402426:	b085      	sub	sp, #20
  402428:	4615      	mov	r5, r2
  40242a:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  40242c:	4a0f      	ldr	r2, [pc, #60]	; (40246c <xTimerGenericCommand+0x60>)
  40242e:	6810      	ldr	r0, [r2, #0]
  402430:	b1c0      	cbz	r0, 402464 <xTimerGenericCommand+0x58>
  402432:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  402434:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402436:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402438:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  40243a:	2905      	cmp	r1, #5
  40243c:	dc0d      	bgt.n	40245a <xTimerGenericCommand+0x4e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40243e:	4b0c      	ldr	r3, [pc, #48]	; (402470 <xTimerGenericCommand+0x64>)
  402440:	4798      	blx	r3
  402442:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402444:	f04f 0300 	mov.w	r3, #0
  402448:	bf0c      	ite	eq
  40244a:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40244c:	461a      	movne	r2, r3
  40244e:	4669      	mov	r1, sp
  402450:	4806      	ldr	r0, [pc, #24]	; (40246c <xTimerGenericCommand+0x60>)
  402452:	6800      	ldr	r0, [r0, #0]
  402454:	4c07      	ldr	r4, [pc, #28]	; (402474 <xTimerGenericCommand+0x68>)
  402456:	47a0      	blx	r4
  402458:	e005      	b.n	402466 <xTimerGenericCommand+0x5a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40245a:	2300      	movs	r3, #0
  40245c:	4669      	mov	r1, sp
  40245e:	4c06      	ldr	r4, [pc, #24]	; (402478 <xTimerGenericCommand+0x6c>)
  402460:	47a0      	blx	r4
  402462:	e000      	b.n	402466 <xTimerGenericCommand+0x5a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  402464:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  402466:	b005      	add	sp, #20
  402468:	bd30      	pop	{r4, r5, pc}
  40246a:	bf00      	nop
  40246c:	20400a40 	.word	0x20400a40
  402470:	00402145 	.word	0x00402145
  402474:	004011c1 	.word	0x004011c1
  402478:	004013f5 	.word	0x004013f5

0040247c <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  40247c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402480:	b082      	sub	sp, #8
  402482:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  402484:	4b25      	ldr	r3, [pc, #148]	; (40251c <prvSampleTimeNow+0xa0>)
  402486:	4798      	blx	r3
  402488:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  40248a:	4b25      	ldr	r3, [pc, #148]	; (402520 <prvSampleTimeNow+0xa4>)
  40248c:	681b      	ldr	r3, [r3, #0]
  40248e:	4298      	cmp	r0, r3
  402490:	d23b      	bcs.n	40250a <prvSampleTimeNow+0x8e>
  402492:	e02b      	b.n	4024ec <prvSampleTimeNow+0x70>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402494:	68db      	ldr	r3, [r3, #12]
  402496:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40249a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40249c:	f104 0904 	add.w	r9, r4, #4
  4024a0:	4648      	mov	r0, r9
  4024a2:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4024a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4024a6:	4620      	mov	r0, r4
  4024a8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4024aa:	69e3      	ldr	r3, [r4, #28]
  4024ac:	2b01      	cmp	r3, #1
  4024ae:	d11f      	bne.n	4024f0 <prvSampleTimeNow+0x74>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4024b0:	69a3      	ldr	r3, [r4, #24]
  4024b2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4024b4:	459a      	cmp	sl, r3
  4024b6:	d206      	bcs.n	4024c6 <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4024b8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4024ba:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4024bc:	4649      	mov	r1, r9
  4024be:	6828      	ldr	r0, [r5, #0]
  4024c0:	4b18      	ldr	r3, [pc, #96]	; (402524 <prvSampleTimeNow+0xa8>)
  4024c2:	4798      	blx	r3
  4024c4:	e014      	b.n	4024f0 <prvSampleTimeNow+0x74>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4024c6:	2100      	movs	r1, #0
  4024c8:	9100      	str	r1, [sp, #0]
  4024ca:	460b      	mov	r3, r1
  4024cc:	4652      	mov	r2, sl
  4024ce:	4620      	mov	r0, r4
  4024d0:	4c15      	ldr	r4, [pc, #84]	; (402528 <prvSampleTimeNow+0xac>)
  4024d2:	47a0      	blx	r4
				configASSERT( xResult );
  4024d4:	b960      	cbnz	r0, 4024f0 <prvSampleTimeNow+0x74>
  4024d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024da:	b672      	cpsid	i
  4024dc:	f383 8811 	msr	BASEPRI, r3
  4024e0:	f3bf 8f6f 	isb	sy
  4024e4:	f3bf 8f4f 	dsb	sy
  4024e8:	b662      	cpsie	i
  4024ea:	e7fe      	b.n	4024ea <prvSampleTimeNow+0x6e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4024ec:	4d0f      	ldr	r5, [pc, #60]	; (40252c <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4024ee:	4e10      	ldr	r6, [pc, #64]	; (402530 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4024f0:	682b      	ldr	r3, [r5, #0]
  4024f2:	681a      	ldr	r2, [r3, #0]
  4024f4:	2a00      	cmp	r2, #0
  4024f6:	d1cd      	bne.n	402494 <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  4024f8:	4a0e      	ldr	r2, [pc, #56]	; (402534 <prvSampleTimeNow+0xb8>)
  4024fa:	6810      	ldr	r0, [r2, #0]
  4024fc:	490b      	ldr	r1, [pc, #44]	; (40252c <prvSampleTimeNow+0xb0>)
  4024fe:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402500:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  402502:	2301      	movs	r3, #1
  402504:	f8c8 3000 	str.w	r3, [r8]
  402508:	e002      	b.n	402510 <prvSampleTimeNow+0x94>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  40250a:	2300      	movs	r3, #0
  40250c:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  402510:	4b03      	ldr	r3, [pc, #12]	; (402520 <prvSampleTimeNow+0xa4>)
  402512:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  402514:	4638      	mov	r0, r7
  402516:	b002      	add	sp, #8
  402518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40251c:	00401a81 	.word	0x00401a81
  402520:	20400a3c 	.word	0x20400a3c
  402524:	00400b15 	.word	0x00400b15
  402528:	0040240d 	.word	0x0040240d
  40252c:	20400a10 	.word	0x20400a10
  402530:	00400b49 	.word	0x00400b49
  402534:	20400a44 	.word	0x20400a44

00402538 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  402538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40253c:	b089      	sub	sp, #36	; 0x24
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40253e:	4c68      	ldr	r4, [pc, #416]	; (4026e0 <prvTimerTask+0x1a8>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  402540:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 402710 <prvTimerTask+0x1d8>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402544:	4d67      	ldr	r5, [pc, #412]	; (4026e4 <prvTimerTask+0x1ac>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402546:	4b68      	ldr	r3, [pc, #416]	; (4026e8 <prvTimerTask+0x1b0>)
  402548:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40254a:	681a      	ldr	r2, [r3, #0]
  40254c:	2a00      	cmp	r2, #0
  40254e:	f000 80b5 	beq.w	4026bc <prvTimerTask+0x184>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402552:	68db      	ldr	r3, [r3, #12]
  402554:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402556:	4b65      	ldr	r3, [pc, #404]	; (4026ec <prvTimerTask+0x1b4>)
  402558:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40255a:	a804      	add	r0, sp, #16
  40255c:	4b64      	ldr	r3, [pc, #400]	; (4026f0 <prvTimerTask+0x1b8>)
  40255e:	4798      	blx	r3
  402560:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402562:	9b04      	ldr	r3, [sp, #16]
  402564:	2b00      	cmp	r3, #0
  402566:	d144      	bne.n	4025f2 <prvTimerTask+0xba>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402568:	42b0      	cmp	r0, r6
  40256a:	d330      	bcc.n	4025ce <prvTimerTask+0x96>
			{
				( void ) xTaskResumeAll();
  40256c:	4b61      	ldr	r3, [pc, #388]	; (4026f4 <prvTimerTask+0x1bc>)
  40256e:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402570:	4b5d      	ldr	r3, [pc, #372]	; (4026e8 <prvTimerTask+0x1b0>)
  402572:	681b      	ldr	r3, [r3, #0]
  402574:	68db      	ldr	r3, [r3, #12]
  402576:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40257a:	f109 0004 	add.w	r0, r9, #4
  40257e:	4b5e      	ldr	r3, [pc, #376]	; (4026f8 <prvTimerTask+0x1c0>)
  402580:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402582:	f8d9 301c 	ldr.w	r3, [r9, #28]
  402586:	2b01      	cmp	r3, #1
  402588:	d11c      	bne.n	4025c4 <prvTimerTask+0x8c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40258a:	f8d9 1018 	ldr.w	r1, [r9, #24]
  40258e:	4633      	mov	r3, r6
  402590:	463a      	mov	r2, r7
  402592:	4431      	add	r1, r6
  402594:	4648      	mov	r0, r9
  402596:	4f59      	ldr	r7, [pc, #356]	; (4026fc <prvTimerTask+0x1c4>)
  402598:	47b8      	blx	r7
  40259a:	2801      	cmp	r0, #1
  40259c:	d112      	bne.n	4025c4 <prvTimerTask+0x8c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40259e:	2100      	movs	r1, #0
  4025a0:	9100      	str	r1, [sp, #0]
  4025a2:	460b      	mov	r3, r1
  4025a4:	4632      	mov	r2, r6
  4025a6:	4648      	mov	r0, r9
  4025a8:	4e55      	ldr	r6, [pc, #340]	; (402700 <prvTimerTask+0x1c8>)
  4025aa:	47b0      	blx	r6
			configASSERT( xResult );
  4025ac:	b950      	cbnz	r0, 4025c4 <prvTimerTask+0x8c>
  4025ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025b2:	b672      	cpsid	i
  4025b4:	f383 8811 	msr	BASEPRI, r3
  4025b8:	f3bf 8f6f 	isb	sy
  4025bc:	f3bf 8f4f 	dsb	sy
  4025c0:	b662      	cpsie	i
  4025c2:	e7fe      	b.n	4025c2 <prvTimerTask+0x8a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4025c4:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  4025c8:	4648      	mov	r0, r9
  4025ca:	4798      	blx	r3
  4025cc:	e06d      	b.n	4026aa <prvTimerTask+0x172>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4025ce:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4025d0:	1bf1      	subs	r1, r6, r7
  4025d2:	6820      	ldr	r0, [r4, #0]
  4025d4:	4b4b      	ldr	r3, [pc, #300]	; (402704 <prvTimerTask+0x1cc>)
  4025d6:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  4025d8:	4b46      	ldr	r3, [pc, #280]	; (4026f4 <prvTimerTask+0x1bc>)
  4025da:	4798      	blx	r3
  4025dc:	2800      	cmp	r0, #0
  4025de:	d164      	bne.n	4026aa <prvTimerTask+0x172>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  4025e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4025e4:	f8c8 3000 	str.w	r3, [r8]
  4025e8:	f3bf 8f4f 	dsb	sy
  4025ec:	f3bf 8f6f 	isb	sy
  4025f0:	e05b      	b.n	4026aa <prvTimerTask+0x172>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  4025f2:	4b40      	ldr	r3, [pc, #256]	; (4026f4 <prvTimerTask+0x1bc>)
  4025f4:	4798      	blx	r3
  4025f6:	e058      	b.n	4026aa <prvTimerTask+0x172>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4025f8:	9b04      	ldr	r3, [sp, #16]
  4025fa:	2b00      	cmp	r3, #0
  4025fc:	da06      	bge.n	40260c <prvTimerTask+0xd4>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4025fe:	9907      	ldr	r1, [sp, #28]
  402600:	9806      	ldr	r0, [sp, #24]
  402602:	9b05      	ldr	r3, [sp, #20]
  402604:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402606:	9b04      	ldr	r3, [sp, #16]
  402608:	2b00      	cmp	r3, #0
  40260a:	db4f      	blt.n	4026ac <prvTimerTask+0x174>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40260c:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40260e:	6973      	ldr	r3, [r6, #20]
  402610:	b10b      	cbz	r3, 402616 <prvTimerTask+0xde>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402612:	1d30      	adds	r0, r6, #4
  402614:	47b8      	blx	r7
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402616:	a803      	add	r0, sp, #12
  402618:	4b35      	ldr	r3, [pc, #212]	; (4026f0 <prvTimerTask+0x1b8>)
  40261a:	4798      	blx	r3

			switch( xMessage.xMessageID )
  40261c:	9b04      	ldr	r3, [sp, #16]
  40261e:	2b09      	cmp	r3, #9
  402620:	d844      	bhi.n	4026ac <prvTimerTask+0x174>
  402622:	e8df f003 	tbb	[pc, r3]
  402626:	0505      	.short	0x0505
  402628:	3f2a4305 	.word	0x3f2a4305
  40262c:	2a430505 	.word	0x2a430505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402630:	9f05      	ldr	r7, [sp, #20]
  402632:	69b1      	ldr	r1, [r6, #24]
  402634:	463b      	mov	r3, r7
  402636:	4602      	mov	r2, r0
  402638:	4439      	add	r1, r7
  40263a:	4630      	mov	r0, r6
  40263c:	4f2f      	ldr	r7, [pc, #188]	; (4026fc <prvTimerTask+0x1c4>)
  40263e:	47b8      	blx	r7
  402640:	2801      	cmp	r0, #1
  402642:	d132      	bne.n	4026aa <prvTimerTask+0x172>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402644:	6a73      	ldr	r3, [r6, #36]	; 0x24
  402646:	4630      	mov	r0, r6
  402648:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40264a:	69f3      	ldr	r3, [r6, #28]
  40264c:	2b01      	cmp	r3, #1
  40264e:	d12c      	bne.n	4026aa <prvTimerTask+0x172>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402650:	69b2      	ldr	r2, [r6, #24]
  402652:	2100      	movs	r1, #0
  402654:	9100      	str	r1, [sp, #0]
  402656:	460b      	mov	r3, r1
  402658:	9805      	ldr	r0, [sp, #20]
  40265a:	4402      	add	r2, r0
  40265c:	4630      	mov	r0, r6
  40265e:	4e28      	ldr	r6, [pc, #160]	; (402700 <prvTimerTask+0x1c8>)
  402660:	47b0      	blx	r6
							configASSERT( xResult );
  402662:	bb10      	cbnz	r0, 4026aa <prvTimerTask+0x172>
  402664:	f04f 0380 	mov.w	r3, #128	; 0x80
  402668:	b672      	cpsid	i
  40266a:	f383 8811 	msr	BASEPRI, r3
  40266e:	f3bf 8f6f 	isb	sy
  402672:	f3bf 8f4f 	dsb	sy
  402676:	b662      	cpsie	i
  402678:	e7fe      	b.n	402678 <prvTimerTask+0x140>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  40267a:	9905      	ldr	r1, [sp, #20]
  40267c:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40267e:	b951      	cbnz	r1, 402696 <prvTimerTask+0x15e>
  402680:	f04f 0380 	mov.w	r3, #128	; 0x80
  402684:	b672      	cpsid	i
  402686:	f383 8811 	msr	BASEPRI, r3
  40268a:	f3bf 8f6f 	isb	sy
  40268e:	f3bf 8f4f 	dsb	sy
  402692:	b662      	cpsie	i
  402694:	e7fe      	b.n	402694 <prvTimerTask+0x15c>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402696:	4603      	mov	r3, r0
  402698:	4602      	mov	r2, r0
  40269a:	4401      	add	r1, r0
  40269c:	4630      	mov	r0, r6
  40269e:	4e17      	ldr	r6, [pc, #92]	; (4026fc <prvTimerTask+0x1c4>)
  4026a0:	47b0      	blx	r6
  4026a2:	e002      	b.n	4026aa <prvTimerTask+0x172>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  4026a4:	4630      	mov	r0, r6
  4026a6:	4b18      	ldr	r3, [pc, #96]	; (402708 <prvTimerTask+0x1d0>)
  4026a8:	4798      	blx	r3
			pxTimer = xMessage.u.xTimerParameters.pxTimer;

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4026aa:	4f13      	ldr	r7, [pc, #76]	; (4026f8 <prvTimerTask+0x1c0>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4026ac:	2300      	movs	r3, #0
  4026ae:	461a      	mov	r2, r3
  4026b0:	a904      	add	r1, sp, #16
  4026b2:	6820      	ldr	r0, [r4, #0]
  4026b4:	47a8      	blx	r5
  4026b6:	2800      	cmp	r0, #0
  4026b8:	d19e      	bne.n	4025f8 <prvTimerTask+0xc0>
  4026ba:	e744      	b.n	402546 <prvTimerTask+0xe>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  4026bc:	4b0b      	ldr	r3, [pc, #44]	; (4026ec <prvTimerTask+0x1b4>)
  4026be:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4026c0:	a804      	add	r0, sp, #16
  4026c2:	4b0b      	ldr	r3, [pc, #44]	; (4026f0 <prvTimerTask+0x1b8>)
  4026c4:	4798      	blx	r3
  4026c6:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4026c8:	9b04      	ldr	r3, [sp, #16]
  4026ca:	2b00      	cmp	r3, #0
  4026cc:	d191      	bne.n	4025f2 <prvTimerTask+0xba>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4026ce:	4b0f      	ldr	r3, [pc, #60]	; (40270c <prvTimerTask+0x1d4>)
  4026d0:	681b      	ldr	r3, [r3, #0]
  4026d2:	681a      	ldr	r2, [r3, #0]
  4026d4:	fab2 f282 	clz	r2, r2
  4026d8:	0952      	lsrs	r2, r2, #5
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  4026da:	2600      	movs	r6, #0
  4026dc:	e778      	b.n	4025d0 <prvTimerTask+0x98>
  4026de:	bf00      	nop
  4026e0:	20400a40 	.word	0x20400a40
  4026e4:	004014ed 	.word	0x004014ed
  4026e8:	20400a10 	.word	0x20400a10
  4026ec:	00401a71 	.word	0x00401a71
  4026f0:	0040247d 	.word	0x0040247d
  4026f4:	00401bd5 	.word	0x00401bd5
  4026f8:	00400b49 	.word	0x00400b49
  4026fc:	004022e9 	.word	0x004022e9
  402700:	0040240d 	.word	0x0040240d
  402704:	004016e5 	.word	0x004016e5
  402708:	00400eb5 	.word	0x00400eb5
  40270c:	20400a44 	.word	0x20400a44
  402710:	e000ed04 	.word	0xe000ed04

00402714 <task_but>:

	}
}

static void task_but(void *pvParameters)
{
  402714:	b580      	push	{r7, lr}
		#if SAM4CM
		#else
		/**
		*  Toggle status But
		*/
		if(!(pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIN_MASK))){
  402716:	4e22      	ldr	r6, [pc, #136]	; (4027a0 <task_but+0x8c>)
  402718:	4d22      	ldr	r5, [pc, #136]	; (4027a4 <task_but+0x90>)

				}
				is_but_pressed = 1;
			}
		} else {
				is_but_pressed = 0;
  40271a:	4c23      	ldr	r4, [pc, #140]	; (4027a8 <task_but+0x94>)
		#if SAM4CM
		#else
		/**
		*  Toggle status But
		*/
		if(!(pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIN_MASK))){
  40271c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402720:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402724:	4630      	mov	r0, r6
  402726:	47a8      	blx	r5
  402728:	2800      	cmp	r0, #0
  40272a:	d135      	bne.n	402798 <task_but+0x84>
			if(!is_but_pressed){
  40272c:	6823      	ldr	r3, [r4, #0]
  40272e:	2b00      	cmp	r3, #0
  402730:	d1f4      	bne.n	40271c <task_but+0x8>
				if (is_led_blinking){
  402732:	4b1e      	ldr	r3, [pc, #120]	; (4027ac <task_but+0x98>)
  402734:	681b      	ldr	r3, [r3, #0]
  402736:	b1b3      	cbz	r3, 402766 <task_but+0x52>
					xSemaphoreTake(xSemaphore1, ( TickType_t ) 10);
  402738:	2300      	movs	r3, #0
  40273a:	220a      	movs	r2, #10
  40273c:	4619      	mov	r1, r3
  40273e:	481c      	ldr	r0, [pc, #112]	; (4027b0 <task_but+0x9c>)
  402740:	6800      	ldr	r0, [r0, #0]
  402742:	4f1c      	ldr	r7, [pc, #112]	; (4027b4 <task_but+0xa0>)
  402744:	47b8      	blx	r7
					xSemaphoreTake(xSemaphore2, ( TickType_t ) 10);
  402746:	2300      	movs	r3, #0
  402748:	220a      	movs	r2, #10
  40274a:	4619      	mov	r1, r3
  40274c:	481a      	ldr	r0, [pc, #104]	; (4027b8 <task_but+0xa4>)
  40274e:	6800      	ldr	r0, [r0, #0]
  402750:	47b8      	blx	r7
					xSemaphoreTake(xSemaphore3, ( TickType_t ) 10);
  402752:	2300      	movs	r3, #0
  402754:	220a      	movs	r2, #10
  402756:	4619      	mov	r1, r3
  402758:	4818      	ldr	r0, [pc, #96]	; (4027bc <task_but+0xa8>)
  40275a:	6800      	ldr	r0, [r0, #0]
  40275c:	47b8      	blx	r7

					is_led_blinking = 0;
  40275e:	2200      	movs	r2, #0
  402760:	4b12      	ldr	r3, [pc, #72]	; (4027ac <task_but+0x98>)
  402762:	601a      	str	r2, [r3, #0]
  402764:	e015      	b.n	402792 <task_but+0x7e>
				} else {
					xSemaphoreGive(xSemaphore1);
  402766:	2300      	movs	r3, #0
  402768:	461a      	mov	r2, r3
  40276a:	4619      	mov	r1, r3
  40276c:	4810      	ldr	r0, [pc, #64]	; (4027b0 <task_but+0x9c>)
  40276e:	6800      	ldr	r0, [r0, #0]
  402770:	4f13      	ldr	r7, [pc, #76]	; (4027c0 <task_but+0xac>)
  402772:	47b8      	blx	r7
					xSemaphoreGive(xSemaphore2);
  402774:	2300      	movs	r3, #0
  402776:	461a      	mov	r2, r3
  402778:	4619      	mov	r1, r3
  40277a:	480f      	ldr	r0, [pc, #60]	; (4027b8 <task_but+0xa4>)
  40277c:	6800      	ldr	r0, [r0, #0]
  40277e:	47b8      	blx	r7
					xSemaphoreGive(xSemaphore3);
  402780:	2300      	movs	r3, #0
  402782:	461a      	mov	r2, r3
  402784:	4619      	mov	r1, r3
  402786:	480d      	ldr	r0, [pc, #52]	; (4027bc <task_but+0xa8>)
  402788:	6800      	ldr	r0, [r0, #0]
  40278a:	47b8      	blx	r7
					is_led_blinking = 1;
  40278c:	2201      	movs	r2, #1
  40278e:	4b07      	ldr	r3, [pc, #28]	; (4027ac <task_but+0x98>)
  402790:	601a      	str	r2, [r3, #0]

				}
				is_but_pressed = 1;
  402792:	2301      	movs	r3, #1
  402794:	6023      	str	r3, [r4, #0]
  402796:	e7c1      	b.n	40271c <task_but+0x8>
			}
		} else {
				is_but_pressed = 0;
  402798:	2300      	movs	r3, #0
  40279a:	6023      	str	r3, [r4, #0]
  40279c:	e7be      	b.n	40271c <task_but+0x8>
  40279e:	bf00      	nop
  4027a0:	400e1400 	.word	0x400e1400
  4027a4:	00400425 	.word	0x00400425
  4027a8:	20400a48 	.word	0x20400a48
  4027ac:	2040000c 	.word	0x2040000c
  4027b0:	20400a4c 	.word	0x20400a4c
  4027b4:	004014ed 	.word	0x004014ed
  4027b8:	20400a50 	.word	0x20400a50
  4027bc:	20400a54 	.word	0x20400a54
  4027c0:	004011c1 	.word	0x004011c1

004027c4 <task_led3>:
		}
	}
}

static void task_led3(void *pvParameters)
{
  4027c4:	b580      	push	{r7, lr}
	UNUSED(pvParameters);
	xSemaphore3 = xSemaphoreCreateMutex();
  4027c6:	2001      	movs	r0, #1
  4027c8:	4b16      	ldr	r3, [pc, #88]	; (402824 <task_led3+0x60>)
  4027ca:	4798      	blx	r3
  4027cc:	4b16      	ldr	r3, [pc, #88]	; (402828 <task_led3+0x64>)
  4027ce:	6018      	str	r0, [r3, #0]
		#if SAM4CM
		#else
		/**
		*  Toggle status led
		*/
		 if( xSemaphore3 != NULL )
  4027d0:	461c      	mov	r4, r3
		{
			/* See if we can obtain the semaphore.  If the semaphore is not
			available wait 10 ticks to see if it becomes free. */
			if( xSemaphoreTake( xSemaphore3, ( TickType_t ) 10 ) == pdTRUE )
  4027d2:	4e16      	ldr	r6, [pc, #88]	; (40282c <task_led3+0x68>)
				semaphore. */
				xSemaphoreGive(xSemaphore3);
			}
			else
			{
				pio_set(LED3_PIO,LED3_PIN_MASK);
  4027d4:	4d16      	ldr	r5, [pc, #88]	; (402830 <task_led3+0x6c>)
		#if SAM4CM
		#else
		/**
		*  Toggle status led
		*/
		 if( xSemaphore3 != NULL )
  4027d6:	6820      	ldr	r0, [r4, #0]
  4027d8:	2800      	cmp	r0, #0
  4027da:	d0fd      	beq.n	4027d8 <task_led3+0x14>
		{
			/* See if we can obtain the semaphore.  If the semaphore is not
			available wait 10 ticks to see if it becomes free. */
			if( xSemaphoreTake( xSemaphore3, ( TickType_t ) 10 ) == pdTRUE )
  4027dc:	2300      	movs	r3, #0
  4027de:	220a      	movs	r2, #10
  4027e0:	4619      	mov	r1, r3
  4027e2:	47b0      	blx	r6
  4027e4:	2801      	cmp	r0, #1
  4027e6:	d114      	bne.n	402812 <task_led3+0x4e>
			{
				/* We were able to obtain the semaphore and can now access the
				shared resource. */
				if(pio_get_output_data_status(LED3_PIO, LED3_PIN_MASK))
  4027e8:	2104      	movs	r1, #4
  4027ea:	4628      	mov	r0, r5
  4027ec:	4b11      	ldr	r3, [pc, #68]	; (402834 <task_led3+0x70>)
  4027ee:	4798      	blx	r3
  4027f0:	b120      	cbz	r0, 4027fc <task_led3+0x38>
				pio_clear(LED3_PIO, LED3_PIN_MASK);
  4027f2:	2104      	movs	r1, #4
  4027f4:	4628      	mov	r0, r5
  4027f6:	4b10      	ldr	r3, [pc, #64]	; (402838 <task_led3+0x74>)
  4027f8:	4798      	blx	r3
  4027fa:	e003      	b.n	402804 <task_led3+0x40>
				else
				pio_set(LED3_PIO,LED3_PIN_MASK);
  4027fc:	2104      	movs	r1, #4
  4027fe:	4628      	mov	r0, r5
  402800:	4b0e      	ldr	r3, [pc, #56]	; (40283c <task_led3+0x78>)
  402802:	4798      	blx	r3
				#endif

				/* We have finished accessing the shared resource.  Release the
				semaphore. */
				xSemaphoreGive(xSemaphore3);
  402804:	2300      	movs	r3, #0
  402806:	461a      	mov	r2, r3
  402808:	4619      	mov	r1, r3
  40280a:	6820      	ldr	r0, [r4, #0]
  40280c:	4f0c      	ldr	r7, [pc, #48]	; (402840 <task_led3+0x7c>)
  40280e:	47b8      	blx	r7
  402810:	e003      	b.n	40281a <task_led3+0x56>
			}
			else
			{
				pio_set(LED3_PIO,LED3_PIN_MASK);
  402812:	2104      	movs	r1, #4
  402814:	4628      	mov	r0, r5
  402816:	4b09      	ldr	r3, [pc, #36]	; (40283c <task_led3+0x78>)
  402818:	4798      	blx	r3

			}
			vTaskDelay(100);
  40281a:	2064      	movs	r0, #100	; 0x64
  40281c:	4b09      	ldr	r3, [pc, #36]	; (402844 <task_led3+0x80>)
  40281e:	4798      	blx	r3
  402820:	e7d9      	b.n	4027d6 <task_led3+0x12>
  402822:	bf00      	nop
  402824:	0040139d 	.word	0x0040139d
  402828:	20400a54 	.word	0x20400a54
  40282c:	004014ed 	.word	0x004014ed
  402830:	400e1000 	.word	0x400e1000
  402834:	004004a1 	.word	0x004004a1
  402838:	00400421 	.word	0x00400421
  40283c:	0040041d 	.word	0x0040041d
  402840:	004011c1 	.word	0x004011c1
  402844:	00401ced 	.word	0x00401ced

00402848 <task_led2>:
	}
}


static void task_led2(void *pvParameters)
{
  402848:	b580      	push	{r7, lr}
	UNUSED(pvParameters);
	xSemaphore2 = xSemaphoreCreateMutex();
  40284a:	2001      	movs	r0, #1
  40284c:	4b18      	ldr	r3, [pc, #96]	; (4028b0 <task_led2+0x68>)
  40284e:	4798      	blx	r3
  402850:	4b18      	ldr	r3, [pc, #96]	; (4028b4 <task_led2+0x6c>)
  402852:	6018      	str	r0, [r3, #0]
		#if SAM4CM
		#else
		/**
		*  Toggle status led
		*/
		 if( xSemaphore2 != NULL )
  402854:	461c      	mov	r4, r3
		{
			/* See if we can obtain the semaphore.  If the semaphore is not
			available wait 10 ticks to see if it becomes free. */
			if( xSemaphoreTake( xSemaphore2, ( TickType_t ) 10 ) == pdTRUE )
  402856:	4e18      	ldr	r6, [pc, #96]	; (4028b8 <task_led2+0x70>)
				semaphore. */
				xSemaphoreGive(xSemaphore2);
			}
			else
			{
				pio_set(LED2_PIO,LED2_PIN_MASK);
  402858:	4d18      	ldr	r5, [pc, #96]	; (4028bc <task_led2+0x74>)
		#if SAM4CM
		#else
		/**
		*  Toggle status led
		*/
		 if( xSemaphore2 != NULL )
  40285a:	6820      	ldr	r0, [r4, #0]
  40285c:	2800      	cmp	r0, #0
  40285e:	d0fd      	beq.n	40285c <task_led2+0x14>
		{
			/* See if we can obtain the semaphore.  If the semaphore is not
			available wait 10 ticks to see if it becomes free. */
			if( xSemaphoreTake( xSemaphore2, ( TickType_t ) 10 ) == pdTRUE )
  402860:	2300      	movs	r3, #0
  402862:	220a      	movs	r2, #10
  402864:	4619      	mov	r1, r3
  402866:	47b0      	blx	r6
  402868:	2801      	cmp	r0, #1
  40286a:	d117      	bne.n	40289c <task_led2+0x54>
			{
				/* We were able to obtain the semaphore and can now access the
				shared resource. */
				if(pio_get_output_data_status(LED2_PIO, LED2_PIN_MASK))
  40286c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402870:	4628      	mov	r0, r5
  402872:	4b13      	ldr	r3, [pc, #76]	; (4028c0 <task_led2+0x78>)
  402874:	4798      	blx	r3
  402876:	b128      	cbz	r0, 402884 <task_led2+0x3c>
				pio_clear(LED2_PIO, LED2_PIN_MASK);
  402878:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40287c:	4628      	mov	r0, r5
  40287e:	4b11      	ldr	r3, [pc, #68]	; (4028c4 <task_led2+0x7c>)
  402880:	4798      	blx	r3
  402882:	e004      	b.n	40288e <task_led2+0x46>
				else
				pio_set(LED2_PIO,LED2_PIN_MASK);
  402884:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402888:	4628      	mov	r0, r5
  40288a:	4b0f      	ldr	r3, [pc, #60]	; (4028c8 <task_led2+0x80>)
  40288c:	4798      	blx	r3
				#endif

				/* We have finished accessing the shared resource.  Release the
				semaphore. */
				xSemaphoreGive(xSemaphore2);
  40288e:	2300      	movs	r3, #0
  402890:	461a      	mov	r2, r3
  402892:	4619      	mov	r1, r3
  402894:	6820      	ldr	r0, [r4, #0]
  402896:	4f0d      	ldr	r7, [pc, #52]	; (4028cc <task_led2+0x84>)
  402898:	47b8      	blx	r7
  40289a:	e004      	b.n	4028a6 <task_led2+0x5e>
			}
			else
			{
				pio_set(LED2_PIO,LED2_PIN_MASK);
  40289c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4028a0:	4628      	mov	r0, r5
  4028a2:	4b09      	ldr	r3, [pc, #36]	; (4028c8 <task_led2+0x80>)
  4028a4:	4798      	blx	r3

			}
			vTaskDelay(800);
  4028a6:	f44f 7048 	mov.w	r0, #800	; 0x320
  4028aa:	4b09      	ldr	r3, [pc, #36]	; (4028d0 <task_led2+0x88>)
  4028ac:	4798      	blx	r3
  4028ae:	e7d4      	b.n	40285a <task_led2+0x12>
  4028b0:	0040139d 	.word	0x0040139d
  4028b4:	20400a50 	.word	0x20400a50
  4028b8:	004014ed 	.word	0x004014ed
  4028bc:	400e1200 	.word	0x400e1200
  4028c0:	004004a1 	.word	0x004004a1
  4028c4:	00400421 	.word	0x00400421
  4028c8:	0040041d 	.word	0x0040041d
  4028cc:	004011c1 	.word	0x004011c1
  4028d0:	00401ced 	.word	0x00401ced

004028d4 <task_led1>:
	}
}

static void task_led1(void *pvParameters)

{
  4028d4:	b580      	push	{r7, lr}
	xSemaphore1 = xSemaphoreCreateMutex();
  4028d6:	2001      	movs	r0, #1
  4028d8:	4b16      	ldr	r3, [pc, #88]	; (402934 <task_led1+0x60>)
  4028da:	4798      	blx	r3
  4028dc:	4b16      	ldr	r3, [pc, #88]	; (402938 <task_led1+0x64>)
  4028de:	6018      	str	r0, [r3, #0]
		#if SAM4CM
		#else
/**
		*  Toggle status led
		*/
		 if( xSemaphore1 != NULL )
  4028e0:	461c      	mov	r4, r3
		{
			/* See if we can obtain the semaphore.  If the semaphore is not
			available wait 10 ticks to see if it becomes free. */
			if( xSemaphoreTake( xSemaphore1, ( TickType_t ) 10 ) == pdTRUE )
  4028e2:	4e16      	ldr	r6, [pc, #88]	; (40293c <task_led1+0x68>)
				semaphore. */
				xSemaphoreGive(xSemaphore1);
			}
			else
			{
				pio_set(LED1_PIO,LED1_PIN_MASK);
  4028e4:	4d16      	ldr	r5, [pc, #88]	; (402940 <task_led1+0x6c>)
		#if SAM4CM
		#else
/**
		*  Toggle status led
		*/
		 if( xSemaphore1 != NULL )
  4028e6:	6820      	ldr	r0, [r4, #0]
  4028e8:	2800      	cmp	r0, #0
  4028ea:	d0fd      	beq.n	4028e8 <task_led1+0x14>
		{
			/* See if we can obtain the semaphore.  If the semaphore is not
			available wait 10 ticks to see if it becomes free. */
			if( xSemaphoreTake( xSemaphore1, ( TickType_t ) 10 ) == pdTRUE )
  4028ec:	2300      	movs	r3, #0
  4028ee:	220a      	movs	r2, #10
  4028f0:	4619      	mov	r1, r3
  4028f2:	47b0      	blx	r6
  4028f4:	2801      	cmp	r0, #1
  4028f6:	d114      	bne.n	402922 <task_led1+0x4e>
			{
				/* We were able to obtain the semaphore and can now access the
				shared resource. */
				if(pio_get_output_data_status(LED1_PIO, LED1_PIN_MASK))
  4028f8:	2101      	movs	r1, #1
  4028fa:	4628      	mov	r0, r5
  4028fc:	4b11      	ldr	r3, [pc, #68]	; (402944 <task_led1+0x70>)
  4028fe:	4798      	blx	r3
  402900:	b120      	cbz	r0, 40290c <task_led1+0x38>
				pio_clear(LED1_PIO, LED1_PIN_MASK);
  402902:	2101      	movs	r1, #1
  402904:	4628      	mov	r0, r5
  402906:	4b10      	ldr	r3, [pc, #64]	; (402948 <task_led1+0x74>)
  402908:	4798      	blx	r3
  40290a:	e003      	b.n	402914 <task_led1+0x40>
				else
				pio_set(LED1_PIO,LED1_PIN_MASK);
  40290c:	2101      	movs	r1, #1
  40290e:	4628      	mov	r0, r5
  402910:	4b0e      	ldr	r3, [pc, #56]	; (40294c <task_led1+0x78>)
  402912:	4798      	blx	r3
				#endif

				/* We have finished accessing the shared resource.  Release the
				semaphore. */
				xSemaphoreGive(xSemaphore1);
  402914:	2300      	movs	r3, #0
  402916:	461a      	mov	r2, r3
  402918:	4619      	mov	r1, r3
  40291a:	6820      	ldr	r0, [r4, #0]
  40291c:	4f0c      	ldr	r7, [pc, #48]	; (402950 <task_led1+0x7c>)
  40291e:	47b8      	blx	r7
  402920:	e003      	b.n	40292a <task_led1+0x56>
			}
			else
			{
				pio_set(LED1_PIO,LED1_PIN_MASK);
  402922:	2101      	movs	r1, #1
  402924:	4628      	mov	r0, r5
  402926:	4b09      	ldr	r3, [pc, #36]	; (40294c <task_led1+0x78>)
  402928:	4798      	blx	r3

			}
			vTaskDelay(500);
  40292a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  40292e:	4b09      	ldr	r3, [pc, #36]	; (402954 <task_led1+0x80>)
  402930:	4798      	blx	r3
  402932:	e7d8      	b.n	4028e6 <task_led1+0x12>
  402934:	0040139d 	.word	0x0040139d
  402938:	20400a4c 	.word	0x20400a4c
  40293c:	004014ed 	.word	0x004014ed
  402940:	400e0e00 	.word	0x400e0e00
  402944:	004004a1 	.word	0x004004a1
  402948:	00400421 	.word	0x00400421
  40294c:	0040041d 	.word	0x0040041d
  402950:	004011c1 	.word	0x004011c1
  402954:	00401ced 	.word	0x00401ced

00402958 <task_led>:

/**
 * \brief This task, when activated, make LED blink at a fixed rate
 */
static void task_led(void *pvParameters)
{
  402958:	b508      	push	{r3, lr}
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40295a:	4c07      	ldr	r4, [pc, #28]	; (402978 <task_led+0x20>)
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  40295c:	f44f 7680 	mov.w	r6, #256	; 0x100
	#if SAM4CM
		LED_Toggle(LED4);
	#else
		LED_Toggle(LED0);
	#endif
		vTaskDelay(500);
  402960:	4d06      	ldr	r5, [pc, #24]	; (40297c <task_led+0x24>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  402962:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402964:	f413 7f80 	tst.w	r3, #256	; 0x100
  402968:	d001      	beq.n	40296e <task_led+0x16>
		port->PIO_CODR = mask;
  40296a:	6366      	str	r6, [r4, #52]	; 0x34
  40296c:	e000      	b.n	402970 <task_led+0x18>
	} else {
		port->PIO_SODR = mask;
  40296e:	6326      	str	r6, [r4, #48]	; 0x30
  402970:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402974:	47a8      	blx	r5
	}
  402976:	e7f4      	b.n	402962 <task_led+0xa>
  402978:	400e1200 	.word	0x400e1200
  40297c:	00401ced 	.word	0x00401ced

00402980 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402980:	b5f0      	push	{r4, r5, r6, r7, lr}
  402982:	b083      	sub	sp, #12
  402984:	4605      	mov	r5, r0
  402986:	460c      	mov	r4, r1
	uint32_t val = 0;
  402988:	2300      	movs	r3, #0
  40298a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40298c:	4b29      	ldr	r3, [pc, #164]	; (402a34 <usart_serial_getchar+0xb4>)
  40298e:	4298      	cmp	r0, r3
  402990:	d107      	bne.n	4029a2 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  402992:	461f      	mov	r7, r3
  402994:	4e28      	ldr	r6, [pc, #160]	; (402a38 <usart_serial_getchar+0xb8>)
  402996:	4621      	mov	r1, r4
  402998:	4638      	mov	r0, r7
  40299a:	47b0      	blx	r6
  40299c:	2800      	cmp	r0, #0
  40299e:	d1fa      	bne.n	402996 <usart_serial_getchar+0x16>
  4029a0:	e015      	b.n	4029ce <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4029a2:	4b26      	ldr	r3, [pc, #152]	; (402a3c <usart_serial_getchar+0xbc>)
  4029a4:	4298      	cmp	r0, r3
  4029a6:	d107      	bne.n	4029b8 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  4029a8:	461f      	mov	r7, r3
  4029aa:	4e23      	ldr	r6, [pc, #140]	; (402a38 <usart_serial_getchar+0xb8>)
  4029ac:	4621      	mov	r1, r4
  4029ae:	4638      	mov	r0, r7
  4029b0:	47b0      	blx	r6
  4029b2:	2800      	cmp	r0, #0
  4029b4:	d1fa      	bne.n	4029ac <usart_serial_getchar+0x2c>
  4029b6:	e015      	b.n	4029e4 <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4029b8:	4b21      	ldr	r3, [pc, #132]	; (402a40 <usart_serial_getchar+0xc0>)
  4029ba:	4298      	cmp	r0, r3
  4029bc:	d107      	bne.n	4029ce <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  4029be:	461f      	mov	r7, r3
  4029c0:	4e1d      	ldr	r6, [pc, #116]	; (402a38 <usart_serial_getchar+0xb8>)
  4029c2:	4621      	mov	r1, r4
  4029c4:	4638      	mov	r0, r7
  4029c6:	47b0      	blx	r6
  4029c8:	2800      	cmp	r0, #0
  4029ca:	d1fa      	bne.n	4029c2 <usart_serial_getchar+0x42>
  4029cc:	e017      	b.n	4029fe <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4029ce:	4b1d      	ldr	r3, [pc, #116]	; (402a44 <usart_serial_getchar+0xc4>)
  4029d0:	429d      	cmp	r5, r3
  4029d2:	d107      	bne.n	4029e4 <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  4029d4:	461f      	mov	r7, r3
  4029d6:	4e18      	ldr	r6, [pc, #96]	; (402a38 <usart_serial_getchar+0xb8>)
  4029d8:	4621      	mov	r1, r4
  4029da:	4638      	mov	r0, r7
  4029dc:	47b0      	blx	r6
  4029de:	2800      	cmp	r0, #0
  4029e0:	d1fa      	bne.n	4029d8 <usart_serial_getchar+0x58>
  4029e2:	e019      	b.n	402a18 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4029e4:	4b18      	ldr	r3, [pc, #96]	; (402a48 <usart_serial_getchar+0xc8>)
  4029e6:	429d      	cmp	r5, r3
  4029e8:	d109      	bne.n	4029fe <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  4029ea:	461e      	mov	r6, r3
  4029ec:	4d17      	ldr	r5, [pc, #92]	; (402a4c <usart_serial_getchar+0xcc>)
  4029ee:	a901      	add	r1, sp, #4
  4029f0:	4630      	mov	r0, r6
  4029f2:	47a8      	blx	r5
  4029f4:	2800      	cmp	r0, #0
  4029f6:	d1fa      	bne.n	4029ee <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  4029f8:	9b01      	ldr	r3, [sp, #4]
  4029fa:	7023      	strb	r3, [r4, #0]
  4029fc:	e018      	b.n	402a30 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4029fe:	4b14      	ldr	r3, [pc, #80]	; (402a50 <usart_serial_getchar+0xd0>)
  402a00:	429d      	cmp	r5, r3
  402a02:	d109      	bne.n	402a18 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  402a04:	461e      	mov	r6, r3
  402a06:	4d11      	ldr	r5, [pc, #68]	; (402a4c <usart_serial_getchar+0xcc>)
  402a08:	a901      	add	r1, sp, #4
  402a0a:	4630      	mov	r0, r6
  402a0c:	47a8      	blx	r5
  402a0e:	2800      	cmp	r0, #0
  402a10:	d1fa      	bne.n	402a08 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  402a12:	9b01      	ldr	r3, [sp, #4]
  402a14:	7023      	strb	r3, [r4, #0]
  402a16:	e00b      	b.n	402a30 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402a18:	4b0e      	ldr	r3, [pc, #56]	; (402a54 <usart_serial_getchar+0xd4>)
  402a1a:	429d      	cmp	r5, r3
  402a1c:	d108      	bne.n	402a30 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  402a1e:	461e      	mov	r6, r3
  402a20:	4d0a      	ldr	r5, [pc, #40]	; (402a4c <usart_serial_getchar+0xcc>)
  402a22:	a901      	add	r1, sp, #4
  402a24:	4630      	mov	r0, r6
  402a26:	47a8      	blx	r5
  402a28:	2800      	cmp	r0, #0
  402a2a:	d1fa      	bne.n	402a22 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  402a2c:	9b01      	ldr	r3, [sp, #4]
  402a2e:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402a30:	b003      	add	sp, #12
  402a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402a34:	400e0800 	.word	0x400e0800
  402a38:	004006f9 	.word	0x004006f9
  402a3c:	400e0a00 	.word	0x400e0a00
  402a40:	400e1a00 	.word	0x400e1a00
  402a44:	400e1c00 	.word	0x400e1c00
  402a48:	40024000 	.word	0x40024000
  402a4c:	00400811 	.word	0x00400811
  402a50:	40028000 	.word	0x40028000
  402a54:	4002c000 	.word	0x4002c000

00402a58 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  402a58:	b570      	push	{r4, r5, r6, lr}
  402a5a:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402a5c:	4b2a      	ldr	r3, [pc, #168]	; (402b08 <usart_serial_putchar+0xb0>)
  402a5e:	4298      	cmp	r0, r3
  402a60:	d108      	bne.n	402a74 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  402a62:	461e      	mov	r6, r3
  402a64:	4d29      	ldr	r5, [pc, #164]	; (402b0c <usart_serial_putchar+0xb4>)
  402a66:	4621      	mov	r1, r4
  402a68:	4630      	mov	r0, r6
  402a6a:	47a8      	blx	r5
  402a6c:	2800      	cmp	r0, #0
  402a6e:	d1fa      	bne.n	402a66 <usart_serial_putchar+0xe>
		return 1;
  402a70:	2001      	movs	r0, #1
  402a72:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402a74:	4b26      	ldr	r3, [pc, #152]	; (402b10 <usart_serial_putchar+0xb8>)
  402a76:	4298      	cmp	r0, r3
  402a78:	d108      	bne.n	402a8c <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  402a7a:	461e      	mov	r6, r3
  402a7c:	4d23      	ldr	r5, [pc, #140]	; (402b0c <usart_serial_putchar+0xb4>)
  402a7e:	4621      	mov	r1, r4
  402a80:	4630      	mov	r0, r6
  402a82:	47a8      	blx	r5
  402a84:	2800      	cmp	r0, #0
  402a86:	d1fa      	bne.n	402a7e <usart_serial_putchar+0x26>
		return 1;
  402a88:	2001      	movs	r0, #1
  402a8a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402a8c:	4b21      	ldr	r3, [pc, #132]	; (402b14 <usart_serial_putchar+0xbc>)
  402a8e:	4298      	cmp	r0, r3
  402a90:	d108      	bne.n	402aa4 <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  402a92:	461e      	mov	r6, r3
  402a94:	4d1d      	ldr	r5, [pc, #116]	; (402b0c <usart_serial_putchar+0xb4>)
  402a96:	4621      	mov	r1, r4
  402a98:	4630      	mov	r0, r6
  402a9a:	47a8      	blx	r5
  402a9c:	2800      	cmp	r0, #0
  402a9e:	d1fa      	bne.n	402a96 <usart_serial_putchar+0x3e>
		return 1;
  402aa0:	2001      	movs	r0, #1
  402aa2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402aa4:	4b1c      	ldr	r3, [pc, #112]	; (402b18 <usart_serial_putchar+0xc0>)
  402aa6:	4298      	cmp	r0, r3
  402aa8:	d108      	bne.n	402abc <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  402aaa:	461e      	mov	r6, r3
  402aac:	4d17      	ldr	r5, [pc, #92]	; (402b0c <usart_serial_putchar+0xb4>)
  402aae:	4621      	mov	r1, r4
  402ab0:	4630      	mov	r0, r6
  402ab2:	47a8      	blx	r5
  402ab4:	2800      	cmp	r0, #0
  402ab6:	d1fa      	bne.n	402aae <usart_serial_putchar+0x56>
		return 1;
  402ab8:	2001      	movs	r0, #1
  402aba:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402abc:	4b17      	ldr	r3, [pc, #92]	; (402b1c <usart_serial_putchar+0xc4>)
  402abe:	4298      	cmp	r0, r3
  402ac0:	d108      	bne.n	402ad4 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  402ac2:	461e      	mov	r6, r3
  402ac4:	4d16      	ldr	r5, [pc, #88]	; (402b20 <usart_serial_putchar+0xc8>)
  402ac6:	4621      	mov	r1, r4
  402ac8:	4630      	mov	r0, r6
  402aca:	47a8      	blx	r5
  402acc:	2800      	cmp	r0, #0
  402ace:	d1fa      	bne.n	402ac6 <usart_serial_putchar+0x6e>
		return 1;
  402ad0:	2001      	movs	r0, #1
  402ad2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402ad4:	4b13      	ldr	r3, [pc, #76]	; (402b24 <usart_serial_putchar+0xcc>)
  402ad6:	4298      	cmp	r0, r3
  402ad8:	d108      	bne.n	402aec <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  402ada:	461e      	mov	r6, r3
  402adc:	4d10      	ldr	r5, [pc, #64]	; (402b20 <usart_serial_putchar+0xc8>)
  402ade:	4621      	mov	r1, r4
  402ae0:	4630      	mov	r0, r6
  402ae2:	47a8      	blx	r5
  402ae4:	2800      	cmp	r0, #0
  402ae6:	d1fa      	bne.n	402ade <usart_serial_putchar+0x86>
		return 1;
  402ae8:	2001      	movs	r0, #1
  402aea:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402aec:	4b0e      	ldr	r3, [pc, #56]	; (402b28 <usart_serial_putchar+0xd0>)
  402aee:	4298      	cmp	r0, r3
  402af0:	d108      	bne.n	402b04 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  402af2:	461e      	mov	r6, r3
  402af4:	4d0a      	ldr	r5, [pc, #40]	; (402b20 <usart_serial_putchar+0xc8>)
  402af6:	4621      	mov	r1, r4
  402af8:	4630      	mov	r0, r6
  402afa:	47a8      	blx	r5
  402afc:	2800      	cmp	r0, #0
  402afe:	d1fa      	bne.n	402af6 <usart_serial_putchar+0x9e>
		return 1;
  402b00:	2001      	movs	r0, #1
  402b02:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402b04:	2000      	movs	r0, #0
}
  402b06:	bd70      	pop	{r4, r5, r6, pc}
  402b08:	400e0800 	.word	0x400e0800
  402b0c:	004006e5 	.word	0x004006e5
  402b10:	400e0a00 	.word	0x400e0a00
  402b14:	400e1a00 	.word	0x400e1a00
  402b18:	400e1c00 	.word	0x400e1c00
  402b1c:	40024000 	.word	0x40024000
  402b20:	004007f9 	.word	0x004007f9
  402b24:	40028000 	.word	0x40028000
  402b28:	4002c000 	.word	0x4002c000

00402b2c <vApplicationStackOverflowHook>:
/**
 * \brief Called if stack overflow during execution
 */
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
		signed char *pcTaskName)
{
  402b2c:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402b2e:	460a      	mov	r2, r1
  402b30:	4601      	mov	r1, r0
  402b32:	4802      	ldr	r0, [pc, #8]	; (402b3c <vApplicationStackOverflowHook+0x10>)
  402b34:	4b02      	ldr	r3, [pc, #8]	; (402b40 <vApplicationStackOverflowHook+0x14>)
  402b36:	4798      	blx	r3
  402b38:	e7fe      	b.n	402b38 <vApplicationStackOverflowHook+0xc>
  402b3a:	bf00      	nop
  402b3c:	00405e18 	.word	0x00405e18
  402b40:	00402de5 	.word	0x00402de5

00402b44 <vApplicationTickHook>:

/**
 * \brief This function is called by FreeRTOS each tick
 */
extern void vApplicationTickHook(void)
{
  402b44:	4770      	bx	lr
  402b46:	bf00      	nop

00402b48 <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  402b48:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b4c:	b672      	cpsid	i
  402b4e:	f383 8811 	msr	BASEPRI, r3
  402b52:	f3bf 8f6f 	isb	sy
  402b56:	f3bf 8f4f 	dsb	sy
  402b5a:	b662      	cpsie	i
  402b5c:	e7fe      	b.n	402b5c <vApplicationMallocFailedHook+0x14>
  402b5e:	bf00      	nop

00402b60 <led_init>:
	 * emits one character at a time.
	 */
#endif
}

void led_init(int estado){
  402b60:	b570      	push	{r4, r5, r6, lr}
  402b62:	b082      	sub	sp, #8
	pmc_enable_periph_clk(LED1_PIO_ID);
  402b64:	200a      	movs	r0, #10
  402b66:	4e0e      	ldr	r6, [pc, #56]	; (402ba0 <led_init+0x40>)
  402b68:	47b0      	blx	r6
	pio_set_output(LED1_PIO, LED1_PIN_MASK, 1, 0, 0 );
  402b6a:	2400      	movs	r4, #0
  402b6c:	9400      	str	r4, [sp, #0]
  402b6e:	4623      	mov	r3, r4
  402b70:	2201      	movs	r2, #1
  402b72:	4611      	mov	r1, r2
  402b74:	480b      	ldr	r0, [pc, #44]	; (402ba4 <led_init+0x44>)
  402b76:	4d0c      	ldr	r5, [pc, #48]	; (402ba8 <led_init+0x48>)
  402b78:	47a8      	blx	r5

	pmc_enable_periph_clk(LED2_PIO_ID);
  402b7a:	200c      	movs	r0, #12
  402b7c:	47b0      	blx	r6
	pio_set_output(LED2_PIO, LED2_PIN_MASK, 1, 0, 0 );
  402b7e:	9400      	str	r4, [sp, #0]
  402b80:	4623      	mov	r3, r4
  402b82:	2201      	movs	r2, #1
  402b84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402b88:	4808      	ldr	r0, [pc, #32]	; (402bac <led_init+0x4c>)
  402b8a:	47a8      	blx	r5

	pmc_enable_periph_clk(LED3_PIO_ID);
  402b8c:	200b      	movs	r0, #11
  402b8e:	47b0      	blx	r6
	pio_set_output(LED3_PIO, LED3_PIN_MASK, 1, 0, 0 );
  402b90:	9400      	str	r4, [sp, #0]
  402b92:	4623      	mov	r3, r4
  402b94:	2201      	movs	r2, #1
  402b96:	2104      	movs	r1, #4
  402b98:	4805      	ldr	r0, [pc, #20]	; (402bb0 <led_init+0x50>)
  402b9a:	47a8      	blx	r5

};
  402b9c:	b002      	add	sp, #8
  402b9e:	bd70      	pop	{r4, r5, r6, pc}
  402ba0:	00400691 	.word	0x00400691
  402ba4:	400e0e00 	.word	0x400e0e00
  402ba8:	00400479 	.word	0x00400479
  402bac:	400e1200 	.word	0x400e1200
  402bb0:	400e1000 	.word	0x400e1000

00402bb4 <but_init>:

void but_init(void){
  402bb4:	b508      	push	{r3, lr}
	/* config. pino botao em modo de entrada */
	pmc_enable_periph_clk(BUT1_PIO_ID);
  402bb6:	2010      	movs	r0, #16
  402bb8:	4b04      	ldr	r3, [pc, #16]	; (402bcc <but_init+0x18>)
  402bba:	4798      	blx	r3
	pio_set_input(BUT1_PIO, BUT1_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402bbc:	2209      	movs	r2, #9
  402bbe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402bc2:	4803      	ldr	r0, [pc, #12]	; (402bd0 <but_init+0x1c>)
  402bc4:	4b03      	ldr	r3, [pc, #12]	; (402bd4 <but_init+0x20>)
  402bc6:	4798      	blx	r3
  402bc8:	bd08      	pop	{r3, pc}
  402bca:	bf00      	nop
  402bcc:	00400691 	.word	0x00400691
  402bd0:	400e1400 	.word	0x400e1400
  402bd4:	00400441 	.word	0x00400441

00402bd8 <main>:
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  402bd8:	b570      	push	{r4, r5, r6, lr}
  402bda:	b08a      	sub	sp, #40	; 0x28
	/* Initialize the SAM system */
	sysclk_init();
  402bdc:	4b4b      	ldr	r3, [pc, #300]	; (402d0c <main+0x134>)
  402bde:	4798      	blx	r3
	board_init();
  402be0:	4b4b      	ldr	r3, [pc, #300]	; (402d10 <main+0x138>)
  402be2:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  402be4:	4d4b      	ldr	r5, [pc, #300]	; (402d14 <main+0x13c>)
  402be6:	4b4c      	ldr	r3, [pc, #304]	; (402d18 <main+0x140>)
  402be8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402bea:	4a4c      	ldr	r2, [pc, #304]	; (402d1c <main+0x144>)
  402bec:	4b4c      	ldr	r3, [pc, #304]	; (402d20 <main+0x148>)
  402bee:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402bf0:	4a4c      	ldr	r2, [pc, #304]	; (402d24 <main+0x14c>)
  402bf2:	4b4d      	ldr	r3, [pc, #308]	; (402d28 <main+0x150>)
  402bf4:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  402bf6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402bfa:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  402bfc:	23c0      	movs	r3, #192	; 0xc0
  402bfe:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  402c00:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402c04:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  402c06:	2400      	movs	r4, #0
  402c08:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402c0a:	9408      	str	r4, [sp, #32]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402c0c:	200e      	movs	r0, #14
  402c0e:	4b47      	ldr	r3, [pc, #284]	; (402d2c <main+0x154>)
  402c10:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402c12:	4a47      	ldr	r2, [pc, #284]	; (402d30 <main+0x158>)
  402c14:	a904      	add	r1, sp, #16
  402c16:	4628      	mov	r0, r5
  402c18:	4b46      	ldr	r3, [pc, #280]	; (402d34 <main+0x15c>)
  402c1a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402c1c:	4628      	mov	r0, r5
  402c1e:	4b46      	ldr	r3, [pc, #280]	; (402d38 <main+0x160>)
  402c20:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402c22:	4628      	mov	r0, r5
  402c24:	4b45      	ldr	r3, [pc, #276]	; (402d3c <main+0x164>)
  402c26:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402c28:	4e45      	ldr	r6, [pc, #276]	; (402d40 <main+0x168>)
  402c2a:	6833      	ldr	r3, [r6, #0]
  402c2c:	4621      	mov	r1, r4
  402c2e:	6898      	ldr	r0, [r3, #8]
  402c30:	4d44      	ldr	r5, [pc, #272]	; (402d44 <main+0x16c>)
  402c32:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402c34:	6833      	ldr	r3, [r6, #0]
  402c36:	4621      	mov	r1, r4
  402c38:	6858      	ldr	r0, [r3, #4]
  402c3a:	47a8      	blx	r5
	/* Configure console UART. */
	stdio_serial_init(CONF_UART, &uart_serial_options);

	/* Specify that stdout should not be buffered. */
#if defined(__GNUC__)
	setbuf(stdout, NULL);
  402c3c:	6833      	ldr	r3, [r6, #0]
  402c3e:	4621      	mov	r1, r4
  402c40:	6898      	ldr	r0, [r3, #8]
  402c42:	47a8      	blx	r5
	board_init();

	/* Initialize the console uart */
	configure_console();

	led_init(1);
  402c44:	2001      	movs	r0, #1
  402c46:	4b40      	ldr	r3, [pc, #256]	; (402d48 <main+0x170>)
  402c48:	4798      	blx	r3
	but_init();
  402c4a:	4b40      	ldr	r3, [pc, #256]	; (402d4c <main+0x174>)
  402c4c:	4798      	blx	r3


	/* Output demo infomation. */
	printf("-- Freertos Example --\n\r");
  402c4e:	4840      	ldr	r0, [pc, #256]	; (402d50 <main+0x178>)
  402c50:	4d40      	ldr	r5, [pc, #256]	; (402d54 <main+0x17c>)
  402c52:	47a8      	blx	r5
	printf("-- %s\n\r", BOARD_NAME);
  402c54:	4940      	ldr	r1, [pc, #256]	; (402d58 <main+0x180>)
  402c56:	4841      	ldr	r0, [pc, #260]	; (402d5c <main+0x184>)
  402c58:	47a8      	blx	r5
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  402c5a:	4a41      	ldr	r2, [pc, #260]	; (402d60 <main+0x188>)
  402c5c:	4941      	ldr	r1, [pc, #260]	; (402d64 <main+0x18c>)
  402c5e:	4842      	ldr	r0, [pc, #264]	; (402d68 <main+0x190>)
  402c60:	47a8      	blx	r5
	//		TASK_MONITOR_STACK_PRIORITY, NULL) != pdPASS) {
	//	printf("Failed to create Monitor task\r\n");
	//}

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
  402c62:	9403      	str	r4, [sp, #12]
  402c64:	9402      	str	r4, [sp, #8]
  402c66:	9401      	str	r4, [sp, #4]
  402c68:	9400      	str	r4, [sp, #0]
  402c6a:	4623      	mov	r3, r4
  402c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
  402c70:	493e      	ldr	r1, [pc, #248]	; (402d6c <main+0x194>)
  402c72:	483f      	ldr	r0, [pc, #252]	; (402d70 <main+0x198>)
  402c74:	4c3f      	ldr	r4, [pc, #252]	; (402d74 <main+0x19c>)
  402c76:	47a0      	blx	r4
  402c78:	2801      	cmp	r0, #1
  402c7a:	d001      	beq.n	402c80 <main+0xa8>
			TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  402c7c:	483e      	ldr	r0, [pc, #248]	; (402d78 <main+0x1a0>)
  402c7e:	47a8      	blx	r5
	}

	/* Create task to make led blink */
	if (xTaskCreate(task_led1, "Led", TASK_LED_STACK_SIZE, NULL,
  402c80:	2300      	movs	r3, #0
  402c82:	9303      	str	r3, [sp, #12]
  402c84:	9302      	str	r3, [sp, #8]
  402c86:	9301      	str	r3, [sp, #4]
  402c88:	9300      	str	r3, [sp, #0]
  402c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
  402c8e:	4937      	ldr	r1, [pc, #220]	; (402d6c <main+0x194>)
  402c90:	483a      	ldr	r0, [pc, #232]	; (402d7c <main+0x1a4>)
  402c92:	4c38      	ldr	r4, [pc, #224]	; (402d74 <main+0x19c>)
  402c94:	47a0      	blx	r4
  402c96:	2801      	cmp	r0, #1
  402c98:	d002      	beq.n	402ca0 <main+0xc8>
		TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led1 task\r\n");
  402c9a:	4839      	ldr	r0, [pc, #228]	; (402d80 <main+0x1a8>)
  402c9c:	4b2d      	ldr	r3, [pc, #180]	; (402d54 <main+0x17c>)
  402c9e:	4798      	blx	r3
	}
	/* Create task to make led blink */
	if (xTaskCreate(task_led2, "Led", TASK_LED_STACK_SIZE, NULL,
  402ca0:	2300      	movs	r3, #0
  402ca2:	9303      	str	r3, [sp, #12]
  402ca4:	9302      	str	r3, [sp, #8]
  402ca6:	9301      	str	r3, [sp, #4]
  402ca8:	9300      	str	r3, [sp, #0]
  402caa:	f44f 7280 	mov.w	r2, #256	; 0x100
  402cae:	492f      	ldr	r1, [pc, #188]	; (402d6c <main+0x194>)
  402cb0:	4834      	ldr	r0, [pc, #208]	; (402d84 <main+0x1ac>)
  402cb2:	4c30      	ldr	r4, [pc, #192]	; (402d74 <main+0x19c>)
  402cb4:	47a0      	blx	r4
  402cb6:	2801      	cmp	r0, #1
  402cb8:	d002      	beq.n	402cc0 <main+0xe8>
		TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led1 task\r\n");
  402cba:	4831      	ldr	r0, [pc, #196]	; (402d80 <main+0x1a8>)
  402cbc:	4b25      	ldr	r3, [pc, #148]	; (402d54 <main+0x17c>)
  402cbe:	4798      	blx	r3
	}
	/* Create task to make led blink */
	if (xTaskCreate(task_led3, "Led", TASK_LED_STACK_SIZE, NULL,
  402cc0:	2300      	movs	r3, #0
  402cc2:	9303      	str	r3, [sp, #12]
  402cc4:	9302      	str	r3, [sp, #8]
  402cc6:	9301      	str	r3, [sp, #4]
  402cc8:	9300      	str	r3, [sp, #0]
  402cca:	f44f 7280 	mov.w	r2, #256	; 0x100
  402cce:	4927      	ldr	r1, [pc, #156]	; (402d6c <main+0x194>)
  402cd0:	482d      	ldr	r0, [pc, #180]	; (402d88 <main+0x1b0>)
  402cd2:	4c28      	ldr	r4, [pc, #160]	; (402d74 <main+0x19c>)
  402cd4:	47a0      	blx	r4
  402cd6:	2801      	cmp	r0, #1
  402cd8:	d002      	beq.n	402ce0 <main+0x108>
		TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
			printf("Failed to create test led1 task\r\n");
  402cda:	4829      	ldr	r0, [pc, #164]	; (402d80 <main+0x1a8>)
  402cdc:	4b1d      	ldr	r3, [pc, #116]	; (402d54 <main+0x17c>)
  402cde:	4798      	blx	r3
	}
	/* Create task to make button act on led */
	if (xTaskCreate(task_but, "Led", TASK_LED_STACK_SIZE, NULL,
  402ce0:	2300      	movs	r3, #0
  402ce2:	9303      	str	r3, [sp, #12]
  402ce4:	9302      	str	r3, [sp, #8]
  402ce6:	9301      	str	r3, [sp, #4]
  402ce8:	9300      	str	r3, [sp, #0]
  402cea:	f44f 7280 	mov.w	r2, #256	; 0x100
  402cee:	491f      	ldr	r1, [pc, #124]	; (402d6c <main+0x194>)
  402cf0:	4826      	ldr	r0, [pc, #152]	; (402d8c <main+0x1b4>)
  402cf2:	4c20      	ldr	r4, [pc, #128]	; (402d74 <main+0x19c>)
  402cf4:	47a0      	blx	r4
  402cf6:	2801      	cmp	r0, #1
  402cf8:	d002      	beq.n	402d00 <main+0x128>
		TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led1 task\r\n");
  402cfa:	4821      	ldr	r0, [pc, #132]	; (402d80 <main+0x1a8>)
  402cfc:	4b15      	ldr	r3, [pc, #84]	; (402d54 <main+0x17c>)
  402cfe:	4798      	blx	r3
	}


	/* Start the scheduler. */
	vTaskStartScheduler();
  402d00:	4b23      	ldr	r3, [pc, #140]	; (402d90 <main+0x1b8>)
  402d02:	4798      	blx	r3

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;
}
  402d04:	2000      	movs	r0, #0
  402d06:	b00a      	add	sp, #40	; 0x28
  402d08:	bd70      	pop	{r4, r5, r6, pc}
  402d0a:	bf00      	nop
  402d0c:	0040019d 	.word	0x0040019d
  402d10:	00400299 	.word	0x00400299
  402d14:	40028000 	.word	0x40028000
  402d18:	20400a94 	.word	0x20400a94
  402d1c:	00402a59 	.word	0x00402a59
  402d20:	20400a90 	.word	0x20400a90
  402d24:	00402981 	.word	0x00402981
  402d28:	20400a8c 	.word	0x20400a8c
  402d2c:	00400691 	.word	0x00400691
  402d30:	08f0d180 	.word	0x08f0d180
  402d34:	00400795 	.word	0x00400795
  402d38:	004007e9 	.word	0x004007e9
  402d3c:	004007f1 	.word	0x004007f1
  402d40:	20400438 	.word	0x20400438
  402d44:	00403599 	.word	0x00403599
  402d48:	00402b61 	.word	0x00402b61
  402d4c:	00402bb5 	.word	0x00402bb5
  402d50:	00405e30 	.word	0x00405e30
  402d54:	00402de5 	.word	0x00402de5
  402d58:	00405e4c 	.word	0x00405e4c
  402d5c:	00405e58 	.word	0x00405e58
  402d60:	00405e60 	.word	0x00405e60
  402d64:	00405e6c 	.word	0x00405e6c
  402d68:	00405e78 	.word	0x00405e78
  402d6c:	00405e90 	.word	0x00405e90
  402d70:	00402959 	.word	0x00402959
  402d74:	004017b9 	.word	0x004017b9
  402d78:	00405e94 	.word	0x00405e94
  402d7c:	004028d5 	.word	0x004028d5
  402d80:	00405eb8 	.word	0x00405eb8
  402d84:	00402849 	.word	0x00402849
  402d88:	004027c5 	.word	0x004027c5
  402d8c:	00402715 	.word	0x00402715
  402d90:	004019e1 	.word	0x004019e1

00402d94 <__libc_init_array>:
  402d94:	b570      	push	{r4, r5, r6, lr}
  402d96:	4e0f      	ldr	r6, [pc, #60]	; (402dd4 <__libc_init_array+0x40>)
  402d98:	4d0f      	ldr	r5, [pc, #60]	; (402dd8 <__libc_init_array+0x44>)
  402d9a:	1b76      	subs	r6, r6, r5
  402d9c:	10b6      	asrs	r6, r6, #2
  402d9e:	bf18      	it	ne
  402da0:	2400      	movne	r4, #0
  402da2:	d005      	beq.n	402db0 <__libc_init_array+0x1c>
  402da4:	3401      	adds	r4, #1
  402da6:	f855 3b04 	ldr.w	r3, [r5], #4
  402daa:	4798      	blx	r3
  402dac:	42a6      	cmp	r6, r4
  402dae:	d1f9      	bne.n	402da4 <__libc_init_array+0x10>
  402db0:	4e0a      	ldr	r6, [pc, #40]	; (402ddc <__libc_init_array+0x48>)
  402db2:	4d0b      	ldr	r5, [pc, #44]	; (402de0 <__libc_init_array+0x4c>)
  402db4:	1b76      	subs	r6, r6, r5
  402db6:	f003 f8bd 	bl	405f34 <_init>
  402dba:	10b6      	asrs	r6, r6, #2
  402dbc:	bf18      	it	ne
  402dbe:	2400      	movne	r4, #0
  402dc0:	d006      	beq.n	402dd0 <__libc_init_array+0x3c>
  402dc2:	3401      	adds	r4, #1
  402dc4:	f855 3b04 	ldr.w	r3, [r5], #4
  402dc8:	4798      	blx	r3
  402dca:	42a6      	cmp	r6, r4
  402dcc:	d1f9      	bne.n	402dc2 <__libc_init_array+0x2e>
  402dce:	bd70      	pop	{r4, r5, r6, pc}
  402dd0:	bd70      	pop	{r4, r5, r6, pc}
  402dd2:	bf00      	nop
  402dd4:	00405f40 	.word	0x00405f40
  402dd8:	00405f40 	.word	0x00405f40
  402ddc:	00405f48 	.word	0x00405f48
  402de0:	00405f40 	.word	0x00405f40

00402de4 <iprintf>:
  402de4:	b40f      	push	{r0, r1, r2, r3}
  402de6:	b500      	push	{lr}
  402de8:	4907      	ldr	r1, [pc, #28]	; (402e08 <iprintf+0x24>)
  402dea:	b083      	sub	sp, #12
  402dec:	ab04      	add	r3, sp, #16
  402dee:	6808      	ldr	r0, [r1, #0]
  402df0:	f853 2b04 	ldr.w	r2, [r3], #4
  402df4:	6881      	ldr	r1, [r0, #8]
  402df6:	9301      	str	r3, [sp, #4]
  402df8:	f000 fd2c 	bl	403854 <_vfiprintf_r>
  402dfc:	b003      	add	sp, #12
  402dfe:	f85d eb04 	ldr.w	lr, [sp], #4
  402e02:	b004      	add	sp, #16
  402e04:	4770      	bx	lr
  402e06:	bf00      	nop
  402e08:	20400438 	.word	0x20400438

00402e0c <malloc>:
  402e0c:	4b02      	ldr	r3, [pc, #8]	; (402e18 <malloc+0xc>)
  402e0e:	4601      	mov	r1, r0
  402e10:	6818      	ldr	r0, [r3, #0]
  402e12:	f000 b80b 	b.w	402e2c <_malloc_r>
  402e16:	bf00      	nop
  402e18:	20400438 	.word	0x20400438

00402e1c <free>:
  402e1c:	4b02      	ldr	r3, [pc, #8]	; (402e28 <free+0xc>)
  402e1e:	4601      	mov	r1, r0
  402e20:	6818      	ldr	r0, [r3, #0]
  402e22:	f001 bec1 	b.w	404ba8 <_free_r>
  402e26:	bf00      	nop
  402e28:	20400438 	.word	0x20400438

00402e2c <_malloc_r>:
  402e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e30:	f101 050b 	add.w	r5, r1, #11
  402e34:	2d16      	cmp	r5, #22
  402e36:	b083      	sub	sp, #12
  402e38:	4606      	mov	r6, r0
  402e3a:	f240 809f 	bls.w	402f7c <_malloc_r+0x150>
  402e3e:	f035 0507 	bics.w	r5, r5, #7
  402e42:	f100 80bf 	bmi.w	402fc4 <_malloc_r+0x198>
  402e46:	42a9      	cmp	r1, r5
  402e48:	f200 80bc 	bhi.w	402fc4 <_malloc_r+0x198>
  402e4c:	f000 fb8e 	bl	40356c <__malloc_lock>
  402e50:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  402e54:	f0c0 829c 	bcc.w	403390 <_malloc_r+0x564>
  402e58:	0a6b      	lsrs	r3, r5, #9
  402e5a:	f000 80ba 	beq.w	402fd2 <_malloc_r+0x1a6>
  402e5e:	2b04      	cmp	r3, #4
  402e60:	f200 8183 	bhi.w	40316a <_malloc_r+0x33e>
  402e64:	09a8      	lsrs	r0, r5, #6
  402e66:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  402e6a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402e6e:	3038      	adds	r0, #56	; 0x38
  402e70:	4fc4      	ldr	r7, [pc, #784]	; (403184 <_malloc_r+0x358>)
  402e72:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402e76:	f1a3 0108 	sub.w	r1, r3, #8
  402e7a:	685c      	ldr	r4, [r3, #4]
  402e7c:	42a1      	cmp	r1, r4
  402e7e:	d107      	bne.n	402e90 <_malloc_r+0x64>
  402e80:	e0ac      	b.n	402fdc <_malloc_r+0x1b0>
  402e82:	2a00      	cmp	r2, #0
  402e84:	f280 80ac 	bge.w	402fe0 <_malloc_r+0x1b4>
  402e88:	68e4      	ldr	r4, [r4, #12]
  402e8a:	42a1      	cmp	r1, r4
  402e8c:	f000 80a6 	beq.w	402fdc <_malloc_r+0x1b0>
  402e90:	6863      	ldr	r3, [r4, #4]
  402e92:	f023 0303 	bic.w	r3, r3, #3
  402e96:	1b5a      	subs	r2, r3, r5
  402e98:	2a0f      	cmp	r2, #15
  402e9a:	ddf2      	ble.n	402e82 <_malloc_r+0x56>
  402e9c:	49b9      	ldr	r1, [pc, #740]	; (403184 <_malloc_r+0x358>)
  402e9e:	693c      	ldr	r4, [r7, #16]
  402ea0:	f101 0e08 	add.w	lr, r1, #8
  402ea4:	4574      	cmp	r4, lr
  402ea6:	f000 81b3 	beq.w	403210 <_malloc_r+0x3e4>
  402eaa:	6863      	ldr	r3, [r4, #4]
  402eac:	f023 0303 	bic.w	r3, r3, #3
  402eb0:	1b5a      	subs	r2, r3, r5
  402eb2:	2a0f      	cmp	r2, #15
  402eb4:	f300 8199 	bgt.w	4031ea <_malloc_r+0x3be>
  402eb8:	2a00      	cmp	r2, #0
  402eba:	f8c1 e014 	str.w	lr, [r1, #20]
  402ebe:	f8c1 e010 	str.w	lr, [r1, #16]
  402ec2:	f280 809e 	bge.w	403002 <_malloc_r+0x1d6>
  402ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402eca:	f080 8167 	bcs.w	40319c <_malloc_r+0x370>
  402ece:	08db      	lsrs	r3, r3, #3
  402ed0:	f103 0c01 	add.w	ip, r3, #1
  402ed4:	2201      	movs	r2, #1
  402ed6:	109b      	asrs	r3, r3, #2
  402ed8:	fa02 f303 	lsl.w	r3, r2, r3
  402edc:	684a      	ldr	r2, [r1, #4]
  402ede:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  402ee2:	f8c4 8008 	str.w	r8, [r4, #8]
  402ee6:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  402eea:	431a      	orrs	r2, r3
  402eec:	f1a9 0308 	sub.w	r3, r9, #8
  402ef0:	60e3      	str	r3, [r4, #12]
  402ef2:	604a      	str	r2, [r1, #4]
  402ef4:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  402ef8:	f8c8 400c 	str.w	r4, [r8, #12]
  402efc:	1083      	asrs	r3, r0, #2
  402efe:	2401      	movs	r4, #1
  402f00:	409c      	lsls	r4, r3
  402f02:	4294      	cmp	r4, r2
  402f04:	f200 808a 	bhi.w	40301c <_malloc_r+0x1f0>
  402f08:	4214      	tst	r4, r2
  402f0a:	d106      	bne.n	402f1a <_malloc_r+0xee>
  402f0c:	f020 0003 	bic.w	r0, r0, #3
  402f10:	0064      	lsls	r4, r4, #1
  402f12:	4214      	tst	r4, r2
  402f14:	f100 0004 	add.w	r0, r0, #4
  402f18:	d0fa      	beq.n	402f10 <_malloc_r+0xe4>
  402f1a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402f1e:	46cc      	mov	ip, r9
  402f20:	4680      	mov	r8, r0
  402f22:	f8dc 100c 	ldr.w	r1, [ip, #12]
  402f26:	458c      	cmp	ip, r1
  402f28:	d107      	bne.n	402f3a <_malloc_r+0x10e>
  402f2a:	e173      	b.n	403214 <_malloc_r+0x3e8>
  402f2c:	2a00      	cmp	r2, #0
  402f2e:	f280 8181 	bge.w	403234 <_malloc_r+0x408>
  402f32:	68c9      	ldr	r1, [r1, #12]
  402f34:	458c      	cmp	ip, r1
  402f36:	f000 816d 	beq.w	403214 <_malloc_r+0x3e8>
  402f3a:	684b      	ldr	r3, [r1, #4]
  402f3c:	f023 0303 	bic.w	r3, r3, #3
  402f40:	1b5a      	subs	r2, r3, r5
  402f42:	2a0f      	cmp	r2, #15
  402f44:	ddf2      	ble.n	402f2c <_malloc_r+0x100>
  402f46:	460c      	mov	r4, r1
  402f48:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  402f4c:	f854 8f08 	ldr.w	r8, [r4, #8]!
  402f50:	194b      	adds	r3, r1, r5
  402f52:	f045 0501 	orr.w	r5, r5, #1
  402f56:	604d      	str	r5, [r1, #4]
  402f58:	f042 0101 	orr.w	r1, r2, #1
  402f5c:	f8c8 c00c 	str.w	ip, [r8, #12]
  402f60:	4630      	mov	r0, r6
  402f62:	f8cc 8008 	str.w	r8, [ip, #8]
  402f66:	617b      	str	r3, [r7, #20]
  402f68:	613b      	str	r3, [r7, #16]
  402f6a:	f8c3 e00c 	str.w	lr, [r3, #12]
  402f6e:	f8c3 e008 	str.w	lr, [r3, #8]
  402f72:	6059      	str	r1, [r3, #4]
  402f74:	509a      	str	r2, [r3, r2]
  402f76:	f000 fafb 	bl	403570 <__malloc_unlock>
  402f7a:	e01f      	b.n	402fbc <_malloc_r+0x190>
  402f7c:	2910      	cmp	r1, #16
  402f7e:	d821      	bhi.n	402fc4 <_malloc_r+0x198>
  402f80:	f000 faf4 	bl	40356c <__malloc_lock>
  402f84:	2510      	movs	r5, #16
  402f86:	2306      	movs	r3, #6
  402f88:	2002      	movs	r0, #2
  402f8a:	4f7e      	ldr	r7, [pc, #504]	; (403184 <_malloc_r+0x358>)
  402f8c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402f90:	f1a3 0208 	sub.w	r2, r3, #8
  402f94:	685c      	ldr	r4, [r3, #4]
  402f96:	4294      	cmp	r4, r2
  402f98:	f000 8145 	beq.w	403226 <_malloc_r+0x3fa>
  402f9c:	6863      	ldr	r3, [r4, #4]
  402f9e:	68e1      	ldr	r1, [r4, #12]
  402fa0:	68a5      	ldr	r5, [r4, #8]
  402fa2:	f023 0303 	bic.w	r3, r3, #3
  402fa6:	4423      	add	r3, r4
  402fa8:	4630      	mov	r0, r6
  402faa:	685a      	ldr	r2, [r3, #4]
  402fac:	60e9      	str	r1, [r5, #12]
  402fae:	f042 0201 	orr.w	r2, r2, #1
  402fb2:	608d      	str	r5, [r1, #8]
  402fb4:	605a      	str	r2, [r3, #4]
  402fb6:	f000 fadb 	bl	403570 <__malloc_unlock>
  402fba:	3408      	adds	r4, #8
  402fbc:	4620      	mov	r0, r4
  402fbe:	b003      	add	sp, #12
  402fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fc4:	2400      	movs	r4, #0
  402fc6:	230c      	movs	r3, #12
  402fc8:	4620      	mov	r0, r4
  402fca:	6033      	str	r3, [r6, #0]
  402fcc:	b003      	add	sp, #12
  402fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fd2:	2380      	movs	r3, #128	; 0x80
  402fd4:	f04f 0e40 	mov.w	lr, #64	; 0x40
  402fd8:	203f      	movs	r0, #63	; 0x3f
  402fda:	e749      	b.n	402e70 <_malloc_r+0x44>
  402fdc:	4670      	mov	r0, lr
  402fde:	e75d      	b.n	402e9c <_malloc_r+0x70>
  402fe0:	4423      	add	r3, r4
  402fe2:	68e1      	ldr	r1, [r4, #12]
  402fe4:	685a      	ldr	r2, [r3, #4]
  402fe6:	68a5      	ldr	r5, [r4, #8]
  402fe8:	f042 0201 	orr.w	r2, r2, #1
  402fec:	60e9      	str	r1, [r5, #12]
  402fee:	4630      	mov	r0, r6
  402ff0:	608d      	str	r5, [r1, #8]
  402ff2:	605a      	str	r2, [r3, #4]
  402ff4:	f000 fabc 	bl	403570 <__malloc_unlock>
  402ff8:	3408      	adds	r4, #8
  402ffa:	4620      	mov	r0, r4
  402ffc:	b003      	add	sp, #12
  402ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403002:	4423      	add	r3, r4
  403004:	4630      	mov	r0, r6
  403006:	685a      	ldr	r2, [r3, #4]
  403008:	f042 0201 	orr.w	r2, r2, #1
  40300c:	605a      	str	r2, [r3, #4]
  40300e:	f000 faaf 	bl	403570 <__malloc_unlock>
  403012:	3408      	adds	r4, #8
  403014:	4620      	mov	r0, r4
  403016:	b003      	add	sp, #12
  403018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40301c:	68bc      	ldr	r4, [r7, #8]
  40301e:	6863      	ldr	r3, [r4, #4]
  403020:	f023 0803 	bic.w	r8, r3, #3
  403024:	45a8      	cmp	r8, r5
  403026:	d304      	bcc.n	403032 <_malloc_r+0x206>
  403028:	ebc5 0308 	rsb	r3, r5, r8
  40302c:	2b0f      	cmp	r3, #15
  40302e:	f300 808c 	bgt.w	40314a <_malloc_r+0x31e>
  403032:	4b55      	ldr	r3, [pc, #340]	; (403188 <_malloc_r+0x35c>)
  403034:	f8df 9160 	ldr.w	r9, [pc, #352]	; 403198 <_malloc_r+0x36c>
  403038:	681a      	ldr	r2, [r3, #0]
  40303a:	f8d9 3000 	ldr.w	r3, [r9]
  40303e:	3301      	adds	r3, #1
  403040:	442a      	add	r2, r5
  403042:	eb04 0a08 	add.w	sl, r4, r8
  403046:	f000 8160 	beq.w	40330a <_malloc_r+0x4de>
  40304a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40304e:	320f      	adds	r2, #15
  403050:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  403054:	f022 020f 	bic.w	r2, r2, #15
  403058:	4611      	mov	r1, r2
  40305a:	4630      	mov	r0, r6
  40305c:	9201      	str	r2, [sp, #4]
  40305e:	f000 fa89 	bl	403574 <_sbrk_r>
  403062:	f1b0 3fff 	cmp.w	r0, #4294967295
  403066:	4683      	mov	fp, r0
  403068:	9a01      	ldr	r2, [sp, #4]
  40306a:	f000 8158 	beq.w	40331e <_malloc_r+0x4f2>
  40306e:	4582      	cmp	sl, r0
  403070:	f200 80fc 	bhi.w	40326c <_malloc_r+0x440>
  403074:	4b45      	ldr	r3, [pc, #276]	; (40318c <_malloc_r+0x360>)
  403076:	6819      	ldr	r1, [r3, #0]
  403078:	45da      	cmp	sl, fp
  40307a:	4411      	add	r1, r2
  40307c:	6019      	str	r1, [r3, #0]
  40307e:	f000 8153 	beq.w	403328 <_malloc_r+0x4fc>
  403082:	f8d9 0000 	ldr.w	r0, [r9]
  403086:	f8df e110 	ldr.w	lr, [pc, #272]	; 403198 <_malloc_r+0x36c>
  40308a:	3001      	adds	r0, #1
  40308c:	bf1b      	ittet	ne
  40308e:	ebca 0a0b 	rsbne	sl, sl, fp
  403092:	4451      	addne	r1, sl
  403094:	f8ce b000 	streq.w	fp, [lr]
  403098:	6019      	strne	r1, [r3, #0]
  40309a:	f01b 0107 	ands.w	r1, fp, #7
  40309e:	f000 8117 	beq.w	4032d0 <_malloc_r+0x4a4>
  4030a2:	f1c1 0008 	rsb	r0, r1, #8
  4030a6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4030aa:	4483      	add	fp, r0
  4030ac:	3108      	adds	r1, #8
  4030ae:	445a      	add	r2, fp
  4030b0:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4030b4:	ebc2 0901 	rsb	r9, r2, r1
  4030b8:	4649      	mov	r1, r9
  4030ba:	4630      	mov	r0, r6
  4030bc:	9301      	str	r3, [sp, #4]
  4030be:	f000 fa59 	bl	403574 <_sbrk_r>
  4030c2:	1c43      	adds	r3, r0, #1
  4030c4:	9b01      	ldr	r3, [sp, #4]
  4030c6:	f000 813f 	beq.w	403348 <_malloc_r+0x51c>
  4030ca:	ebcb 0200 	rsb	r2, fp, r0
  4030ce:	444a      	add	r2, r9
  4030d0:	f042 0201 	orr.w	r2, r2, #1
  4030d4:	6819      	ldr	r1, [r3, #0]
  4030d6:	f8c7 b008 	str.w	fp, [r7, #8]
  4030da:	4449      	add	r1, r9
  4030dc:	42bc      	cmp	r4, r7
  4030de:	f8cb 2004 	str.w	r2, [fp, #4]
  4030e2:	6019      	str	r1, [r3, #0]
  4030e4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40318c <_malloc_r+0x360>
  4030e8:	d016      	beq.n	403118 <_malloc_r+0x2ec>
  4030ea:	f1b8 0f0f 	cmp.w	r8, #15
  4030ee:	f240 80fd 	bls.w	4032ec <_malloc_r+0x4c0>
  4030f2:	6862      	ldr	r2, [r4, #4]
  4030f4:	f1a8 030c 	sub.w	r3, r8, #12
  4030f8:	f023 0307 	bic.w	r3, r3, #7
  4030fc:	18e0      	adds	r0, r4, r3
  4030fe:	f002 0201 	and.w	r2, r2, #1
  403102:	f04f 0e05 	mov.w	lr, #5
  403106:	431a      	orrs	r2, r3
  403108:	2b0f      	cmp	r3, #15
  40310a:	6062      	str	r2, [r4, #4]
  40310c:	f8c0 e004 	str.w	lr, [r0, #4]
  403110:	f8c0 e008 	str.w	lr, [r0, #8]
  403114:	f200 811c 	bhi.w	403350 <_malloc_r+0x524>
  403118:	4b1d      	ldr	r3, [pc, #116]	; (403190 <_malloc_r+0x364>)
  40311a:	68bc      	ldr	r4, [r7, #8]
  40311c:	681a      	ldr	r2, [r3, #0]
  40311e:	4291      	cmp	r1, r2
  403120:	bf88      	it	hi
  403122:	6019      	strhi	r1, [r3, #0]
  403124:	4b1b      	ldr	r3, [pc, #108]	; (403194 <_malloc_r+0x368>)
  403126:	681a      	ldr	r2, [r3, #0]
  403128:	4291      	cmp	r1, r2
  40312a:	6862      	ldr	r2, [r4, #4]
  40312c:	bf88      	it	hi
  40312e:	6019      	strhi	r1, [r3, #0]
  403130:	f022 0203 	bic.w	r2, r2, #3
  403134:	4295      	cmp	r5, r2
  403136:	eba2 0305 	sub.w	r3, r2, r5
  40313a:	d801      	bhi.n	403140 <_malloc_r+0x314>
  40313c:	2b0f      	cmp	r3, #15
  40313e:	dc04      	bgt.n	40314a <_malloc_r+0x31e>
  403140:	4630      	mov	r0, r6
  403142:	f000 fa15 	bl	403570 <__malloc_unlock>
  403146:	2400      	movs	r4, #0
  403148:	e738      	b.n	402fbc <_malloc_r+0x190>
  40314a:	1962      	adds	r2, r4, r5
  40314c:	f043 0301 	orr.w	r3, r3, #1
  403150:	f045 0501 	orr.w	r5, r5, #1
  403154:	6065      	str	r5, [r4, #4]
  403156:	4630      	mov	r0, r6
  403158:	60ba      	str	r2, [r7, #8]
  40315a:	6053      	str	r3, [r2, #4]
  40315c:	f000 fa08 	bl	403570 <__malloc_unlock>
  403160:	3408      	adds	r4, #8
  403162:	4620      	mov	r0, r4
  403164:	b003      	add	sp, #12
  403166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40316a:	2b14      	cmp	r3, #20
  40316c:	d971      	bls.n	403252 <_malloc_r+0x426>
  40316e:	2b54      	cmp	r3, #84	; 0x54
  403170:	f200 80a4 	bhi.w	4032bc <_malloc_r+0x490>
  403174:	0b28      	lsrs	r0, r5, #12
  403176:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  40317a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40317e:	306e      	adds	r0, #110	; 0x6e
  403180:	e676      	b.n	402e70 <_malloc_r+0x44>
  403182:	bf00      	nop
  403184:	2040043c 	.word	0x2040043c
  403188:	20400a60 	.word	0x20400a60
  40318c:	20400a64 	.word	0x20400a64
  403190:	20400a5c 	.word	0x20400a5c
  403194:	20400a58 	.word	0x20400a58
  403198:	20400848 	.word	0x20400848
  40319c:	0a5a      	lsrs	r2, r3, #9
  40319e:	2a04      	cmp	r2, #4
  4031a0:	d95e      	bls.n	403260 <_malloc_r+0x434>
  4031a2:	2a14      	cmp	r2, #20
  4031a4:	f200 80b3 	bhi.w	40330e <_malloc_r+0x4e2>
  4031a8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4031ac:	0049      	lsls	r1, r1, #1
  4031ae:	325b      	adds	r2, #91	; 0x5b
  4031b0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  4031b4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  4031b8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 403398 <_malloc_r+0x56c>
  4031bc:	f1ac 0c08 	sub.w	ip, ip, #8
  4031c0:	458c      	cmp	ip, r1
  4031c2:	f000 8088 	beq.w	4032d6 <_malloc_r+0x4aa>
  4031c6:	684a      	ldr	r2, [r1, #4]
  4031c8:	f022 0203 	bic.w	r2, r2, #3
  4031cc:	4293      	cmp	r3, r2
  4031ce:	d202      	bcs.n	4031d6 <_malloc_r+0x3aa>
  4031d0:	6889      	ldr	r1, [r1, #8]
  4031d2:	458c      	cmp	ip, r1
  4031d4:	d1f7      	bne.n	4031c6 <_malloc_r+0x39a>
  4031d6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4031da:	687a      	ldr	r2, [r7, #4]
  4031dc:	f8c4 c00c 	str.w	ip, [r4, #12]
  4031e0:	60a1      	str	r1, [r4, #8]
  4031e2:	f8cc 4008 	str.w	r4, [ip, #8]
  4031e6:	60cc      	str	r4, [r1, #12]
  4031e8:	e688      	b.n	402efc <_malloc_r+0xd0>
  4031ea:	1963      	adds	r3, r4, r5
  4031ec:	f042 0701 	orr.w	r7, r2, #1
  4031f0:	f045 0501 	orr.w	r5, r5, #1
  4031f4:	6065      	str	r5, [r4, #4]
  4031f6:	4630      	mov	r0, r6
  4031f8:	614b      	str	r3, [r1, #20]
  4031fa:	610b      	str	r3, [r1, #16]
  4031fc:	f8c3 e00c 	str.w	lr, [r3, #12]
  403200:	f8c3 e008 	str.w	lr, [r3, #8]
  403204:	605f      	str	r7, [r3, #4]
  403206:	509a      	str	r2, [r3, r2]
  403208:	3408      	adds	r4, #8
  40320a:	f000 f9b1 	bl	403570 <__malloc_unlock>
  40320e:	e6d5      	b.n	402fbc <_malloc_r+0x190>
  403210:	684a      	ldr	r2, [r1, #4]
  403212:	e673      	b.n	402efc <_malloc_r+0xd0>
  403214:	f108 0801 	add.w	r8, r8, #1
  403218:	f018 0f03 	tst.w	r8, #3
  40321c:	f10c 0c08 	add.w	ip, ip, #8
  403220:	f47f ae7f 	bne.w	402f22 <_malloc_r+0xf6>
  403224:	e030      	b.n	403288 <_malloc_r+0x45c>
  403226:	68dc      	ldr	r4, [r3, #12]
  403228:	42a3      	cmp	r3, r4
  40322a:	bf08      	it	eq
  40322c:	3002      	addeq	r0, #2
  40322e:	f43f ae35 	beq.w	402e9c <_malloc_r+0x70>
  403232:	e6b3      	b.n	402f9c <_malloc_r+0x170>
  403234:	440b      	add	r3, r1
  403236:	460c      	mov	r4, r1
  403238:	685a      	ldr	r2, [r3, #4]
  40323a:	68c9      	ldr	r1, [r1, #12]
  40323c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  403240:	f042 0201 	orr.w	r2, r2, #1
  403244:	605a      	str	r2, [r3, #4]
  403246:	4630      	mov	r0, r6
  403248:	60e9      	str	r1, [r5, #12]
  40324a:	608d      	str	r5, [r1, #8]
  40324c:	f000 f990 	bl	403570 <__malloc_unlock>
  403250:	e6b4      	b.n	402fbc <_malloc_r+0x190>
  403252:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  403256:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  40325a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40325e:	e607      	b.n	402e70 <_malloc_r+0x44>
  403260:	099a      	lsrs	r2, r3, #6
  403262:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403266:	0049      	lsls	r1, r1, #1
  403268:	3238      	adds	r2, #56	; 0x38
  40326a:	e7a1      	b.n	4031b0 <_malloc_r+0x384>
  40326c:	42bc      	cmp	r4, r7
  40326e:	4b4a      	ldr	r3, [pc, #296]	; (403398 <_malloc_r+0x56c>)
  403270:	f43f af00 	beq.w	403074 <_malloc_r+0x248>
  403274:	689c      	ldr	r4, [r3, #8]
  403276:	6862      	ldr	r2, [r4, #4]
  403278:	f022 0203 	bic.w	r2, r2, #3
  40327c:	e75a      	b.n	403134 <_malloc_r+0x308>
  40327e:	f859 3908 	ldr.w	r3, [r9], #-8
  403282:	4599      	cmp	r9, r3
  403284:	f040 8082 	bne.w	40338c <_malloc_r+0x560>
  403288:	f010 0f03 	tst.w	r0, #3
  40328c:	f100 30ff 	add.w	r0, r0, #4294967295
  403290:	d1f5      	bne.n	40327e <_malloc_r+0x452>
  403292:	687b      	ldr	r3, [r7, #4]
  403294:	ea23 0304 	bic.w	r3, r3, r4
  403298:	607b      	str	r3, [r7, #4]
  40329a:	0064      	lsls	r4, r4, #1
  40329c:	429c      	cmp	r4, r3
  40329e:	f63f aebd 	bhi.w	40301c <_malloc_r+0x1f0>
  4032a2:	2c00      	cmp	r4, #0
  4032a4:	f43f aeba 	beq.w	40301c <_malloc_r+0x1f0>
  4032a8:	421c      	tst	r4, r3
  4032aa:	4640      	mov	r0, r8
  4032ac:	f47f ae35 	bne.w	402f1a <_malloc_r+0xee>
  4032b0:	0064      	lsls	r4, r4, #1
  4032b2:	421c      	tst	r4, r3
  4032b4:	f100 0004 	add.w	r0, r0, #4
  4032b8:	d0fa      	beq.n	4032b0 <_malloc_r+0x484>
  4032ba:	e62e      	b.n	402f1a <_malloc_r+0xee>
  4032bc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4032c0:	d818      	bhi.n	4032f4 <_malloc_r+0x4c8>
  4032c2:	0be8      	lsrs	r0, r5, #15
  4032c4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  4032c8:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4032cc:	3077      	adds	r0, #119	; 0x77
  4032ce:	e5cf      	b.n	402e70 <_malloc_r+0x44>
  4032d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4032d4:	e6eb      	b.n	4030ae <_malloc_r+0x282>
  4032d6:	2101      	movs	r1, #1
  4032d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4032dc:	1092      	asrs	r2, r2, #2
  4032de:	fa01 f202 	lsl.w	r2, r1, r2
  4032e2:	431a      	orrs	r2, r3
  4032e4:	f8c8 2004 	str.w	r2, [r8, #4]
  4032e8:	4661      	mov	r1, ip
  4032ea:	e777      	b.n	4031dc <_malloc_r+0x3b0>
  4032ec:	2301      	movs	r3, #1
  4032ee:	f8cb 3004 	str.w	r3, [fp, #4]
  4032f2:	e725      	b.n	403140 <_malloc_r+0x314>
  4032f4:	f240 5254 	movw	r2, #1364	; 0x554
  4032f8:	4293      	cmp	r3, r2
  4032fa:	d820      	bhi.n	40333e <_malloc_r+0x512>
  4032fc:	0ca8      	lsrs	r0, r5, #18
  4032fe:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  403302:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403306:	307c      	adds	r0, #124	; 0x7c
  403308:	e5b2      	b.n	402e70 <_malloc_r+0x44>
  40330a:	3210      	adds	r2, #16
  40330c:	e6a4      	b.n	403058 <_malloc_r+0x22c>
  40330e:	2a54      	cmp	r2, #84	; 0x54
  403310:	d826      	bhi.n	403360 <_malloc_r+0x534>
  403312:	0b1a      	lsrs	r2, r3, #12
  403314:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403318:	0049      	lsls	r1, r1, #1
  40331a:	326e      	adds	r2, #110	; 0x6e
  40331c:	e748      	b.n	4031b0 <_malloc_r+0x384>
  40331e:	68bc      	ldr	r4, [r7, #8]
  403320:	6862      	ldr	r2, [r4, #4]
  403322:	f022 0203 	bic.w	r2, r2, #3
  403326:	e705      	b.n	403134 <_malloc_r+0x308>
  403328:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40332c:	2800      	cmp	r0, #0
  40332e:	f47f aea8 	bne.w	403082 <_malloc_r+0x256>
  403332:	4442      	add	r2, r8
  403334:	68bb      	ldr	r3, [r7, #8]
  403336:	f042 0201 	orr.w	r2, r2, #1
  40333a:	605a      	str	r2, [r3, #4]
  40333c:	e6ec      	b.n	403118 <_malloc_r+0x2ec>
  40333e:	23fe      	movs	r3, #254	; 0xfe
  403340:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  403344:	207e      	movs	r0, #126	; 0x7e
  403346:	e593      	b.n	402e70 <_malloc_r+0x44>
  403348:	2201      	movs	r2, #1
  40334a:	f04f 0900 	mov.w	r9, #0
  40334e:	e6c1      	b.n	4030d4 <_malloc_r+0x2a8>
  403350:	f104 0108 	add.w	r1, r4, #8
  403354:	4630      	mov	r0, r6
  403356:	f001 fc27 	bl	404ba8 <_free_r>
  40335a:	f8d9 1000 	ldr.w	r1, [r9]
  40335e:	e6db      	b.n	403118 <_malloc_r+0x2ec>
  403360:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403364:	d805      	bhi.n	403372 <_malloc_r+0x546>
  403366:	0bda      	lsrs	r2, r3, #15
  403368:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40336c:	0049      	lsls	r1, r1, #1
  40336e:	3277      	adds	r2, #119	; 0x77
  403370:	e71e      	b.n	4031b0 <_malloc_r+0x384>
  403372:	f240 5154 	movw	r1, #1364	; 0x554
  403376:	428a      	cmp	r2, r1
  403378:	d805      	bhi.n	403386 <_malloc_r+0x55a>
  40337a:	0c9a      	lsrs	r2, r3, #18
  40337c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403380:	0049      	lsls	r1, r1, #1
  403382:	327c      	adds	r2, #124	; 0x7c
  403384:	e714      	b.n	4031b0 <_malloc_r+0x384>
  403386:	21fe      	movs	r1, #254	; 0xfe
  403388:	227e      	movs	r2, #126	; 0x7e
  40338a:	e711      	b.n	4031b0 <_malloc_r+0x384>
  40338c:	687b      	ldr	r3, [r7, #4]
  40338e:	e784      	b.n	40329a <_malloc_r+0x46e>
  403390:	08e8      	lsrs	r0, r5, #3
  403392:	1c43      	adds	r3, r0, #1
  403394:	005b      	lsls	r3, r3, #1
  403396:	e5f8      	b.n	402f8a <_malloc_r+0x15e>
  403398:	2040043c 	.word	0x2040043c

0040339c <memcpy>:
  40339c:	4684      	mov	ip, r0
  40339e:	ea41 0300 	orr.w	r3, r1, r0
  4033a2:	f013 0303 	ands.w	r3, r3, #3
  4033a6:	d16d      	bne.n	403484 <memcpy+0xe8>
  4033a8:	3a40      	subs	r2, #64	; 0x40
  4033aa:	d341      	bcc.n	403430 <memcpy+0x94>
  4033ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4033b0:	f840 3b04 	str.w	r3, [r0], #4
  4033b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4033b8:	f840 3b04 	str.w	r3, [r0], #4
  4033bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4033c0:	f840 3b04 	str.w	r3, [r0], #4
  4033c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4033c8:	f840 3b04 	str.w	r3, [r0], #4
  4033cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4033d0:	f840 3b04 	str.w	r3, [r0], #4
  4033d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4033d8:	f840 3b04 	str.w	r3, [r0], #4
  4033dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4033e0:	f840 3b04 	str.w	r3, [r0], #4
  4033e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4033e8:	f840 3b04 	str.w	r3, [r0], #4
  4033ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4033f0:	f840 3b04 	str.w	r3, [r0], #4
  4033f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4033f8:	f840 3b04 	str.w	r3, [r0], #4
  4033fc:	f851 3b04 	ldr.w	r3, [r1], #4
  403400:	f840 3b04 	str.w	r3, [r0], #4
  403404:	f851 3b04 	ldr.w	r3, [r1], #4
  403408:	f840 3b04 	str.w	r3, [r0], #4
  40340c:	f851 3b04 	ldr.w	r3, [r1], #4
  403410:	f840 3b04 	str.w	r3, [r0], #4
  403414:	f851 3b04 	ldr.w	r3, [r1], #4
  403418:	f840 3b04 	str.w	r3, [r0], #4
  40341c:	f851 3b04 	ldr.w	r3, [r1], #4
  403420:	f840 3b04 	str.w	r3, [r0], #4
  403424:	f851 3b04 	ldr.w	r3, [r1], #4
  403428:	f840 3b04 	str.w	r3, [r0], #4
  40342c:	3a40      	subs	r2, #64	; 0x40
  40342e:	d2bd      	bcs.n	4033ac <memcpy+0x10>
  403430:	3230      	adds	r2, #48	; 0x30
  403432:	d311      	bcc.n	403458 <memcpy+0xbc>
  403434:	f851 3b04 	ldr.w	r3, [r1], #4
  403438:	f840 3b04 	str.w	r3, [r0], #4
  40343c:	f851 3b04 	ldr.w	r3, [r1], #4
  403440:	f840 3b04 	str.w	r3, [r0], #4
  403444:	f851 3b04 	ldr.w	r3, [r1], #4
  403448:	f840 3b04 	str.w	r3, [r0], #4
  40344c:	f851 3b04 	ldr.w	r3, [r1], #4
  403450:	f840 3b04 	str.w	r3, [r0], #4
  403454:	3a10      	subs	r2, #16
  403456:	d2ed      	bcs.n	403434 <memcpy+0x98>
  403458:	320c      	adds	r2, #12
  40345a:	d305      	bcc.n	403468 <memcpy+0xcc>
  40345c:	f851 3b04 	ldr.w	r3, [r1], #4
  403460:	f840 3b04 	str.w	r3, [r0], #4
  403464:	3a04      	subs	r2, #4
  403466:	d2f9      	bcs.n	40345c <memcpy+0xc0>
  403468:	3204      	adds	r2, #4
  40346a:	d008      	beq.n	40347e <memcpy+0xe2>
  40346c:	07d2      	lsls	r2, r2, #31
  40346e:	bf1c      	itt	ne
  403470:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403474:	f800 3b01 	strbne.w	r3, [r0], #1
  403478:	d301      	bcc.n	40347e <memcpy+0xe2>
  40347a:	880b      	ldrh	r3, [r1, #0]
  40347c:	8003      	strh	r3, [r0, #0]
  40347e:	4660      	mov	r0, ip
  403480:	4770      	bx	lr
  403482:	bf00      	nop
  403484:	2a08      	cmp	r2, #8
  403486:	d313      	bcc.n	4034b0 <memcpy+0x114>
  403488:	078b      	lsls	r3, r1, #30
  40348a:	d08d      	beq.n	4033a8 <memcpy+0xc>
  40348c:	f010 0303 	ands.w	r3, r0, #3
  403490:	d08a      	beq.n	4033a8 <memcpy+0xc>
  403492:	f1c3 0304 	rsb	r3, r3, #4
  403496:	1ad2      	subs	r2, r2, r3
  403498:	07db      	lsls	r3, r3, #31
  40349a:	bf1c      	itt	ne
  40349c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4034a0:	f800 3b01 	strbne.w	r3, [r0], #1
  4034a4:	d380      	bcc.n	4033a8 <memcpy+0xc>
  4034a6:	f831 3b02 	ldrh.w	r3, [r1], #2
  4034aa:	f820 3b02 	strh.w	r3, [r0], #2
  4034ae:	e77b      	b.n	4033a8 <memcpy+0xc>
  4034b0:	3a04      	subs	r2, #4
  4034b2:	d3d9      	bcc.n	403468 <memcpy+0xcc>
  4034b4:	3a01      	subs	r2, #1
  4034b6:	f811 3b01 	ldrb.w	r3, [r1], #1
  4034ba:	f800 3b01 	strb.w	r3, [r0], #1
  4034be:	d2f9      	bcs.n	4034b4 <memcpy+0x118>
  4034c0:	780b      	ldrb	r3, [r1, #0]
  4034c2:	7003      	strb	r3, [r0, #0]
  4034c4:	784b      	ldrb	r3, [r1, #1]
  4034c6:	7043      	strb	r3, [r0, #1]
  4034c8:	788b      	ldrb	r3, [r1, #2]
  4034ca:	7083      	strb	r3, [r0, #2]
  4034cc:	4660      	mov	r0, ip
  4034ce:	4770      	bx	lr

004034d0 <memset>:
  4034d0:	b470      	push	{r4, r5, r6}
  4034d2:	0784      	lsls	r4, r0, #30
  4034d4:	d046      	beq.n	403564 <memset+0x94>
  4034d6:	1e54      	subs	r4, r2, #1
  4034d8:	2a00      	cmp	r2, #0
  4034da:	d041      	beq.n	403560 <memset+0x90>
  4034dc:	b2cd      	uxtb	r5, r1
  4034de:	4603      	mov	r3, r0
  4034e0:	e002      	b.n	4034e8 <memset+0x18>
  4034e2:	1e62      	subs	r2, r4, #1
  4034e4:	b3e4      	cbz	r4, 403560 <memset+0x90>
  4034e6:	4614      	mov	r4, r2
  4034e8:	f803 5b01 	strb.w	r5, [r3], #1
  4034ec:	079a      	lsls	r2, r3, #30
  4034ee:	d1f8      	bne.n	4034e2 <memset+0x12>
  4034f0:	2c03      	cmp	r4, #3
  4034f2:	d92e      	bls.n	403552 <memset+0x82>
  4034f4:	b2cd      	uxtb	r5, r1
  4034f6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4034fa:	2c0f      	cmp	r4, #15
  4034fc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403500:	d919      	bls.n	403536 <memset+0x66>
  403502:	f103 0210 	add.w	r2, r3, #16
  403506:	4626      	mov	r6, r4
  403508:	3e10      	subs	r6, #16
  40350a:	2e0f      	cmp	r6, #15
  40350c:	f842 5c10 	str.w	r5, [r2, #-16]
  403510:	f842 5c0c 	str.w	r5, [r2, #-12]
  403514:	f842 5c08 	str.w	r5, [r2, #-8]
  403518:	f842 5c04 	str.w	r5, [r2, #-4]
  40351c:	f102 0210 	add.w	r2, r2, #16
  403520:	d8f2      	bhi.n	403508 <memset+0x38>
  403522:	f1a4 0210 	sub.w	r2, r4, #16
  403526:	f022 020f 	bic.w	r2, r2, #15
  40352a:	f004 040f 	and.w	r4, r4, #15
  40352e:	3210      	adds	r2, #16
  403530:	2c03      	cmp	r4, #3
  403532:	4413      	add	r3, r2
  403534:	d90d      	bls.n	403552 <memset+0x82>
  403536:	461e      	mov	r6, r3
  403538:	4622      	mov	r2, r4
  40353a:	3a04      	subs	r2, #4
  40353c:	2a03      	cmp	r2, #3
  40353e:	f846 5b04 	str.w	r5, [r6], #4
  403542:	d8fa      	bhi.n	40353a <memset+0x6a>
  403544:	1f22      	subs	r2, r4, #4
  403546:	f022 0203 	bic.w	r2, r2, #3
  40354a:	3204      	adds	r2, #4
  40354c:	4413      	add	r3, r2
  40354e:	f004 0403 	and.w	r4, r4, #3
  403552:	b12c      	cbz	r4, 403560 <memset+0x90>
  403554:	b2c9      	uxtb	r1, r1
  403556:	441c      	add	r4, r3
  403558:	f803 1b01 	strb.w	r1, [r3], #1
  40355c:	42a3      	cmp	r3, r4
  40355e:	d1fb      	bne.n	403558 <memset+0x88>
  403560:	bc70      	pop	{r4, r5, r6}
  403562:	4770      	bx	lr
  403564:	4614      	mov	r4, r2
  403566:	4603      	mov	r3, r0
  403568:	e7c2      	b.n	4034f0 <memset+0x20>
  40356a:	bf00      	nop

0040356c <__malloc_lock>:
  40356c:	4770      	bx	lr
  40356e:	bf00      	nop

00403570 <__malloc_unlock>:
  403570:	4770      	bx	lr
  403572:	bf00      	nop

00403574 <_sbrk_r>:
  403574:	b538      	push	{r3, r4, r5, lr}
  403576:	4c07      	ldr	r4, [pc, #28]	; (403594 <_sbrk_r+0x20>)
  403578:	2300      	movs	r3, #0
  40357a:	4605      	mov	r5, r0
  40357c:	4608      	mov	r0, r1
  40357e:	6023      	str	r3, [r4, #0]
  403580:	f7fd fa84 	bl	400a8c <_sbrk>
  403584:	1c43      	adds	r3, r0, #1
  403586:	d000      	beq.n	40358a <_sbrk_r+0x16>
  403588:	bd38      	pop	{r3, r4, r5, pc}
  40358a:	6823      	ldr	r3, [r4, #0]
  40358c:	2b00      	cmp	r3, #0
  40358e:	d0fb      	beq.n	403588 <_sbrk_r+0x14>
  403590:	602b      	str	r3, [r5, #0]
  403592:	bd38      	pop	{r3, r4, r5, pc}
  403594:	20400ad8 	.word	0x20400ad8

00403598 <setbuf>:
  403598:	2900      	cmp	r1, #0
  40359a:	bf0c      	ite	eq
  40359c:	2202      	moveq	r2, #2
  40359e:	2200      	movne	r2, #0
  4035a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4035a4:	f000 b800 	b.w	4035a8 <setvbuf>

004035a8 <setvbuf>:
  4035a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4035ac:	4c51      	ldr	r4, [pc, #324]	; (4036f4 <setvbuf+0x14c>)
  4035ae:	6825      	ldr	r5, [r4, #0]
  4035b0:	b083      	sub	sp, #12
  4035b2:	4604      	mov	r4, r0
  4035b4:	460f      	mov	r7, r1
  4035b6:	4690      	mov	r8, r2
  4035b8:	461e      	mov	r6, r3
  4035ba:	b115      	cbz	r5, 4035c2 <setvbuf+0x1a>
  4035bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4035be:	2b00      	cmp	r3, #0
  4035c0:	d079      	beq.n	4036b6 <setvbuf+0x10e>
  4035c2:	f1b8 0f02 	cmp.w	r8, #2
  4035c6:	d004      	beq.n	4035d2 <setvbuf+0x2a>
  4035c8:	f1b8 0f01 	cmp.w	r8, #1
  4035cc:	d87f      	bhi.n	4036ce <setvbuf+0x126>
  4035ce:	2e00      	cmp	r6, #0
  4035d0:	db7d      	blt.n	4036ce <setvbuf+0x126>
  4035d2:	4621      	mov	r1, r4
  4035d4:	4628      	mov	r0, r5
  4035d6:	f001 f989 	bl	4048ec <_fflush_r>
  4035da:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4035dc:	b141      	cbz	r1, 4035f0 <setvbuf+0x48>
  4035de:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4035e2:	4299      	cmp	r1, r3
  4035e4:	d002      	beq.n	4035ec <setvbuf+0x44>
  4035e6:	4628      	mov	r0, r5
  4035e8:	f001 fade 	bl	404ba8 <_free_r>
  4035ec:	2300      	movs	r3, #0
  4035ee:	6323      	str	r3, [r4, #48]	; 0x30
  4035f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4035f4:	2200      	movs	r2, #0
  4035f6:	61a2      	str	r2, [r4, #24]
  4035f8:	6062      	str	r2, [r4, #4]
  4035fa:	061a      	lsls	r2, r3, #24
  4035fc:	d454      	bmi.n	4036a8 <setvbuf+0x100>
  4035fe:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403602:	f023 0303 	bic.w	r3, r3, #3
  403606:	f1b8 0f02 	cmp.w	r8, #2
  40360a:	81a3      	strh	r3, [r4, #12]
  40360c:	d039      	beq.n	403682 <setvbuf+0xda>
  40360e:	ab01      	add	r3, sp, #4
  403610:	466a      	mov	r2, sp
  403612:	4621      	mov	r1, r4
  403614:	4628      	mov	r0, r5
  403616:	f001 fd65 	bl	4050e4 <__swhatbuf_r>
  40361a:	89a3      	ldrh	r3, [r4, #12]
  40361c:	4318      	orrs	r0, r3
  40361e:	81a0      	strh	r0, [r4, #12]
  403620:	b326      	cbz	r6, 40366c <setvbuf+0xc4>
  403622:	b327      	cbz	r7, 40366e <setvbuf+0xc6>
  403624:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403626:	2b00      	cmp	r3, #0
  403628:	d04d      	beq.n	4036c6 <setvbuf+0x11e>
  40362a:	9b00      	ldr	r3, [sp, #0]
  40362c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  403630:	6027      	str	r7, [r4, #0]
  403632:	429e      	cmp	r6, r3
  403634:	bf1c      	itt	ne
  403636:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  40363a:	81a0      	strhne	r0, [r4, #12]
  40363c:	f1b8 0f01 	cmp.w	r8, #1
  403640:	bf08      	it	eq
  403642:	f040 0001 	orreq.w	r0, r0, #1
  403646:	b283      	uxth	r3, r0
  403648:	bf08      	it	eq
  40364a:	81a0      	strheq	r0, [r4, #12]
  40364c:	f003 0008 	and.w	r0, r3, #8
  403650:	b280      	uxth	r0, r0
  403652:	6127      	str	r7, [r4, #16]
  403654:	6166      	str	r6, [r4, #20]
  403656:	b318      	cbz	r0, 4036a0 <setvbuf+0xf8>
  403658:	f013 0001 	ands.w	r0, r3, #1
  40365c:	d02f      	beq.n	4036be <setvbuf+0x116>
  40365e:	2000      	movs	r0, #0
  403660:	4276      	negs	r6, r6
  403662:	61a6      	str	r6, [r4, #24]
  403664:	60a0      	str	r0, [r4, #8]
  403666:	b003      	add	sp, #12
  403668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40366c:	9e00      	ldr	r6, [sp, #0]
  40366e:	4630      	mov	r0, r6
  403670:	f7ff fbcc 	bl	402e0c <malloc>
  403674:	4607      	mov	r7, r0
  403676:	b368      	cbz	r0, 4036d4 <setvbuf+0x12c>
  403678:	89a3      	ldrh	r3, [r4, #12]
  40367a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40367e:	81a3      	strh	r3, [r4, #12]
  403680:	e7d0      	b.n	403624 <setvbuf+0x7c>
  403682:	2000      	movs	r0, #0
  403684:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403688:	f043 0302 	orr.w	r3, r3, #2
  40368c:	2500      	movs	r5, #0
  40368e:	2101      	movs	r1, #1
  403690:	81a3      	strh	r3, [r4, #12]
  403692:	60a5      	str	r5, [r4, #8]
  403694:	6022      	str	r2, [r4, #0]
  403696:	6122      	str	r2, [r4, #16]
  403698:	6161      	str	r1, [r4, #20]
  40369a:	b003      	add	sp, #12
  40369c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4036a0:	60a0      	str	r0, [r4, #8]
  4036a2:	b003      	add	sp, #12
  4036a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4036a8:	6921      	ldr	r1, [r4, #16]
  4036aa:	4628      	mov	r0, r5
  4036ac:	f001 fa7c 	bl	404ba8 <_free_r>
  4036b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4036b4:	e7a3      	b.n	4035fe <setvbuf+0x56>
  4036b6:	4628      	mov	r0, r5
  4036b8:	f001 f9ac 	bl	404a14 <__sinit>
  4036bc:	e781      	b.n	4035c2 <setvbuf+0x1a>
  4036be:	60a6      	str	r6, [r4, #8]
  4036c0:	b003      	add	sp, #12
  4036c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4036c6:	4628      	mov	r0, r5
  4036c8:	f001 f9a4 	bl	404a14 <__sinit>
  4036cc:	e7ad      	b.n	40362a <setvbuf+0x82>
  4036ce:	f04f 30ff 	mov.w	r0, #4294967295
  4036d2:	e7e2      	b.n	40369a <setvbuf+0xf2>
  4036d4:	f8dd 9000 	ldr.w	r9, [sp]
  4036d8:	45b1      	cmp	r9, r6
  4036da:	d006      	beq.n	4036ea <setvbuf+0x142>
  4036dc:	4648      	mov	r0, r9
  4036de:	f7ff fb95 	bl	402e0c <malloc>
  4036e2:	4607      	mov	r7, r0
  4036e4:	b108      	cbz	r0, 4036ea <setvbuf+0x142>
  4036e6:	464e      	mov	r6, r9
  4036e8:	e7c6      	b.n	403678 <setvbuf+0xd0>
  4036ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4036ee:	f04f 30ff 	mov.w	r0, #4294967295
  4036f2:	e7c7      	b.n	403684 <setvbuf+0xdc>
  4036f4:	20400438 	.word	0x20400438
	...

00403700 <strlen>:
  403700:	f890 f000 	pld	[r0]
  403704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403708:	f020 0107 	bic.w	r1, r0, #7
  40370c:	f06f 0c00 	mvn.w	ip, #0
  403710:	f010 0407 	ands.w	r4, r0, #7
  403714:	f891 f020 	pld	[r1, #32]
  403718:	f040 8049 	bne.w	4037ae <strlen+0xae>
  40371c:	f04f 0400 	mov.w	r4, #0
  403720:	f06f 0007 	mvn.w	r0, #7
  403724:	e9d1 2300 	ldrd	r2, r3, [r1]
  403728:	f891 f040 	pld	[r1, #64]	; 0x40
  40372c:	f100 0008 	add.w	r0, r0, #8
  403730:	fa82 f24c 	uadd8	r2, r2, ip
  403734:	faa4 f28c 	sel	r2, r4, ip
  403738:	fa83 f34c 	uadd8	r3, r3, ip
  40373c:	faa2 f38c 	sel	r3, r2, ip
  403740:	bb4b      	cbnz	r3, 403796 <strlen+0x96>
  403742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403746:	fa82 f24c 	uadd8	r2, r2, ip
  40374a:	f100 0008 	add.w	r0, r0, #8
  40374e:	faa4 f28c 	sel	r2, r4, ip
  403752:	fa83 f34c 	uadd8	r3, r3, ip
  403756:	faa2 f38c 	sel	r3, r2, ip
  40375a:	b9e3      	cbnz	r3, 403796 <strlen+0x96>
  40375c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403760:	fa82 f24c 	uadd8	r2, r2, ip
  403764:	f100 0008 	add.w	r0, r0, #8
  403768:	faa4 f28c 	sel	r2, r4, ip
  40376c:	fa83 f34c 	uadd8	r3, r3, ip
  403770:	faa2 f38c 	sel	r3, r2, ip
  403774:	b97b      	cbnz	r3, 403796 <strlen+0x96>
  403776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40377a:	f101 0120 	add.w	r1, r1, #32
  40377e:	fa82 f24c 	uadd8	r2, r2, ip
  403782:	f100 0008 	add.w	r0, r0, #8
  403786:	faa4 f28c 	sel	r2, r4, ip
  40378a:	fa83 f34c 	uadd8	r3, r3, ip
  40378e:	faa2 f38c 	sel	r3, r2, ip
  403792:	2b00      	cmp	r3, #0
  403794:	d0c6      	beq.n	403724 <strlen+0x24>
  403796:	2a00      	cmp	r2, #0
  403798:	bf04      	itt	eq
  40379a:	3004      	addeq	r0, #4
  40379c:	461a      	moveq	r2, r3
  40379e:	ba12      	rev	r2, r2
  4037a0:	fab2 f282 	clz	r2, r2
  4037a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4037a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4037ac:	4770      	bx	lr
  4037ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4037b2:	f004 0503 	and.w	r5, r4, #3
  4037b6:	f1c4 0000 	rsb	r0, r4, #0
  4037ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4037be:	f014 0f04 	tst.w	r4, #4
  4037c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4037c6:	fa0c f505 	lsl.w	r5, ip, r5
  4037ca:	ea62 0205 	orn	r2, r2, r5
  4037ce:	bf1c      	itt	ne
  4037d0:	ea63 0305 	ornne	r3, r3, r5
  4037d4:	4662      	movne	r2, ip
  4037d6:	f04f 0400 	mov.w	r4, #0
  4037da:	e7a9      	b.n	403730 <strlen+0x30>

004037dc <__sprint_r.part.0>:
  4037dc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4037de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4037e2:	049c      	lsls	r4, r3, #18
  4037e4:	4692      	mov	sl, r2
  4037e6:	d52c      	bpl.n	403842 <__sprint_r.part.0+0x66>
  4037e8:	6893      	ldr	r3, [r2, #8]
  4037ea:	6812      	ldr	r2, [r2, #0]
  4037ec:	b33b      	cbz	r3, 40383e <__sprint_r.part.0+0x62>
  4037ee:	460f      	mov	r7, r1
  4037f0:	4680      	mov	r8, r0
  4037f2:	f102 0908 	add.w	r9, r2, #8
  4037f6:	e919 0060 	ldmdb	r9, {r5, r6}
  4037fa:	08b6      	lsrs	r6, r6, #2
  4037fc:	d017      	beq.n	40382e <__sprint_r.part.0+0x52>
  4037fe:	3d04      	subs	r5, #4
  403800:	2400      	movs	r4, #0
  403802:	e001      	b.n	403808 <__sprint_r.part.0+0x2c>
  403804:	42a6      	cmp	r6, r4
  403806:	d010      	beq.n	40382a <__sprint_r.part.0+0x4e>
  403808:	463a      	mov	r2, r7
  40380a:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40380e:	4640      	mov	r0, r8
  403810:	f001 f96a 	bl	404ae8 <_fputwc_r>
  403814:	1c43      	adds	r3, r0, #1
  403816:	f104 0401 	add.w	r4, r4, #1
  40381a:	d1f3      	bne.n	403804 <__sprint_r.part.0+0x28>
  40381c:	2300      	movs	r3, #0
  40381e:	f8ca 3008 	str.w	r3, [sl, #8]
  403822:	f8ca 3004 	str.w	r3, [sl, #4]
  403826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40382a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40382e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  403832:	f8ca 3008 	str.w	r3, [sl, #8]
  403836:	f109 0908 	add.w	r9, r9, #8
  40383a:	2b00      	cmp	r3, #0
  40383c:	d1db      	bne.n	4037f6 <__sprint_r.part.0+0x1a>
  40383e:	2000      	movs	r0, #0
  403840:	e7ec      	b.n	40381c <__sprint_r.part.0+0x40>
  403842:	f001 fa99 	bl	404d78 <__sfvwrite_r>
  403846:	2300      	movs	r3, #0
  403848:	f8ca 3008 	str.w	r3, [sl, #8]
  40384c:	f8ca 3004 	str.w	r3, [sl, #4]
  403850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403854 <_vfiprintf_r>:
  403854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403858:	b0ab      	sub	sp, #172	; 0xac
  40385a:	461c      	mov	r4, r3
  40385c:	9100      	str	r1, [sp, #0]
  40385e:	4690      	mov	r8, r2
  403860:	9304      	str	r3, [sp, #16]
  403862:	9005      	str	r0, [sp, #20]
  403864:	b118      	cbz	r0, 40386e <_vfiprintf_r+0x1a>
  403866:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403868:	2b00      	cmp	r3, #0
  40386a:	f000 80de 	beq.w	403a2a <_vfiprintf_r+0x1d6>
  40386e:	9800      	ldr	r0, [sp, #0]
  403870:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  403874:	b28a      	uxth	r2, r1
  403876:	0495      	lsls	r5, r2, #18
  403878:	d407      	bmi.n	40388a <_vfiprintf_r+0x36>
  40387a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  40387c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  403880:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  403884:	8182      	strh	r2, [r0, #12]
  403886:	6643      	str	r3, [r0, #100]	; 0x64
  403888:	b292      	uxth	r2, r2
  40388a:	0711      	lsls	r1, r2, #28
  40388c:	f140 80b1 	bpl.w	4039f2 <_vfiprintf_r+0x19e>
  403890:	9b00      	ldr	r3, [sp, #0]
  403892:	691b      	ldr	r3, [r3, #16]
  403894:	2b00      	cmp	r3, #0
  403896:	f000 80ac 	beq.w	4039f2 <_vfiprintf_r+0x19e>
  40389a:	f002 021a 	and.w	r2, r2, #26
  40389e:	2a0a      	cmp	r2, #10
  4038a0:	f000 80b5 	beq.w	403a0e <_vfiprintf_r+0x1ba>
  4038a4:	2300      	movs	r3, #0
  4038a6:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  4038aa:	9302      	str	r3, [sp, #8]
  4038ac:	930f      	str	r3, [sp, #60]	; 0x3c
  4038ae:	930e      	str	r3, [sp, #56]	; 0x38
  4038b0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4038b4:	46da      	mov	sl, fp
  4038b6:	f898 3000 	ldrb.w	r3, [r8]
  4038ba:	4644      	mov	r4, r8
  4038bc:	b1fb      	cbz	r3, 4038fe <_vfiprintf_r+0xaa>
  4038be:	2b25      	cmp	r3, #37	; 0x25
  4038c0:	d102      	bne.n	4038c8 <_vfiprintf_r+0x74>
  4038c2:	e01c      	b.n	4038fe <_vfiprintf_r+0xaa>
  4038c4:	2b25      	cmp	r3, #37	; 0x25
  4038c6:	d003      	beq.n	4038d0 <_vfiprintf_r+0x7c>
  4038c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4038cc:	2b00      	cmp	r3, #0
  4038ce:	d1f9      	bne.n	4038c4 <_vfiprintf_r+0x70>
  4038d0:	ebc8 0504 	rsb	r5, r8, r4
  4038d4:	b19d      	cbz	r5, 4038fe <_vfiprintf_r+0xaa>
  4038d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4038d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4038da:	f8ca 8000 	str.w	r8, [sl]
  4038de:	3301      	adds	r3, #1
  4038e0:	442a      	add	r2, r5
  4038e2:	2b07      	cmp	r3, #7
  4038e4:	f8ca 5004 	str.w	r5, [sl, #4]
  4038e8:	920f      	str	r2, [sp, #60]	; 0x3c
  4038ea:	930e      	str	r3, [sp, #56]	; 0x38
  4038ec:	dd7b      	ble.n	4039e6 <_vfiprintf_r+0x192>
  4038ee:	2a00      	cmp	r2, #0
  4038f0:	f040 8528 	bne.w	404344 <_vfiprintf_r+0xaf0>
  4038f4:	9b02      	ldr	r3, [sp, #8]
  4038f6:	920e      	str	r2, [sp, #56]	; 0x38
  4038f8:	442b      	add	r3, r5
  4038fa:	46da      	mov	sl, fp
  4038fc:	9302      	str	r3, [sp, #8]
  4038fe:	7823      	ldrb	r3, [r4, #0]
  403900:	2b00      	cmp	r3, #0
  403902:	f000 843e 	beq.w	404182 <_vfiprintf_r+0x92e>
  403906:	2100      	movs	r1, #0
  403908:	f04f 0300 	mov.w	r3, #0
  40390c:	f04f 32ff 	mov.w	r2, #4294967295
  403910:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  403914:	f104 0801 	add.w	r8, r4, #1
  403918:	7863      	ldrb	r3, [r4, #1]
  40391a:	9201      	str	r2, [sp, #4]
  40391c:	4608      	mov	r0, r1
  40391e:	460e      	mov	r6, r1
  403920:	460c      	mov	r4, r1
  403922:	f108 0801 	add.w	r8, r8, #1
  403926:	f1a3 0220 	sub.w	r2, r3, #32
  40392a:	2a58      	cmp	r2, #88	; 0x58
  40392c:	f200 8393 	bhi.w	404056 <_vfiprintf_r+0x802>
  403930:	e8df f012 	tbh	[pc, r2, lsl #1]
  403934:	03910346 	.word	0x03910346
  403938:	034e0391 	.word	0x034e0391
  40393c:	03910391 	.word	0x03910391
  403940:	03910391 	.word	0x03910391
  403944:	03910391 	.word	0x03910391
  403948:	02670289 	.word	0x02670289
  40394c:	00800391 	.word	0x00800391
  403950:	0391026c 	.word	0x0391026c
  403954:	025901c6 	.word	0x025901c6
  403958:	02590259 	.word	0x02590259
  40395c:	02590259 	.word	0x02590259
  403960:	02590259 	.word	0x02590259
  403964:	02590259 	.word	0x02590259
  403968:	03910391 	.word	0x03910391
  40396c:	03910391 	.word	0x03910391
  403970:	03910391 	.word	0x03910391
  403974:	03910391 	.word	0x03910391
  403978:	03910391 	.word	0x03910391
  40397c:	039101cb 	.word	0x039101cb
  403980:	03910391 	.word	0x03910391
  403984:	03910391 	.word	0x03910391
  403988:	03910391 	.word	0x03910391
  40398c:	03910391 	.word	0x03910391
  403990:	02140391 	.word	0x02140391
  403994:	03910391 	.word	0x03910391
  403998:	03910391 	.word	0x03910391
  40399c:	02ee0391 	.word	0x02ee0391
  4039a0:	03910391 	.word	0x03910391
  4039a4:	03910311 	.word	0x03910311
  4039a8:	03910391 	.word	0x03910391
  4039ac:	03910391 	.word	0x03910391
  4039b0:	03910391 	.word	0x03910391
  4039b4:	03910391 	.word	0x03910391
  4039b8:	03340391 	.word	0x03340391
  4039bc:	0391038a 	.word	0x0391038a
  4039c0:	03910391 	.word	0x03910391
  4039c4:	038a0367 	.word	0x038a0367
  4039c8:	03910391 	.word	0x03910391
  4039cc:	0391036c 	.word	0x0391036c
  4039d0:	02950379 	.word	0x02950379
  4039d4:	02e90085 	.word	0x02e90085
  4039d8:	029b0391 	.word	0x029b0391
  4039dc:	02ba0391 	.word	0x02ba0391
  4039e0:	03910391 	.word	0x03910391
  4039e4:	0353      	.short	0x0353
  4039e6:	f10a 0a08 	add.w	sl, sl, #8
  4039ea:	9b02      	ldr	r3, [sp, #8]
  4039ec:	442b      	add	r3, r5
  4039ee:	9302      	str	r3, [sp, #8]
  4039f0:	e785      	b.n	4038fe <_vfiprintf_r+0xaa>
  4039f2:	9900      	ldr	r1, [sp, #0]
  4039f4:	9805      	ldr	r0, [sp, #20]
  4039f6:	f000 fe61 	bl	4046bc <__swsetup_r>
  4039fa:	2800      	cmp	r0, #0
  4039fc:	f040 8558 	bne.w	4044b0 <_vfiprintf_r+0xc5c>
  403a00:	9b00      	ldr	r3, [sp, #0]
  403a02:	899a      	ldrh	r2, [r3, #12]
  403a04:	f002 021a 	and.w	r2, r2, #26
  403a08:	2a0a      	cmp	r2, #10
  403a0a:	f47f af4b 	bne.w	4038a4 <_vfiprintf_r+0x50>
  403a0e:	9900      	ldr	r1, [sp, #0]
  403a10:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  403a14:	2b00      	cmp	r3, #0
  403a16:	f6ff af45 	blt.w	4038a4 <_vfiprintf_r+0x50>
  403a1a:	4623      	mov	r3, r4
  403a1c:	4642      	mov	r2, r8
  403a1e:	9805      	ldr	r0, [sp, #20]
  403a20:	f000 fe16 	bl	404650 <__sbprintf>
  403a24:	b02b      	add	sp, #172	; 0xac
  403a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a2a:	f000 fff3 	bl	404a14 <__sinit>
  403a2e:	e71e      	b.n	40386e <_vfiprintf_r+0x1a>
  403a30:	4264      	negs	r4, r4
  403a32:	9304      	str	r3, [sp, #16]
  403a34:	f046 0604 	orr.w	r6, r6, #4
  403a38:	f898 3000 	ldrb.w	r3, [r8]
  403a3c:	e771      	b.n	403922 <_vfiprintf_r+0xce>
  403a3e:	2130      	movs	r1, #48	; 0x30
  403a40:	9804      	ldr	r0, [sp, #16]
  403a42:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  403a46:	9901      	ldr	r1, [sp, #4]
  403a48:	9406      	str	r4, [sp, #24]
  403a4a:	f04f 0300 	mov.w	r3, #0
  403a4e:	2278      	movs	r2, #120	; 0x78
  403a50:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  403a54:	2900      	cmp	r1, #0
  403a56:	4603      	mov	r3, r0
  403a58:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  403a5c:	6804      	ldr	r4, [r0, #0]
  403a5e:	f103 0304 	add.w	r3, r3, #4
  403a62:	f04f 0500 	mov.w	r5, #0
  403a66:	f046 0202 	orr.w	r2, r6, #2
  403a6a:	f2c0 8525 	blt.w	4044b8 <_vfiprintf_r+0xc64>
  403a6e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403a72:	ea54 0205 	orrs.w	r2, r4, r5
  403a76:	f046 0602 	orr.w	r6, r6, #2
  403a7a:	9304      	str	r3, [sp, #16]
  403a7c:	f040 84bf 	bne.w	4043fe <_vfiprintf_r+0xbaa>
  403a80:	48b3      	ldr	r0, [pc, #716]	; (403d50 <_vfiprintf_r+0x4fc>)
  403a82:	9b01      	ldr	r3, [sp, #4]
  403a84:	2b00      	cmp	r3, #0
  403a86:	f040 841c 	bne.w	4042c2 <_vfiprintf_r+0xa6e>
  403a8a:	4699      	mov	r9, r3
  403a8c:	2300      	movs	r3, #0
  403a8e:	9301      	str	r3, [sp, #4]
  403a90:	9303      	str	r3, [sp, #12]
  403a92:	465f      	mov	r7, fp
  403a94:	9b01      	ldr	r3, [sp, #4]
  403a96:	9a03      	ldr	r2, [sp, #12]
  403a98:	4293      	cmp	r3, r2
  403a9a:	bfb8      	it	lt
  403a9c:	4613      	movlt	r3, r2
  403a9e:	461d      	mov	r5, r3
  403aa0:	f1b9 0f00 	cmp.w	r9, #0
  403aa4:	d000      	beq.n	403aa8 <_vfiprintf_r+0x254>
  403aa6:	3501      	adds	r5, #1
  403aa8:	f016 0302 	ands.w	r3, r6, #2
  403aac:	9307      	str	r3, [sp, #28]
  403aae:	bf18      	it	ne
  403ab0:	3502      	addne	r5, #2
  403ab2:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  403ab6:	9308      	str	r3, [sp, #32]
  403ab8:	f040 82f1 	bne.w	40409e <_vfiprintf_r+0x84a>
  403abc:	9b06      	ldr	r3, [sp, #24]
  403abe:	1b5c      	subs	r4, r3, r5
  403ac0:	2c00      	cmp	r4, #0
  403ac2:	f340 82ec 	ble.w	40409e <_vfiprintf_r+0x84a>
  403ac6:	2c10      	cmp	r4, #16
  403ac8:	f340 8556 	ble.w	404578 <_vfiprintf_r+0xd24>
  403acc:	f8df 9284 	ldr.w	r9, [pc, #644]	; 403d54 <_vfiprintf_r+0x500>
  403ad0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  403ad4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403ad6:	46d4      	mov	ip, sl
  403ad8:	2310      	movs	r3, #16
  403ada:	46c2      	mov	sl, r8
  403adc:	4670      	mov	r0, lr
  403ade:	46a8      	mov	r8, r5
  403ae0:	464d      	mov	r5, r9
  403ae2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403ae6:	e007      	b.n	403af8 <_vfiprintf_r+0x2a4>
  403ae8:	f100 0e02 	add.w	lr, r0, #2
  403aec:	f10c 0c08 	add.w	ip, ip, #8
  403af0:	4608      	mov	r0, r1
  403af2:	3c10      	subs	r4, #16
  403af4:	2c10      	cmp	r4, #16
  403af6:	dd13      	ble.n	403b20 <_vfiprintf_r+0x2cc>
  403af8:	1c41      	adds	r1, r0, #1
  403afa:	3210      	adds	r2, #16
  403afc:	2907      	cmp	r1, #7
  403afe:	920f      	str	r2, [sp, #60]	; 0x3c
  403b00:	f8cc 5000 	str.w	r5, [ip]
  403b04:	f8cc 3004 	str.w	r3, [ip, #4]
  403b08:	910e      	str	r1, [sp, #56]	; 0x38
  403b0a:	dded      	ble.n	403ae8 <_vfiprintf_r+0x294>
  403b0c:	2a00      	cmp	r2, #0
  403b0e:	f040 82b7 	bne.w	404080 <_vfiprintf_r+0x82c>
  403b12:	3c10      	subs	r4, #16
  403b14:	2c10      	cmp	r4, #16
  403b16:	4610      	mov	r0, r2
  403b18:	f04f 0e01 	mov.w	lr, #1
  403b1c:	46dc      	mov	ip, fp
  403b1e:	dceb      	bgt.n	403af8 <_vfiprintf_r+0x2a4>
  403b20:	46a9      	mov	r9, r5
  403b22:	4670      	mov	r0, lr
  403b24:	4645      	mov	r5, r8
  403b26:	46d0      	mov	r8, sl
  403b28:	46e2      	mov	sl, ip
  403b2a:	4422      	add	r2, r4
  403b2c:	2807      	cmp	r0, #7
  403b2e:	920f      	str	r2, [sp, #60]	; 0x3c
  403b30:	f8ca 9000 	str.w	r9, [sl]
  403b34:	f8ca 4004 	str.w	r4, [sl, #4]
  403b38:	900e      	str	r0, [sp, #56]	; 0x38
  403b3a:	f300 8375 	bgt.w	404228 <_vfiprintf_r+0x9d4>
  403b3e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  403b42:	f10a 0a08 	add.w	sl, sl, #8
  403b46:	f100 0e01 	add.w	lr, r0, #1
  403b4a:	2b00      	cmp	r3, #0
  403b4c:	f040 82b0 	bne.w	4040b0 <_vfiprintf_r+0x85c>
  403b50:	9b07      	ldr	r3, [sp, #28]
  403b52:	2b00      	cmp	r3, #0
  403b54:	f000 82c3 	beq.w	4040de <_vfiprintf_r+0x88a>
  403b58:	3202      	adds	r2, #2
  403b5a:	a90c      	add	r1, sp, #48	; 0x30
  403b5c:	2302      	movs	r3, #2
  403b5e:	f1be 0f07 	cmp.w	lr, #7
  403b62:	920f      	str	r2, [sp, #60]	; 0x3c
  403b64:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  403b68:	e88a 000a 	stmia.w	sl, {r1, r3}
  403b6c:	f340 8378 	ble.w	404260 <_vfiprintf_r+0xa0c>
  403b70:	2a00      	cmp	r2, #0
  403b72:	f040 840a 	bne.w	40438a <_vfiprintf_r+0xb36>
  403b76:	9b08      	ldr	r3, [sp, #32]
  403b78:	2b80      	cmp	r3, #128	; 0x80
  403b7a:	f04f 0e01 	mov.w	lr, #1
  403b7e:	4610      	mov	r0, r2
  403b80:	46da      	mov	sl, fp
  403b82:	f040 82b0 	bne.w	4040e6 <_vfiprintf_r+0x892>
  403b86:	9b06      	ldr	r3, [sp, #24]
  403b88:	1b5c      	subs	r4, r3, r5
  403b8a:	2c00      	cmp	r4, #0
  403b8c:	f340 82ab 	ble.w	4040e6 <_vfiprintf_r+0x892>
  403b90:	2c10      	cmp	r4, #16
  403b92:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 403d58 <_vfiprintf_r+0x504>
  403b96:	f340 850b 	ble.w	4045b0 <_vfiprintf_r+0xd5c>
  403b9a:	46d6      	mov	lr, sl
  403b9c:	2310      	movs	r3, #16
  403b9e:	46c2      	mov	sl, r8
  403ba0:	46a8      	mov	r8, r5
  403ba2:	464d      	mov	r5, r9
  403ba4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403ba8:	e007      	b.n	403bba <_vfiprintf_r+0x366>
  403baa:	f100 0c02 	add.w	ip, r0, #2
  403bae:	f10e 0e08 	add.w	lr, lr, #8
  403bb2:	4608      	mov	r0, r1
  403bb4:	3c10      	subs	r4, #16
  403bb6:	2c10      	cmp	r4, #16
  403bb8:	dd13      	ble.n	403be2 <_vfiprintf_r+0x38e>
  403bba:	1c41      	adds	r1, r0, #1
  403bbc:	3210      	adds	r2, #16
  403bbe:	2907      	cmp	r1, #7
  403bc0:	920f      	str	r2, [sp, #60]	; 0x3c
  403bc2:	f8ce 5000 	str.w	r5, [lr]
  403bc6:	f8ce 3004 	str.w	r3, [lr, #4]
  403bca:	910e      	str	r1, [sp, #56]	; 0x38
  403bcc:	dded      	ble.n	403baa <_vfiprintf_r+0x356>
  403bce:	2a00      	cmp	r2, #0
  403bd0:	f040 8315 	bne.w	4041fe <_vfiprintf_r+0x9aa>
  403bd4:	3c10      	subs	r4, #16
  403bd6:	2c10      	cmp	r4, #16
  403bd8:	f04f 0c01 	mov.w	ip, #1
  403bdc:	4610      	mov	r0, r2
  403bde:	46de      	mov	lr, fp
  403be0:	dceb      	bgt.n	403bba <_vfiprintf_r+0x366>
  403be2:	46a9      	mov	r9, r5
  403be4:	4645      	mov	r5, r8
  403be6:	46d0      	mov	r8, sl
  403be8:	46f2      	mov	sl, lr
  403bea:	4422      	add	r2, r4
  403bec:	f1bc 0f07 	cmp.w	ip, #7
  403bf0:	920f      	str	r2, [sp, #60]	; 0x3c
  403bf2:	f8ca 9000 	str.w	r9, [sl]
  403bf6:	f8ca 4004 	str.w	r4, [sl, #4]
  403bfa:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  403bfe:	f300 83d2 	bgt.w	4043a6 <_vfiprintf_r+0xb52>
  403c02:	9b01      	ldr	r3, [sp, #4]
  403c04:	9903      	ldr	r1, [sp, #12]
  403c06:	1a5c      	subs	r4, r3, r1
  403c08:	2c00      	cmp	r4, #0
  403c0a:	f10a 0a08 	add.w	sl, sl, #8
  403c0e:	f10c 0e01 	add.w	lr, ip, #1
  403c12:	4660      	mov	r0, ip
  403c14:	f300 826d 	bgt.w	4040f2 <_vfiprintf_r+0x89e>
  403c18:	9903      	ldr	r1, [sp, #12]
  403c1a:	f8ca 7000 	str.w	r7, [sl]
  403c1e:	440a      	add	r2, r1
  403c20:	f1be 0f07 	cmp.w	lr, #7
  403c24:	920f      	str	r2, [sp, #60]	; 0x3c
  403c26:	f8ca 1004 	str.w	r1, [sl, #4]
  403c2a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  403c2e:	f340 82ce 	ble.w	4041ce <_vfiprintf_r+0x97a>
  403c32:	2a00      	cmp	r2, #0
  403c34:	f040 833a 	bne.w	4042ac <_vfiprintf_r+0xa58>
  403c38:	0770      	lsls	r0, r6, #29
  403c3a:	920e      	str	r2, [sp, #56]	; 0x38
  403c3c:	d538      	bpl.n	403cb0 <_vfiprintf_r+0x45c>
  403c3e:	9b06      	ldr	r3, [sp, #24]
  403c40:	1b5c      	subs	r4, r3, r5
  403c42:	2c00      	cmp	r4, #0
  403c44:	dd34      	ble.n	403cb0 <_vfiprintf_r+0x45c>
  403c46:	46da      	mov	sl, fp
  403c48:	2c10      	cmp	r4, #16
  403c4a:	f340 84ab 	ble.w	4045a4 <_vfiprintf_r+0xd50>
  403c4e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 403d54 <_vfiprintf_r+0x500>
  403c52:	990e      	ldr	r1, [sp, #56]	; 0x38
  403c54:	464f      	mov	r7, r9
  403c56:	2610      	movs	r6, #16
  403c58:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403c5c:	e006      	b.n	403c6c <_vfiprintf_r+0x418>
  403c5e:	1c88      	adds	r0, r1, #2
  403c60:	f10a 0a08 	add.w	sl, sl, #8
  403c64:	4619      	mov	r1, r3
  403c66:	3c10      	subs	r4, #16
  403c68:	2c10      	cmp	r4, #16
  403c6a:	dd13      	ble.n	403c94 <_vfiprintf_r+0x440>
  403c6c:	1c4b      	adds	r3, r1, #1
  403c6e:	3210      	adds	r2, #16
  403c70:	2b07      	cmp	r3, #7
  403c72:	920f      	str	r2, [sp, #60]	; 0x3c
  403c74:	f8ca 7000 	str.w	r7, [sl]
  403c78:	f8ca 6004 	str.w	r6, [sl, #4]
  403c7c:	930e      	str	r3, [sp, #56]	; 0x38
  403c7e:	ddee      	ble.n	403c5e <_vfiprintf_r+0x40a>
  403c80:	2a00      	cmp	r2, #0
  403c82:	f040 828e 	bne.w	4041a2 <_vfiprintf_r+0x94e>
  403c86:	3c10      	subs	r4, #16
  403c88:	2c10      	cmp	r4, #16
  403c8a:	f04f 0001 	mov.w	r0, #1
  403c8e:	4611      	mov	r1, r2
  403c90:	46da      	mov	sl, fp
  403c92:	dceb      	bgt.n	403c6c <_vfiprintf_r+0x418>
  403c94:	46b9      	mov	r9, r7
  403c96:	4422      	add	r2, r4
  403c98:	2807      	cmp	r0, #7
  403c9a:	920f      	str	r2, [sp, #60]	; 0x3c
  403c9c:	f8ca 9000 	str.w	r9, [sl]
  403ca0:	f8ca 4004 	str.w	r4, [sl, #4]
  403ca4:	900e      	str	r0, [sp, #56]	; 0x38
  403ca6:	f340 829b 	ble.w	4041e0 <_vfiprintf_r+0x98c>
  403caa:	2a00      	cmp	r2, #0
  403cac:	f040 8425 	bne.w	4044fa <_vfiprintf_r+0xca6>
  403cb0:	9b02      	ldr	r3, [sp, #8]
  403cb2:	9a06      	ldr	r2, [sp, #24]
  403cb4:	42aa      	cmp	r2, r5
  403cb6:	bfac      	ite	ge
  403cb8:	189b      	addge	r3, r3, r2
  403cba:	195b      	addlt	r3, r3, r5
  403cbc:	9302      	str	r3, [sp, #8]
  403cbe:	e299      	b.n	4041f4 <_vfiprintf_r+0x9a0>
  403cc0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  403cc4:	f898 3000 	ldrb.w	r3, [r8]
  403cc8:	e62b      	b.n	403922 <_vfiprintf_r+0xce>
  403cca:	9406      	str	r4, [sp, #24]
  403ccc:	2900      	cmp	r1, #0
  403cce:	f040 84af 	bne.w	404630 <_vfiprintf_r+0xddc>
  403cd2:	f046 0610 	orr.w	r6, r6, #16
  403cd6:	06b3      	lsls	r3, r6, #26
  403cd8:	f140 8312 	bpl.w	404300 <_vfiprintf_r+0xaac>
  403cdc:	9904      	ldr	r1, [sp, #16]
  403cde:	3107      	adds	r1, #7
  403ce0:	f021 0107 	bic.w	r1, r1, #7
  403ce4:	e9d1 2300 	ldrd	r2, r3, [r1]
  403ce8:	3108      	adds	r1, #8
  403cea:	9104      	str	r1, [sp, #16]
  403cec:	4614      	mov	r4, r2
  403cee:	461d      	mov	r5, r3
  403cf0:	2a00      	cmp	r2, #0
  403cf2:	f173 0300 	sbcs.w	r3, r3, #0
  403cf6:	f2c0 8386 	blt.w	404406 <_vfiprintf_r+0xbb2>
  403cfa:	9b01      	ldr	r3, [sp, #4]
  403cfc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  403d00:	2b00      	cmp	r3, #0
  403d02:	f2c0 831a 	blt.w	40433a <_vfiprintf_r+0xae6>
  403d06:	ea54 0305 	orrs.w	r3, r4, r5
  403d0a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403d0e:	f000 80ed 	beq.w	403eec <_vfiprintf_r+0x698>
  403d12:	2d00      	cmp	r5, #0
  403d14:	bf08      	it	eq
  403d16:	2c0a      	cmpeq	r4, #10
  403d18:	f0c0 80ed 	bcc.w	403ef6 <_vfiprintf_r+0x6a2>
  403d1c:	465f      	mov	r7, fp
  403d1e:	4620      	mov	r0, r4
  403d20:	4629      	mov	r1, r5
  403d22:	220a      	movs	r2, #10
  403d24:	2300      	movs	r3, #0
  403d26:	f001 fed7 	bl	405ad8 <__aeabi_uldivmod>
  403d2a:	3230      	adds	r2, #48	; 0x30
  403d2c:	f807 2d01 	strb.w	r2, [r7, #-1]!
  403d30:	4620      	mov	r0, r4
  403d32:	4629      	mov	r1, r5
  403d34:	2300      	movs	r3, #0
  403d36:	220a      	movs	r2, #10
  403d38:	f001 fece 	bl	405ad8 <__aeabi_uldivmod>
  403d3c:	4604      	mov	r4, r0
  403d3e:	460d      	mov	r5, r1
  403d40:	ea54 0305 	orrs.w	r3, r4, r5
  403d44:	d1eb      	bne.n	403d1e <_vfiprintf_r+0x4ca>
  403d46:	ebc7 030b 	rsb	r3, r7, fp
  403d4a:	9303      	str	r3, [sp, #12]
  403d4c:	e6a2      	b.n	403a94 <_vfiprintf_r+0x240>
  403d4e:	bf00      	nop
  403d50:	00405f08 	.word	0x00405f08
  403d54:	00405f24 	.word	0x00405f24
  403d58:	00405ee4 	.word	0x00405ee4
  403d5c:	9406      	str	r4, [sp, #24]
  403d5e:	2900      	cmp	r1, #0
  403d60:	f040 8462 	bne.w	404628 <_vfiprintf_r+0xdd4>
  403d64:	f046 0610 	orr.w	r6, r6, #16
  403d68:	f016 0320 	ands.w	r3, r6, #32
  403d6c:	f000 82ae 	beq.w	4042cc <_vfiprintf_r+0xa78>
  403d70:	9b04      	ldr	r3, [sp, #16]
  403d72:	3307      	adds	r3, #7
  403d74:	f023 0307 	bic.w	r3, r3, #7
  403d78:	f04f 0200 	mov.w	r2, #0
  403d7c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  403d80:	e9d3 4500 	ldrd	r4, r5, [r3]
  403d84:	f103 0208 	add.w	r2, r3, #8
  403d88:	9b01      	ldr	r3, [sp, #4]
  403d8a:	9204      	str	r2, [sp, #16]
  403d8c:	2b00      	cmp	r3, #0
  403d8e:	f2c0 8174 	blt.w	40407a <_vfiprintf_r+0x826>
  403d92:	ea54 0305 	orrs.w	r3, r4, r5
  403d96:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403d9a:	f040 816e 	bne.w	40407a <_vfiprintf_r+0x826>
  403d9e:	9b01      	ldr	r3, [sp, #4]
  403da0:	2b00      	cmp	r3, #0
  403da2:	f000 8430 	beq.w	404606 <_vfiprintf_r+0xdb2>
  403da6:	f04f 0900 	mov.w	r9, #0
  403daa:	2400      	movs	r4, #0
  403dac:	2500      	movs	r5, #0
  403dae:	465f      	mov	r7, fp
  403db0:	08e2      	lsrs	r2, r4, #3
  403db2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  403db6:	08e9      	lsrs	r1, r5, #3
  403db8:	f004 0307 	and.w	r3, r4, #7
  403dbc:	460d      	mov	r5, r1
  403dbe:	4614      	mov	r4, r2
  403dc0:	3330      	adds	r3, #48	; 0x30
  403dc2:	ea54 0205 	orrs.w	r2, r4, r5
  403dc6:	f807 3d01 	strb.w	r3, [r7, #-1]!
  403dca:	d1f1      	bne.n	403db0 <_vfiprintf_r+0x55c>
  403dcc:	07f4      	lsls	r4, r6, #31
  403dce:	d5ba      	bpl.n	403d46 <_vfiprintf_r+0x4f2>
  403dd0:	2b30      	cmp	r3, #48	; 0x30
  403dd2:	d0b8      	beq.n	403d46 <_vfiprintf_r+0x4f2>
  403dd4:	2230      	movs	r2, #48	; 0x30
  403dd6:	1e7b      	subs	r3, r7, #1
  403dd8:	f807 2c01 	strb.w	r2, [r7, #-1]
  403ddc:	ebc3 020b 	rsb	r2, r3, fp
  403de0:	9203      	str	r2, [sp, #12]
  403de2:	461f      	mov	r7, r3
  403de4:	e656      	b.n	403a94 <_vfiprintf_r+0x240>
  403de6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403dea:	2400      	movs	r4, #0
  403dec:	f818 3b01 	ldrb.w	r3, [r8], #1
  403df0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403df4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  403df8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403dfc:	2a09      	cmp	r2, #9
  403dfe:	d9f5      	bls.n	403dec <_vfiprintf_r+0x598>
  403e00:	e591      	b.n	403926 <_vfiprintf_r+0xd2>
  403e02:	f898 3000 	ldrb.w	r3, [r8]
  403e06:	2101      	movs	r1, #1
  403e08:	202b      	movs	r0, #43	; 0x2b
  403e0a:	e58a      	b.n	403922 <_vfiprintf_r+0xce>
  403e0c:	f898 3000 	ldrb.w	r3, [r8]
  403e10:	2b2a      	cmp	r3, #42	; 0x2a
  403e12:	f108 0501 	add.w	r5, r8, #1
  403e16:	f000 83dd 	beq.w	4045d4 <_vfiprintf_r+0xd80>
  403e1a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403e1e:	2a09      	cmp	r2, #9
  403e20:	46a8      	mov	r8, r5
  403e22:	bf98      	it	ls
  403e24:	2500      	movls	r5, #0
  403e26:	f200 83ce 	bhi.w	4045c6 <_vfiprintf_r+0xd72>
  403e2a:	f818 3b01 	ldrb.w	r3, [r8], #1
  403e2e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  403e32:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  403e36:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403e3a:	2a09      	cmp	r2, #9
  403e3c:	d9f5      	bls.n	403e2a <_vfiprintf_r+0x5d6>
  403e3e:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  403e42:	9201      	str	r2, [sp, #4]
  403e44:	e56f      	b.n	403926 <_vfiprintf_r+0xd2>
  403e46:	9a04      	ldr	r2, [sp, #16]
  403e48:	6814      	ldr	r4, [r2, #0]
  403e4a:	4613      	mov	r3, r2
  403e4c:	2c00      	cmp	r4, #0
  403e4e:	f103 0304 	add.w	r3, r3, #4
  403e52:	f6ff aded 	blt.w	403a30 <_vfiprintf_r+0x1dc>
  403e56:	9304      	str	r3, [sp, #16]
  403e58:	f898 3000 	ldrb.w	r3, [r8]
  403e5c:	e561      	b.n	403922 <_vfiprintf_r+0xce>
  403e5e:	9406      	str	r4, [sp, #24]
  403e60:	2900      	cmp	r1, #0
  403e62:	d081      	beq.n	403d68 <_vfiprintf_r+0x514>
  403e64:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  403e68:	e77e      	b.n	403d68 <_vfiprintf_r+0x514>
  403e6a:	9a04      	ldr	r2, [sp, #16]
  403e6c:	9406      	str	r4, [sp, #24]
  403e6e:	6817      	ldr	r7, [r2, #0]
  403e70:	f04f 0300 	mov.w	r3, #0
  403e74:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  403e78:	1d14      	adds	r4, r2, #4
  403e7a:	9b01      	ldr	r3, [sp, #4]
  403e7c:	2f00      	cmp	r7, #0
  403e7e:	f000 8386 	beq.w	40458e <_vfiprintf_r+0xd3a>
  403e82:	2b00      	cmp	r3, #0
  403e84:	f2c0 835f 	blt.w	404546 <_vfiprintf_r+0xcf2>
  403e88:	461a      	mov	r2, r3
  403e8a:	2100      	movs	r1, #0
  403e8c:	4638      	mov	r0, r7
  403e8e:	f001 f99f 	bl	4051d0 <memchr>
  403e92:	2800      	cmp	r0, #0
  403e94:	f000 838f 	beq.w	4045b6 <_vfiprintf_r+0xd62>
  403e98:	1bc3      	subs	r3, r0, r7
  403e9a:	9303      	str	r3, [sp, #12]
  403e9c:	2300      	movs	r3, #0
  403e9e:	9404      	str	r4, [sp, #16]
  403ea0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  403ea4:	9301      	str	r3, [sp, #4]
  403ea6:	e5f5      	b.n	403a94 <_vfiprintf_r+0x240>
  403ea8:	9406      	str	r4, [sp, #24]
  403eaa:	2900      	cmp	r1, #0
  403eac:	f040 83b9 	bne.w	404622 <_vfiprintf_r+0xdce>
  403eb0:	f016 0920 	ands.w	r9, r6, #32
  403eb4:	d135      	bne.n	403f22 <_vfiprintf_r+0x6ce>
  403eb6:	f016 0310 	ands.w	r3, r6, #16
  403eba:	d103      	bne.n	403ec4 <_vfiprintf_r+0x670>
  403ebc:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  403ec0:	f040 832a 	bne.w	404518 <_vfiprintf_r+0xcc4>
  403ec4:	9a04      	ldr	r2, [sp, #16]
  403ec6:	4613      	mov	r3, r2
  403ec8:	6814      	ldr	r4, [r2, #0]
  403eca:	9a01      	ldr	r2, [sp, #4]
  403ecc:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  403ed0:	2a00      	cmp	r2, #0
  403ed2:	f103 0304 	add.w	r3, r3, #4
  403ed6:	f04f 0500 	mov.w	r5, #0
  403eda:	f2c0 8332 	blt.w	404542 <_vfiprintf_r+0xcee>
  403ede:	ea54 0205 	orrs.w	r2, r4, r5
  403ee2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403ee6:	9304      	str	r3, [sp, #16]
  403ee8:	f47f af13 	bne.w	403d12 <_vfiprintf_r+0x4be>
  403eec:	9b01      	ldr	r3, [sp, #4]
  403eee:	2b00      	cmp	r3, #0
  403ef0:	f43f adcc 	beq.w	403a8c <_vfiprintf_r+0x238>
  403ef4:	2400      	movs	r4, #0
  403ef6:	af2a      	add	r7, sp, #168	; 0xa8
  403ef8:	3430      	adds	r4, #48	; 0x30
  403efa:	f807 4d41 	strb.w	r4, [r7, #-65]!
  403efe:	ebc7 030b 	rsb	r3, r7, fp
  403f02:	9303      	str	r3, [sp, #12]
  403f04:	e5c6      	b.n	403a94 <_vfiprintf_r+0x240>
  403f06:	f046 0620 	orr.w	r6, r6, #32
  403f0a:	f898 3000 	ldrb.w	r3, [r8]
  403f0e:	e508      	b.n	403922 <_vfiprintf_r+0xce>
  403f10:	9406      	str	r4, [sp, #24]
  403f12:	2900      	cmp	r1, #0
  403f14:	f040 836e 	bne.w	4045f4 <_vfiprintf_r+0xda0>
  403f18:	f046 0610 	orr.w	r6, r6, #16
  403f1c:	f016 0920 	ands.w	r9, r6, #32
  403f20:	d0c9      	beq.n	403eb6 <_vfiprintf_r+0x662>
  403f22:	9b04      	ldr	r3, [sp, #16]
  403f24:	3307      	adds	r3, #7
  403f26:	f023 0307 	bic.w	r3, r3, #7
  403f2a:	f04f 0200 	mov.w	r2, #0
  403f2e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  403f32:	e9d3 4500 	ldrd	r4, r5, [r3]
  403f36:	f103 0208 	add.w	r2, r3, #8
  403f3a:	9b01      	ldr	r3, [sp, #4]
  403f3c:	9204      	str	r2, [sp, #16]
  403f3e:	2b00      	cmp	r3, #0
  403f40:	f2c0 81f9 	blt.w	404336 <_vfiprintf_r+0xae2>
  403f44:	ea54 0305 	orrs.w	r3, r4, r5
  403f48:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403f4c:	f04f 0900 	mov.w	r9, #0
  403f50:	f47f aedf 	bne.w	403d12 <_vfiprintf_r+0x4be>
  403f54:	e7ca      	b.n	403eec <_vfiprintf_r+0x698>
  403f56:	9406      	str	r4, [sp, #24]
  403f58:	2900      	cmp	r1, #0
  403f5a:	f040 8351 	bne.w	404600 <_vfiprintf_r+0xdac>
  403f5e:	06b2      	lsls	r2, r6, #26
  403f60:	48ae      	ldr	r0, [pc, #696]	; (40421c <_vfiprintf_r+0x9c8>)
  403f62:	d541      	bpl.n	403fe8 <_vfiprintf_r+0x794>
  403f64:	9a04      	ldr	r2, [sp, #16]
  403f66:	3207      	adds	r2, #7
  403f68:	f022 0207 	bic.w	r2, r2, #7
  403f6c:	e9d2 4500 	ldrd	r4, r5, [r2]
  403f70:	f102 0108 	add.w	r1, r2, #8
  403f74:	9104      	str	r1, [sp, #16]
  403f76:	f016 0901 	ands.w	r9, r6, #1
  403f7a:	f000 8177 	beq.w	40426c <_vfiprintf_r+0xa18>
  403f7e:	ea54 0205 	orrs.w	r2, r4, r5
  403f82:	f040 8226 	bne.w	4043d2 <_vfiprintf_r+0xb7e>
  403f86:	f04f 0300 	mov.w	r3, #0
  403f8a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  403f8e:	9b01      	ldr	r3, [sp, #4]
  403f90:	2b00      	cmp	r3, #0
  403f92:	f2c0 8196 	blt.w	4042c2 <_vfiprintf_r+0xa6e>
  403f96:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403f9a:	e572      	b.n	403a82 <_vfiprintf_r+0x22e>
  403f9c:	9a04      	ldr	r2, [sp, #16]
  403f9e:	9406      	str	r4, [sp, #24]
  403fa0:	6813      	ldr	r3, [r2, #0]
  403fa2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  403fa6:	4613      	mov	r3, r2
  403fa8:	f04f 0100 	mov.w	r1, #0
  403fac:	2501      	movs	r5, #1
  403fae:	3304      	adds	r3, #4
  403fb0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  403fb4:	9304      	str	r3, [sp, #16]
  403fb6:	9503      	str	r5, [sp, #12]
  403fb8:	af10      	add	r7, sp, #64	; 0x40
  403fba:	2300      	movs	r3, #0
  403fbc:	9301      	str	r3, [sp, #4]
  403fbe:	e573      	b.n	403aa8 <_vfiprintf_r+0x254>
  403fc0:	f898 3000 	ldrb.w	r3, [r8]
  403fc4:	2800      	cmp	r0, #0
  403fc6:	f47f acac 	bne.w	403922 <_vfiprintf_r+0xce>
  403fca:	2101      	movs	r1, #1
  403fcc:	2020      	movs	r0, #32
  403fce:	e4a8      	b.n	403922 <_vfiprintf_r+0xce>
  403fd0:	f046 0601 	orr.w	r6, r6, #1
  403fd4:	f898 3000 	ldrb.w	r3, [r8]
  403fd8:	e4a3      	b.n	403922 <_vfiprintf_r+0xce>
  403fda:	9406      	str	r4, [sp, #24]
  403fdc:	2900      	cmp	r1, #0
  403fde:	f040 830c 	bne.w	4045fa <_vfiprintf_r+0xda6>
  403fe2:	06b2      	lsls	r2, r6, #26
  403fe4:	488e      	ldr	r0, [pc, #568]	; (404220 <_vfiprintf_r+0x9cc>)
  403fe6:	d4bd      	bmi.n	403f64 <_vfiprintf_r+0x710>
  403fe8:	9904      	ldr	r1, [sp, #16]
  403fea:	06f7      	lsls	r7, r6, #27
  403fec:	460a      	mov	r2, r1
  403fee:	f100 819d 	bmi.w	40432c <_vfiprintf_r+0xad8>
  403ff2:	0675      	lsls	r5, r6, #25
  403ff4:	f140 819a 	bpl.w	40432c <_vfiprintf_r+0xad8>
  403ff8:	3204      	adds	r2, #4
  403ffa:	880c      	ldrh	r4, [r1, #0]
  403ffc:	9204      	str	r2, [sp, #16]
  403ffe:	2500      	movs	r5, #0
  404000:	e7b9      	b.n	403f76 <_vfiprintf_r+0x722>
  404002:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  404006:	f898 3000 	ldrb.w	r3, [r8]
  40400a:	e48a      	b.n	403922 <_vfiprintf_r+0xce>
  40400c:	f898 3000 	ldrb.w	r3, [r8]
  404010:	2b6c      	cmp	r3, #108	; 0x6c
  404012:	bf03      	ittte	eq
  404014:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  404018:	f046 0620 	orreq.w	r6, r6, #32
  40401c:	f108 0801 	addeq.w	r8, r8, #1
  404020:	f046 0610 	orrne.w	r6, r6, #16
  404024:	e47d      	b.n	403922 <_vfiprintf_r+0xce>
  404026:	2900      	cmp	r1, #0
  404028:	f040 8309 	bne.w	40463e <_vfiprintf_r+0xdea>
  40402c:	06b4      	lsls	r4, r6, #26
  40402e:	f140 821c 	bpl.w	40446a <_vfiprintf_r+0xc16>
  404032:	9a04      	ldr	r2, [sp, #16]
  404034:	9902      	ldr	r1, [sp, #8]
  404036:	6813      	ldr	r3, [r2, #0]
  404038:	17cd      	asrs	r5, r1, #31
  40403a:	4608      	mov	r0, r1
  40403c:	3204      	adds	r2, #4
  40403e:	4629      	mov	r1, r5
  404040:	9204      	str	r2, [sp, #16]
  404042:	e9c3 0100 	strd	r0, r1, [r3]
  404046:	e436      	b.n	4038b6 <_vfiprintf_r+0x62>
  404048:	9406      	str	r4, [sp, #24]
  40404a:	2900      	cmp	r1, #0
  40404c:	f43f ae43 	beq.w	403cd6 <_vfiprintf_r+0x482>
  404050:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404054:	e63f      	b.n	403cd6 <_vfiprintf_r+0x482>
  404056:	9406      	str	r4, [sp, #24]
  404058:	2900      	cmp	r1, #0
  40405a:	f040 82ed 	bne.w	404638 <_vfiprintf_r+0xde4>
  40405e:	2b00      	cmp	r3, #0
  404060:	f000 808f 	beq.w	404182 <_vfiprintf_r+0x92e>
  404064:	2501      	movs	r5, #1
  404066:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40406a:	f04f 0300 	mov.w	r3, #0
  40406e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404072:	9503      	str	r5, [sp, #12]
  404074:	af10      	add	r7, sp, #64	; 0x40
  404076:	e7a0      	b.n	403fba <_vfiprintf_r+0x766>
  404078:	9304      	str	r3, [sp, #16]
  40407a:	f04f 0900 	mov.w	r9, #0
  40407e:	e696      	b.n	403dae <_vfiprintf_r+0x55a>
  404080:	aa0d      	add	r2, sp, #52	; 0x34
  404082:	9900      	ldr	r1, [sp, #0]
  404084:	9309      	str	r3, [sp, #36]	; 0x24
  404086:	4648      	mov	r0, r9
  404088:	f7ff fba8 	bl	4037dc <__sprint_r.part.0>
  40408c:	2800      	cmp	r0, #0
  40408e:	d17f      	bne.n	404190 <_vfiprintf_r+0x93c>
  404090:	980e      	ldr	r0, [sp, #56]	; 0x38
  404092:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404094:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404096:	f100 0e01 	add.w	lr, r0, #1
  40409a:	46dc      	mov	ip, fp
  40409c:	e529      	b.n	403af2 <_vfiprintf_r+0x29e>
  40409e:	980e      	ldr	r0, [sp, #56]	; 0x38
  4040a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4040a2:	f100 0e01 	add.w	lr, r0, #1
  4040a6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4040aa:	2b00      	cmp	r3, #0
  4040ac:	f43f ad50 	beq.w	403b50 <_vfiprintf_r+0x2fc>
  4040b0:	3201      	adds	r2, #1
  4040b2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4040b6:	2301      	movs	r3, #1
  4040b8:	f1be 0f07 	cmp.w	lr, #7
  4040bc:	920f      	str	r2, [sp, #60]	; 0x3c
  4040be:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4040c2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4040c6:	f340 80bf 	ble.w	404248 <_vfiprintf_r+0x9f4>
  4040ca:	2a00      	cmp	r2, #0
  4040cc:	f040 814e 	bne.w	40436c <_vfiprintf_r+0xb18>
  4040d0:	9907      	ldr	r1, [sp, #28]
  4040d2:	2900      	cmp	r1, #0
  4040d4:	f040 80be 	bne.w	404254 <_vfiprintf_r+0xa00>
  4040d8:	469e      	mov	lr, r3
  4040da:	4610      	mov	r0, r2
  4040dc:	46da      	mov	sl, fp
  4040de:	9b08      	ldr	r3, [sp, #32]
  4040e0:	2b80      	cmp	r3, #128	; 0x80
  4040e2:	f43f ad50 	beq.w	403b86 <_vfiprintf_r+0x332>
  4040e6:	9b01      	ldr	r3, [sp, #4]
  4040e8:	9903      	ldr	r1, [sp, #12]
  4040ea:	1a5c      	subs	r4, r3, r1
  4040ec:	2c00      	cmp	r4, #0
  4040ee:	f77f ad93 	ble.w	403c18 <_vfiprintf_r+0x3c4>
  4040f2:	2c10      	cmp	r4, #16
  4040f4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 404224 <_vfiprintf_r+0x9d0>
  4040f8:	dd25      	ble.n	404146 <_vfiprintf_r+0x8f2>
  4040fa:	46d4      	mov	ip, sl
  4040fc:	2310      	movs	r3, #16
  4040fe:	46c2      	mov	sl, r8
  404100:	46a8      	mov	r8, r5
  404102:	464d      	mov	r5, r9
  404104:	f8dd 9014 	ldr.w	r9, [sp, #20]
  404108:	e007      	b.n	40411a <_vfiprintf_r+0x8c6>
  40410a:	f100 0e02 	add.w	lr, r0, #2
  40410e:	f10c 0c08 	add.w	ip, ip, #8
  404112:	4608      	mov	r0, r1
  404114:	3c10      	subs	r4, #16
  404116:	2c10      	cmp	r4, #16
  404118:	dd11      	ble.n	40413e <_vfiprintf_r+0x8ea>
  40411a:	1c41      	adds	r1, r0, #1
  40411c:	3210      	adds	r2, #16
  40411e:	2907      	cmp	r1, #7
  404120:	920f      	str	r2, [sp, #60]	; 0x3c
  404122:	f8cc 5000 	str.w	r5, [ip]
  404126:	f8cc 3004 	str.w	r3, [ip, #4]
  40412a:	910e      	str	r1, [sp, #56]	; 0x38
  40412c:	dded      	ble.n	40410a <_vfiprintf_r+0x8b6>
  40412e:	b9d2      	cbnz	r2, 404166 <_vfiprintf_r+0x912>
  404130:	3c10      	subs	r4, #16
  404132:	2c10      	cmp	r4, #16
  404134:	f04f 0e01 	mov.w	lr, #1
  404138:	4610      	mov	r0, r2
  40413a:	46dc      	mov	ip, fp
  40413c:	dced      	bgt.n	40411a <_vfiprintf_r+0x8c6>
  40413e:	46a9      	mov	r9, r5
  404140:	4645      	mov	r5, r8
  404142:	46d0      	mov	r8, sl
  404144:	46e2      	mov	sl, ip
  404146:	4422      	add	r2, r4
  404148:	f1be 0f07 	cmp.w	lr, #7
  40414c:	920f      	str	r2, [sp, #60]	; 0x3c
  40414e:	f8ca 9000 	str.w	r9, [sl]
  404152:	f8ca 4004 	str.w	r4, [sl, #4]
  404156:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40415a:	dc2e      	bgt.n	4041ba <_vfiprintf_r+0x966>
  40415c:	f10a 0a08 	add.w	sl, sl, #8
  404160:	f10e 0e01 	add.w	lr, lr, #1
  404164:	e558      	b.n	403c18 <_vfiprintf_r+0x3c4>
  404166:	aa0d      	add	r2, sp, #52	; 0x34
  404168:	9900      	ldr	r1, [sp, #0]
  40416a:	9301      	str	r3, [sp, #4]
  40416c:	4648      	mov	r0, r9
  40416e:	f7ff fb35 	bl	4037dc <__sprint_r.part.0>
  404172:	b968      	cbnz	r0, 404190 <_vfiprintf_r+0x93c>
  404174:	980e      	ldr	r0, [sp, #56]	; 0x38
  404176:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404178:	9b01      	ldr	r3, [sp, #4]
  40417a:	f100 0e01 	add.w	lr, r0, #1
  40417e:	46dc      	mov	ip, fp
  404180:	e7c8      	b.n	404114 <_vfiprintf_r+0x8c0>
  404182:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404184:	b123      	cbz	r3, 404190 <_vfiprintf_r+0x93c>
  404186:	9805      	ldr	r0, [sp, #20]
  404188:	9900      	ldr	r1, [sp, #0]
  40418a:	aa0d      	add	r2, sp, #52	; 0x34
  40418c:	f7ff fb26 	bl	4037dc <__sprint_r.part.0>
  404190:	9b00      	ldr	r3, [sp, #0]
  404192:	899b      	ldrh	r3, [r3, #12]
  404194:	065a      	lsls	r2, r3, #25
  404196:	f100 818b 	bmi.w	4044b0 <_vfiprintf_r+0xc5c>
  40419a:	9802      	ldr	r0, [sp, #8]
  40419c:	b02b      	add	sp, #172	; 0xac
  40419e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041a2:	aa0d      	add	r2, sp, #52	; 0x34
  4041a4:	9900      	ldr	r1, [sp, #0]
  4041a6:	4648      	mov	r0, r9
  4041a8:	f7ff fb18 	bl	4037dc <__sprint_r.part.0>
  4041ac:	2800      	cmp	r0, #0
  4041ae:	d1ef      	bne.n	404190 <_vfiprintf_r+0x93c>
  4041b0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4041b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4041b4:	1c48      	adds	r0, r1, #1
  4041b6:	46da      	mov	sl, fp
  4041b8:	e555      	b.n	403c66 <_vfiprintf_r+0x412>
  4041ba:	2a00      	cmp	r2, #0
  4041bc:	f040 80fb 	bne.w	4043b6 <_vfiprintf_r+0xb62>
  4041c0:	9a03      	ldr	r2, [sp, #12]
  4041c2:	921b      	str	r2, [sp, #108]	; 0x6c
  4041c4:	2301      	movs	r3, #1
  4041c6:	920f      	str	r2, [sp, #60]	; 0x3c
  4041c8:	971a      	str	r7, [sp, #104]	; 0x68
  4041ca:	930e      	str	r3, [sp, #56]	; 0x38
  4041cc:	46da      	mov	sl, fp
  4041ce:	f10a 0a08 	add.w	sl, sl, #8
  4041d2:	0771      	lsls	r1, r6, #29
  4041d4:	d504      	bpl.n	4041e0 <_vfiprintf_r+0x98c>
  4041d6:	9b06      	ldr	r3, [sp, #24]
  4041d8:	1b5c      	subs	r4, r3, r5
  4041da:	2c00      	cmp	r4, #0
  4041dc:	f73f ad34 	bgt.w	403c48 <_vfiprintf_r+0x3f4>
  4041e0:	9b02      	ldr	r3, [sp, #8]
  4041e2:	9906      	ldr	r1, [sp, #24]
  4041e4:	42a9      	cmp	r1, r5
  4041e6:	bfac      	ite	ge
  4041e8:	185b      	addge	r3, r3, r1
  4041ea:	195b      	addlt	r3, r3, r5
  4041ec:	9302      	str	r3, [sp, #8]
  4041ee:	2a00      	cmp	r2, #0
  4041f0:	f040 80b3 	bne.w	40435a <_vfiprintf_r+0xb06>
  4041f4:	2300      	movs	r3, #0
  4041f6:	930e      	str	r3, [sp, #56]	; 0x38
  4041f8:	46da      	mov	sl, fp
  4041fa:	f7ff bb5c 	b.w	4038b6 <_vfiprintf_r+0x62>
  4041fe:	aa0d      	add	r2, sp, #52	; 0x34
  404200:	9900      	ldr	r1, [sp, #0]
  404202:	9307      	str	r3, [sp, #28]
  404204:	4648      	mov	r0, r9
  404206:	f7ff fae9 	bl	4037dc <__sprint_r.part.0>
  40420a:	2800      	cmp	r0, #0
  40420c:	d1c0      	bne.n	404190 <_vfiprintf_r+0x93c>
  40420e:	980e      	ldr	r0, [sp, #56]	; 0x38
  404210:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404212:	9b07      	ldr	r3, [sp, #28]
  404214:	f100 0c01 	add.w	ip, r0, #1
  404218:	46de      	mov	lr, fp
  40421a:	e4cb      	b.n	403bb4 <_vfiprintf_r+0x360>
  40421c:	00405ef4 	.word	0x00405ef4
  404220:	00405f08 	.word	0x00405f08
  404224:	00405ee4 	.word	0x00405ee4
  404228:	2a00      	cmp	r2, #0
  40422a:	f040 8133 	bne.w	404494 <_vfiprintf_r+0xc40>
  40422e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  404232:	2b00      	cmp	r3, #0
  404234:	f000 80f5 	beq.w	404422 <_vfiprintf_r+0xbce>
  404238:	2301      	movs	r3, #1
  40423a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40423e:	461a      	mov	r2, r3
  404240:	931b      	str	r3, [sp, #108]	; 0x6c
  404242:	469e      	mov	lr, r3
  404244:	911a      	str	r1, [sp, #104]	; 0x68
  404246:	46da      	mov	sl, fp
  404248:	4670      	mov	r0, lr
  40424a:	f10a 0a08 	add.w	sl, sl, #8
  40424e:	f10e 0e01 	add.w	lr, lr, #1
  404252:	e47d      	b.n	403b50 <_vfiprintf_r+0x2fc>
  404254:	a90c      	add	r1, sp, #48	; 0x30
  404256:	2202      	movs	r2, #2
  404258:	469e      	mov	lr, r3
  40425a:	911a      	str	r1, [sp, #104]	; 0x68
  40425c:	921b      	str	r2, [sp, #108]	; 0x6c
  40425e:	46da      	mov	sl, fp
  404260:	4670      	mov	r0, lr
  404262:	f10a 0a08 	add.w	sl, sl, #8
  404266:	f10e 0e01 	add.w	lr, lr, #1
  40426a:	e738      	b.n	4040de <_vfiprintf_r+0x88a>
  40426c:	9b01      	ldr	r3, [sp, #4]
  40426e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  404272:	2b00      	cmp	r3, #0
  404274:	f2c0 812a 	blt.w	4044cc <_vfiprintf_r+0xc78>
  404278:	ea54 0305 	orrs.w	r3, r4, r5
  40427c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404280:	f43f abff 	beq.w	403a82 <_vfiprintf_r+0x22e>
  404284:	465f      	mov	r7, fp
  404286:	0923      	lsrs	r3, r4, #4
  404288:	f004 010f 	and.w	r1, r4, #15
  40428c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404290:	092a      	lsrs	r2, r5, #4
  404292:	461c      	mov	r4, r3
  404294:	4615      	mov	r5, r2
  404296:	5c43      	ldrb	r3, [r0, r1]
  404298:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40429c:	ea54 0305 	orrs.w	r3, r4, r5
  4042a0:	d1f1      	bne.n	404286 <_vfiprintf_r+0xa32>
  4042a2:	ebc7 030b 	rsb	r3, r7, fp
  4042a6:	9303      	str	r3, [sp, #12]
  4042a8:	f7ff bbf4 	b.w	403a94 <_vfiprintf_r+0x240>
  4042ac:	aa0d      	add	r2, sp, #52	; 0x34
  4042ae:	9900      	ldr	r1, [sp, #0]
  4042b0:	9805      	ldr	r0, [sp, #20]
  4042b2:	f7ff fa93 	bl	4037dc <__sprint_r.part.0>
  4042b6:	2800      	cmp	r0, #0
  4042b8:	f47f af6a 	bne.w	404190 <_vfiprintf_r+0x93c>
  4042bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4042be:	46da      	mov	sl, fp
  4042c0:	e787      	b.n	4041d2 <_vfiprintf_r+0x97e>
  4042c2:	f04f 0900 	mov.w	r9, #0
  4042c6:	2400      	movs	r4, #0
  4042c8:	2500      	movs	r5, #0
  4042ca:	e7db      	b.n	404284 <_vfiprintf_r+0xa30>
  4042cc:	f016 0210 	ands.w	r2, r6, #16
  4042d0:	f000 80b2 	beq.w	404438 <_vfiprintf_r+0xbe4>
  4042d4:	9904      	ldr	r1, [sp, #16]
  4042d6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4042da:	460a      	mov	r2, r1
  4042dc:	680c      	ldr	r4, [r1, #0]
  4042de:	9901      	ldr	r1, [sp, #4]
  4042e0:	2900      	cmp	r1, #0
  4042e2:	f102 0204 	add.w	r2, r2, #4
  4042e6:	f04f 0500 	mov.w	r5, #0
  4042ea:	f2c0 8159 	blt.w	4045a0 <_vfiprintf_r+0xd4c>
  4042ee:	ea54 0105 	orrs.w	r1, r4, r5
  4042f2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4042f6:	9204      	str	r2, [sp, #16]
  4042f8:	f43f ad51 	beq.w	403d9e <_vfiprintf_r+0x54a>
  4042fc:	4699      	mov	r9, r3
  4042fe:	e556      	b.n	403dae <_vfiprintf_r+0x55a>
  404300:	06f7      	lsls	r7, r6, #27
  404302:	d40a      	bmi.n	40431a <_vfiprintf_r+0xac6>
  404304:	0675      	lsls	r5, r6, #25
  404306:	d508      	bpl.n	40431a <_vfiprintf_r+0xac6>
  404308:	9904      	ldr	r1, [sp, #16]
  40430a:	f9b1 4000 	ldrsh.w	r4, [r1]
  40430e:	3104      	adds	r1, #4
  404310:	17e5      	asrs	r5, r4, #31
  404312:	4622      	mov	r2, r4
  404314:	462b      	mov	r3, r5
  404316:	9104      	str	r1, [sp, #16]
  404318:	e4ea      	b.n	403cf0 <_vfiprintf_r+0x49c>
  40431a:	9a04      	ldr	r2, [sp, #16]
  40431c:	6814      	ldr	r4, [r2, #0]
  40431e:	4613      	mov	r3, r2
  404320:	3304      	adds	r3, #4
  404322:	17e5      	asrs	r5, r4, #31
  404324:	9304      	str	r3, [sp, #16]
  404326:	4622      	mov	r2, r4
  404328:	462b      	mov	r3, r5
  40432a:	e4e1      	b.n	403cf0 <_vfiprintf_r+0x49c>
  40432c:	6814      	ldr	r4, [r2, #0]
  40432e:	3204      	adds	r2, #4
  404330:	9204      	str	r2, [sp, #16]
  404332:	2500      	movs	r5, #0
  404334:	e61f      	b.n	403f76 <_vfiprintf_r+0x722>
  404336:	f04f 0900 	mov.w	r9, #0
  40433a:	ea54 0305 	orrs.w	r3, r4, r5
  40433e:	f47f ace8 	bne.w	403d12 <_vfiprintf_r+0x4be>
  404342:	e5d8      	b.n	403ef6 <_vfiprintf_r+0x6a2>
  404344:	aa0d      	add	r2, sp, #52	; 0x34
  404346:	9900      	ldr	r1, [sp, #0]
  404348:	9805      	ldr	r0, [sp, #20]
  40434a:	f7ff fa47 	bl	4037dc <__sprint_r.part.0>
  40434e:	2800      	cmp	r0, #0
  404350:	f47f af1e 	bne.w	404190 <_vfiprintf_r+0x93c>
  404354:	46da      	mov	sl, fp
  404356:	f7ff bb48 	b.w	4039ea <_vfiprintf_r+0x196>
  40435a:	aa0d      	add	r2, sp, #52	; 0x34
  40435c:	9900      	ldr	r1, [sp, #0]
  40435e:	9805      	ldr	r0, [sp, #20]
  404360:	f7ff fa3c 	bl	4037dc <__sprint_r.part.0>
  404364:	2800      	cmp	r0, #0
  404366:	f43f af45 	beq.w	4041f4 <_vfiprintf_r+0x9a0>
  40436a:	e711      	b.n	404190 <_vfiprintf_r+0x93c>
  40436c:	aa0d      	add	r2, sp, #52	; 0x34
  40436e:	9900      	ldr	r1, [sp, #0]
  404370:	9805      	ldr	r0, [sp, #20]
  404372:	f7ff fa33 	bl	4037dc <__sprint_r.part.0>
  404376:	2800      	cmp	r0, #0
  404378:	f47f af0a 	bne.w	404190 <_vfiprintf_r+0x93c>
  40437c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40437e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404380:	f100 0e01 	add.w	lr, r0, #1
  404384:	46da      	mov	sl, fp
  404386:	f7ff bbe3 	b.w	403b50 <_vfiprintf_r+0x2fc>
  40438a:	aa0d      	add	r2, sp, #52	; 0x34
  40438c:	9900      	ldr	r1, [sp, #0]
  40438e:	9805      	ldr	r0, [sp, #20]
  404390:	f7ff fa24 	bl	4037dc <__sprint_r.part.0>
  404394:	2800      	cmp	r0, #0
  404396:	f47f aefb 	bne.w	404190 <_vfiprintf_r+0x93c>
  40439a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40439c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40439e:	f100 0e01 	add.w	lr, r0, #1
  4043a2:	46da      	mov	sl, fp
  4043a4:	e69b      	b.n	4040de <_vfiprintf_r+0x88a>
  4043a6:	2a00      	cmp	r2, #0
  4043a8:	f040 80d8 	bne.w	40455c <_vfiprintf_r+0xd08>
  4043ac:	f04f 0e01 	mov.w	lr, #1
  4043b0:	4610      	mov	r0, r2
  4043b2:	46da      	mov	sl, fp
  4043b4:	e697      	b.n	4040e6 <_vfiprintf_r+0x892>
  4043b6:	aa0d      	add	r2, sp, #52	; 0x34
  4043b8:	9900      	ldr	r1, [sp, #0]
  4043ba:	9805      	ldr	r0, [sp, #20]
  4043bc:	f7ff fa0e 	bl	4037dc <__sprint_r.part.0>
  4043c0:	2800      	cmp	r0, #0
  4043c2:	f47f aee5 	bne.w	404190 <_vfiprintf_r+0x93c>
  4043c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4043c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4043ca:	f103 0e01 	add.w	lr, r3, #1
  4043ce:	46da      	mov	sl, fp
  4043d0:	e422      	b.n	403c18 <_vfiprintf_r+0x3c4>
  4043d2:	2230      	movs	r2, #48	; 0x30
  4043d4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  4043d8:	9a01      	ldr	r2, [sp, #4]
  4043da:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  4043de:	2a00      	cmp	r2, #0
  4043e0:	f04f 0300 	mov.w	r3, #0
  4043e4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4043e8:	f046 0302 	orr.w	r3, r6, #2
  4043ec:	f2c0 80cb 	blt.w	404586 <_vfiprintf_r+0xd32>
  4043f0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4043f4:	f046 0602 	orr.w	r6, r6, #2
  4043f8:	f04f 0900 	mov.w	r9, #0
  4043fc:	e742      	b.n	404284 <_vfiprintf_r+0xa30>
  4043fe:	f04f 0900 	mov.w	r9, #0
  404402:	4890      	ldr	r0, [pc, #576]	; (404644 <_vfiprintf_r+0xdf0>)
  404404:	e73e      	b.n	404284 <_vfiprintf_r+0xa30>
  404406:	9b01      	ldr	r3, [sp, #4]
  404408:	4264      	negs	r4, r4
  40440a:	f04f 092d 	mov.w	r9, #45	; 0x2d
  40440e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404412:	2b00      	cmp	r3, #0
  404414:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  404418:	f6ff ac7b 	blt.w	403d12 <_vfiprintf_r+0x4be>
  40441c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404420:	e477      	b.n	403d12 <_vfiprintf_r+0x4be>
  404422:	9b07      	ldr	r3, [sp, #28]
  404424:	2b00      	cmp	r3, #0
  404426:	d072      	beq.n	40450e <_vfiprintf_r+0xcba>
  404428:	ab0c      	add	r3, sp, #48	; 0x30
  40442a:	2202      	movs	r2, #2
  40442c:	931a      	str	r3, [sp, #104]	; 0x68
  40442e:	921b      	str	r2, [sp, #108]	; 0x6c
  404430:	f04f 0e01 	mov.w	lr, #1
  404434:	46da      	mov	sl, fp
  404436:	e713      	b.n	404260 <_vfiprintf_r+0xa0c>
  404438:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40443c:	d048      	beq.n	4044d0 <_vfiprintf_r+0xc7c>
  40443e:	9904      	ldr	r1, [sp, #16]
  404440:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  404444:	460b      	mov	r3, r1
  404446:	880c      	ldrh	r4, [r1, #0]
  404448:	9901      	ldr	r1, [sp, #4]
  40444a:	2900      	cmp	r1, #0
  40444c:	f103 0304 	add.w	r3, r3, #4
  404450:	f04f 0500 	mov.w	r5, #0
  404454:	f6ff ae10 	blt.w	404078 <_vfiprintf_r+0x824>
  404458:	ea54 0105 	orrs.w	r1, r4, r5
  40445c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404460:	9304      	str	r3, [sp, #16]
  404462:	f43f ac9c 	beq.w	403d9e <_vfiprintf_r+0x54a>
  404466:	4691      	mov	r9, r2
  404468:	e4a1      	b.n	403dae <_vfiprintf_r+0x55a>
  40446a:	06f0      	lsls	r0, r6, #27
  40446c:	d40a      	bmi.n	404484 <_vfiprintf_r+0xc30>
  40446e:	0671      	lsls	r1, r6, #25
  404470:	d508      	bpl.n	404484 <_vfiprintf_r+0xc30>
  404472:	9a04      	ldr	r2, [sp, #16]
  404474:	6813      	ldr	r3, [r2, #0]
  404476:	3204      	adds	r2, #4
  404478:	9204      	str	r2, [sp, #16]
  40447a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40447e:	801a      	strh	r2, [r3, #0]
  404480:	f7ff ba19 	b.w	4038b6 <_vfiprintf_r+0x62>
  404484:	9a04      	ldr	r2, [sp, #16]
  404486:	6813      	ldr	r3, [r2, #0]
  404488:	3204      	adds	r2, #4
  40448a:	9204      	str	r2, [sp, #16]
  40448c:	9a02      	ldr	r2, [sp, #8]
  40448e:	601a      	str	r2, [r3, #0]
  404490:	f7ff ba11 	b.w	4038b6 <_vfiprintf_r+0x62>
  404494:	aa0d      	add	r2, sp, #52	; 0x34
  404496:	9900      	ldr	r1, [sp, #0]
  404498:	9805      	ldr	r0, [sp, #20]
  40449a:	f7ff f99f 	bl	4037dc <__sprint_r.part.0>
  40449e:	2800      	cmp	r0, #0
  4044a0:	f47f ae76 	bne.w	404190 <_vfiprintf_r+0x93c>
  4044a4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4044a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4044a8:	f100 0e01 	add.w	lr, r0, #1
  4044ac:	46da      	mov	sl, fp
  4044ae:	e5fa      	b.n	4040a6 <_vfiprintf_r+0x852>
  4044b0:	f04f 30ff 	mov.w	r0, #4294967295
  4044b4:	f7ff bab6 	b.w	403a24 <_vfiprintf_r+0x1d0>
  4044b8:	4862      	ldr	r0, [pc, #392]	; (404644 <_vfiprintf_r+0xdf0>)
  4044ba:	4616      	mov	r6, r2
  4044bc:	ea54 0205 	orrs.w	r2, r4, r5
  4044c0:	9304      	str	r3, [sp, #16]
  4044c2:	f04f 0900 	mov.w	r9, #0
  4044c6:	f47f aedd 	bne.w	404284 <_vfiprintf_r+0xa30>
  4044ca:	e6fc      	b.n	4042c6 <_vfiprintf_r+0xa72>
  4044cc:	9b04      	ldr	r3, [sp, #16]
  4044ce:	e7f5      	b.n	4044bc <_vfiprintf_r+0xc68>
  4044d0:	9a04      	ldr	r2, [sp, #16]
  4044d2:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4044d6:	4613      	mov	r3, r2
  4044d8:	6814      	ldr	r4, [r2, #0]
  4044da:	9a01      	ldr	r2, [sp, #4]
  4044dc:	2a00      	cmp	r2, #0
  4044de:	f103 0304 	add.w	r3, r3, #4
  4044e2:	f04f 0500 	mov.w	r5, #0
  4044e6:	f6ff adc7 	blt.w	404078 <_vfiprintf_r+0x824>
  4044ea:	ea54 0205 	orrs.w	r2, r4, r5
  4044ee:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4044f2:	9304      	str	r3, [sp, #16]
  4044f4:	f47f ac5b 	bne.w	403dae <_vfiprintf_r+0x55a>
  4044f8:	e451      	b.n	403d9e <_vfiprintf_r+0x54a>
  4044fa:	aa0d      	add	r2, sp, #52	; 0x34
  4044fc:	9900      	ldr	r1, [sp, #0]
  4044fe:	9805      	ldr	r0, [sp, #20]
  404500:	f7ff f96c 	bl	4037dc <__sprint_r.part.0>
  404504:	2800      	cmp	r0, #0
  404506:	f47f ae43 	bne.w	404190 <_vfiprintf_r+0x93c>
  40450a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40450c:	e668      	b.n	4041e0 <_vfiprintf_r+0x98c>
  40450e:	4610      	mov	r0, r2
  404510:	f04f 0e01 	mov.w	lr, #1
  404514:	46da      	mov	sl, fp
  404516:	e5e6      	b.n	4040e6 <_vfiprintf_r+0x892>
  404518:	9904      	ldr	r1, [sp, #16]
  40451a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40451e:	460a      	mov	r2, r1
  404520:	880c      	ldrh	r4, [r1, #0]
  404522:	9901      	ldr	r1, [sp, #4]
  404524:	2900      	cmp	r1, #0
  404526:	f102 0204 	add.w	r2, r2, #4
  40452a:	f04f 0500 	mov.w	r5, #0
  40452e:	db4e      	blt.n	4045ce <_vfiprintf_r+0xd7a>
  404530:	ea54 0105 	orrs.w	r1, r4, r5
  404534:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404538:	9204      	str	r2, [sp, #16]
  40453a:	4699      	mov	r9, r3
  40453c:	f47f abe9 	bne.w	403d12 <_vfiprintf_r+0x4be>
  404540:	e4d4      	b.n	403eec <_vfiprintf_r+0x698>
  404542:	9304      	str	r3, [sp, #16]
  404544:	e6f9      	b.n	40433a <_vfiprintf_r+0xae6>
  404546:	4638      	mov	r0, r7
  404548:	9404      	str	r4, [sp, #16]
  40454a:	f7ff f8d9 	bl	403700 <strlen>
  40454e:	2300      	movs	r3, #0
  404550:	9003      	str	r0, [sp, #12]
  404552:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  404556:	9301      	str	r3, [sp, #4]
  404558:	f7ff ba9c 	b.w	403a94 <_vfiprintf_r+0x240>
  40455c:	aa0d      	add	r2, sp, #52	; 0x34
  40455e:	9900      	ldr	r1, [sp, #0]
  404560:	9805      	ldr	r0, [sp, #20]
  404562:	f7ff f93b 	bl	4037dc <__sprint_r.part.0>
  404566:	2800      	cmp	r0, #0
  404568:	f47f ae12 	bne.w	404190 <_vfiprintf_r+0x93c>
  40456c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40456e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404570:	f100 0e01 	add.w	lr, r0, #1
  404574:	46da      	mov	sl, fp
  404576:	e5b6      	b.n	4040e6 <_vfiprintf_r+0x892>
  404578:	980e      	ldr	r0, [sp, #56]	; 0x38
  40457a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40457c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40464c <_vfiprintf_r+0xdf8>
  404580:	3001      	adds	r0, #1
  404582:	f7ff bad2 	b.w	403b2a <_vfiprintf_r+0x2d6>
  404586:	461e      	mov	r6, r3
  404588:	f04f 0900 	mov.w	r9, #0
  40458c:	e67a      	b.n	404284 <_vfiprintf_r+0xa30>
  40458e:	2b06      	cmp	r3, #6
  404590:	bf28      	it	cs
  404592:	2306      	movcs	r3, #6
  404594:	9303      	str	r3, [sp, #12]
  404596:	9404      	str	r4, [sp, #16]
  404598:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40459c:	4f2a      	ldr	r7, [pc, #168]	; (404648 <_vfiprintf_r+0xdf4>)
  40459e:	e50c      	b.n	403fba <_vfiprintf_r+0x766>
  4045a0:	9204      	str	r2, [sp, #16]
  4045a2:	e56a      	b.n	40407a <_vfiprintf_r+0x826>
  4045a4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4045a6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40464c <_vfiprintf_r+0xdf8>
  4045aa:	3001      	adds	r0, #1
  4045ac:	f7ff bb73 	b.w	403c96 <_vfiprintf_r+0x442>
  4045b0:	46f4      	mov	ip, lr
  4045b2:	f7ff bb1a 	b.w	403bea <_vfiprintf_r+0x396>
  4045b6:	9b01      	ldr	r3, [sp, #4]
  4045b8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4045bc:	9303      	str	r3, [sp, #12]
  4045be:	9404      	str	r4, [sp, #16]
  4045c0:	9001      	str	r0, [sp, #4]
  4045c2:	f7ff ba67 	b.w	403a94 <_vfiprintf_r+0x240>
  4045c6:	2200      	movs	r2, #0
  4045c8:	9201      	str	r2, [sp, #4]
  4045ca:	f7ff b9ac 	b.w	403926 <_vfiprintf_r+0xd2>
  4045ce:	9204      	str	r2, [sp, #16]
  4045d0:	4699      	mov	r9, r3
  4045d2:	e6b2      	b.n	40433a <_vfiprintf_r+0xae6>
  4045d4:	9a04      	ldr	r2, [sp, #16]
  4045d6:	6813      	ldr	r3, [r2, #0]
  4045d8:	9301      	str	r3, [sp, #4]
  4045da:	3204      	adds	r2, #4
  4045dc:	2b00      	cmp	r3, #0
  4045de:	9204      	str	r2, [sp, #16]
  4045e0:	f898 3001 	ldrb.w	r3, [r8, #1]
  4045e4:	46a8      	mov	r8, r5
  4045e6:	f6bf a99c 	bge.w	403922 <_vfiprintf_r+0xce>
  4045ea:	f04f 32ff 	mov.w	r2, #4294967295
  4045ee:	9201      	str	r2, [sp, #4]
  4045f0:	f7ff b997 	b.w	403922 <_vfiprintf_r+0xce>
  4045f4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4045f8:	e48e      	b.n	403f18 <_vfiprintf_r+0x6c4>
  4045fa:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4045fe:	e4f0      	b.n	403fe2 <_vfiprintf_r+0x78e>
  404600:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404604:	e4ab      	b.n	403f5e <_vfiprintf_r+0x70a>
  404606:	4699      	mov	r9, r3
  404608:	07f3      	lsls	r3, r6, #31
  40460a:	d505      	bpl.n	404618 <_vfiprintf_r+0xdc4>
  40460c:	af2a      	add	r7, sp, #168	; 0xa8
  40460e:	2330      	movs	r3, #48	; 0x30
  404610:	f807 3d41 	strb.w	r3, [r7, #-65]!
  404614:	f7ff bb97 	b.w	403d46 <_vfiprintf_r+0x4f2>
  404618:	9b01      	ldr	r3, [sp, #4]
  40461a:	9303      	str	r3, [sp, #12]
  40461c:	465f      	mov	r7, fp
  40461e:	f7ff ba39 	b.w	403a94 <_vfiprintf_r+0x240>
  404622:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404626:	e443      	b.n	403eb0 <_vfiprintf_r+0x65c>
  404628:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40462c:	f7ff bb9a 	b.w	403d64 <_vfiprintf_r+0x510>
  404630:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404634:	f7ff bb4d 	b.w	403cd2 <_vfiprintf_r+0x47e>
  404638:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40463c:	e50f      	b.n	40405e <_vfiprintf_r+0x80a>
  40463e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404642:	e4f3      	b.n	40402c <_vfiprintf_r+0x7d8>
  404644:	00405f08 	.word	0x00405f08
  404648:	00405f1c 	.word	0x00405f1c
  40464c:	00405f24 	.word	0x00405f24

00404650 <__sbprintf>:
  404650:	b5f0      	push	{r4, r5, r6, r7, lr}
  404652:	460c      	mov	r4, r1
  404654:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  404658:	8989      	ldrh	r1, [r1, #12]
  40465a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40465c:	89e5      	ldrh	r5, [r4, #14]
  40465e:	9619      	str	r6, [sp, #100]	; 0x64
  404660:	f021 0102 	bic.w	r1, r1, #2
  404664:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404666:	f8ad 500e 	strh.w	r5, [sp, #14]
  40466a:	2500      	movs	r5, #0
  40466c:	69e7      	ldr	r7, [r4, #28]
  40466e:	f8ad 100c 	strh.w	r1, [sp, #12]
  404672:	9609      	str	r6, [sp, #36]	; 0x24
  404674:	9506      	str	r5, [sp, #24]
  404676:	ae1a      	add	r6, sp, #104	; 0x68
  404678:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40467c:	4669      	mov	r1, sp
  40467e:	9600      	str	r6, [sp, #0]
  404680:	9604      	str	r6, [sp, #16]
  404682:	9502      	str	r5, [sp, #8]
  404684:	9505      	str	r5, [sp, #20]
  404686:	9707      	str	r7, [sp, #28]
  404688:	4606      	mov	r6, r0
  40468a:	f7ff f8e3 	bl	403854 <_vfiprintf_r>
  40468e:	1e05      	subs	r5, r0, #0
  404690:	db07      	blt.n	4046a2 <__sbprintf+0x52>
  404692:	4630      	mov	r0, r6
  404694:	4669      	mov	r1, sp
  404696:	f000 f929 	bl	4048ec <_fflush_r>
  40469a:	2800      	cmp	r0, #0
  40469c:	bf18      	it	ne
  40469e:	f04f 35ff 	movne.w	r5, #4294967295
  4046a2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4046a6:	065b      	lsls	r3, r3, #25
  4046a8:	d503      	bpl.n	4046b2 <__sbprintf+0x62>
  4046aa:	89a3      	ldrh	r3, [r4, #12]
  4046ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4046b0:	81a3      	strh	r3, [r4, #12]
  4046b2:	4628      	mov	r0, r5
  4046b4:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  4046b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4046ba:	bf00      	nop

004046bc <__swsetup_r>:
  4046bc:	b538      	push	{r3, r4, r5, lr}
  4046be:	4b30      	ldr	r3, [pc, #192]	; (404780 <__swsetup_r+0xc4>)
  4046c0:	681b      	ldr	r3, [r3, #0]
  4046c2:	4605      	mov	r5, r0
  4046c4:	460c      	mov	r4, r1
  4046c6:	b113      	cbz	r3, 4046ce <__swsetup_r+0x12>
  4046c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4046ca:	2a00      	cmp	r2, #0
  4046cc:	d038      	beq.n	404740 <__swsetup_r+0x84>
  4046ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4046d2:	b293      	uxth	r3, r2
  4046d4:	0718      	lsls	r0, r3, #28
  4046d6:	d50c      	bpl.n	4046f2 <__swsetup_r+0x36>
  4046d8:	6920      	ldr	r0, [r4, #16]
  4046da:	b1a8      	cbz	r0, 404708 <__swsetup_r+0x4c>
  4046dc:	f013 0201 	ands.w	r2, r3, #1
  4046e0:	d01e      	beq.n	404720 <__swsetup_r+0x64>
  4046e2:	6963      	ldr	r3, [r4, #20]
  4046e4:	2200      	movs	r2, #0
  4046e6:	425b      	negs	r3, r3
  4046e8:	61a3      	str	r3, [r4, #24]
  4046ea:	60a2      	str	r2, [r4, #8]
  4046ec:	b1f0      	cbz	r0, 40472c <__swsetup_r+0x70>
  4046ee:	2000      	movs	r0, #0
  4046f0:	bd38      	pop	{r3, r4, r5, pc}
  4046f2:	06d9      	lsls	r1, r3, #27
  4046f4:	d53c      	bpl.n	404770 <__swsetup_r+0xb4>
  4046f6:	0758      	lsls	r0, r3, #29
  4046f8:	d426      	bmi.n	404748 <__swsetup_r+0x8c>
  4046fa:	6920      	ldr	r0, [r4, #16]
  4046fc:	f042 0308 	orr.w	r3, r2, #8
  404700:	81a3      	strh	r3, [r4, #12]
  404702:	b29b      	uxth	r3, r3
  404704:	2800      	cmp	r0, #0
  404706:	d1e9      	bne.n	4046dc <__swsetup_r+0x20>
  404708:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40470c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404710:	d0e4      	beq.n	4046dc <__swsetup_r+0x20>
  404712:	4628      	mov	r0, r5
  404714:	4621      	mov	r1, r4
  404716:	f000 fd15 	bl	405144 <__smakebuf_r>
  40471a:	89a3      	ldrh	r3, [r4, #12]
  40471c:	6920      	ldr	r0, [r4, #16]
  40471e:	e7dd      	b.n	4046dc <__swsetup_r+0x20>
  404720:	0799      	lsls	r1, r3, #30
  404722:	bf58      	it	pl
  404724:	6962      	ldrpl	r2, [r4, #20]
  404726:	60a2      	str	r2, [r4, #8]
  404728:	2800      	cmp	r0, #0
  40472a:	d1e0      	bne.n	4046ee <__swsetup_r+0x32>
  40472c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404730:	061a      	lsls	r2, r3, #24
  404732:	d5dd      	bpl.n	4046f0 <__swsetup_r+0x34>
  404734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404738:	81a3      	strh	r3, [r4, #12]
  40473a:	f04f 30ff 	mov.w	r0, #4294967295
  40473e:	bd38      	pop	{r3, r4, r5, pc}
  404740:	4618      	mov	r0, r3
  404742:	f000 f967 	bl	404a14 <__sinit>
  404746:	e7c2      	b.n	4046ce <__swsetup_r+0x12>
  404748:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40474a:	b151      	cbz	r1, 404762 <__swsetup_r+0xa6>
  40474c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404750:	4299      	cmp	r1, r3
  404752:	d004      	beq.n	40475e <__swsetup_r+0xa2>
  404754:	4628      	mov	r0, r5
  404756:	f000 fa27 	bl	404ba8 <_free_r>
  40475a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40475e:	2300      	movs	r3, #0
  404760:	6323      	str	r3, [r4, #48]	; 0x30
  404762:	2300      	movs	r3, #0
  404764:	6920      	ldr	r0, [r4, #16]
  404766:	6063      	str	r3, [r4, #4]
  404768:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40476c:	6020      	str	r0, [r4, #0]
  40476e:	e7c5      	b.n	4046fc <__swsetup_r+0x40>
  404770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404774:	2309      	movs	r3, #9
  404776:	602b      	str	r3, [r5, #0]
  404778:	f04f 30ff 	mov.w	r0, #4294967295
  40477c:	81a2      	strh	r2, [r4, #12]
  40477e:	bd38      	pop	{r3, r4, r5, pc}
  404780:	20400438 	.word	0x20400438

00404784 <register_fini>:
  404784:	4b02      	ldr	r3, [pc, #8]	; (404790 <register_fini+0xc>)
  404786:	b113      	cbz	r3, 40478e <register_fini+0xa>
  404788:	4802      	ldr	r0, [pc, #8]	; (404794 <register_fini+0x10>)
  40478a:	f000 b805 	b.w	404798 <atexit>
  40478e:	4770      	bx	lr
  404790:	00000000 	.word	0x00000000
  404794:	00404a29 	.word	0x00404a29

00404798 <atexit>:
  404798:	2300      	movs	r3, #0
  40479a:	4601      	mov	r1, r0
  40479c:	461a      	mov	r2, r3
  40479e:	4618      	mov	r0, r3
  4047a0:	f001 b8a2 	b.w	4058e8 <__register_exitproc>

004047a4 <__sflush_r>:
  4047a4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4047a8:	b29a      	uxth	r2, r3
  4047aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4047ae:	460d      	mov	r5, r1
  4047b0:	0711      	lsls	r1, r2, #28
  4047b2:	4680      	mov	r8, r0
  4047b4:	d43c      	bmi.n	404830 <__sflush_r+0x8c>
  4047b6:	686a      	ldr	r2, [r5, #4]
  4047b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4047bc:	2a00      	cmp	r2, #0
  4047be:	81ab      	strh	r3, [r5, #12]
  4047c0:	dd73      	ble.n	4048aa <__sflush_r+0x106>
  4047c2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4047c4:	2c00      	cmp	r4, #0
  4047c6:	d04b      	beq.n	404860 <__sflush_r+0xbc>
  4047c8:	b29b      	uxth	r3, r3
  4047ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4047ce:	2100      	movs	r1, #0
  4047d0:	b292      	uxth	r2, r2
  4047d2:	f8d8 6000 	ldr.w	r6, [r8]
  4047d6:	f8c8 1000 	str.w	r1, [r8]
  4047da:	2a00      	cmp	r2, #0
  4047dc:	d069      	beq.n	4048b2 <__sflush_r+0x10e>
  4047de:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4047e0:	075f      	lsls	r7, r3, #29
  4047e2:	d505      	bpl.n	4047f0 <__sflush_r+0x4c>
  4047e4:	6869      	ldr	r1, [r5, #4]
  4047e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4047e8:	1a52      	subs	r2, r2, r1
  4047ea:	b10b      	cbz	r3, 4047f0 <__sflush_r+0x4c>
  4047ec:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4047ee:	1ad2      	subs	r2, r2, r3
  4047f0:	2300      	movs	r3, #0
  4047f2:	69e9      	ldr	r1, [r5, #28]
  4047f4:	4640      	mov	r0, r8
  4047f6:	47a0      	blx	r4
  4047f8:	1c44      	adds	r4, r0, #1
  4047fa:	d03c      	beq.n	404876 <__sflush_r+0xd2>
  4047fc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404800:	692a      	ldr	r2, [r5, #16]
  404802:	602a      	str	r2, [r5, #0]
  404804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404808:	2200      	movs	r2, #0
  40480a:	81ab      	strh	r3, [r5, #12]
  40480c:	04db      	lsls	r3, r3, #19
  40480e:	606a      	str	r2, [r5, #4]
  404810:	d449      	bmi.n	4048a6 <__sflush_r+0x102>
  404812:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404814:	f8c8 6000 	str.w	r6, [r8]
  404818:	b311      	cbz	r1, 404860 <__sflush_r+0xbc>
  40481a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40481e:	4299      	cmp	r1, r3
  404820:	d002      	beq.n	404828 <__sflush_r+0x84>
  404822:	4640      	mov	r0, r8
  404824:	f000 f9c0 	bl	404ba8 <_free_r>
  404828:	2000      	movs	r0, #0
  40482a:	6328      	str	r0, [r5, #48]	; 0x30
  40482c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404830:	692e      	ldr	r6, [r5, #16]
  404832:	b1ae      	cbz	r6, 404860 <__sflush_r+0xbc>
  404834:	682c      	ldr	r4, [r5, #0]
  404836:	602e      	str	r6, [r5, #0]
  404838:	0790      	lsls	r0, r2, #30
  40483a:	bf0c      	ite	eq
  40483c:	696b      	ldreq	r3, [r5, #20]
  40483e:	2300      	movne	r3, #0
  404840:	1ba4      	subs	r4, r4, r6
  404842:	60ab      	str	r3, [r5, #8]
  404844:	e00a      	b.n	40485c <__sflush_r+0xb8>
  404846:	4623      	mov	r3, r4
  404848:	4632      	mov	r2, r6
  40484a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40484c:	69e9      	ldr	r1, [r5, #28]
  40484e:	4640      	mov	r0, r8
  404850:	47b8      	blx	r7
  404852:	2800      	cmp	r0, #0
  404854:	eba4 0400 	sub.w	r4, r4, r0
  404858:	4406      	add	r6, r0
  40485a:	dd04      	ble.n	404866 <__sflush_r+0xc2>
  40485c:	2c00      	cmp	r4, #0
  40485e:	dcf2      	bgt.n	404846 <__sflush_r+0xa2>
  404860:	2000      	movs	r0, #0
  404862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404866:	89ab      	ldrh	r3, [r5, #12]
  404868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40486c:	81ab      	strh	r3, [r5, #12]
  40486e:	f04f 30ff 	mov.w	r0, #4294967295
  404872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404876:	f8d8 2000 	ldr.w	r2, [r8]
  40487a:	2a1d      	cmp	r2, #29
  40487c:	d8f3      	bhi.n	404866 <__sflush_r+0xc2>
  40487e:	4b1a      	ldr	r3, [pc, #104]	; (4048e8 <__sflush_r+0x144>)
  404880:	40d3      	lsrs	r3, r2
  404882:	f003 0301 	and.w	r3, r3, #1
  404886:	f083 0401 	eor.w	r4, r3, #1
  40488a:	2b00      	cmp	r3, #0
  40488c:	d0eb      	beq.n	404866 <__sflush_r+0xc2>
  40488e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404892:	6929      	ldr	r1, [r5, #16]
  404894:	6029      	str	r1, [r5, #0]
  404896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40489a:	04d9      	lsls	r1, r3, #19
  40489c:	606c      	str	r4, [r5, #4]
  40489e:	81ab      	strh	r3, [r5, #12]
  4048a0:	d5b7      	bpl.n	404812 <__sflush_r+0x6e>
  4048a2:	2a00      	cmp	r2, #0
  4048a4:	d1b5      	bne.n	404812 <__sflush_r+0x6e>
  4048a6:	6528      	str	r0, [r5, #80]	; 0x50
  4048a8:	e7b3      	b.n	404812 <__sflush_r+0x6e>
  4048aa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4048ac:	2a00      	cmp	r2, #0
  4048ae:	dc88      	bgt.n	4047c2 <__sflush_r+0x1e>
  4048b0:	e7d6      	b.n	404860 <__sflush_r+0xbc>
  4048b2:	2301      	movs	r3, #1
  4048b4:	69e9      	ldr	r1, [r5, #28]
  4048b6:	4640      	mov	r0, r8
  4048b8:	47a0      	blx	r4
  4048ba:	1c43      	adds	r3, r0, #1
  4048bc:	4602      	mov	r2, r0
  4048be:	d002      	beq.n	4048c6 <__sflush_r+0x122>
  4048c0:	89ab      	ldrh	r3, [r5, #12]
  4048c2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4048c4:	e78c      	b.n	4047e0 <__sflush_r+0x3c>
  4048c6:	f8d8 3000 	ldr.w	r3, [r8]
  4048ca:	2b00      	cmp	r3, #0
  4048cc:	d0f8      	beq.n	4048c0 <__sflush_r+0x11c>
  4048ce:	2b1d      	cmp	r3, #29
  4048d0:	d001      	beq.n	4048d6 <__sflush_r+0x132>
  4048d2:	2b16      	cmp	r3, #22
  4048d4:	d102      	bne.n	4048dc <__sflush_r+0x138>
  4048d6:	f8c8 6000 	str.w	r6, [r8]
  4048da:	e7c1      	b.n	404860 <__sflush_r+0xbc>
  4048dc:	89ab      	ldrh	r3, [r5, #12]
  4048de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4048e2:	81ab      	strh	r3, [r5, #12]
  4048e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4048e8:	20400001 	.word	0x20400001

004048ec <_fflush_r>:
  4048ec:	b510      	push	{r4, lr}
  4048ee:	4604      	mov	r4, r0
  4048f0:	b082      	sub	sp, #8
  4048f2:	b108      	cbz	r0, 4048f8 <_fflush_r+0xc>
  4048f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4048f6:	b153      	cbz	r3, 40490e <_fflush_r+0x22>
  4048f8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4048fc:	b908      	cbnz	r0, 404902 <_fflush_r+0x16>
  4048fe:	b002      	add	sp, #8
  404900:	bd10      	pop	{r4, pc}
  404902:	4620      	mov	r0, r4
  404904:	b002      	add	sp, #8
  404906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40490a:	f7ff bf4b 	b.w	4047a4 <__sflush_r>
  40490e:	9101      	str	r1, [sp, #4]
  404910:	f000 f880 	bl	404a14 <__sinit>
  404914:	9901      	ldr	r1, [sp, #4]
  404916:	e7ef      	b.n	4048f8 <_fflush_r+0xc>

00404918 <_cleanup_r>:
  404918:	4901      	ldr	r1, [pc, #4]	; (404920 <_cleanup_r+0x8>)
  40491a:	f000 bbaf 	b.w	40507c <_fwalk_reent>
  40491e:	bf00      	nop
  404920:	004059b1 	.word	0x004059b1

00404924 <__sinit.part.1>:
  404924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404928:	4b35      	ldr	r3, [pc, #212]	; (404a00 <__sinit.part.1+0xdc>)
  40492a:	6845      	ldr	r5, [r0, #4]
  40492c:	63c3      	str	r3, [r0, #60]	; 0x3c
  40492e:	2400      	movs	r4, #0
  404930:	4607      	mov	r7, r0
  404932:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  404936:	2304      	movs	r3, #4
  404938:	2103      	movs	r1, #3
  40493a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40493e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  404942:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  404946:	b083      	sub	sp, #12
  404948:	602c      	str	r4, [r5, #0]
  40494a:	606c      	str	r4, [r5, #4]
  40494c:	60ac      	str	r4, [r5, #8]
  40494e:	666c      	str	r4, [r5, #100]	; 0x64
  404950:	81ec      	strh	r4, [r5, #14]
  404952:	612c      	str	r4, [r5, #16]
  404954:	616c      	str	r4, [r5, #20]
  404956:	61ac      	str	r4, [r5, #24]
  404958:	81ab      	strh	r3, [r5, #12]
  40495a:	4621      	mov	r1, r4
  40495c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  404960:	2208      	movs	r2, #8
  404962:	f7fe fdb5 	bl	4034d0 <memset>
  404966:	68be      	ldr	r6, [r7, #8]
  404968:	f8df b098 	ldr.w	fp, [pc, #152]	; 404a04 <__sinit.part.1+0xe0>
  40496c:	f8df a098 	ldr.w	sl, [pc, #152]	; 404a08 <__sinit.part.1+0xe4>
  404970:	f8df 9098 	ldr.w	r9, [pc, #152]	; 404a0c <__sinit.part.1+0xe8>
  404974:	f8df 8098 	ldr.w	r8, [pc, #152]	; 404a10 <__sinit.part.1+0xec>
  404978:	f8c5 b020 	str.w	fp, [r5, #32]
  40497c:	2301      	movs	r3, #1
  40497e:	2209      	movs	r2, #9
  404980:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  404984:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  404988:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40498c:	61ed      	str	r5, [r5, #28]
  40498e:	4621      	mov	r1, r4
  404990:	81f3      	strh	r3, [r6, #14]
  404992:	81b2      	strh	r2, [r6, #12]
  404994:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  404998:	6034      	str	r4, [r6, #0]
  40499a:	6074      	str	r4, [r6, #4]
  40499c:	60b4      	str	r4, [r6, #8]
  40499e:	6674      	str	r4, [r6, #100]	; 0x64
  4049a0:	6134      	str	r4, [r6, #16]
  4049a2:	6174      	str	r4, [r6, #20]
  4049a4:	61b4      	str	r4, [r6, #24]
  4049a6:	2208      	movs	r2, #8
  4049a8:	9301      	str	r3, [sp, #4]
  4049aa:	f7fe fd91 	bl	4034d0 <memset>
  4049ae:	68fd      	ldr	r5, [r7, #12]
  4049b0:	61f6      	str	r6, [r6, #28]
  4049b2:	2012      	movs	r0, #18
  4049b4:	2202      	movs	r2, #2
  4049b6:	f8c6 b020 	str.w	fp, [r6, #32]
  4049ba:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  4049be:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  4049c2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  4049c6:	4621      	mov	r1, r4
  4049c8:	81a8      	strh	r0, [r5, #12]
  4049ca:	81ea      	strh	r2, [r5, #14]
  4049cc:	602c      	str	r4, [r5, #0]
  4049ce:	606c      	str	r4, [r5, #4]
  4049d0:	60ac      	str	r4, [r5, #8]
  4049d2:	666c      	str	r4, [r5, #100]	; 0x64
  4049d4:	612c      	str	r4, [r5, #16]
  4049d6:	616c      	str	r4, [r5, #20]
  4049d8:	61ac      	str	r4, [r5, #24]
  4049da:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4049de:	2208      	movs	r2, #8
  4049e0:	f7fe fd76 	bl	4034d0 <memset>
  4049e4:	9b01      	ldr	r3, [sp, #4]
  4049e6:	61ed      	str	r5, [r5, #28]
  4049e8:	f8c5 b020 	str.w	fp, [r5, #32]
  4049ec:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4049f0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4049f4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4049f8:	63bb      	str	r3, [r7, #56]	; 0x38
  4049fa:	b003      	add	sp, #12
  4049fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a00:	00404919 	.word	0x00404919
  404a04:	00405719 	.word	0x00405719
  404a08:	0040573d 	.word	0x0040573d
  404a0c:	00405779 	.word	0x00405779
  404a10:	00405799 	.word	0x00405799

00404a14 <__sinit>:
  404a14:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404a16:	b103      	cbz	r3, 404a1a <__sinit+0x6>
  404a18:	4770      	bx	lr
  404a1a:	f7ff bf83 	b.w	404924 <__sinit.part.1>
  404a1e:	bf00      	nop

00404a20 <__sfp_lock_acquire>:
  404a20:	4770      	bx	lr
  404a22:	bf00      	nop

00404a24 <__sfp_lock_release>:
  404a24:	4770      	bx	lr
  404a26:	bf00      	nop

00404a28 <__libc_fini_array>:
  404a28:	b538      	push	{r3, r4, r5, lr}
  404a2a:	4d07      	ldr	r5, [pc, #28]	; (404a48 <__libc_fini_array+0x20>)
  404a2c:	4c07      	ldr	r4, [pc, #28]	; (404a4c <__libc_fini_array+0x24>)
  404a2e:	1b2c      	subs	r4, r5, r4
  404a30:	10a4      	asrs	r4, r4, #2
  404a32:	d005      	beq.n	404a40 <__libc_fini_array+0x18>
  404a34:	3c01      	subs	r4, #1
  404a36:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404a3a:	4798      	blx	r3
  404a3c:	2c00      	cmp	r4, #0
  404a3e:	d1f9      	bne.n	404a34 <__libc_fini_array+0xc>
  404a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404a44:	f001 ba80 	b.w	405f48 <_fini>
  404a48:	00405f58 	.word	0x00405f58
  404a4c:	00405f54 	.word	0x00405f54

00404a50 <__fputwc>:
  404a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404a54:	b082      	sub	sp, #8
  404a56:	4680      	mov	r8, r0
  404a58:	4689      	mov	r9, r1
  404a5a:	4614      	mov	r4, r2
  404a5c:	f000 fb3c 	bl	4050d8 <__locale_mb_cur_max>
  404a60:	2801      	cmp	r0, #1
  404a62:	d033      	beq.n	404acc <__fputwc+0x7c>
  404a64:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404a68:	464a      	mov	r2, r9
  404a6a:	a901      	add	r1, sp, #4
  404a6c:	4640      	mov	r0, r8
  404a6e:	f000 feed 	bl	40584c <_wcrtomb_r>
  404a72:	f1b0 3fff 	cmp.w	r0, #4294967295
  404a76:	4682      	mov	sl, r0
  404a78:	d021      	beq.n	404abe <__fputwc+0x6e>
  404a7a:	b388      	cbz	r0, 404ae0 <__fputwc+0x90>
  404a7c:	f89d 6004 	ldrb.w	r6, [sp, #4]
  404a80:	2500      	movs	r5, #0
  404a82:	e008      	b.n	404a96 <__fputwc+0x46>
  404a84:	6823      	ldr	r3, [r4, #0]
  404a86:	1c5a      	adds	r2, r3, #1
  404a88:	6022      	str	r2, [r4, #0]
  404a8a:	701e      	strb	r6, [r3, #0]
  404a8c:	3501      	adds	r5, #1
  404a8e:	4555      	cmp	r5, sl
  404a90:	d226      	bcs.n	404ae0 <__fputwc+0x90>
  404a92:	ab01      	add	r3, sp, #4
  404a94:	5d5e      	ldrb	r6, [r3, r5]
  404a96:	68a3      	ldr	r3, [r4, #8]
  404a98:	3b01      	subs	r3, #1
  404a9a:	2b00      	cmp	r3, #0
  404a9c:	60a3      	str	r3, [r4, #8]
  404a9e:	daf1      	bge.n	404a84 <__fputwc+0x34>
  404aa0:	69a7      	ldr	r7, [r4, #24]
  404aa2:	42bb      	cmp	r3, r7
  404aa4:	4631      	mov	r1, r6
  404aa6:	4622      	mov	r2, r4
  404aa8:	4640      	mov	r0, r8
  404aaa:	db01      	blt.n	404ab0 <__fputwc+0x60>
  404aac:	2e0a      	cmp	r6, #10
  404aae:	d1e9      	bne.n	404a84 <__fputwc+0x34>
  404ab0:	f000 fe76 	bl	4057a0 <__swbuf_r>
  404ab4:	1c43      	adds	r3, r0, #1
  404ab6:	d1e9      	bne.n	404a8c <__fputwc+0x3c>
  404ab8:	b002      	add	sp, #8
  404aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404abe:	89a3      	ldrh	r3, [r4, #12]
  404ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404ac4:	81a3      	strh	r3, [r4, #12]
  404ac6:	b002      	add	sp, #8
  404ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404acc:	f109 33ff 	add.w	r3, r9, #4294967295
  404ad0:	2bfe      	cmp	r3, #254	; 0xfe
  404ad2:	d8c7      	bhi.n	404a64 <__fputwc+0x14>
  404ad4:	fa5f f689 	uxtb.w	r6, r9
  404ad8:	4682      	mov	sl, r0
  404ada:	f88d 6004 	strb.w	r6, [sp, #4]
  404ade:	e7cf      	b.n	404a80 <__fputwc+0x30>
  404ae0:	4648      	mov	r0, r9
  404ae2:	b002      	add	sp, #8
  404ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404ae8 <_fputwc_r>:
  404ae8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404aec:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  404af0:	d10a      	bne.n	404b08 <_fputwc_r+0x20>
  404af2:	b410      	push	{r4}
  404af4:	6e54      	ldr	r4, [r2, #100]	; 0x64
  404af6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404afa:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  404afe:	6654      	str	r4, [r2, #100]	; 0x64
  404b00:	8193      	strh	r3, [r2, #12]
  404b02:	bc10      	pop	{r4}
  404b04:	f7ff bfa4 	b.w	404a50 <__fputwc>
  404b08:	f7ff bfa2 	b.w	404a50 <__fputwc>

00404b0c <_malloc_trim_r>:
  404b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404b0e:	4f23      	ldr	r7, [pc, #140]	; (404b9c <_malloc_trim_r+0x90>)
  404b10:	460c      	mov	r4, r1
  404b12:	4606      	mov	r6, r0
  404b14:	f7fe fd2a 	bl	40356c <__malloc_lock>
  404b18:	68bb      	ldr	r3, [r7, #8]
  404b1a:	685d      	ldr	r5, [r3, #4]
  404b1c:	f025 0503 	bic.w	r5, r5, #3
  404b20:	1b29      	subs	r1, r5, r4
  404b22:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  404b26:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404b2a:	f021 010f 	bic.w	r1, r1, #15
  404b2e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404b32:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404b36:	db07      	blt.n	404b48 <_malloc_trim_r+0x3c>
  404b38:	2100      	movs	r1, #0
  404b3a:	4630      	mov	r0, r6
  404b3c:	f7fe fd1a 	bl	403574 <_sbrk_r>
  404b40:	68bb      	ldr	r3, [r7, #8]
  404b42:	442b      	add	r3, r5
  404b44:	4298      	cmp	r0, r3
  404b46:	d004      	beq.n	404b52 <_malloc_trim_r+0x46>
  404b48:	4630      	mov	r0, r6
  404b4a:	f7fe fd11 	bl	403570 <__malloc_unlock>
  404b4e:	2000      	movs	r0, #0
  404b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404b52:	4261      	negs	r1, r4
  404b54:	4630      	mov	r0, r6
  404b56:	f7fe fd0d 	bl	403574 <_sbrk_r>
  404b5a:	3001      	adds	r0, #1
  404b5c:	d00d      	beq.n	404b7a <_malloc_trim_r+0x6e>
  404b5e:	4b10      	ldr	r3, [pc, #64]	; (404ba0 <_malloc_trim_r+0x94>)
  404b60:	68ba      	ldr	r2, [r7, #8]
  404b62:	6819      	ldr	r1, [r3, #0]
  404b64:	1b2d      	subs	r5, r5, r4
  404b66:	f045 0501 	orr.w	r5, r5, #1
  404b6a:	4630      	mov	r0, r6
  404b6c:	1b09      	subs	r1, r1, r4
  404b6e:	6055      	str	r5, [r2, #4]
  404b70:	6019      	str	r1, [r3, #0]
  404b72:	f7fe fcfd 	bl	403570 <__malloc_unlock>
  404b76:	2001      	movs	r0, #1
  404b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404b7a:	2100      	movs	r1, #0
  404b7c:	4630      	mov	r0, r6
  404b7e:	f7fe fcf9 	bl	403574 <_sbrk_r>
  404b82:	68ba      	ldr	r2, [r7, #8]
  404b84:	1a83      	subs	r3, r0, r2
  404b86:	2b0f      	cmp	r3, #15
  404b88:	ddde      	ble.n	404b48 <_malloc_trim_r+0x3c>
  404b8a:	4c06      	ldr	r4, [pc, #24]	; (404ba4 <_malloc_trim_r+0x98>)
  404b8c:	4904      	ldr	r1, [pc, #16]	; (404ba0 <_malloc_trim_r+0x94>)
  404b8e:	6824      	ldr	r4, [r4, #0]
  404b90:	f043 0301 	orr.w	r3, r3, #1
  404b94:	1b00      	subs	r0, r0, r4
  404b96:	6053      	str	r3, [r2, #4]
  404b98:	6008      	str	r0, [r1, #0]
  404b9a:	e7d5      	b.n	404b48 <_malloc_trim_r+0x3c>
  404b9c:	2040043c 	.word	0x2040043c
  404ba0:	20400a64 	.word	0x20400a64
  404ba4:	20400848 	.word	0x20400848

00404ba8 <_free_r>:
  404ba8:	2900      	cmp	r1, #0
  404baa:	d045      	beq.n	404c38 <_free_r+0x90>
  404bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404bb0:	460d      	mov	r5, r1
  404bb2:	4680      	mov	r8, r0
  404bb4:	f7fe fcda 	bl	40356c <__malloc_lock>
  404bb8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404bbc:	496a      	ldr	r1, [pc, #424]	; (404d68 <_free_r+0x1c0>)
  404bbe:	f027 0301 	bic.w	r3, r7, #1
  404bc2:	f1a5 0408 	sub.w	r4, r5, #8
  404bc6:	18e2      	adds	r2, r4, r3
  404bc8:	688e      	ldr	r6, [r1, #8]
  404bca:	6850      	ldr	r0, [r2, #4]
  404bcc:	42b2      	cmp	r2, r6
  404bce:	f020 0003 	bic.w	r0, r0, #3
  404bd2:	d062      	beq.n	404c9a <_free_r+0xf2>
  404bd4:	07fe      	lsls	r6, r7, #31
  404bd6:	6050      	str	r0, [r2, #4]
  404bd8:	d40b      	bmi.n	404bf2 <_free_r+0x4a>
  404bda:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404bde:	1be4      	subs	r4, r4, r7
  404be0:	f101 0e08 	add.w	lr, r1, #8
  404be4:	68a5      	ldr	r5, [r4, #8]
  404be6:	4575      	cmp	r5, lr
  404be8:	443b      	add	r3, r7
  404bea:	d06f      	beq.n	404ccc <_free_r+0x124>
  404bec:	68e7      	ldr	r7, [r4, #12]
  404bee:	60ef      	str	r7, [r5, #12]
  404bf0:	60bd      	str	r5, [r7, #8]
  404bf2:	1815      	adds	r5, r2, r0
  404bf4:	686d      	ldr	r5, [r5, #4]
  404bf6:	07ed      	lsls	r5, r5, #31
  404bf8:	d542      	bpl.n	404c80 <_free_r+0xd8>
  404bfa:	f043 0201 	orr.w	r2, r3, #1
  404bfe:	6062      	str	r2, [r4, #4]
  404c00:	50e3      	str	r3, [r4, r3]
  404c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404c06:	d218      	bcs.n	404c3a <_free_r+0x92>
  404c08:	08db      	lsrs	r3, r3, #3
  404c0a:	1c5a      	adds	r2, r3, #1
  404c0c:	684d      	ldr	r5, [r1, #4]
  404c0e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  404c12:	60a7      	str	r7, [r4, #8]
  404c14:	2001      	movs	r0, #1
  404c16:	109b      	asrs	r3, r3, #2
  404c18:	fa00 f303 	lsl.w	r3, r0, r3
  404c1c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  404c20:	431d      	orrs	r5, r3
  404c22:	3808      	subs	r0, #8
  404c24:	60e0      	str	r0, [r4, #12]
  404c26:	604d      	str	r5, [r1, #4]
  404c28:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  404c2c:	60fc      	str	r4, [r7, #12]
  404c2e:	4640      	mov	r0, r8
  404c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404c34:	f7fe bc9c 	b.w	403570 <__malloc_unlock>
  404c38:	4770      	bx	lr
  404c3a:	0a5a      	lsrs	r2, r3, #9
  404c3c:	2a04      	cmp	r2, #4
  404c3e:	d853      	bhi.n	404ce8 <_free_r+0x140>
  404c40:	099a      	lsrs	r2, r3, #6
  404c42:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404c46:	007f      	lsls	r7, r7, #1
  404c48:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404c4c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  404c50:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  404c54:	4944      	ldr	r1, [pc, #272]	; (404d68 <_free_r+0x1c0>)
  404c56:	3808      	subs	r0, #8
  404c58:	4290      	cmp	r0, r2
  404c5a:	d04d      	beq.n	404cf8 <_free_r+0x150>
  404c5c:	6851      	ldr	r1, [r2, #4]
  404c5e:	f021 0103 	bic.w	r1, r1, #3
  404c62:	428b      	cmp	r3, r1
  404c64:	d202      	bcs.n	404c6c <_free_r+0xc4>
  404c66:	6892      	ldr	r2, [r2, #8]
  404c68:	4290      	cmp	r0, r2
  404c6a:	d1f7      	bne.n	404c5c <_free_r+0xb4>
  404c6c:	68d0      	ldr	r0, [r2, #12]
  404c6e:	60e0      	str	r0, [r4, #12]
  404c70:	60a2      	str	r2, [r4, #8]
  404c72:	6084      	str	r4, [r0, #8]
  404c74:	60d4      	str	r4, [r2, #12]
  404c76:	4640      	mov	r0, r8
  404c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404c7c:	f7fe bc78 	b.w	403570 <__malloc_unlock>
  404c80:	6895      	ldr	r5, [r2, #8]
  404c82:	4f3a      	ldr	r7, [pc, #232]	; (404d6c <_free_r+0x1c4>)
  404c84:	42bd      	cmp	r5, r7
  404c86:	4403      	add	r3, r0
  404c88:	d03f      	beq.n	404d0a <_free_r+0x162>
  404c8a:	68d0      	ldr	r0, [r2, #12]
  404c8c:	60e8      	str	r0, [r5, #12]
  404c8e:	f043 0201 	orr.w	r2, r3, #1
  404c92:	6085      	str	r5, [r0, #8]
  404c94:	6062      	str	r2, [r4, #4]
  404c96:	50e3      	str	r3, [r4, r3]
  404c98:	e7b3      	b.n	404c02 <_free_r+0x5a>
  404c9a:	07ff      	lsls	r7, r7, #31
  404c9c:	4403      	add	r3, r0
  404c9e:	d407      	bmi.n	404cb0 <_free_r+0x108>
  404ca0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404ca4:	1aa4      	subs	r4, r4, r2
  404ca6:	4413      	add	r3, r2
  404ca8:	68a0      	ldr	r0, [r4, #8]
  404caa:	68e2      	ldr	r2, [r4, #12]
  404cac:	60c2      	str	r2, [r0, #12]
  404cae:	6090      	str	r0, [r2, #8]
  404cb0:	4a2f      	ldr	r2, [pc, #188]	; (404d70 <_free_r+0x1c8>)
  404cb2:	6812      	ldr	r2, [r2, #0]
  404cb4:	f043 0001 	orr.w	r0, r3, #1
  404cb8:	4293      	cmp	r3, r2
  404cba:	6060      	str	r0, [r4, #4]
  404cbc:	608c      	str	r4, [r1, #8]
  404cbe:	d3b6      	bcc.n	404c2e <_free_r+0x86>
  404cc0:	4b2c      	ldr	r3, [pc, #176]	; (404d74 <_free_r+0x1cc>)
  404cc2:	4640      	mov	r0, r8
  404cc4:	6819      	ldr	r1, [r3, #0]
  404cc6:	f7ff ff21 	bl	404b0c <_malloc_trim_r>
  404cca:	e7b0      	b.n	404c2e <_free_r+0x86>
  404ccc:	1811      	adds	r1, r2, r0
  404cce:	6849      	ldr	r1, [r1, #4]
  404cd0:	07c9      	lsls	r1, r1, #31
  404cd2:	d444      	bmi.n	404d5e <_free_r+0x1b6>
  404cd4:	6891      	ldr	r1, [r2, #8]
  404cd6:	68d2      	ldr	r2, [r2, #12]
  404cd8:	60ca      	str	r2, [r1, #12]
  404cda:	4403      	add	r3, r0
  404cdc:	f043 0001 	orr.w	r0, r3, #1
  404ce0:	6091      	str	r1, [r2, #8]
  404ce2:	6060      	str	r0, [r4, #4]
  404ce4:	50e3      	str	r3, [r4, r3]
  404ce6:	e7a2      	b.n	404c2e <_free_r+0x86>
  404ce8:	2a14      	cmp	r2, #20
  404cea:	d817      	bhi.n	404d1c <_free_r+0x174>
  404cec:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404cf0:	007f      	lsls	r7, r7, #1
  404cf2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  404cf6:	e7a9      	b.n	404c4c <_free_r+0xa4>
  404cf8:	10aa      	asrs	r2, r5, #2
  404cfa:	684b      	ldr	r3, [r1, #4]
  404cfc:	2501      	movs	r5, #1
  404cfe:	fa05 f202 	lsl.w	r2, r5, r2
  404d02:	4313      	orrs	r3, r2
  404d04:	604b      	str	r3, [r1, #4]
  404d06:	4602      	mov	r2, r0
  404d08:	e7b1      	b.n	404c6e <_free_r+0xc6>
  404d0a:	f043 0201 	orr.w	r2, r3, #1
  404d0e:	614c      	str	r4, [r1, #20]
  404d10:	610c      	str	r4, [r1, #16]
  404d12:	60e5      	str	r5, [r4, #12]
  404d14:	60a5      	str	r5, [r4, #8]
  404d16:	6062      	str	r2, [r4, #4]
  404d18:	50e3      	str	r3, [r4, r3]
  404d1a:	e788      	b.n	404c2e <_free_r+0x86>
  404d1c:	2a54      	cmp	r2, #84	; 0x54
  404d1e:	d806      	bhi.n	404d2e <_free_r+0x186>
  404d20:	0b1a      	lsrs	r2, r3, #12
  404d22:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  404d26:	007f      	lsls	r7, r7, #1
  404d28:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404d2c:	e78e      	b.n	404c4c <_free_r+0xa4>
  404d2e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404d32:	d806      	bhi.n	404d42 <_free_r+0x19a>
  404d34:	0bda      	lsrs	r2, r3, #15
  404d36:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404d3a:	007f      	lsls	r7, r7, #1
  404d3c:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404d40:	e784      	b.n	404c4c <_free_r+0xa4>
  404d42:	f240 5054 	movw	r0, #1364	; 0x554
  404d46:	4282      	cmp	r2, r0
  404d48:	d806      	bhi.n	404d58 <_free_r+0x1b0>
  404d4a:	0c9a      	lsrs	r2, r3, #18
  404d4c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404d50:	007f      	lsls	r7, r7, #1
  404d52:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  404d56:	e779      	b.n	404c4c <_free_r+0xa4>
  404d58:	27fe      	movs	r7, #254	; 0xfe
  404d5a:	257e      	movs	r5, #126	; 0x7e
  404d5c:	e776      	b.n	404c4c <_free_r+0xa4>
  404d5e:	f043 0201 	orr.w	r2, r3, #1
  404d62:	6062      	str	r2, [r4, #4]
  404d64:	50e3      	str	r3, [r4, r3]
  404d66:	e762      	b.n	404c2e <_free_r+0x86>
  404d68:	2040043c 	.word	0x2040043c
  404d6c:	20400444 	.word	0x20400444
  404d70:	20400844 	.word	0x20400844
  404d74:	20400a60 	.word	0x20400a60

00404d78 <__sfvwrite_r>:
  404d78:	6893      	ldr	r3, [r2, #8]
  404d7a:	2b00      	cmp	r3, #0
  404d7c:	d076      	beq.n	404e6c <__sfvwrite_r+0xf4>
  404d7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d82:	898b      	ldrh	r3, [r1, #12]
  404d84:	b085      	sub	sp, #20
  404d86:	460c      	mov	r4, r1
  404d88:	0719      	lsls	r1, r3, #28
  404d8a:	9001      	str	r0, [sp, #4]
  404d8c:	4616      	mov	r6, r2
  404d8e:	d529      	bpl.n	404de4 <__sfvwrite_r+0x6c>
  404d90:	6922      	ldr	r2, [r4, #16]
  404d92:	b33a      	cbz	r2, 404de4 <__sfvwrite_r+0x6c>
  404d94:	f003 0802 	and.w	r8, r3, #2
  404d98:	fa1f f088 	uxth.w	r0, r8
  404d9c:	6835      	ldr	r5, [r6, #0]
  404d9e:	2800      	cmp	r0, #0
  404da0:	d02f      	beq.n	404e02 <__sfvwrite_r+0x8a>
  404da2:	f04f 0900 	mov.w	r9, #0
  404da6:	4fb4      	ldr	r7, [pc, #720]	; (405078 <__sfvwrite_r+0x300>)
  404da8:	46c8      	mov	r8, r9
  404daa:	46b2      	mov	sl, r6
  404dac:	45b8      	cmp	r8, r7
  404dae:	4643      	mov	r3, r8
  404db0:	464a      	mov	r2, r9
  404db2:	bf28      	it	cs
  404db4:	463b      	movcs	r3, r7
  404db6:	9801      	ldr	r0, [sp, #4]
  404db8:	f1b8 0f00 	cmp.w	r8, #0
  404dbc:	d050      	beq.n	404e60 <__sfvwrite_r+0xe8>
  404dbe:	69e1      	ldr	r1, [r4, #28]
  404dc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404dc2:	47b0      	blx	r6
  404dc4:	2800      	cmp	r0, #0
  404dc6:	dd71      	ble.n	404eac <__sfvwrite_r+0x134>
  404dc8:	f8da 3008 	ldr.w	r3, [sl, #8]
  404dcc:	1a1b      	subs	r3, r3, r0
  404dce:	4481      	add	r9, r0
  404dd0:	ebc0 0808 	rsb	r8, r0, r8
  404dd4:	f8ca 3008 	str.w	r3, [sl, #8]
  404dd8:	2b00      	cmp	r3, #0
  404dda:	d1e7      	bne.n	404dac <__sfvwrite_r+0x34>
  404ddc:	2000      	movs	r0, #0
  404dde:	b005      	add	sp, #20
  404de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404de4:	4621      	mov	r1, r4
  404de6:	9801      	ldr	r0, [sp, #4]
  404de8:	f7ff fc68 	bl	4046bc <__swsetup_r>
  404dec:	2800      	cmp	r0, #0
  404dee:	f040 813a 	bne.w	405066 <__sfvwrite_r+0x2ee>
  404df2:	89a3      	ldrh	r3, [r4, #12]
  404df4:	6835      	ldr	r5, [r6, #0]
  404df6:	f003 0802 	and.w	r8, r3, #2
  404dfa:	fa1f f088 	uxth.w	r0, r8
  404dfe:	2800      	cmp	r0, #0
  404e00:	d1cf      	bne.n	404da2 <__sfvwrite_r+0x2a>
  404e02:	f013 0901 	ands.w	r9, r3, #1
  404e06:	d15b      	bne.n	404ec0 <__sfvwrite_r+0x148>
  404e08:	464f      	mov	r7, r9
  404e0a:	9602      	str	r6, [sp, #8]
  404e0c:	b31f      	cbz	r7, 404e56 <__sfvwrite_r+0xde>
  404e0e:	059a      	lsls	r2, r3, #22
  404e10:	f8d4 8008 	ldr.w	r8, [r4, #8]
  404e14:	d52c      	bpl.n	404e70 <__sfvwrite_r+0xf8>
  404e16:	4547      	cmp	r7, r8
  404e18:	46c2      	mov	sl, r8
  404e1a:	f0c0 80a4 	bcc.w	404f66 <__sfvwrite_r+0x1ee>
  404e1e:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404e22:	f040 80b1 	bne.w	404f88 <__sfvwrite_r+0x210>
  404e26:	6820      	ldr	r0, [r4, #0]
  404e28:	4652      	mov	r2, sl
  404e2a:	4649      	mov	r1, r9
  404e2c:	f000 fa20 	bl	405270 <memmove>
  404e30:	68a0      	ldr	r0, [r4, #8]
  404e32:	6823      	ldr	r3, [r4, #0]
  404e34:	ebc8 0000 	rsb	r0, r8, r0
  404e38:	4453      	add	r3, sl
  404e3a:	60a0      	str	r0, [r4, #8]
  404e3c:	6023      	str	r3, [r4, #0]
  404e3e:	4638      	mov	r0, r7
  404e40:	9a02      	ldr	r2, [sp, #8]
  404e42:	6893      	ldr	r3, [r2, #8]
  404e44:	1a1b      	subs	r3, r3, r0
  404e46:	4481      	add	r9, r0
  404e48:	1a3f      	subs	r7, r7, r0
  404e4a:	6093      	str	r3, [r2, #8]
  404e4c:	2b00      	cmp	r3, #0
  404e4e:	d0c5      	beq.n	404ddc <__sfvwrite_r+0x64>
  404e50:	89a3      	ldrh	r3, [r4, #12]
  404e52:	2f00      	cmp	r7, #0
  404e54:	d1db      	bne.n	404e0e <__sfvwrite_r+0x96>
  404e56:	f8d5 9000 	ldr.w	r9, [r5]
  404e5a:	686f      	ldr	r7, [r5, #4]
  404e5c:	3508      	adds	r5, #8
  404e5e:	e7d5      	b.n	404e0c <__sfvwrite_r+0x94>
  404e60:	f8d5 9000 	ldr.w	r9, [r5]
  404e64:	f8d5 8004 	ldr.w	r8, [r5, #4]
  404e68:	3508      	adds	r5, #8
  404e6a:	e79f      	b.n	404dac <__sfvwrite_r+0x34>
  404e6c:	2000      	movs	r0, #0
  404e6e:	4770      	bx	lr
  404e70:	6820      	ldr	r0, [r4, #0]
  404e72:	6923      	ldr	r3, [r4, #16]
  404e74:	4298      	cmp	r0, r3
  404e76:	d803      	bhi.n	404e80 <__sfvwrite_r+0x108>
  404e78:	6961      	ldr	r1, [r4, #20]
  404e7a:	428f      	cmp	r7, r1
  404e7c:	f080 80b7 	bcs.w	404fee <__sfvwrite_r+0x276>
  404e80:	45b8      	cmp	r8, r7
  404e82:	bf28      	it	cs
  404e84:	46b8      	movcs	r8, r7
  404e86:	4642      	mov	r2, r8
  404e88:	4649      	mov	r1, r9
  404e8a:	f000 f9f1 	bl	405270 <memmove>
  404e8e:	68a3      	ldr	r3, [r4, #8]
  404e90:	6822      	ldr	r2, [r4, #0]
  404e92:	ebc8 0303 	rsb	r3, r8, r3
  404e96:	4442      	add	r2, r8
  404e98:	60a3      	str	r3, [r4, #8]
  404e9a:	6022      	str	r2, [r4, #0]
  404e9c:	2b00      	cmp	r3, #0
  404e9e:	d149      	bne.n	404f34 <__sfvwrite_r+0x1bc>
  404ea0:	4621      	mov	r1, r4
  404ea2:	9801      	ldr	r0, [sp, #4]
  404ea4:	f7ff fd22 	bl	4048ec <_fflush_r>
  404ea8:	2800      	cmp	r0, #0
  404eaa:	d043      	beq.n	404f34 <__sfvwrite_r+0x1bc>
  404eac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404eb4:	f04f 30ff 	mov.w	r0, #4294967295
  404eb8:	81a3      	strh	r3, [r4, #12]
  404eba:	b005      	add	sp, #20
  404ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ec0:	4680      	mov	r8, r0
  404ec2:	9002      	str	r0, [sp, #8]
  404ec4:	4682      	mov	sl, r0
  404ec6:	4681      	mov	r9, r0
  404ec8:	f1b9 0f00 	cmp.w	r9, #0
  404ecc:	d02a      	beq.n	404f24 <__sfvwrite_r+0x1ac>
  404ece:	9b02      	ldr	r3, [sp, #8]
  404ed0:	2b00      	cmp	r3, #0
  404ed2:	d04c      	beq.n	404f6e <__sfvwrite_r+0x1f6>
  404ed4:	6820      	ldr	r0, [r4, #0]
  404ed6:	6923      	ldr	r3, [r4, #16]
  404ed8:	6962      	ldr	r2, [r4, #20]
  404eda:	45c8      	cmp	r8, r9
  404edc:	46c3      	mov	fp, r8
  404ede:	bf28      	it	cs
  404ee0:	46cb      	movcs	fp, r9
  404ee2:	4298      	cmp	r0, r3
  404ee4:	465f      	mov	r7, fp
  404ee6:	d904      	bls.n	404ef2 <__sfvwrite_r+0x17a>
  404ee8:	68a3      	ldr	r3, [r4, #8]
  404eea:	4413      	add	r3, r2
  404eec:	459b      	cmp	fp, r3
  404eee:	f300 8090 	bgt.w	405012 <__sfvwrite_r+0x29a>
  404ef2:	4593      	cmp	fp, r2
  404ef4:	db20      	blt.n	404f38 <__sfvwrite_r+0x1c0>
  404ef6:	4613      	mov	r3, r2
  404ef8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404efa:	69e1      	ldr	r1, [r4, #28]
  404efc:	9801      	ldr	r0, [sp, #4]
  404efe:	4652      	mov	r2, sl
  404f00:	47b8      	blx	r7
  404f02:	1e07      	subs	r7, r0, #0
  404f04:	ddd2      	ble.n	404eac <__sfvwrite_r+0x134>
  404f06:	ebb8 0807 	subs.w	r8, r8, r7
  404f0a:	d023      	beq.n	404f54 <__sfvwrite_r+0x1dc>
  404f0c:	68b3      	ldr	r3, [r6, #8]
  404f0e:	1bdb      	subs	r3, r3, r7
  404f10:	44ba      	add	sl, r7
  404f12:	ebc7 0909 	rsb	r9, r7, r9
  404f16:	60b3      	str	r3, [r6, #8]
  404f18:	2b00      	cmp	r3, #0
  404f1a:	f43f af5f 	beq.w	404ddc <__sfvwrite_r+0x64>
  404f1e:	f1b9 0f00 	cmp.w	r9, #0
  404f22:	d1d4      	bne.n	404ece <__sfvwrite_r+0x156>
  404f24:	2300      	movs	r3, #0
  404f26:	f8d5 a000 	ldr.w	sl, [r5]
  404f2a:	f8d5 9004 	ldr.w	r9, [r5, #4]
  404f2e:	9302      	str	r3, [sp, #8]
  404f30:	3508      	adds	r5, #8
  404f32:	e7c9      	b.n	404ec8 <__sfvwrite_r+0x150>
  404f34:	4640      	mov	r0, r8
  404f36:	e783      	b.n	404e40 <__sfvwrite_r+0xc8>
  404f38:	465a      	mov	r2, fp
  404f3a:	4651      	mov	r1, sl
  404f3c:	f000 f998 	bl	405270 <memmove>
  404f40:	68a2      	ldr	r2, [r4, #8]
  404f42:	6823      	ldr	r3, [r4, #0]
  404f44:	ebcb 0202 	rsb	r2, fp, r2
  404f48:	445b      	add	r3, fp
  404f4a:	ebb8 0807 	subs.w	r8, r8, r7
  404f4e:	60a2      	str	r2, [r4, #8]
  404f50:	6023      	str	r3, [r4, #0]
  404f52:	d1db      	bne.n	404f0c <__sfvwrite_r+0x194>
  404f54:	4621      	mov	r1, r4
  404f56:	9801      	ldr	r0, [sp, #4]
  404f58:	f7ff fcc8 	bl	4048ec <_fflush_r>
  404f5c:	2800      	cmp	r0, #0
  404f5e:	d1a5      	bne.n	404eac <__sfvwrite_r+0x134>
  404f60:	f8cd 8008 	str.w	r8, [sp, #8]
  404f64:	e7d2      	b.n	404f0c <__sfvwrite_r+0x194>
  404f66:	6820      	ldr	r0, [r4, #0]
  404f68:	46b8      	mov	r8, r7
  404f6a:	46ba      	mov	sl, r7
  404f6c:	e75c      	b.n	404e28 <__sfvwrite_r+0xb0>
  404f6e:	464a      	mov	r2, r9
  404f70:	210a      	movs	r1, #10
  404f72:	4650      	mov	r0, sl
  404f74:	f000 f92c 	bl	4051d0 <memchr>
  404f78:	2800      	cmp	r0, #0
  404f7a:	d06f      	beq.n	40505c <__sfvwrite_r+0x2e4>
  404f7c:	3001      	adds	r0, #1
  404f7e:	2301      	movs	r3, #1
  404f80:	ebca 0800 	rsb	r8, sl, r0
  404f84:	9302      	str	r3, [sp, #8]
  404f86:	e7a5      	b.n	404ed4 <__sfvwrite_r+0x15c>
  404f88:	6962      	ldr	r2, [r4, #20]
  404f8a:	6820      	ldr	r0, [r4, #0]
  404f8c:	6921      	ldr	r1, [r4, #16]
  404f8e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  404f92:	ebc1 0a00 	rsb	sl, r1, r0
  404f96:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  404f9a:	f10a 0001 	add.w	r0, sl, #1
  404f9e:	ea4f 0868 	mov.w	r8, r8, asr #1
  404fa2:	4438      	add	r0, r7
  404fa4:	4540      	cmp	r0, r8
  404fa6:	4642      	mov	r2, r8
  404fa8:	bf84      	itt	hi
  404faa:	4680      	movhi	r8, r0
  404fac:	4642      	movhi	r2, r8
  404fae:	055b      	lsls	r3, r3, #21
  404fb0:	d542      	bpl.n	405038 <__sfvwrite_r+0x2c0>
  404fb2:	4611      	mov	r1, r2
  404fb4:	9801      	ldr	r0, [sp, #4]
  404fb6:	f7fd ff39 	bl	402e2c <_malloc_r>
  404fba:	4683      	mov	fp, r0
  404fbc:	2800      	cmp	r0, #0
  404fbe:	d055      	beq.n	40506c <__sfvwrite_r+0x2f4>
  404fc0:	4652      	mov	r2, sl
  404fc2:	6921      	ldr	r1, [r4, #16]
  404fc4:	f7fe f9ea 	bl	40339c <memcpy>
  404fc8:	89a3      	ldrh	r3, [r4, #12]
  404fca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  404fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404fd2:	81a3      	strh	r3, [r4, #12]
  404fd4:	ebca 0308 	rsb	r3, sl, r8
  404fd8:	eb0b 000a 	add.w	r0, fp, sl
  404fdc:	f8c4 8014 	str.w	r8, [r4, #20]
  404fe0:	f8c4 b010 	str.w	fp, [r4, #16]
  404fe4:	6020      	str	r0, [r4, #0]
  404fe6:	60a3      	str	r3, [r4, #8]
  404fe8:	46b8      	mov	r8, r7
  404fea:	46ba      	mov	sl, r7
  404fec:	e71c      	b.n	404e28 <__sfvwrite_r+0xb0>
  404fee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  404ff2:	42bb      	cmp	r3, r7
  404ff4:	bf28      	it	cs
  404ff6:	463b      	movcs	r3, r7
  404ff8:	464a      	mov	r2, r9
  404ffa:	fb93 f3f1 	sdiv	r3, r3, r1
  404ffe:	9801      	ldr	r0, [sp, #4]
  405000:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405002:	fb01 f303 	mul.w	r3, r1, r3
  405006:	69e1      	ldr	r1, [r4, #28]
  405008:	47b0      	blx	r6
  40500a:	2800      	cmp	r0, #0
  40500c:	f73f af18 	bgt.w	404e40 <__sfvwrite_r+0xc8>
  405010:	e74c      	b.n	404eac <__sfvwrite_r+0x134>
  405012:	461a      	mov	r2, r3
  405014:	4651      	mov	r1, sl
  405016:	9303      	str	r3, [sp, #12]
  405018:	f000 f92a 	bl	405270 <memmove>
  40501c:	6822      	ldr	r2, [r4, #0]
  40501e:	9b03      	ldr	r3, [sp, #12]
  405020:	9801      	ldr	r0, [sp, #4]
  405022:	441a      	add	r2, r3
  405024:	6022      	str	r2, [r4, #0]
  405026:	4621      	mov	r1, r4
  405028:	f7ff fc60 	bl	4048ec <_fflush_r>
  40502c:	9b03      	ldr	r3, [sp, #12]
  40502e:	2800      	cmp	r0, #0
  405030:	f47f af3c 	bne.w	404eac <__sfvwrite_r+0x134>
  405034:	461f      	mov	r7, r3
  405036:	e766      	b.n	404f06 <__sfvwrite_r+0x18e>
  405038:	9801      	ldr	r0, [sp, #4]
  40503a:	f000 f97d 	bl	405338 <_realloc_r>
  40503e:	4683      	mov	fp, r0
  405040:	2800      	cmp	r0, #0
  405042:	d1c7      	bne.n	404fd4 <__sfvwrite_r+0x25c>
  405044:	9d01      	ldr	r5, [sp, #4]
  405046:	6921      	ldr	r1, [r4, #16]
  405048:	4628      	mov	r0, r5
  40504a:	f7ff fdad 	bl	404ba8 <_free_r>
  40504e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405052:	220c      	movs	r2, #12
  405054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405058:	602a      	str	r2, [r5, #0]
  40505a:	e729      	b.n	404eb0 <__sfvwrite_r+0x138>
  40505c:	2301      	movs	r3, #1
  40505e:	f109 0801 	add.w	r8, r9, #1
  405062:	9302      	str	r3, [sp, #8]
  405064:	e736      	b.n	404ed4 <__sfvwrite_r+0x15c>
  405066:	f04f 30ff 	mov.w	r0, #4294967295
  40506a:	e6b8      	b.n	404dde <__sfvwrite_r+0x66>
  40506c:	9a01      	ldr	r2, [sp, #4]
  40506e:	230c      	movs	r3, #12
  405070:	6013      	str	r3, [r2, #0]
  405072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405076:	e71b      	b.n	404eb0 <__sfvwrite_r+0x138>
  405078:	7ffffc00 	.word	0x7ffffc00

0040507c <_fwalk_reent>:
  40507c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405080:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405084:	d01f      	beq.n	4050c6 <_fwalk_reent+0x4a>
  405086:	4688      	mov	r8, r1
  405088:	4606      	mov	r6, r0
  40508a:	f04f 0900 	mov.w	r9, #0
  40508e:	687d      	ldr	r5, [r7, #4]
  405090:	68bc      	ldr	r4, [r7, #8]
  405092:	3d01      	subs	r5, #1
  405094:	d411      	bmi.n	4050ba <_fwalk_reent+0x3e>
  405096:	89a3      	ldrh	r3, [r4, #12]
  405098:	2b01      	cmp	r3, #1
  40509a:	f105 35ff 	add.w	r5, r5, #4294967295
  40509e:	d908      	bls.n	4050b2 <_fwalk_reent+0x36>
  4050a0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4050a4:	3301      	adds	r3, #1
  4050a6:	4621      	mov	r1, r4
  4050a8:	4630      	mov	r0, r6
  4050aa:	d002      	beq.n	4050b2 <_fwalk_reent+0x36>
  4050ac:	47c0      	blx	r8
  4050ae:	ea49 0900 	orr.w	r9, r9, r0
  4050b2:	1c6b      	adds	r3, r5, #1
  4050b4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4050b8:	d1ed      	bne.n	405096 <_fwalk_reent+0x1a>
  4050ba:	683f      	ldr	r7, [r7, #0]
  4050bc:	2f00      	cmp	r7, #0
  4050be:	d1e6      	bne.n	40508e <_fwalk_reent+0x12>
  4050c0:	4648      	mov	r0, r9
  4050c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4050c6:	46b9      	mov	r9, r7
  4050c8:	4648      	mov	r0, r9
  4050ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4050ce:	bf00      	nop

004050d0 <__locale_charset>:
  4050d0:	4800      	ldr	r0, [pc, #0]	; (4050d4 <__locale_charset+0x4>)
  4050d2:	4770      	bx	lr
  4050d4:	2040084c 	.word	0x2040084c

004050d8 <__locale_mb_cur_max>:
  4050d8:	4b01      	ldr	r3, [pc, #4]	; (4050e0 <__locale_mb_cur_max+0x8>)
  4050da:	6818      	ldr	r0, [r3, #0]
  4050dc:	4770      	bx	lr
  4050de:	bf00      	nop
  4050e0:	2040086c 	.word	0x2040086c

004050e4 <__swhatbuf_r>:
  4050e4:	b570      	push	{r4, r5, r6, lr}
  4050e6:	460d      	mov	r5, r1
  4050e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4050ec:	2900      	cmp	r1, #0
  4050ee:	b090      	sub	sp, #64	; 0x40
  4050f0:	4614      	mov	r4, r2
  4050f2:	461e      	mov	r6, r3
  4050f4:	db14      	blt.n	405120 <__swhatbuf_r+0x3c>
  4050f6:	aa01      	add	r2, sp, #4
  4050f8:	f000 fc9c 	bl	405a34 <_fstat_r>
  4050fc:	2800      	cmp	r0, #0
  4050fe:	db0f      	blt.n	405120 <__swhatbuf_r+0x3c>
  405100:	9a02      	ldr	r2, [sp, #8]
  405102:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405106:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40510a:	fab2 f282 	clz	r2, r2
  40510e:	0952      	lsrs	r2, r2, #5
  405110:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405114:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405118:	6032      	str	r2, [r6, #0]
  40511a:	6023      	str	r3, [r4, #0]
  40511c:	b010      	add	sp, #64	; 0x40
  40511e:	bd70      	pop	{r4, r5, r6, pc}
  405120:	89a8      	ldrh	r0, [r5, #12]
  405122:	f000 0080 	and.w	r0, r0, #128	; 0x80
  405126:	b282      	uxth	r2, r0
  405128:	2000      	movs	r0, #0
  40512a:	6030      	str	r0, [r6, #0]
  40512c:	b11a      	cbz	r2, 405136 <__swhatbuf_r+0x52>
  40512e:	2340      	movs	r3, #64	; 0x40
  405130:	6023      	str	r3, [r4, #0]
  405132:	b010      	add	sp, #64	; 0x40
  405134:	bd70      	pop	{r4, r5, r6, pc}
  405136:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40513a:	4610      	mov	r0, r2
  40513c:	6023      	str	r3, [r4, #0]
  40513e:	b010      	add	sp, #64	; 0x40
  405140:	bd70      	pop	{r4, r5, r6, pc}
  405142:	bf00      	nop

00405144 <__smakebuf_r>:
  405144:	898a      	ldrh	r2, [r1, #12]
  405146:	0792      	lsls	r2, r2, #30
  405148:	460b      	mov	r3, r1
  40514a:	d506      	bpl.n	40515a <__smakebuf_r+0x16>
  40514c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405150:	2101      	movs	r1, #1
  405152:	601a      	str	r2, [r3, #0]
  405154:	611a      	str	r2, [r3, #16]
  405156:	6159      	str	r1, [r3, #20]
  405158:	4770      	bx	lr
  40515a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40515c:	b083      	sub	sp, #12
  40515e:	ab01      	add	r3, sp, #4
  405160:	466a      	mov	r2, sp
  405162:	460c      	mov	r4, r1
  405164:	4605      	mov	r5, r0
  405166:	f7ff ffbd 	bl	4050e4 <__swhatbuf_r>
  40516a:	9900      	ldr	r1, [sp, #0]
  40516c:	4606      	mov	r6, r0
  40516e:	4628      	mov	r0, r5
  405170:	f7fd fe5c 	bl	402e2c <_malloc_r>
  405174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405178:	b1d0      	cbz	r0, 4051b0 <__smakebuf_r+0x6c>
  40517a:	9a01      	ldr	r2, [sp, #4]
  40517c:	4f12      	ldr	r7, [pc, #72]	; (4051c8 <__smakebuf_r+0x84>)
  40517e:	9900      	ldr	r1, [sp, #0]
  405180:	63ef      	str	r7, [r5, #60]	; 0x3c
  405182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405186:	81a3      	strh	r3, [r4, #12]
  405188:	6020      	str	r0, [r4, #0]
  40518a:	6120      	str	r0, [r4, #16]
  40518c:	6161      	str	r1, [r4, #20]
  40518e:	b91a      	cbnz	r2, 405198 <__smakebuf_r+0x54>
  405190:	4333      	orrs	r3, r6
  405192:	81a3      	strh	r3, [r4, #12]
  405194:	b003      	add	sp, #12
  405196:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405198:	4628      	mov	r0, r5
  40519a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40519e:	f000 fc5d 	bl	405a5c <_isatty_r>
  4051a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4051a6:	2800      	cmp	r0, #0
  4051a8:	d0f2      	beq.n	405190 <__smakebuf_r+0x4c>
  4051aa:	f043 0301 	orr.w	r3, r3, #1
  4051ae:	e7ef      	b.n	405190 <__smakebuf_r+0x4c>
  4051b0:	059a      	lsls	r2, r3, #22
  4051b2:	d4ef      	bmi.n	405194 <__smakebuf_r+0x50>
  4051b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4051b8:	f043 0302 	orr.w	r3, r3, #2
  4051bc:	2101      	movs	r1, #1
  4051be:	81a3      	strh	r3, [r4, #12]
  4051c0:	6022      	str	r2, [r4, #0]
  4051c2:	6122      	str	r2, [r4, #16]
  4051c4:	6161      	str	r1, [r4, #20]
  4051c6:	e7e5      	b.n	405194 <__smakebuf_r+0x50>
  4051c8:	00404919 	.word	0x00404919
  4051cc:	00000000 	.word	0x00000000

004051d0 <memchr>:
  4051d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4051d4:	2a10      	cmp	r2, #16
  4051d6:	db2b      	blt.n	405230 <memchr+0x60>
  4051d8:	f010 0f07 	tst.w	r0, #7
  4051dc:	d008      	beq.n	4051f0 <memchr+0x20>
  4051de:	f810 3b01 	ldrb.w	r3, [r0], #1
  4051e2:	3a01      	subs	r2, #1
  4051e4:	428b      	cmp	r3, r1
  4051e6:	d02d      	beq.n	405244 <memchr+0x74>
  4051e8:	f010 0f07 	tst.w	r0, #7
  4051ec:	b342      	cbz	r2, 405240 <memchr+0x70>
  4051ee:	d1f6      	bne.n	4051de <memchr+0xe>
  4051f0:	b4f0      	push	{r4, r5, r6, r7}
  4051f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4051f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4051fa:	f022 0407 	bic.w	r4, r2, #7
  4051fe:	f07f 0700 	mvns.w	r7, #0
  405202:	2300      	movs	r3, #0
  405204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405208:	3c08      	subs	r4, #8
  40520a:	ea85 0501 	eor.w	r5, r5, r1
  40520e:	ea86 0601 	eor.w	r6, r6, r1
  405212:	fa85 f547 	uadd8	r5, r5, r7
  405216:	faa3 f587 	sel	r5, r3, r7
  40521a:	fa86 f647 	uadd8	r6, r6, r7
  40521e:	faa5 f687 	sel	r6, r5, r7
  405222:	b98e      	cbnz	r6, 405248 <memchr+0x78>
  405224:	d1ee      	bne.n	405204 <memchr+0x34>
  405226:	bcf0      	pop	{r4, r5, r6, r7}
  405228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40522c:	f002 0207 	and.w	r2, r2, #7
  405230:	b132      	cbz	r2, 405240 <memchr+0x70>
  405232:	f810 3b01 	ldrb.w	r3, [r0], #1
  405236:	3a01      	subs	r2, #1
  405238:	ea83 0301 	eor.w	r3, r3, r1
  40523c:	b113      	cbz	r3, 405244 <memchr+0x74>
  40523e:	d1f8      	bne.n	405232 <memchr+0x62>
  405240:	2000      	movs	r0, #0
  405242:	4770      	bx	lr
  405244:	3801      	subs	r0, #1
  405246:	4770      	bx	lr
  405248:	2d00      	cmp	r5, #0
  40524a:	bf06      	itte	eq
  40524c:	4635      	moveq	r5, r6
  40524e:	3803      	subeq	r0, #3
  405250:	3807      	subne	r0, #7
  405252:	f015 0f01 	tst.w	r5, #1
  405256:	d107      	bne.n	405268 <memchr+0x98>
  405258:	3001      	adds	r0, #1
  40525a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40525e:	bf02      	ittt	eq
  405260:	3001      	addeq	r0, #1
  405262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405266:	3001      	addeq	r0, #1
  405268:	bcf0      	pop	{r4, r5, r6, r7}
  40526a:	3801      	subs	r0, #1
  40526c:	4770      	bx	lr
  40526e:	bf00      	nop

00405270 <memmove>:
  405270:	4288      	cmp	r0, r1
  405272:	b5f0      	push	{r4, r5, r6, r7, lr}
  405274:	d90d      	bls.n	405292 <memmove+0x22>
  405276:	188b      	adds	r3, r1, r2
  405278:	4298      	cmp	r0, r3
  40527a:	d20a      	bcs.n	405292 <memmove+0x22>
  40527c:	1881      	adds	r1, r0, r2
  40527e:	2a00      	cmp	r2, #0
  405280:	d051      	beq.n	405326 <memmove+0xb6>
  405282:	1a9a      	subs	r2, r3, r2
  405284:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405288:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40528c:	4293      	cmp	r3, r2
  40528e:	d1f9      	bne.n	405284 <memmove+0x14>
  405290:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405292:	2a0f      	cmp	r2, #15
  405294:	d948      	bls.n	405328 <memmove+0xb8>
  405296:	ea41 0300 	orr.w	r3, r1, r0
  40529a:	079b      	lsls	r3, r3, #30
  40529c:	d146      	bne.n	40532c <memmove+0xbc>
  40529e:	f100 0410 	add.w	r4, r0, #16
  4052a2:	f101 0310 	add.w	r3, r1, #16
  4052a6:	4615      	mov	r5, r2
  4052a8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4052ac:	f844 6c10 	str.w	r6, [r4, #-16]
  4052b0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4052b4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4052b8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4052bc:	f844 6c08 	str.w	r6, [r4, #-8]
  4052c0:	3d10      	subs	r5, #16
  4052c2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4052c6:	f844 6c04 	str.w	r6, [r4, #-4]
  4052ca:	2d0f      	cmp	r5, #15
  4052cc:	f103 0310 	add.w	r3, r3, #16
  4052d0:	f104 0410 	add.w	r4, r4, #16
  4052d4:	d8e8      	bhi.n	4052a8 <memmove+0x38>
  4052d6:	f1a2 0310 	sub.w	r3, r2, #16
  4052da:	f023 030f 	bic.w	r3, r3, #15
  4052de:	f002 0e0f 	and.w	lr, r2, #15
  4052e2:	3310      	adds	r3, #16
  4052e4:	f1be 0f03 	cmp.w	lr, #3
  4052e8:	4419      	add	r1, r3
  4052ea:	4403      	add	r3, r0
  4052ec:	d921      	bls.n	405332 <memmove+0xc2>
  4052ee:	1f1e      	subs	r6, r3, #4
  4052f0:	460d      	mov	r5, r1
  4052f2:	4674      	mov	r4, lr
  4052f4:	3c04      	subs	r4, #4
  4052f6:	f855 7b04 	ldr.w	r7, [r5], #4
  4052fa:	f846 7f04 	str.w	r7, [r6, #4]!
  4052fe:	2c03      	cmp	r4, #3
  405300:	d8f8      	bhi.n	4052f4 <memmove+0x84>
  405302:	f1ae 0404 	sub.w	r4, lr, #4
  405306:	f024 0403 	bic.w	r4, r4, #3
  40530a:	3404      	adds	r4, #4
  40530c:	4423      	add	r3, r4
  40530e:	4421      	add	r1, r4
  405310:	f002 0203 	and.w	r2, r2, #3
  405314:	b162      	cbz	r2, 405330 <memmove+0xc0>
  405316:	3b01      	subs	r3, #1
  405318:	440a      	add	r2, r1
  40531a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40531e:	f803 4f01 	strb.w	r4, [r3, #1]!
  405322:	428a      	cmp	r2, r1
  405324:	d1f9      	bne.n	40531a <memmove+0xaa>
  405326:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405328:	4603      	mov	r3, r0
  40532a:	e7f3      	b.n	405314 <memmove+0xa4>
  40532c:	4603      	mov	r3, r0
  40532e:	e7f2      	b.n	405316 <memmove+0xa6>
  405330:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405332:	4672      	mov	r2, lr
  405334:	e7ee      	b.n	405314 <memmove+0xa4>
  405336:	bf00      	nop

00405338 <_realloc_r>:
  405338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40533c:	4617      	mov	r7, r2
  40533e:	b083      	sub	sp, #12
  405340:	2900      	cmp	r1, #0
  405342:	f000 80c1 	beq.w	4054c8 <_realloc_r+0x190>
  405346:	460e      	mov	r6, r1
  405348:	4681      	mov	r9, r0
  40534a:	f107 050b 	add.w	r5, r7, #11
  40534e:	f7fe f90d 	bl	40356c <__malloc_lock>
  405352:	f856 ec04 	ldr.w	lr, [r6, #-4]
  405356:	2d16      	cmp	r5, #22
  405358:	f02e 0403 	bic.w	r4, lr, #3
  40535c:	f1a6 0808 	sub.w	r8, r6, #8
  405360:	d840      	bhi.n	4053e4 <_realloc_r+0xac>
  405362:	2210      	movs	r2, #16
  405364:	4615      	mov	r5, r2
  405366:	42af      	cmp	r7, r5
  405368:	d841      	bhi.n	4053ee <_realloc_r+0xb6>
  40536a:	4294      	cmp	r4, r2
  40536c:	da75      	bge.n	40545a <_realloc_r+0x122>
  40536e:	4bc9      	ldr	r3, [pc, #804]	; (405694 <_realloc_r+0x35c>)
  405370:	6899      	ldr	r1, [r3, #8]
  405372:	eb08 0004 	add.w	r0, r8, r4
  405376:	4288      	cmp	r0, r1
  405378:	6841      	ldr	r1, [r0, #4]
  40537a:	f000 80d9 	beq.w	405530 <_realloc_r+0x1f8>
  40537e:	f021 0301 	bic.w	r3, r1, #1
  405382:	4403      	add	r3, r0
  405384:	685b      	ldr	r3, [r3, #4]
  405386:	07db      	lsls	r3, r3, #31
  405388:	d57d      	bpl.n	405486 <_realloc_r+0x14e>
  40538a:	f01e 0f01 	tst.w	lr, #1
  40538e:	d035      	beq.n	4053fc <_realloc_r+0xc4>
  405390:	4639      	mov	r1, r7
  405392:	4648      	mov	r0, r9
  405394:	f7fd fd4a 	bl	402e2c <_malloc_r>
  405398:	4607      	mov	r7, r0
  40539a:	b1e0      	cbz	r0, 4053d6 <_realloc_r+0x9e>
  40539c:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4053a0:	f023 0301 	bic.w	r3, r3, #1
  4053a4:	4443      	add	r3, r8
  4053a6:	f1a0 0208 	sub.w	r2, r0, #8
  4053aa:	429a      	cmp	r2, r3
  4053ac:	f000 8144 	beq.w	405638 <_realloc_r+0x300>
  4053b0:	1f22      	subs	r2, r4, #4
  4053b2:	2a24      	cmp	r2, #36	; 0x24
  4053b4:	f200 8131 	bhi.w	40561a <_realloc_r+0x2e2>
  4053b8:	2a13      	cmp	r2, #19
  4053ba:	f200 8104 	bhi.w	4055c6 <_realloc_r+0x28e>
  4053be:	4603      	mov	r3, r0
  4053c0:	4632      	mov	r2, r6
  4053c2:	6811      	ldr	r1, [r2, #0]
  4053c4:	6019      	str	r1, [r3, #0]
  4053c6:	6851      	ldr	r1, [r2, #4]
  4053c8:	6059      	str	r1, [r3, #4]
  4053ca:	6892      	ldr	r2, [r2, #8]
  4053cc:	609a      	str	r2, [r3, #8]
  4053ce:	4631      	mov	r1, r6
  4053d0:	4648      	mov	r0, r9
  4053d2:	f7ff fbe9 	bl	404ba8 <_free_r>
  4053d6:	4648      	mov	r0, r9
  4053d8:	f7fe f8ca 	bl	403570 <__malloc_unlock>
  4053dc:	4638      	mov	r0, r7
  4053de:	b003      	add	sp, #12
  4053e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4053e4:	f025 0507 	bic.w	r5, r5, #7
  4053e8:	2d00      	cmp	r5, #0
  4053ea:	462a      	mov	r2, r5
  4053ec:	dabb      	bge.n	405366 <_realloc_r+0x2e>
  4053ee:	230c      	movs	r3, #12
  4053f0:	2000      	movs	r0, #0
  4053f2:	f8c9 3000 	str.w	r3, [r9]
  4053f6:	b003      	add	sp, #12
  4053f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4053fc:	f856 3c08 	ldr.w	r3, [r6, #-8]
  405400:	ebc3 0a08 	rsb	sl, r3, r8
  405404:	f8da 3004 	ldr.w	r3, [sl, #4]
  405408:	f023 0c03 	bic.w	ip, r3, #3
  40540c:	eb04 030c 	add.w	r3, r4, ip
  405410:	4293      	cmp	r3, r2
  405412:	dbbd      	blt.n	405390 <_realloc_r+0x58>
  405414:	4657      	mov	r7, sl
  405416:	f8da 100c 	ldr.w	r1, [sl, #12]
  40541a:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40541e:	1f22      	subs	r2, r4, #4
  405420:	2a24      	cmp	r2, #36	; 0x24
  405422:	60c1      	str	r1, [r0, #12]
  405424:	6088      	str	r0, [r1, #8]
  405426:	f200 8117 	bhi.w	405658 <_realloc_r+0x320>
  40542a:	2a13      	cmp	r2, #19
  40542c:	f240 8112 	bls.w	405654 <_realloc_r+0x31c>
  405430:	6831      	ldr	r1, [r6, #0]
  405432:	f8ca 1008 	str.w	r1, [sl, #8]
  405436:	6871      	ldr	r1, [r6, #4]
  405438:	f8ca 100c 	str.w	r1, [sl, #12]
  40543c:	2a1b      	cmp	r2, #27
  40543e:	f200 812b 	bhi.w	405698 <_realloc_r+0x360>
  405442:	3608      	adds	r6, #8
  405444:	f10a 0210 	add.w	r2, sl, #16
  405448:	6831      	ldr	r1, [r6, #0]
  40544a:	6011      	str	r1, [r2, #0]
  40544c:	6871      	ldr	r1, [r6, #4]
  40544e:	6051      	str	r1, [r2, #4]
  405450:	68b1      	ldr	r1, [r6, #8]
  405452:	6091      	str	r1, [r2, #8]
  405454:	463e      	mov	r6, r7
  405456:	461c      	mov	r4, r3
  405458:	46d0      	mov	r8, sl
  40545a:	1b63      	subs	r3, r4, r5
  40545c:	2b0f      	cmp	r3, #15
  40545e:	d81d      	bhi.n	40549c <_realloc_r+0x164>
  405460:	f8d8 3004 	ldr.w	r3, [r8, #4]
  405464:	f003 0301 	and.w	r3, r3, #1
  405468:	4323      	orrs	r3, r4
  40546a:	4444      	add	r4, r8
  40546c:	f8c8 3004 	str.w	r3, [r8, #4]
  405470:	6863      	ldr	r3, [r4, #4]
  405472:	f043 0301 	orr.w	r3, r3, #1
  405476:	6063      	str	r3, [r4, #4]
  405478:	4648      	mov	r0, r9
  40547a:	f7fe f879 	bl	403570 <__malloc_unlock>
  40547e:	4630      	mov	r0, r6
  405480:	b003      	add	sp, #12
  405482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405486:	f021 0103 	bic.w	r1, r1, #3
  40548a:	4421      	add	r1, r4
  40548c:	4291      	cmp	r1, r2
  40548e:	db21      	blt.n	4054d4 <_realloc_r+0x19c>
  405490:	68c3      	ldr	r3, [r0, #12]
  405492:	6882      	ldr	r2, [r0, #8]
  405494:	460c      	mov	r4, r1
  405496:	60d3      	str	r3, [r2, #12]
  405498:	609a      	str	r2, [r3, #8]
  40549a:	e7de      	b.n	40545a <_realloc_r+0x122>
  40549c:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4054a0:	eb08 0105 	add.w	r1, r8, r5
  4054a4:	f002 0201 	and.w	r2, r2, #1
  4054a8:	4315      	orrs	r5, r2
  4054aa:	f043 0201 	orr.w	r2, r3, #1
  4054ae:	440b      	add	r3, r1
  4054b0:	f8c8 5004 	str.w	r5, [r8, #4]
  4054b4:	604a      	str	r2, [r1, #4]
  4054b6:	685a      	ldr	r2, [r3, #4]
  4054b8:	f042 0201 	orr.w	r2, r2, #1
  4054bc:	3108      	adds	r1, #8
  4054be:	605a      	str	r2, [r3, #4]
  4054c0:	4648      	mov	r0, r9
  4054c2:	f7ff fb71 	bl	404ba8 <_free_r>
  4054c6:	e7d7      	b.n	405478 <_realloc_r+0x140>
  4054c8:	4611      	mov	r1, r2
  4054ca:	b003      	add	sp, #12
  4054cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054d0:	f7fd bcac 	b.w	402e2c <_malloc_r>
  4054d4:	f01e 0f01 	tst.w	lr, #1
  4054d8:	f47f af5a 	bne.w	405390 <_realloc_r+0x58>
  4054dc:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4054e0:	ebc3 0a08 	rsb	sl, r3, r8
  4054e4:	f8da 3004 	ldr.w	r3, [sl, #4]
  4054e8:	f023 0c03 	bic.w	ip, r3, #3
  4054ec:	eb01 0e0c 	add.w	lr, r1, ip
  4054f0:	4596      	cmp	lr, r2
  4054f2:	db8b      	blt.n	40540c <_realloc_r+0xd4>
  4054f4:	68c3      	ldr	r3, [r0, #12]
  4054f6:	6882      	ldr	r2, [r0, #8]
  4054f8:	4657      	mov	r7, sl
  4054fa:	60d3      	str	r3, [r2, #12]
  4054fc:	609a      	str	r2, [r3, #8]
  4054fe:	f857 1f08 	ldr.w	r1, [r7, #8]!
  405502:	f8da 300c 	ldr.w	r3, [sl, #12]
  405506:	60cb      	str	r3, [r1, #12]
  405508:	1f22      	subs	r2, r4, #4
  40550a:	2a24      	cmp	r2, #36	; 0x24
  40550c:	6099      	str	r1, [r3, #8]
  40550e:	f200 8099 	bhi.w	405644 <_realloc_r+0x30c>
  405512:	2a13      	cmp	r2, #19
  405514:	d962      	bls.n	4055dc <_realloc_r+0x2a4>
  405516:	6833      	ldr	r3, [r6, #0]
  405518:	f8ca 3008 	str.w	r3, [sl, #8]
  40551c:	6873      	ldr	r3, [r6, #4]
  40551e:	f8ca 300c 	str.w	r3, [sl, #12]
  405522:	2a1b      	cmp	r2, #27
  405524:	f200 80a0 	bhi.w	405668 <_realloc_r+0x330>
  405528:	3608      	adds	r6, #8
  40552a:	f10a 0310 	add.w	r3, sl, #16
  40552e:	e056      	b.n	4055de <_realloc_r+0x2a6>
  405530:	f021 0b03 	bic.w	fp, r1, #3
  405534:	44a3      	add	fp, r4
  405536:	f105 0010 	add.w	r0, r5, #16
  40553a:	4583      	cmp	fp, r0
  40553c:	da59      	bge.n	4055f2 <_realloc_r+0x2ba>
  40553e:	f01e 0f01 	tst.w	lr, #1
  405542:	f47f af25 	bne.w	405390 <_realloc_r+0x58>
  405546:	f856 1c08 	ldr.w	r1, [r6, #-8]
  40554a:	ebc1 0a08 	rsb	sl, r1, r8
  40554e:	f8da 1004 	ldr.w	r1, [sl, #4]
  405552:	f021 0c03 	bic.w	ip, r1, #3
  405556:	44e3      	add	fp, ip
  405558:	4558      	cmp	r0, fp
  40555a:	f73f af57 	bgt.w	40540c <_realloc_r+0xd4>
  40555e:	4657      	mov	r7, sl
  405560:	f8da 100c 	ldr.w	r1, [sl, #12]
  405564:	f857 0f08 	ldr.w	r0, [r7, #8]!
  405568:	1f22      	subs	r2, r4, #4
  40556a:	2a24      	cmp	r2, #36	; 0x24
  40556c:	60c1      	str	r1, [r0, #12]
  40556e:	6088      	str	r0, [r1, #8]
  405570:	f200 80b4 	bhi.w	4056dc <_realloc_r+0x3a4>
  405574:	2a13      	cmp	r2, #19
  405576:	f240 80a5 	bls.w	4056c4 <_realloc_r+0x38c>
  40557a:	6831      	ldr	r1, [r6, #0]
  40557c:	f8ca 1008 	str.w	r1, [sl, #8]
  405580:	6871      	ldr	r1, [r6, #4]
  405582:	f8ca 100c 	str.w	r1, [sl, #12]
  405586:	2a1b      	cmp	r2, #27
  405588:	f200 80af 	bhi.w	4056ea <_realloc_r+0x3b2>
  40558c:	3608      	adds	r6, #8
  40558e:	f10a 0210 	add.w	r2, sl, #16
  405592:	6831      	ldr	r1, [r6, #0]
  405594:	6011      	str	r1, [r2, #0]
  405596:	6871      	ldr	r1, [r6, #4]
  405598:	6051      	str	r1, [r2, #4]
  40559a:	68b1      	ldr	r1, [r6, #8]
  40559c:	6091      	str	r1, [r2, #8]
  40559e:	eb0a 0105 	add.w	r1, sl, r5
  4055a2:	ebc5 020b 	rsb	r2, r5, fp
  4055a6:	f042 0201 	orr.w	r2, r2, #1
  4055aa:	6099      	str	r1, [r3, #8]
  4055ac:	604a      	str	r2, [r1, #4]
  4055ae:	f8da 3004 	ldr.w	r3, [sl, #4]
  4055b2:	f003 0301 	and.w	r3, r3, #1
  4055b6:	431d      	orrs	r5, r3
  4055b8:	4648      	mov	r0, r9
  4055ba:	f8ca 5004 	str.w	r5, [sl, #4]
  4055be:	f7fd ffd7 	bl	403570 <__malloc_unlock>
  4055c2:	4638      	mov	r0, r7
  4055c4:	e75c      	b.n	405480 <_realloc_r+0x148>
  4055c6:	6833      	ldr	r3, [r6, #0]
  4055c8:	6003      	str	r3, [r0, #0]
  4055ca:	6873      	ldr	r3, [r6, #4]
  4055cc:	6043      	str	r3, [r0, #4]
  4055ce:	2a1b      	cmp	r2, #27
  4055d0:	d827      	bhi.n	405622 <_realloc_r+0x2ea>
  4055d2:	f100 0308 	add.w	r3, r0, #8
  4055d6:	f106 0208 	add.w	r2, r6, #8
  4055da:	e6f2      	b.n	4053c2 <_realloc_r+0x8a>
  4055dc:	463b      	mov	r3, r7
  4055de:	6832      	ldr	r2, [r6, #0]
  4055e0:	601a      	str	r2, [r3, #0]
  4055e2:	6872      	ldr	r2, [r6, #4]
  4055e4:	605a      	str	r2, [r3, #4]
  4055e6:	68b2      	ldr	r2, [r6, #8]
  4055e8:	609a      	str	r2, [r3, #8]
  4055ea:	463e      	mov	r6, r7
  4055ec:	4674      	mov	r4, lr
  4055ee:	46d0      	mov	r8, sl
  4055f0:	e733      	b.n	40545a <_realloc_r+0x122>
  4055f2:	eb08 0105 	add.w	r1, r8, r5
  4055f6:	ebc5 0b0b 	rsb	fp, r5, fp
  4055fa:	f04b 0201 	orr.w	r2, fp, #1
  4055fe:	6099      	str	r1, [r3, #8]
  405600:	604a      	str	r2, [r1, #4]
  405602:	f856 3c04 	ldr.w	r3, [r6, #-4]
  405606:	f003 0301 	and.w	r3, r3, #1
  40560a:	431d      	orrs	r5, r3
  40560c:	4648      	mov	r0, r9
  40560e:	f846 5c04 	str.w	r5, [r6, #-4]
  405612:	f7fd ffad 	bl	403570 <__malloc_unlock>
  405616:	4630      	mov	r0, r6
  405618:	e732      	b.n	405480 <_realloc_r+0x148>
  40561a:	4631      	mov	r1, r6
  40561c:	f7ff fe28 	bl	405270 <memmove>
  405620:	e6d5      	b.n	4053ce <_realloc_r+0x96>
  405622:	68b3      	ldr	r3, [r6, #8]
  405624:	6083      	str	r3, [r0, #8]
  405626:	68f3      	ldr	r3, [r6, #12]
  405628:	60c3      	str	r3, [r0, #12]
  40562a:	2a24      	cmp	r2, #36	; 0x24
  40562c:	d028      	beq.n	405680 <_realloc_r+0x348>
  40562e:	f100 0310 	add.w	r3, r0, #16
  405632:	f106 0210 	add.w	r2, r6, #16
  405636:	e6c4      	b.n	4053c2 <_realloc_r+0x8a>
  405638:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40563c:	f023 0303 	bic.w	r3, r3, #3
  405640:	441c      	add	r4, r3
  405642:	e70a      	b.n	40545a <_realloc_r+0x122>
  405644:	4631      	mov	r1, r6
  405646:	4638      	mov	r0, r7
  405648:	4674      	mov	r4, lr
  40564a:	46d0      	mov	r8, sl
  40564c:	f7ff fe10 	bl	405270 <memmove>
  405650:	463e      	mov	r6, r7
  405652:	e702      	b.n	40545a <_realloc_r+0x122>
  405654:	463a      	mov	r2, r7
  405656:	e6f7      	b.n	405448 <_realloc_r+0x110>
  405658:	4631      	mov	r1, r6
  40565a:	4638      	mov	r0, r7
  40565c:	461c      	mov	r4, r3
  40565e:	46d0      	mov	r8, sl
  405660:	f7ff fe06 	bl	405270 <memmove>
  405664:	463e      	mov	r6, r7
  405666:	e6f8      	b.n	40545a <_realloc_r+0x122>
  405668:	68b3      	ldr	r3, [r6, #8]
  40566a:	f8ca 3010 	str.w	r3, [sl, #16]
  40566e:	68f3      	ldr	r3, [r6, #12]
  405670:	f8ca 3014 	str.w	r3, [sl, #20]
  405674:	2a24      	cmp	r2, #36	; 0x24
  405676:	d01b      	beq.n	4056b0 <_realloc_r+0x378>
  405678:	3610      	adds	r6, #16
  40567a:	f10a 0318 	add.w	r3, sl, #24
  40567e:	e7ae      	b.n	4055de <_realloc_r+0x2a6>
  405680:	6933      	ldr	r3, [r6, #16]
  405682:	6103      	str	r3, [r0, #16]
  405684:	6973      	ldr	r3, [r6, #20]
  405686:	6143      	str	r3, [r0, #20]
  405688:	f106 0218 	add.w	r2, r6, #24
  40568c:	f100 0318 	add.w	r3, r0, #24
  405690:	e697      	b.n	4053c2 <_realloc_r+0x8a>
  405692:	bf00      	nop
  405694:	2040043c 	.word	0x2040043c
  405698:	68b1      	ldr	r1, [r6, #8]
  40569a:	f8ca 1010 	str.w	r1, [sl, #16]
  40569e:	68f1      	ldr	r1, [r6, #12]
  4056a0:	f8ca 1014 	str.w	r1, [sl, #20]
  4056a4:	2a24      	cmp	r2, #36	; 0x24
  4056a6:	d00f      	beq.n	4056c8 <_realloc_r+0x390>
  4056a8:	3610      	adds	r6, #16
  4056aa:	f10a 0218 	add.w	r2, sl, #24
  4056ae:	e6cb      	b.n	405448 <_realloc_r+0x110>
  4056b0:	6933      	ldr	r3, [r6, #16]
  4056b2:	f8ca 3018 	str.w	r3, [sl, #24]
  4056b6:	6973      	ldr	r3, [r6, #20]
  4056b8:	f8ca 301c 	str.w	r3, [sl, #28]
  4056bc:	3618      	adds	r6, #24
  4056be:	f10a 0320 	add.w	r3, sl, #32
  4056c2:	e78c      	b.n	4055de <_realloc_r+0x2a6>
  4056c4:	463a      	mov	r2, r7
  4056c6:	e764      	b.n	405592 <_realloc_r+0x25a>
  4056c8:	6932      	ldr	r2, [r6, #16]
  4056ca:	f8ca 2018 	str.w	r2, [sl, #24]
  4056ce:	6972      	ldr	r2, [r6, #20]
  4056d0:	f8ca 201c 	str.w	r2, [sl, #28]
  4056d4:	3618      	adds	r6, #24
  4056d6:	f10a 0220 	add.w	r2, sl, #32
  4056da:	e6b5      	b.n	405448 <_realloc_r+0x110>
  4056dc:	4631      	mov	r1, r6
  4056de:	4638      	mov	r0, r7
  4056e0:	9301      	str	r3, [sp, #4]
  4056e2:	f7ff fdc5 	bl	405270 <memmove>
  4056e6:	9b01      	ldr	r3, [sp, #4]
  4056e8:	e759      	b.n	40559e <_realloc_r+0x266>
  4056ea:	68b1      	ldr	r1, [r6, #8]
  4056ec:	f8ca 1010 	str.w	r1, [sl, #16]
  4056f0:	68f1      	ldr	r1, [r6, #12]
  4056f2:	f8ca 1014 	str.w	r1, [sl, #20]
  4056f6:	2a24      	cmp	r2, #36	; 0x24
  4056f8:	d003      	beq.n	405702 <_realloc_r+0x3ca>
  4056fa:	3610      	adds	r6, #16
  4056fc:	f10a 0218 	add.w	r2, sl, #24
  405700:	e747      	b.n	405592 <_realloc_r+0x25a>
  405702:	6932      	ldr	r2, [r6, #16]
  405704:	f8ca 2018 	str.w	r2, [sl, #24]
  405708:	6972      	ldr	r2, [r6, #20]
  40570a:	f8ca 201c 	str.w	r2, [sl, #28]
  40570e:	3618      	adds	r6, #24
  405710:	f10a 0220 	add.w	r2, sl, #32
  405714:	e73d      	b.n	405592 <_realloc_r+0x25a>
  405716:	bf00      	nop

00405718 <__sread>:
  405718:	b510      	push	{r4, lr}
  40571a:	460c      	mov	r4, r1
  40571c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405720:	f000 f9c4 	bl	405aac <_read_r>
  405724:	2800      	cmp	r0, #0
  405726:	db03      	blt.n	405730 <__sread+0x18>
  405728:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40572a:	4403      	add	r3, r0
  40572c:	6523      	str	r3, [r4, #80]	; 0x50
  40572e:	bd10      	pop	{r4, pc}
  405730:	89a3      	ldrh	r3, [r4, #12]
  405732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405736:	81a3      	strh	r3, [r4, #12]
  405738:	bd10      	pop	{r4, pc}
  40573a:	bf00      	nop

0040573c <__swrite>:
  40573c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405740:	4616      	mov	r6, r2
  405742:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  405746:	461f      	mov	r7, r3
  405748:	05d3      	lsls	r3, r2, #23
  40574a:	460c      	mov	r4, r1
  40574c:	4605      	mov	r5, r0
  40574e:	d507      	bpl.n	405760 <__swrite+0x24>
  405750:	2200      	movs	r2, #0
  405752:	2302      	movs	r3, #2
  405754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405758:	f000 f992 	bl	405a80 <_lseek_r>
  40575c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405764:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  405768:	81a2      	strh	r2, [r4, #12]
  40576a:	463b      	mov	r3, r7
  40576c:	4632      	mov	r2, r6
  40576e:	4628      	mov	r0, r5
  405770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405774:	f000 b8a2 	b.w	4058bc <_write_r>

00405778 <__sseek>:
  405778:	b510      	push	{r4, lr}
  40577a:	460c      	mov	r4, r1
  40577c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405780:	f000 f97e 	bl	405a80 <_lseek_r>
  405784:	89a3      	ldrh	r3, [r4, #12]
  405786:	1c42      	adds	r2, r0, #1
  405788:	bf0e      	itee	eq
  40578a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40578e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405792:	6520      	strne	r0, [r4, #80]	; 0x50
  405794:	81a3      	strh	r3, [r4, #12]
  405796:	bd10      	pop	{r4, pc}

00405798 <__sclose>:
  405798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40579c:	f000 b8f6 	b.w	40598c <_close_r>

004057a0 <__swbuf_r>:
  4057a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4057a2:	460e      	mov	r6, r1
  4057a4:	4614      	mov	r4, r2
  4057a6:	4607      	mov	r7, r0
  4057a8:	b110      	cbz	r0, 4057b0 <__swbuf_r+0x10>
  4057aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4057ac:	2b00      	cmp	r3, #0
  4057ae:	d04a      	beq.n	405846 <__swbuf_r+0xa6>
  4057b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4057b4:	69a3      	ldr	r3, [r4, #24]
  4057b6:	60a3      	str	r3, [r4, #8]
  4057b8:	b291      	uxth	r1, r2
  4057ba:	0708      	lsls	r0, r1, #28
  4057bc:	d538      	bpl.n	405830 <__swbuf_r+0x90>
  4057be:	6923      	ldr	r3, [r4, #16]
  4057c0:	2b00      	cmp	r3, #0
  4057c2:	d035      	beq.n	405830 <__swbuf_r+0x90>
  4057c4:	0489      	lsls	r1, r1, #18
  4057c6:	b2f5      	uxtb	r5, r6
  4057c8:	d515      	bpl.n	4057f6 <__swbuf_r+0x56>
  4057ca:	6822      	ldr	r2, [r4, #0]
  4057cc:	6961      	ldr	r1, [r4, #20]
  4057ce:	1ad3      	subs	r3, r2, r3
  4057d0:	428b      	cmp	r3, r1
  4057d2:	da1c      	bge.n	40580e <__swbuf_r+0x6e>
  4057d4:	3301      	adds	r3, #1
  4057d6:	68a1      	ldr	r1, [r4, #8]
  4057d8:	1c50      	adds	r0, r2, #1
  4057da:	3901      	subs	r1, #1
  4057dc:	60a1      	str	r1, [r4, #8]
  4057de:	6020      	str	r0, [r4, #0]
  4057e0:	7016      	strb	r6, [r2, #0]
  4057e2:	6962      	ldr	r2, [r4, #20]
  4057e4:	429a      	cmp	r2, r3
  4057e6:	d01a      	beq.n	40581e <__swbuf_r+0x7e>
  4057e8:	89a3      	ldrh	r3, [r4, #12]
  4057ea:	07db      	lsls	r3, r3, #31
  4057ec:	d501      	bpl.n	4057f2 <__swbuf_r+0x52>
  4057ee:	2d0a      	cmp	r5, #10
  4057f0:	d015      	beq.n	40581e <__swbuf_r+0x7e>
  4057f2:	4628      	mov	r0, r5
  4057f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4057f6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4057f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4057fc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  405800:	81a2      	strh	r2, [r4, #12]
  405802:	6822      	ldr	r2, [r4, #0]
  405804:	6661      	str	r1, [r4, #100]	; 0x64
  405806:	6961      	ldr	r1, [r4, #20]
  405808:	1ad3      	subs	r3, r2, r3
  40580a:	428b      	cmp	r3, r1
  40580c:	dbe2      	blt.n	4057d4 <__swbuf_r+0x34>
  40580e:	4621      	mov	r1, r4
  405810:	4638      	mov	r0, r7
  405812:	f7ff f86b 	bl	4048ec <_fflush_r>
  405816:	b940      	cbnz	r0, 40582a <__swbuf_r+0x8a>
  405818:	6822      	ldr	r2, [r4, #0]
  40581a:	2301      	movs	r3, #1
  40581c:	e7db      	b.n	4057d6 <__swbuf_r+0x36>
  40581e:	4621      	mov	r1, r4
  405820:	4638      	mov	r0, r7
  405822:	f7ff f863 	bl	4048ec <_fflush_r>
  405826:	2800      	cmp	r0, #0
  405828:	d0e3      	beq.n	4057f2 <__swbuf_r+0x52>
  40582a:	f04f 30ff 	mov.w	r0, #4294967295
  40582e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405830:	4621      	mov	r1, r4
  405832:	4638      	mov	r0, r7
  405834:	f7fe ff42 	bl	4046bc <__swsetup_r>
  405838:	2800      	cmp	r0, #0
  40583a:	d1f6      	bne.n	40582a <__swbuf_r+0x8a>
  40583c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405840:	6923      	ldr	r3, [r4, #16]
  405842:	b291      	uxth	r1, r2
  405844:	e7be      	b.n	4057c4 <__swbuf_r+0x24>
  405846:	f7ff f8e5 	bl	404a14 <__sinit>
  40584a:	e7b1      	b.n	4057b0 <__swbuf_r+0x10>

0040584c <_wcrtomb_r>:
  40584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405850:	4605      	mov	r5, r0
  405852:	b086      	sub	sp, #24
  405854:	461e      	mov	r6, r3
  405856:	460c      	mov	r4, r1
  405858:	b1a1      	cbz	r1, 405884 <_wcrtomb_r+0x38>
  40585a:	4b10      	ldr	r3, [pc, #64]	; (40589c <_wcrtomb_r+0x50>)
  40585c:	4617      	mov	r7, r2
  40585e:	f8d3 8000 	ldr.w	r8, [r3]
  405862:	f7ff fc35 	bl	4050d0 <__locale_charset>
  405866:	9600      	str	r6, [sp, #0]
  405868:	4603      	mov	r3, r0
  40586a:	463a      	mov	r2, r7
  40586c:	4621      	mov	r1, r4
  40586e:	4628      	mov	r0, r5
  405870:	47c0      	blx	r8
  405872:	1c43      	adds	r3, r0, #1
  405874:	d103      	bne.n	40587e <_wcrtomb_r+0x32>
  405876:	2200      	movs	r2, #0
  405878:	238a      	movs	r3, #138	; 0x8a
  40587a:	6032      	str	r2, [r6, #0]
  40587c:	602b      	str	r3, [r5, #0]
  40587e:	b006      	add	sp, #24
  405880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405884:	4b05      	ldr	r3, [pc, #20]	; (40589c <_wcrtomb_r+0x50>)
  405886:	681f      	ldr	r7, [r3, #0]
  405888:	f7ff fc22 	bl	4050d0 <__locale_charset>
  40588c:	9600      	str	r6, [sp, #0]
  40588e:	4603      	mov	r3, r0
  405890:	4622      	mov	r2, r4
  405892:	a903      	add	r1, sp, #12
  405894:	4628      	mov	r0, r5
  405896:	47b8      	blx	r7
  405898:	e7eb      	b.n	405872 <_wcrtomb_r+0x26>
  40589a:	bf00      	nop
  40589c:	20400870 	.word	0x20400870

004058a0 <__ascii_wctomb>:
  4058a0:	b121      	cbz	r1, 4058ac <__ascii_wctomb+0xc>
  4058a2:	2aff      	cmp	r2, #255	; 0xff
  4058a4:	d804      	bhi.n	4058b0 <__ascii_wctomb+0x10>
  4058a6:	700a      	strb	r2, [r1, #0]
  4058a8:	2001      	movs	r0, #1
  4058aa:	4770      	bx	lr
  4058ac:	4608      	mov	r0, r1
  4058ae:	4770      	bx	lr
  4058b0:	238a      	movs	r3, #138	; 0x8a
  4058b2:	6003      	str	r3, [r0, #0]
  4058b4:	f04f 30ff 	mov.w	r0, #4294967295
  4058b8:	4770      	bx	lr
  4058ba:	bf00      	nop

004058bc <_write_r>:
  4058bc:	b570      	push	{r4, r5, r6, lr}
  4058be:	460d      	mov	r5, r1
  4058c0:	4c08      	ldr	r4, [pc, #32]	; (4058e4 <_write_r+0x28>)
  4058c2:	4611      	mov	r1, r2
  4058c4:	4606      	mov	r6, r0
  4058c6:	461a      	mov	r2, r3
  4058c8:	4628      	mov	r0, r5
  4058ca:	2300      	movs	r3, #0
  4058cc:	6023      	str	r3, [r4, #0]
  4058ce:	f7fa fcbb 	bl	400248 <_write>
  4058d2:	1c43      	adds	r3, r0, #1
  4058d4:	d000      	beq.n	4058d8 <_write_r+0x1c>
  4058d6:	bd70      	pop	{r4, r5, r6, pc}
  4058d8:	6823      	ldr	r3, [r4, #0]
  4058da:	2b00      	cmp	r3, #0
  4058dc:	d0fb      	beq.n	4058d6 <_write_r+0x1a>
  4058de:	6033      	str	r3, [r6, #0]
  4058e0:	bd70      	pop	{r4, r5, r6, pc}
  4058e2:	bf00      	nop
  4058e4:	20400ad8 	.word	0x20400ad8

004058e8 <__register_exitproc>:
  4058e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4058ec:	4c25      	ldr	r4, [pc, #148]	; (405984 <__register_exitproc+0x9c>)
  4058ee:	6825      	ldr	r5, [r4, #0]
  4058f0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4058f4:	4606      	mov	r6, r0
  4058f6:	4688      	mov	r8, r1
  4058f8:	4692      	mov	sl, r2
  4058fa:	4699      	mov	r9, r3
  4058fc:	b3c4      	cbz	r4, 405970 <__register_exitproc+0x88>
  4058fe:	6860      	ldr	r0, [r4, #4]
  405900:	281f      	cmp	r0, #31
  405902:	dc17      	bgt.n	405934 <__register_exitproc+0x4c>
  405904:	1c43      	adds	r3, r0, #1
  405906:	b176      	cbz	r6, 405926 <__register_exitproc+0x3e>
  405908:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40590c:	2201      	movs	r2, #1
  40590e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  405912:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  405916:	4082      	lsls	r2, r0
  405918:	4311      	orrs	r1, r2
  40591a:	2e02      	cmp	r6, #2
  40591c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  405920:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  405924:	d01e      	beq.n	405964 <__register_exitproc+0x7c>
  405926:	3002      	adds	r0, #2
  405928:	6063      	str	r3, [r4, #4]
  40592a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40592e:	2000      	movs	r0, #0
  405930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405934:	4b14      	ldr	r3, [pc, #80]	; (405988 <__register_exitproc+0xa0>)
  405936:	b303      	cbz	r3, 40597a <__register_exitproc+0x92>
  405938:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40593c:	f7fd fa66 	bl	402e0c <malloc>
  405940:	4604      	mov	r4, r0
  405942:	b1d0      	cbz	r0, 40597a <__register_exitproc+0x92>
  405944:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  405948:	2700      	movs	r7, #0
  40594a:	e880 0088 	stmia.w	r0, {r3, r7}
  40594e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  405952:	4638      	mov	r0, r7
  405954:	2301      	movs	r3, #1
  405956:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40595a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40595e:	2e00      	cmp	r6, #0
  405960:	d0e1      	beq.n	405926 <__register_exitproc+0x3e>
  405962:	e7d1      	b.n	405908 <__register_exitproc+0x20>
  405964:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  405968:	430a      	orrs	r2, r1
  40596a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40596e:	e7da      	b.n	405926 <__register_exitproc+0x3e>
  405970:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  405974:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  405978:	e7c1      	b.n	4058fe <__register_exitproc+0x16>
  40597a:	f04f 30ff 	mov.w	r0, #4294967295
  40597e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405982:	bf00      	nop
  405984:	00405ee0 	.word	0x00405ee0
  405988:	00402e0d 	.word	0x00402e0d

0040598c <_close_r>:
  40598c:	b538      	push	{r3, r4, r5, lr}
  40598e:	4c07      	ldr	r4, [pc, #28]	; (4059ac <_close_r+0x20>)
  405990:	2300      	movs	r3, #0
  405992:	4605      	mov	r5, r0
  405994:	4608      	mov	r0, r1
  405996:	6023      	str	r3, [r4, #0]
  405998:	f7fb f892 	bl	400ac0 <_close>
  40599c:	1c43      	adds	r3, r0, #1
  40599e:	d000      	beq.n	4059a2 <_close_r+0x16>
  4059a0:	bd38      	pop	{r3, r4, r5, pc}
  4059a2:	6823      	ldr	r3, [r4, #0]
  4059a4:	2b00      	cmp	r3, #0
  4059a6:	d0fb      	beq.n	4059a0 <_close_r+0x14>
  4059a8:	602b      	str	r3, [r5, #0]
  4059aa:	bd38      	pop	{r3, r4, r5, pc}
  4059ac:	20400ad8 	.word	0x20400ad8

004059b0 <_fclose_r>:
  4059b0:	2900      	cmp	r1, #0
  4059b2:	d03d      	beq.n	405a30 <_fclose_r+0x80>
  4059b4:	b570      	push	{r4, r5, r6, lr}
  4059b6:	4605      	mov	r5, r0
  4059b8:	460c      	mov	r4, r1
  4059ba:	b108      	cbz	r0, 4059c0 <_fclose_r+0x10>
  4059bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4059be:	b37b      	cbz	r3, 405a20 <_fclose_r+0x70>
  4059c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059c4:	b90b      	cbnz	r3, 4059ca <_fclose_r+0x1a>
  4059c6:	2000      	movs	r0, #0
  4059c8:	bd70      	pop	{r4, r5, r6, pc}
  4059ca:	4621      	mov	r1, r4
  4059cc:	4628      	mov	r0, r5
  4059ce:	f7fe fee9 	bl	4047a4 <__sflush_r>
  4059d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4059d4:	4606      	mov	r6, r0
  4059d6:	b133      	cbz	r3, 4059e6 <_fclose_r+0x36>
  4059d8:	69e1      	ldr	r1, [r4, #28]
  4059da:	4628      	mov	r0, r5
  4059dc:	4798      	blx	r3
  4059de:	2800      	cmp	r0, #0
  4059e0:	bfb8      	it	lt
  4059e2:	f04f 36ff 	movlt.w	r6, #4294967295
  4059e6:	89a3      	ldrh	r3, [r4, #12]
  4059e8:	061b      	lsls	r3, r3, #24
  4059ea:	d41c      	bmi.n	405a26 <_fclose_r+0x76>
  4059ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4059ee:	b141      	cbz	r1, 405a02 <_fclose_r+0x52>
  4059f0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4059f4:	4299      	cmp	r1, r3
  4059f6:	d002      	beq.n	4059fe <_fclose_r+0x4e>
  4059f8:	4628      	mov	r0, r5
  4059fa:	f7ff f8d5 	bl	404ba8 <_free_r>
  4059fe:	2300      	movs	r3, #0
  405a00:	6323      	str	r3, [r4, #48]	; 0x30
  405a02:	6c61      	ldr	r1, [r4, #68]	; 0x44
  405a04:	b121      	cbz	r1, 405a10 <_fclose_r+0x60>
  405a06:	4628      	mov	r0, r5
  405a08:	f7ff f8ce 	bl	404ba8 <_free_r>
  405a0c:	2300      	movs	r3, #0
  405a0e:	6463      	str	r3, [r4, #68]	; 0x44
  405a10:	f7ff f806 	bl	404a20 <__sfp_lock_acquire>
  405a14:	2300      	movs	r3, #0
  405a16:	81a3      	strh	r3, [r4, #12]
  405a18:	f7ff f804 	bl	404a24 <__sfp_lock_release>
  405a1c:	4630      	mov	r0, r6
  405a1e:	bd70      	pop	{r4, r5, r6, pc}
  405a20:	f7fe fff8 	bl	404a14 <__sinit>
  405a24:	e7cc      	b.n	4059c0 <_fclose_r+0x10>
  405a26:	6921      	ldr	r1, [r4, #16]
  405a28:	4628      	mov	r0, r5
  405a2a:	f7ff f8bd 	bl	404ba8 <_free_r>
  405a2e:	e7dd      	b.n	4059ec <_fclose_r+0x3c>
  405a30:	2000      	movs	r0, #0
  405a32:	4770      	bx	lr

00405a34 <_fstat_r>:
  405a34:	b538      	push	{r3, r4, r5, lr}
  405a36:	460b      	mov	r3, r1
  405a38:	4c07      	ldr	r4, [pc, #28]	; (405a58 <_fstat_r+0x24>)
  405a3a:	4605      	mov	r5, r0
  405a3c:	4611      	mov	r1, r2
  405a3e:	4618      	mov	r0, r3
  405a40:	2300      	movs	r3, #0
  405a42:	6023      	str	r3, [r4, #0]
  405a44:	f7fb f840 	bl	400ac8 <_fstat>
  405a48:	1c43      	adds	r3, r0, #1
  405a4a:	d000      	beq.n	405a4e <_fstat_r+0x1a>
  405a4c:	bd38      	pop	{r3, r4, r5, pc}
  405a4e:	6823      	ldr	r3, [r4, #0]
  405a50:	2b00      	cmp	r3, #0
  405a52:	d0fb      	beq.n	405a4c <_fstat_r+0x18>
  405a54:	602b      	str	r3, [r5, #0]
  405a56:	bd38      	pop	{r3, r4, r5, pc}
  405a58:	20400ad8 	.word	0x20400ad8

00405a5c <_isatty_r>:
  405a5c:	b538      	push	{r3, r4, r5, lr}
  405a5e:	4c07      	ldr	r4, [pc, #28]	; (405a7c <_isatty_r+0x20>)
  405a60:	2300      	movs	r3, #0
  405a62:	4605      	mov	r5, r0
  405a64:	4608      	mov	r0, r1
  405a66:	6023      	str	r3, [r4, #0]
  405a68:	f7fb f834 	bl	400ad4 <_isatty>
  405a6c:	1c43      	adds	r3, r0, #1
  405a6e:	d000      	beq.n	405a72 <_isatty_r+0x16>
  405a70:	bd38      	pop	{r3, r4, r5, pc}
  405a72:	6823      	ldr	r3, [r4, #0]
  405a74:	2b00      	cmp	r3, #0
  405a76:	d0fb      	beq.n	405a70 <_isatty_r+0x14>
  405a78:	602b      	str	r3, [r5, #0]
  405a7a:	bd38      	pop	{r3, r4, r5, pc}
  405a7c:	20400ad8 	.word	0x20400ad8

00405a80 <_lseek_r>:
  405a80:	b570      	push	{r4, r5, r6, lr}
  405a82:	460d      	mov	r5, r1
  405a84:	4c08      	ldr	r4, [pc, #32]	; (405aa8 <_lseek_r+0x28>)
  405a86:	4611      	mov	r1, r2
  405a88:	4606      	mov	r6, r0
  405a8a:	461a      	mov	r2, r3
  405a8c:	4628      	mov	r0, r5
  405a8e:	2300      	movs	r3, #0
  405a90:	6023      	str	r3, [r4, #0]
  405a92:	f7fb f821 	bl	400ad8 <_lseek>
  405a96:	1c43      	adds	r3, r0, #1
  405a98:	d000      	beq.n	405a9c <_lseek_r+0x1c>
  405a9a:	bd70      	pop	{r4, r5, r6, pc}
  405a9c:	6823      	ldr	r3, [r4, #0]
  405a9e:	2b00      	cmp	r3, #0
  405aa0:	d0fb      	beq.n	405a9a <_lseek_r+0x1a>
  405aa2:	6033      	str	r3, [r6, #0]
  405aa4:	bd70      	pop	{r4, r5, r6, pc}
  405aa6:	bf00      	nop
  405aa8:	20400ad8 	.word	0x20400ad8

00405aac <_read_r>:
  405aac:	b570      	push	{r4, r5, r6, lr}
  405aae:	460d      	mov	r5, r1
  405ab0:	4c08      	ldr	r4, [pc, #32]	; (405ad4 <_read_r+0x28>)
  405ab2:	4611      	mov	r1, r2
  405ab4:	4606      	mov	r6, r0
  405ab6:	461a      	mov	r2, r3
  405ab8:	4628      	mov	r0, r5
  405aba:	2300      	movs	r3, #0
  405abc:	6023      	str	r3, [r4, #0]
  405abe:	f7fa fba5 	bl	40020c <_read>
  405ac2:	1c43      	adds	r3, r0, #1
  405ac4:	d000      	beq.n	405ac8 <_read_r+0x1c>
  405ac6:	bd70      	pop	{r4, r5, r6, pc}
  405ac8:	6823      	ldr	r3, [r4, #0]
  405aca:	2b00      	cmp	r3, #0
  405acc:	d0fb      	beq.n	405ac6 <_read_r+0x1a>
  405ace:	6033      	str	r3, [r6, #0]
  405ad0:	bd70      	pop	{r4, r5, r6, pc}
  405ad2:	bf00      	nop
  405ad4:	20400ad8 	.word	0x20400ad8

00405ad8 <__aeabi_uldivmod>:
  405ad8:	b953      	cbnz	r3, 405af0 <__aeabi_uldivmod+0x18>
  405ada:	b94a      	cbnz	r2, 405af0 <__aeabi_uldivmod+0x18>
  405adc:	2900      	cmp	r1, #0
  405ade:	bf08      	it	eq
  405ae0:	2800      	cmpeq	r0, #0
  405ae2:	bf1c      	itt	ne
  405ae4:	f04f 31ff 	movne.w	r1, #4294967295
  405ae8:	f04f 30ff 	movne.w	r0, #4294967295
  405aec:	f000 b97e 	b.w	405dec <__aeabi_idiv0>
  405af0:	f1ad 0c08 	sub.w	ip, sp, #8
  405af4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  405af8:	f000 f806 	bl	405b08 <__udivmoddi4>
  405afc:	f8dd e004 	ldr.w	lr, [sp, #4]
  405b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405b04:	b004      	add	sp, #16
  405b06:	4770      	bx	lr

00405b08 <__udivmoddi4>:
  405b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405b0c:	468c      	mov	ip, r1
  405b0e:	460e      	mov	r6, r1
  405b10:	4604      	mov	r4, r0
  405b12:	9d08      	ldr	r5, [sp, #32]
  405b14:	2b00      	cmp	r3, #0
  405b16:	d150      	bne.n	405bba <__udivmoddi4+0xb2>
  405b18:	428a      	cmp	r2, r1
  405b1a:	4617      	mov	r7, r2
  405b1c:	d96c      	bls.n	405bf8 <__udivmoddi4+0xf0>
  405b1e:	fab2 fe82 	clz	lr, r2
  405b22:	f1be 0f00 	cmp.w	lr, #0
  405b26:	d00b      	beq.n	405b40 <__udivmoddi4+0x38>
  405b28:	f1ce 0420 	rsb	r4, lr, #32
  405b2c:	fa20 f404 	lsr.w	r4, r0, r4
  405b30:	fa01 f60e 	lsl.w	r6, r1, lr
  405b34:	ea44 0c06 	orr.w	ip, r4, r6
  405b38:	fa02 f70e 	lsl.w	r7, r2, lr
  405b3c:	fa00 f40e 	lsl.w	r4, r0, lr
  405b40:	ea4f 4917 	mov.w	r9, r7, lsr #16
  405b44:	0c22      	lsrs	r2, r4, #16
  405b46:	fbbc f0f9 	udiv	r0, ip, r9
  405b4a:	fa1f f887 	uxth.w	r8, r7
  405b4e:	fb09 c610 	mls	r6, r9, r0, ip
  405b52:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  405b56:	fb00 f308 	mul.w	r3, r0, r8
  405b5a:	42b3      	cmp	r3, r6
  405b5c:	d909      	bls.n	405b72 <__udivmoddi4+0x6a>
  405b5e:	19f6      	adds	r6, r6, r7
  405b60:	f100 32ff 	add.w	r2, r0, #4294967295
  405b64:	f080 8122 	bcs.w	405dac <__udivmoddi4+0x2a4>
  405b68:	42b3      	cmp	r3, r6
  405b6a:	f240 811f 	bls.w	405dac <__udivmoddi4+0x2a4>
  405b6e:	3802      	subs	r0, #2
  405b70:	443e      	add	r6, r7
  405b72:	1af6      	subs	r6, r6, r3
  405b74:	b2a2      	uxth	r2, r4
  405b76:	fbb6 f3f9 	udiv	r3, r6, r9
  405b7a:	fb09 6613 	mls	r6, r9, r3, r6
  405b7e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  405b82:	fb03 f808 	mul.w	r8, r3, r8
  405b86:	45a0      	cmp	r8, r4
  405b88:	d909      	bls.n	405b9e <__udivmoddi4+0x96>
  405b8a:	19e4      	adds	r4, r4, r7
  405b8c:	f103 32ff 	add.w	r2, r3, #4294967295
  405b90:	f080 810a 	bcs.w	405da8 <__udivmoddi4+0x2a0>
  405b94:	45a0      	cmp	r8, r4
  405b96:	f240 8107 	bls.w	405da8 <__udivmoddi4+0x2a0>
  405b9a:	3b02      	subs	r3, #2
  405b9c:	443c      	add	r4, r7
  405b9e:	ebc8 0404 	rsb	r4, r8, r4
  405ba2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  405ba6:	2100      	movs	r1, #0
  405ba8:	2d00      	cmp	r5, #0
  405baa:	d062      	beq.n	405c72 <__udivmoddi4+0x16a>
  405bac:	fa24 f40e 	lsr.w	r4, r4, lr
  405bb0:	2300      	movs	r3, #0
  405bb2:	602c      	str	r4, [r5, #0]
  405bb4:	606b      	str	r3, [r5, #4]
  405bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405bba:	428b      	cmp	r3, r1
  405bbc:	d907      	bls.n	405bce <__udivmoddi4+0xc6>
  405bbe:	2d00      	cmp	r5, #0
  405bc0:	d055      	beq.n	405c6e <__udivmoddi4+0x166>
  405bc2:	2100      	movs	r1, #0
  405bc4:	e885 0041 	stmia.w	r5, {r0, r6}
  405bc8:	4608      	mov	r0, r1
  405bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405bce:	fab3 f183 	clz	r1, r3
  405bd2:	2900      	cmp	r1, #0
  405bd4:	f040 8090 	bne.w	405cf8 <__udivmoddi4+0x1f0>
  405bd8:	42b3      	cmp	r3, r6
  405bda:	d302      	bcc.n	405be2 <__udivmoddi4+0xda>
  405bdc:	4282      	cmp	r2, r0
  405bde:	f200 80f8 	bhi.w	405dd2 <__udivmoddi4+0x2ca>
  405be2:	1a84      	subs	r4, r0, r2
  405be4:	eb66 0603 	sbc.w	r6, r6, r3
  405be8:	2001      	movs	r0, #1
  405bea:	46b4      	mov	ip, r6
  405bec:	2d00      	cmp	r5, #0
  405bee:	d040      	beq.n	405c72 <__udivmoddi4+0x16a>
  405bf0:	e885 1010 	stmia.w	r5, {r4, ip}
  405bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405bf8:	b912      	cbnz	r2, 405c00 <__udivmoddi4+0xf8>
  405bfa:	2701      	movs	r7, #1
  405bfc:	fbb7 f7f2 	udiv	r7, r7, r2
  405c00:	fab7 fe87 	clz	lr, r7
  405c04:	f1be 0f00 	cmp.w	lr, #0
  405c08:	d135      	bne.n	405c76 <__udivmoddi4+0x16e>
  405c0a:	1bf3      	subs	r3, r6, r7
  405c0c:	ea4f 4817 	mov.w	r8, r7, lsr #16
  405c10:	fa1f fc87 	uxth.w	ip, r7
  405c14:	2101      	movs	r1, #1
  405c16:	fbb3 f0f8 	udiv	r0, r3, r8
  405c1a:	0c22      	lsrs	r2, r4, #16
  405c1c:	fb08 3610 	mls	r6, r8, r0, r3
  405c20:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  405c24:	fb0c f300 	mul.w	r3, ip, r0
  405c28:	42b3      	cmp	r3, r6
  405c2a:	d907      	bls.n	405c3c <__udivmoddi4+0x134>
  405c2c:	19f6      	adds	r6, r6, r7
  405c2e:	f100 32ff 	add.w	r2, r0, #4294967295
  405c32:	d202      	bcs.n	405c3a <__udivmoddi4+0x132>
  405c34:	42b3      	cmp	r3, r6
  405c36:	f200 80ce 	bhi.w	405dd6 <__udivmoddi4+0x2ce>
  405c3a:	4610      	mov	r0, r2
  405c3c:	1af6      	subs	r6, r6, r3
  405c3e:	b2a2      	uxth	r2, r4
  405c40:	fbb6 f3f8 	udiv	r3, r6, r8
  405c44:	fb08 6613 	mls	r6, r8, r3, r6
  405c48:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  405c4c:	fb0c fc03 	mul.w	ip, ip, r3
  405c50:	45a4      	cmp	ip, r4
  405c52:	d907      	bls.n	405c64 <__udivmoddi4+0x15c>
  405c54:	19e4      	adds	r4, r4, r7
  405c56:	f103 32ff 	add.w	r2, r3, #4294967295
  405c5a:	d202      	bcs.n	405c62 <__udivmoddi4+0x15a>
  405c5c:	45a4      	cmp	ip, r4
  405c5e:	f200 80b5 	bhi.w	405dcc <__udivmoddi4+0x2c4>
  405c62:	4613      	mov	r3, r2
  405c64:	ebcc 0404 	rsb	r4, ip, r4
  405c68:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  405c6c:	e79c      	b.n	405ba8 <__udivmoddi4+0xa0>
  405c6e:	4629      	mov	r1, r5
  405c70:	4628      	mov	r0, r5
  405c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405c76:	f1ce 0120 	rsb	r1, lr, #32
  405c7a:	fa06 f30e 	lsl.w	r3, r6, lr
  405c7e:	fa07 f70e 	lsl.w	r7, r7, lr
  405c82:	fa20 f901 	lsr.w	r9, r0, r1
  405c86:	ea4f 4817 	mov.w	r8, r7, lsr #16
  405c8a:	40ce      	lsrs	r6, r1
  405c8c:	ea49 0903 	orr.w	r9, r9, r3
  405c90:	fbb6 faf8 	udiv	sl, r6, r8
  405c94:	ea4f 4419 	mov.w	r4, r9, lsr #16
  405c98:	fb08 661a 	mls	r6, r8, sl, r6
  405c9c:	fa1f fc87 	uxth.w	ip, r7
  405ca0:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  405ca4:	fb0a f20c 	mul.w	r2, sl, ip
  405ca8:	429a      	cmp	r2, r3
  405caa:	fa00 f40e 	lsl.w	r4, r0, lr
  405cae:	d90a      	bls.n	405cc6 <__udivmoddi4+0x1be>
  405cb0:	19db      	adds	r3, r3, r7
  405cb2:	f10a 31ff 	add.w	r1, sl, #4294967295
  405cb6:	f080 8087 	bcs.w	405dc8 <__udivmoddi4+0x2c0>
  405cba:	429a      	cmp	r2, r3
  405cbc:	f240 8084 	bls.w	405dc8 <__udivmoddi4+0x2c0>
  405cc0:	f1aa 0a02 	sub.w	sl, sl, #2
  405cc4:	443b      	add	r3, r7
  405cc6:	1a9b      	subs	r3, r3, r2
  405cc8:	fa1f f989 	uxth.w	r9, r9
  405ccc:	fbb3 f1f8 	udiv	r1, r3, r8
  405cd0:	fb08 3311 	mls	r3, r8, r1, r3
  405cd4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  405cd8:	fb01 f60c 	mul.w	r6, r1, ip
  405cdc:	429e      	cmp	r6, r3
  405cde:	d907      	bls.n	405cf0 <__udivmoddi4+0x1e8>
  405ce0:	19db      	adds	r3, r3, r7
  405ce2:	f101 32ff 	add.w	r2, r1, #4294967295
  405ce6:	d26b      	bcs.n	405dc0 <__udivmoddi4+0x2b8>
  405ce8:	429e      	cmp	r6, r3
  405cea:	d969      	bls.n	405dc0 <__udivmoddi4+0x2b8>
  405cec:	3902      	subs	r1, #2
  405cee:	443b      	add	r3, r7
  405cf0:	1b9b      	subs	r3, r3, r6
  405cf2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  405cf6:	e78e      	b.n	405c16 <__udivmoddi4+0x10e>
  405cf8:	f1c1 0e20 	rsb	lr, r1, #32
  405cfc:	fa22 f40e 	lsr.w	r4, r2, lr
  405d00:	408b      	lsls	r3, r1
  405d02:	4323      	orrs	r3, r4
  405d04:	fa20 f70e 	lsr.w	r7, r0, lr
  405d08:	fa06 f401 	lsl.w	r4, r6, r1
  405d0c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  405d10:	fa26 f60e 	lsr.w	r6, r6, lr
  405d14:	433c      	orrs	r4, r7
  405d16:	fbb6 f9fc 	udiv	r9, r6, ip
  405d1a:	0c27      	lsrs	r7, r4, #16
  405d1c:	fb0c 6619 	mls	r6, ip, r9, r6
  405d20:	fa1f f883 	uxth.w	r8, r3
  405d24:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  405d28:	fb09 f708 	mul.w	r7, r9, r8
  405d2c:	42b7      	cmp	r7, r6
  405d2e:	fa02 f201 	lsl.w	r2, r2, r1
  405d32:	fa00 fa01 	lsl.w	sl, r0, r1
  405d36:	d908      	bls.n	405d4a <__udivmoddi4+0x242>
  405d38:	18f6      	adds	r6, r6, r3
  405d3a:	f109 30ff 	add.w	r0, r9, #4294967295
  405d3e:	d241      	bcs.n	405dc4 <__udivmoddi4+0x2bc>
  405d40:	42b7      	cmp	r7, r6
  405d42:	d93f      	bls.n	405dc4 <__udivmoddi4+0x2bc>
  405d44:	f1a9 0902 	sub.w	r9, r9, #2
  405d48:	441e      	add	r6, r3
  405d4a:	1bf6      	subs	r6, r6, r7
  405d4c:	b2a0      	uxth	r0, r4
  405d4e:	fbb6 f4fc 	udiv	r4, r6, ip
  405d52:	fb0c 6614 	mls	r6, ip, r4, r6
  405d56:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  405d5a:	fb04 f808 	mul.w	r8, r4, r8
  405d5e:	45b8      	cmp	r8, r7
  405d60:	d907      	bls.n	405d72 <__udivmoddi4+0x26a>
  405d62:	18ff      	adds	r7, r7, r3
  405d64:	f104 30ff 	add.w	r0, r4, #4294967295
  405d68:	d228      	bcs.n	405dbc <__udivmoddi4+0x2b4>
  405d6a:	45b8      	cmp	r8, r7
  405d6c:	d926      	bls.n	405dbc <__udivmoddi4+0x2b4>
  405d6e:	3c02      	subs	r4, #2
  405d70:	441f      	add	r7, r3
  405d72:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  405d76:	ebc8 0707 	rsb	r7, r8, r7
  405d7a:	fba0 8902 	umull	r8, r9, r0, r2
  405d7e:	454f      	cmp	r7, r9
  405d80:	4644      	mov	r4, r8
  405d82:	464e      	mov	r6, r9
  405d84:	d314      	bcc.n	405db0 <__udivmoddi4+0x2a8>
  405d86:	d029      	beq.n	405ddc <__udivmoddi4+0x2d4>
  405d88:	b365      	cbz	r5, 405de4 <__udivmoddi4+0x2dc>
  405d8a:	ebba 0304 	subs.w	r3, sl, r4
  405d8e:	eb67 0706 	sbc.w	r7, r7, r6
  405d92:	fa07 fe0e 	lsl.w	lr, r7, lr
  405d96:	40cb      	lsrs	r3, r1
  405d98:	40cf      	lsrs	r7, r1
  405d9a:	ea4e 0303 	orr.w	r3, lr, r3
  405d9e:	e885 0088 	stmia.w	r5, {r3, r7}
  405da2:	2100      	movs	r1, #0
  405da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405da8:	4613      	mov	r3, r2
  405daa:	e6f8      	b.n	405b9e <__udivmoddi4+0x96>
  405dac:	4610      	mov	r0, r2
  405dae:	e6e0      	b.n	405b72 <__udivmoddi4+0x6a>
  405db0:	ebb8 0402 	subs.w	r4, r8, r2
  405db4:	eb69 0603 	sbc.w	r6, r9, r3
  405db8:	3801      	subs	r0, #1
  405dba:	e7e5      	b.n	405d88 <__udivmoddi4+0x280>
  405dbc:	4604      	mov	r4, r0
  405dbe:	e7d8      	b.n	405d72 <__udivmoddi4+0x26a>
  405dc0:	4611      	mov	r1, r2
  405dc2:	e795      	b.n	405cf0 <__udivmoddi4+0x1e8>
  405dc4:	4681      	mov	r9, r0
  405dc6:	e7c0      	b.n	405d4a <__udivmoddi4+0x242>
  405dc8:	468a      	mov	sl, r1
  405dca:	e77c      	b.n	405cc6 <__udivmoddi4+0x1be>
  405dcc:	3b02      	subs	r3, #2
  405dce:	443c      	add	r4, r7
  405dd0:	e748      	b.n	405c64 <__udivmoddi4+0x15c>
  405dd2:	4608      	mov	r0, r1
  405dd4:	e70a      	b.n	405bec <__udivmoddi4+0xe4>
  405dd6:	3802      	subs	r0, #2
  405dd8:	443e      	add	r6, r7
  405dda:	e72f      	b.n	405c3c <__udivmoddi4+0x134>
  405ddc:	45c2      	cmp	sl, r8
  405dde:	d3e7      	bcc.n	405db0 <__udivmoddi4+0x2a8>
  405de0:	463e      	mov	r6, r7
  405de2:	e7d1      	b.n	405d88 <__udivmoddi4+0x280>
  405de4:	4629      	mov	r1, r5
  405de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405dea:	bf00      	nop

00405dec <__aeabi_idiv0>:
  405dec:	4770      	bx	lr
  405dee:	bf00      	nop
  405df0:	454c4449 	.word	0x454c4449
  405df4:	00000000 	.word	0x00000000
  405df8:	09632509 	.word	0x09632509
  405dfc:	25097525 	.word	0x25097525
  405e00:	75250975 	.word	0x75250975
  405e04:	00000a0d 	.word	0x00000a0d
  405e08:	51726d54 	.word	0x51726d54
  405e0c:	00000000 	.word	0x00000000
  405e10:	20726d54 	.word	0x20726d54
  405e14:	00637653 	.word	0x00637653
  405e18:	63617473 	.word	0x63617473
  405e1c:	766f206b 	.word	0x766f206b
  405e20:	6c667265 	.word	0x6c667265
  405e24:	2520776f 	.word	0x2520776f
  405e28:	73252078 	.word	0x73252078
  405e2c:	00000a0d 	.word	0x00000a0d
  405e30:	46202d2d 	.word	0x46202d2d
  405e34:	72656572 	.word	0x72656572
  405e38:	20736f74 	.word	0x20736f74
  405e3c:	6d617845 	.word	0x6d617845
  405e40:	20656c70 	.word	0x20656c70
  405e44:	0d0a2d2d 	.word	0x0d0a2d2d
  405e48:	00000000 	.word	0x00000000
  405e4c:	454d4153 	.word	0x454d4153
  405e50:	582d3037 	.word	0x582d3037
  405e54:	00444c50 	.word	0x00444c50
  405e58:	25202d2d 	.word	0x25202d2d
  405e5c:	000d0a73 	.word	0x000d0a73
  405e60:	353a3731 	.word	0x353a3731
  405e64:	31333a31 	.word	0x31333a31
  405e68:	00000000 	.word	0x00000000
  405e6c:	2079614d 	.word	0x2079614d
  405e70:	32203232 	.word	0x32203232
  405e74:	00373130 	.word	0x00373130
  405e78:	43202d2d 	.word	0x43202d2d
  405e7c:	69706d6f 	.word	0x69706d6f
  405e80:	3a64656c 	.word	0x3a64656c
  405e84:	20732520 	.word	0x20732520
  405e88:	2d207325 	.word	0x2d207325
  405e8c:	000d0a2d 	.word	0x000d0a2d
  405e90:	0064654c 	.word	0x0064654c
  405e94:	6c696146 	.word	0x6c696146
  405e98:	74206465 	.word	0x74206465
  405e9c:	7263206f 	.word	0x7263206f
  405ea0:	65746165 	.word	0x65746165
  405ea4:	73657420 	.word	0x73657420
  405ea8:	656c2074 	.word	0x656c2074
  405eac:	61742064 	.word	0x61742064
  405eb0:	0a0d6b73 	.word	0x0a0d6b73
  405eb4:	00000000 	.word	0x00000000
  405eb8:	6c696146 	.word	0x6c696146
  405ebc:	74206465 	.word	0x74206465
  405ec0:	7263206f 	.word	0x7263206f
  405ec4:	65746165 	.word	0x65746165
  405ec8:	73657420 	.word	0x73657420
  405ecc:	656c2074 	.word	0x656c2074
  405ed0:	74203164 	.word	0x74203164
  405ed4:	0d6b7361 	.word	0x0d6b7361
  405ed8:	0000000a 	.word	0x0000000a
  405edc:	00000043 	.word	0x00000043

00405ee0 <_global_impure_ptr>:
  405ee0:	20400010                                ..@ 

00405ee4 <zeroes.6993>:
  405ee4:	30303030 30303030 30303030 30303030     0000000000000000
  405ef4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  405f04:	00000000 33323130 37363534 62613938     ....0123456789ab
  405f14:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00405f24 <blanks.6992>:
  405f24:	20202020 20202020 20202020 20202020                     

00405f34 <_init>:
  405f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405f36:	bf00      	nop
  405f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405f3a:	bc08      	pop	{r3}
  405f3c:	469e      	mov	lr, r3
  405f3e:	4770      	bx	lr

00405f40 <__init_array_start>:
  405f40:	00404785 	.word	0x00404785

00405f44 <__frame_dummy_init_array_entry>:
  405f44:	00400165                                e.@.

00405f48 <_fini>:
  405f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405f4a:	bf00      	nop
  405f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405f4e:	bc08      	pop	{r3}
  405f50:	469e      	mov	lr, r3
  405f52:	4770      	bx	lr

00405f54 <__fini_array_start>:
  405f54:	00400141 	.word	0x00400141
