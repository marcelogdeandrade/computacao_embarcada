
FREERTOS_SAM_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000097d8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004097d8  004097d8  000197d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008ac  20400000  004097e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000358  204008ac  0040a08c  000208ac  2**2
                  ALLOC
  4 .stack        00002004  20400c04  0040a3e4  000208ac  2**0
                  ALLOC
  5 .heap         00000200  20402c08  0040c3e8  000208ac  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000208ac  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208da  2**0
                  CONTENTS, READONLY
  8 .debug_info   000116ed  00000000  00000000  00020933  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002b81  00000000  00000000  00032020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008865  00000000  00000000  00034ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000de8  00000000  00000000  0003d406  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e80  00000000  00000000  0003e1ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000208be  00000000  00000000  0003f06e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f731  00000000  00000000  0005f92c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009258f  00000000  00000000  0006f05d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000314c  00000000  00000000  001015ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20402c08 	.word	0x20402c08
  400004:	004007b1 	.word	0x004007b1
  400008:	004007ad 	.word	0x004007ad
  40000c:	004007ad 	.word	0x004007ad
  400010:	004007ad 	.word	0x004007ad
  400014:	004007ad 	.word	0x004007ad
  400018:	004007ad 	.word	0x004007ad
	...
  40002c:	00400b89 	.word	0x00400b89
  400030:	004007ad 	.word	0x004007ad
  400034:	00000000 	.word	0x00000000
  400038:	00400c29 	.word	0x00400c29
  40003c:	00400c91 	.word	0x00400c91
  400040:	004007ad 	.word	0x004007ad
  400044:	004007ad 	.word	0x004007ad
  400048:	004007ad 	.word	0x004007ad
  40004c:	004007ad 	.word	0x004007ad
  400050:	004007ad 	.word	0x004007ad
  400054:	004007ad 	.word	0x004007ad
  400058:	004007ad 	.word	0x004007ad
  40005c:	004007ad 	.word	0x004007ad
  400060:	004007ad 	.word	0x004007ad
  400064:	00000000 	.word	0x00000000
  400068:	00400489 	.word	0x00400489
  40006c:	0040049d 	.word	0x0040049d
  400070:	004004b1 	.word	0x004004b1
  400074:	004007ad 	.word	0x004007ad
  400078:	004007ad 	.word	0x004007ad
  40007c:	004007ad 	.word	0x004007ad
  400080:	004004c5 	.word	0x004004c5
  400084:	004004d9 	.word	0x004004d9
  400088:	004007ad 	.word	0x004007ad
  40008c:	004007ad 	.word	0x004007ad
  400090:	004007ad 	.word	0x004007ad
  400094:	004007ad 	.word	0x004007ad
  400098:	004007ad 	.word	0x004007ad
  40009c:	004007ad 	.word	0x004007ad
  4000a0:	004007ad 	.word	0x004007ad
  4000a4:	004007ad 	.word	0x004007ad
  4000a8:	004007ad 	.word	0x004007ad
  4000ac:	004007ad 	.word	0x004007ad
  4000b0:	004007ad 	.word	0x004007ad
  4000b4:	004007ad 	.word	0x004007ad
  4000b8:	004007ad 	.word	0x004007ad
  4000bc:	004007ad 	.word	0x004007ad
  4000c0:	004007ad 	.word	0x004007ad
  4000c4:	004007ad 	.word	0x004007ad
  4000c8:	004007ad 	.word	0x004007ad
  4000cc:	004007ad 	.word	0x004007ad
  4000d0:	00000000 	.word	0x00000000
  4000d4:	004007ad 	.word	0x004007ad
  4000d8:	00000000 	.word	0x00000000
  4000dc:	004007ad 	.word	0x004007ad
  4000e0:	004007ad 	.word	0x004007ad
  4000e4:	004007ad 	.word	0x004007ad
  4000e8:	004007ad 	.word	0x004007ad
  4000ec:	004007ad 	.word	0x004007ad
  4000f0:	004007ad 	.word	0x004007ad
  4000f4:	004007ad 	.word	0x004007ad
  4000f8:	004007ad 	.word	0x004007ad
  4000fc:	004007ad 	.word	0x004007ad
  400100:	004007ad 	.word	0x004007ad
  400104:	004007ad 	.word	0x004007ad
  400108:	004007ad 	.word	0x004007ad
  40010c:	004007ad 	.word	0x004007ad
  400110:	004007ad 	.word	0x004007ad
	...
  400120:	004007ad 	.word	0x004007ad
  400124:	004007ad 	.word	0x004007ad
  400128:	004007ad 	.word	0x004007ad
  40012c:	004007ad 	.word	0x004007ad
  400130:	004007ad 	.word	0x004007ad
  400134:	00000000 	.word	0x00000000
  400138:	004007ad 	.word	0x004007ad
  40013c:	004007ad 	.word	0x004007ad

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008ac 	.word	0x204008ac
  40015c:	00000000 	.word	0x00000000
  400160:	004097e0 	.word	0x004097e0

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	204008b0 	.word	0x204008b0
  400190:	004097e0 	.word	0x004097e0
  400194:	004097e0 	.word	0x004097e0
  400198:	00000000 	.word	0x00000000

0040019c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40019c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40019e:	4810      	ldr	r0, [pc, #64]	; (4001e0 <sysclk_init+0x44>)
  4001a0:	4b10      	ldr	r3, [pc, #64]	; (4001e4 <sysclk_init+0x48>)
  4001a2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001a4:	213e      	movs	r1, #62	; 0x3e
  4001a6:	2000      	movs	r0, #0
  4001a8:	4b0f      	ldr	r3, [pc, #60]	; (4001e8 <sysclk_init+0x4c>)
  4001aa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001ac:	4c0f      	ldr	r4, [pc, #60]	; (4001ec <sysclk_init+0x50>)
  4001ae:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001b0:	2800      	cmp	r0, #0
  4001b2:	d0fc      	beq.n	4001ae <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001b4:	4b0e      	ldr	r3, [pc, #56]	; (4001f0 <sysclk_init+0x54>)
  4001b6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001b8:	4a0e      	ldr	r2, [pc, #56]	; (4001f4 <sysclk_init+0x58>)
  4001ba:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x5c>)
  4001bc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001be:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x60>)
  4001c0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001c2:	2800      	cmp	r0, #0
  4001c4:	d0fc      	beq.n	4001c0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001c6:	2002      	movs	r0, #2
  4001c8:	4b0d      	ldr	r3, [pc, #52]	; (400200 <sysclk_init+0x64>)
  4001ca:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001cc:	2000      	movs	r0, #0
  4001ce:	4b0d      	ldr	r3, [pc, #52]	; (400204 <sysclk_init+0x68>)
  4001d0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001d2:	4b0d      	ldr	r3, [pc, #52]	; (400208 <sysclk_init+0x6c>)
  4001d4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001d6:	4802      	ldr	r0, [pc, #8]	; (4001e0 <sysclk_init+0x44>)
  4001d8:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
  4001dc:	bd10      	pop	{r4, pc}
  4001de:	bf00      	nop
  4001e0:	11e1a300 	.word	0x11e1a300
  4001e4:	0040099d 	.word	0x0040099d
  4001e8:	00400591 	.word	0x00400591
  4001ec:	004005e5 	.word	0x004005e5
  4001f0:	004005f5 	.word	0x004005f5
  4001f4:	20183f01 	.word	0x20183f01
  4001f8:	400e0600 	.word	0x400e0600
  4001fc:	00400605 	.word	0x00400605
  400200:	004004ed 	.word	0x004004ed
  400204:	00400529 	.word	0x00400529
  400208:	0040088d 	.word	0x0040088d

0040020c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40020c:	b990      	cbnz	r0, 400234 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40020e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400212:	460c      	mov	r4, r1
  400214:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400216:	2a00      	cmp	r2, #0
  400218:	dd0f      	ble.n	40023a <_read+0x2e>
  40021a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40021c:	4e08      	ldr	r6, [pc, #32]	; (400240 <_read+0x34>)
  40021e:	4d09      	ldr	r5, [pc, #36]	; (400244 <_read+0x38>)
  400220:	6830      	ldr	r0, [r6, #0]
  400222:	4621      	mov	r1, r4
  400224:	682b      	ldr	r3, [r5, #0]
  400226:	4798      	blx	r3
		ptr++;
  400228:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40022a:	42a7      	cmp	r7, r4
  40022c:	d1f8      	bne.n	400220 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40022e:	4640      	mov	r0, r8
  400230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400234:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  400238:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40023a:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40023c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400240:	20400bbc 	.word	0x20400bbc
  400244:	20400bb4 	.word	0x20400bb4

00400248 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400248:	3801      	subs	r0, #1
  40024a:	2802      	cmp	r0, #2
  40024c:	d815      	bhi.n	40027a <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40024e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400252:	460e      	mov	r6, r1
  400254:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400256:	b19a      	cbz	r2, 400280 <_write+0x38>
  400258:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40025a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400294 <_write+0x4c>
  40025e:	4f0c      	ldr	r7, [pc, #48]	; (400290 <_write+0x48>)
  400260:	f8d8 0000 	ldr.w	r0, [r8]
  400264:	f815 1b01 	ldrb.w	r1, [r5], #1
  400268:	683b      	ldr	r3, [r7, #0]
  40026a:	4798      	blx	r3
  40026c:	2800      	cmp	r0, #0
  40026e:	db0a      	blt.n	400286 <_write+0x3e>
  400270:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400272:	3c01      	subs	r4, #1
  400274:	d1f4      	bne.n	400260 <_write+0x18>
  400276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40027a:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  40027e:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400280:	2000      	movs	r0, #0
  400282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400286:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40028a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40028e:	bf00      	nop
  400290:	20400bb8 	.word	0x20400bb8
  400294:	20400bbc 	.word	0x20400bbc

00400298 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40029a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40029e:	4b57      	ldr	r3, [pc, #348]	; (4003fc <board_init+0x164>)
  4002a0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002a2:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4002a6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002aa:	4b55      	ldr	r3, [pc, #340]	; (400400 <board_init+0x168>)
  4002ac:	2200      	movs	r2, #0
  4002ae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002b2:	695a      	ldr	r2, [r3, #20]
  4002b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002b8:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002ba:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4002be:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002c2:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4002c6:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002ca:	f006 0707 	and.w	r7, r6, #7
  4002ce:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4002d0:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4002d4:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  4002d8:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002dc:	f3bf 8f4f 	dsb	sy

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4002e0:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4002e2:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4002e4:	fa05 f107 	lsl.w	r1, r5, r7
  4002e8:	fa03 f200 	lsl.w	r2, r3, r0
  4002ec:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  4002ee:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  4002f2:	3b01      	subs	r3, #1
  4002f4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002f8:	d1f6      	bne.n	4002e8 <board_init+0x50>
        } while(sets--);
  4002fa:	3d01      	subs	r5, #1
  4002fc:	f1b5 3fff 	cmp.w	r5, #4294967295
  400300:	d1ef      	bne.n	4002e2 <board_init+0x4a>
  400302:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400306:	4b3e      	ldr	r3, [pc, #248]	; (400400 <board_init+0x168>)
  400308:	695a      	ldr	r2, [r3, #20]
  40030a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40030e:	615a      	str	r2, [r3, #20]
  400310:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400314:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400318:	4a3a      	ldr	r2, [pc, #232]	; (400404 <board_init+0x16c>)
  40031a:	493b      	ldr	r1, [pc, #236]	; (400408 <board_init+0x170>)
  40031c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40031e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400322:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400324:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400328:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40032c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400330:	f022 0201 	bic.w	r2, r2, #1
  400334:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400338:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40033c:	f022 0201 	bic.w	r2, r2, #1
  400340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400344:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400348:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40034c:	200a      	movs	r0, #10
  40034e:	4c2f      	ldr	r4, [pc, #188]	; (40040c <board_init+0x174>)
  400350:	47a0      	blx	r4
  400352:	200b      	movs	r0, #11
  400354:	47a0      	blx	r4
  400356:	200c      	movs	r0, #12
  400358:	47a0      	blx	r4
  40035a:	2010      	movs	r0, #16
  40035c:	47a0      	blx	r4
  40035e:	2011      	movs	r0, #17
  400360:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400362:	4b2b      	ldr	r3, [pc, #172]	; (400410 <board_init+0x178>)
  400364:	f44f 7280 	mov.w	r2, #256	; 0x100
  400368:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40036a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40036e:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400370:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400374:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400378:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40037a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40037e:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400380:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400384:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  400386:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40038c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40038e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400392:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400394:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400396:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40039a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40039c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003a0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003ac:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003b2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003b4:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003bc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003c0:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003c2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003c4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003c8:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ca:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4003cc:	4a11      	ldr	r2, [pc, #68]	; (400414 <board_init+0x17c>)
  4003ce:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4003d2:	f043 0310 	orr.w	r3, r3, #16
  4003d6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003da:	4b0f      	ldr	r3, [pc, #60]	; (400418 <board_init+0x180>)
  4003dc:	2210      	movs	r2, #16
  4003de:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003e4:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003e6:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4003ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003ee:	4311      	orrs	r1, r2
  4003f0:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  4003f2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003f4:	4311      	orrs	r1, r2
  4003f6:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003f8:	605a      	str	r2, [r3, #4]
  4003fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4003fc:	400e1850 	.word	0x400e1850
  400400:	e000ed00 	.word	0xe000ed00
  400404:	400e0c00 	.word	0x400e0c00
  400408:	5a00080c 	.word	0x5a00080c
  40040c:	00400615 	.word	0x00400615
  400410:	400e1200 	.word	0x400e1200
  400414:	40088000 	.word	0x40088000
  400418:	400e1000 	.word	0x400e1000

0040041c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40041c:	6301      	str	r1, [r0, #48]	; 0x30
  40041e:	4770      	bx	lr

00400420 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400420:	6341      	str	r1, [r0, #52]	; 0x34
  400422:	4770      	bx	lr

00400424 <pio_get_output_data_status>:
 * \retval 0 All PIOs are configured to output a low level.
 */
uint32_t pio_get_output_data_status(const Pio *p_pio,
		const uint32_t ul_mask)
{
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400424:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400426:	420b      	tst	r3, r1
		return 0;
	} else {
		return 1;
	}
}
  400428:	bf14      	ite	ne
  40042a:	2001      	movne	r0, #1
  40042c:	2000      	moveq	r0, #0
  40042e:	4770      	bx	lr

00400430 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400430:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400432:	4770      	bx	lr

00400434 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400434:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400436:	4770      	bx	lr

00400438 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40043c:	4604      	mov	r4, r0
  40043e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400440:	4b0e      	ldr	r3, [pc, #56]	; (40047c <pio_handler_process+0x44>)
  400442:	4798      	blx	r3
  400444:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400446:	4620      	mov	r0, r4
  400448:	4b0d      	ldr	r3, [pc, #52]	; (400480 <pio_handler_process+0x48>)
  40044a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40044c:	4005      	ands	r5, r0
  40044e:	d013      	beq.n	400478 <pio_handler_process+0x40>
  400450:	4c0c      	ldr	r4, [pc, #48]	; (400484 <pio_handler_process+0x4c>)
  400452:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400456:	6823      	ldr	r3, [r4, #0]
  400458:	4543      	cmp	r3, r8
  40045a:	d108      	bne.n	40046e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40045c:	6861      	ldr	r1, [r4, #4]
  40045e:	4229      	tst	r1, r5
  400460:	d005      	beq.n	40046e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400462:	68e3      	ldr	r3, [r4, #12]
  400464:	4640      	mov	r0, r8
  400466:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400468:	6863      	ldr	r3, [r4, #4]
  40046a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40046e:	42b4      	cmp	r4, r6
  400470:	d002      	beq.n	400478 <pio_handler_process+0x40>
  400472:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400474:	2d00      	cmp	r5, #0
  400476:	d1ee      	bne.n	400456 <pio_handler_process+0x1e>
  400478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40047c:	00400431 	.word	0x00400431
  400480:	00400435 	.word	0x00400435
  400484:	204008c8 	.word	0x204008c8

00400488 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400488:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40048a:	210a      	movs	r1, #10
  40048c:	4801      	ldr	r0, [pc, #4]	; (400494 <PIOA_Handler+0xc>)
  40048e:	4b02      	ldr	r3, [pc, #8]	; (400498 <PIOA_Handler+0x10>)
  400490:	4798      	blx	r3
  400492:	bd08      	pop	{r3, pc}
  400494:	400e0e00 	.word	0x400e0e00
  400498:	00400439 	.word	0x00400439

0040049c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40049c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40049e:	210b      	movs	r1, #11
  4004a0:	4801      	ldr	r0, [pc, #4]	; (4004a8 <PIOB_Handler+0xc>)
  4004a2:	4b02      	ldr	r3, [pc, #8]	; (4004ac <PIOB_Handler+0x10>)
  4004a4:	4798      	blx	r3
  4004a6:	bd08      	pop	{r3, pc}
  4004a8:	400e1000 	.word	0x400e1000
  4004ac:	00400439 	.word	0x00400439

004004b0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4004b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4004b2:	210c      	movs	r1, #12
  4004b4:	4801      	ldr	r0, [pc, #4]	; (4004bc <PIOC_Handler+0xc>)
  4004b6:	4b02      	ldr	r3, [pc, #8]	; (4004c0 <PIOC_Handler+0x10>)
  4004b8:	4798      	blx	r3
  4004ba:	bd08      	pop	{r3, pc}
  4004bc:	400e1200 	.word	0x400e1200
  4004c0:	00400439 	.word	0x00400439

004004c4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4004c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4004c6:	2110      	movs	r1, #16
  4004c8:	4801      	ldr	r0, [pc, #4]	; (4004d0 <PIOD_Handler+0xc>)
  4004ca:	4b02      	ldr	r3, [pc, #8]	; (4004d4 <PIOD_Handler+0x10>)
  4004cc:	4798      	blx	r3
  4004ce:	bd08      	pop	{r3, pc}
  4004d0:	400e1400 	.word	0x400e1400
  4004d4:	00400439 	.word	0x00400439

004004d8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4004d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4004da:	2111      	movs	r1, #17
  4004dc:	4801      	ldr	r0, [pc, #4]	; (4004e4 <PIOE_Handler+0xc>)
  4004de:	4b02      	ldr	r3, [pc, #8]	; (4004e8 <PIOE_Handler+0x10>)
  4004e0:	4798      	blx	r3
  4004e2:	bd08      	pop	{r3, pc}
  4004e4:	400e1600 	.word	0x400e1600
  4004e8:	00400439 	.word	0x00400439

004004ec <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4004ec:	2803      	cmp	r0, #3
  4004ee:	d007      	beq.n	400500 <pmc_mck_set_division+0x14>
  4004f0:	2804      	cmp	r0, #4
  4004f2:	d008      	beq.n	400506 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4004f4:	2802      	cmp	r0, #2
  4004f6:	bf0c      	ite	eq
  4004f8:	f44f 7280 	moveq.w	r2, #256	; 0x100
  4004fc:	2200      	movne	r2, #0
  4004fe:	e004      	b.n	40050a <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400500:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  400504:	e001      	b.n	40050a <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400506:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40050a:	4906      	ldr	r1, [pc, #24]	; (400524 <pmc_mck_set_division+0x38>)
  40050c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40050e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400512:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  400514:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400516:	460a      	mov	r2, r1
  400518:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40051a:	f013 0f08 	tst.w	r3, #8
  40051e:	d0fb      	beq.n	400518 <pmc_mck_set_division+0x2c>
}
  400520:	4770      	bx	lr
  400522:	bf00      	nop
  400524:	400e0600 	.word	0x400e0600

00400528 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400528:	4a18      	ldr	r2, [pc, #96]	; (40058c <pmc_switch_mck_to_pllack+0x64>)
  40052a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40052c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400530:	4318      	orrs	r0, r3
  400532:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400534:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400536:	f013 0f08 	tst.w	r3, #8
  40053a:	d003      	beq.n	400544 <pmc_switch_mck_to_pllack+0x1c>
  40053c:	e009      	b.n	400552 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40053e:	3b01      	subs	r3, #1
  400540:	d103      	bne.n	40054a <pmc_switch_mck_to_pllack+0x22>
  400542:	e01e      	b.n	400582 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400548:	4910      	ldr	r1, [pc, #64]	; (40058c <pmc_switch_mck_to_pllack+0x64>)
  40054a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40054c:	f012 0f08 	tst.w	r2, #8
  400550:	d0f5      	beq.n	40053e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400552:	4a0e      	ldr	r2, [pc, #56]	; (40058c <pmc_switch_mck_to_pllack+0x64>)
  400554:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400556:	f023 0303 	bic.w	r3, r3, #3
  40055a:	f043 0302 	orr.w	r3, r3, #2
  40055e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400560:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400562:	f010 0008 	ands.w	r0, r0, #8
  400566:	d004      	beq.n	400572 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400568:	2000      	movs	r0, #0
  40056a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40056c:	3b01      	subs	r3, #1
  40056e:	d103      	bne.n	400578 <pmc_switch_mck_to_pllack+0x50>
  400570:	e009      	b.n	400586 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400576:	4905      	ldr	r1, [pc, #20]	; (40058c <pmc_switch_mck_to_pllack+0x64>)
  400578:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40057a:	f012 0f08 	tst.w	r2, #8
  40057e:	d0f5      	beq.n	40056c <pmc_switch_mck_to_pllack+0x44>
  400580:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400582:	2001      	movs	r0, #1
  400584:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400586:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400588:	4770      	bx	lr
  40058a:	bf00      	nop
  40058c:	400e0600 	.word	0x400e0600

00400590 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400590:	b138      	cbz	r0, 4005a2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400592:	490e      	ldr	r1, [pc, #56]	; (4005cc <pmc_switch_mainck_to_xtal+0x3c>)
  400594:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400596:	4a0e      	ldr	r2, [pc, #56]	; (4005d0 <pmc_switch_mainck_to_xtal+0x40>)
  400598:	401a      	ands	r2, r3
  40059a:	4b0e      	ldr	r3, [pc, #56]	; (4005d4 <pmc_switch_mainck_to_xtal+0x44>)
  40059c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40059e:	620b      	str	r3, [r1, #32]
  4005a0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005a2:	480a      	ldr	r0, [pc, #40]	; (4005cc <pmc_switch_mainck_to_xtal+0x3c>)
  4005a4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4005a6:	0209      	lsls	r1, r1, #8
  4005a8:	b289      	uxth	r1, r1
  4005aa:	4a0b      	ldr	r2, [pc, #44]	; (4005d8 <pmc_switch_mainck_to_xtal+0x48>)
  4005ac:	401a      	ands	r2, r3
  4005ae:	4b0b      	ldr	r3, [pc, #44]	; (4005dc <pmc_switch_mainck_to_xtal+0x4c>)
  4005b0:	4313      	orrs	r3, r2
  4005b2:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005b4:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4005b6:	4602      	mov	r2, r0
  4005b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005ba:	f013 0f01 	tst.w	r3, #1
  4005be:	d0fb      	beq.n	4005b8 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4005c0:	4a02      	ldr	r2, [pc, #8]	; (4005cc <pmc_switch_mainck_to_xtal+0x3c>)
  4005c2:	6a11      	ldr	r1, [r2, #32]
  4005c4:	4b06      	ldr	r3, [pc, #24]	; (4005e0 <pmc_switch_mainck_to_xtal+0x50>)
  4005c6:	430b      	orrs	r3, r1
  4005c8:	6213      	str	r3, [r2, #32]
  4005ca:	4770      	bx	lr
  4005cc:	400e0600 	.word	0x400e0600
  4005d0:	fec8fffc 	.word	0xfec8fffc
  4005d4:	01370002 	.word	0x01370002
  4005d8:	ffc8fffc 	.word	0xffc8fffc
  4005dc:	00370001 	.word	0x00370001
  4005e0:	01370000 	.word	0x01370000

004005e4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4005e4:	4b02      	ldr	r3, [pc, #8]	; (4005f0 <pmc_osc_is_ready_mainck+0xc>)
  4005e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4005e8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4005ec:	4770      	bx	lr
  4005ee:	bf00      	nop
  4005f0:	400e0600 	.word	0x400e0600

004005f4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4005f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4005f8:	4b01      	ldr	r3, [pc, #4]	; (400600 <pmc_disable_pllack+0xc>)
  4005fa:	629a      	str	r2, [r3, #40]	; 0x28
  4005fc:	4770      	bx	lr
  4005fe:	bf00      	nop
  400600:	400e0600 	.word	0x400e0600

00400604 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400604:	4b02      	ldr	r3, [pc, #8]	; (400610 <pmc_is_locked_pllack+0xc>)
  400606:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400608:	f000 0002 	and.w	r0, r0, #2
  40060c:	4770      	bx	lr
  40060e:	bf00      	nop
  400610:	400e0600 	.word	0x400e0600

00400614 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400614:	283f      	cmp	r0, #63	; 0x3f
  400616:	d81e      	bhi.n	400656 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400618:	281f      	cmp	r0, #31
  40061a:	d80c      	bhi.n	400636 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40061c:	4b11      	ldr	r3, [pc, #68]	; (400664 <pmc_enable_periph_clk+0x50>)
  40061e:	699a      	ldr	r2, [r3, #24]
  400620:	2301      	movs	r3, #1
  400622:	4083      	lsls	r3, r0
  400624:	4393      	bics	r3, r2
  400626:	d018      	beq.n	40065a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400628:	2301      	movs	r3, #1
  40062a:	fa03 f000 	lsl.w	r0, r3, r0
  40062e:	4b0d      	ldr	r3, [pc, #52]	; (400664 <pmc_enable_periph_clk+0x50>)
  400630:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400632:	2000      	movs	r0, #0
  400634:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400636:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400638:	4b0a      	ldr	r3, [pc, #40]	; (400664 <pmc_enable_periph_clk+0x50>)
  40063a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40063e:	2301      	movs	r3, #1
  400640:	4083      	lsls	r3, r0
  400642:	4393      	bics	r3, r2
  400644:	d00b      	beq.n	40065e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400646:	2301      	movs	r3, #1
  400648:	fa03 f000 	lsl.w	r0, r3, r0
  40064c:	4b05      	ldr	r3, [pc, #20]	; (400664 <pmc_enable_periph_clk+0x50>)
  40064e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400652:	2000      	movs	r0, #0
  400654:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400656:	2001      	movs	r0, #1
  400658:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40065a:	2000      	movs	r0, #0
  40065c:	4770      	bx	lr
  40065e:	2000      	movs	r0, #0
}
  400660:	4770      	bx	lr
  400662:	bf00      	nop
  400664:	400e0600 	.word	0x400e0600

00400668 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400668:	6943      	ldr	r3, [r0, #20]
  40066a:	f013 0f02 	tst.w	r3, #2
  40066e:	d002      	beq.n	400676 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400670:	61c1      	str	r1, [r0, #28]
	return 0;
  400672:	2000      	movs	r0, #0
  400674:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400676:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400678:	4770      	bx	lr
  40067a:	bf00      	nop

0040067c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40067c:	6943      	ldr	r3, [r0, #20]
  40067e:	f013 0f01 	tst.w	r3, #1
  400682:	d003      	beq.n	40068c <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400684:	6983      	ldr	r3, [r0, #24]
  400686:	700b      	strb	r3, [r1, #0]
	return 0;
  400688:	2000      	movs	r0, #0
  40068a:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  40068c:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  40068e:	4770      	bx	lr

00400690 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400690:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400692:	010c      	lsls	r4, r1, #4
  400694:	4294      	cmp	r4, r2
  400696:	d90f      	bls.n	4006b8 <usart_set_async_baudrate+0x28>
  400698:	e01a      	b.n	4006d0 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  40069a:	6841      	ldr	r1, [r0, #4]
  40069c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4006a0:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4006a2:	0412      	lsls	r2, r2, #16
  4006a4:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4006a8:	431a      	orrs	r2, r3
  4006aa:	6202      	str	r2, [r0, #32]

	return 0;
  4006ac:	2000      	movs	r0, #0
  4006ae:	e01c      	b.n	4006ea <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  4006b0:	2001      	movs	r0, #1
  4006b2:	e01a      	b.n	4006ea <usart_set_async_baudrate+0x5a>
  4006b4:	2001      	movs	r0, #1
  4006b6:	e018      	b.n	4006ea <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4006b8:	0863      	lsrs	r3, r4, #1
  4006ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4006be:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  4006c2:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4006c4:	1e5c      	subs	r4, r3, #1
  4006c6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4006ca:	428c      	cmp	r4, r1
  4006cc:	d9e9      	bls.n	4006a2 <usart_set_async_baudrate+0x12>
  4006ce:	e7ef      	b.n	4006b0 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4006d0:	00c9      	lsls	r1, r1, #3
  4006d2:	084b      	lsrs	r3, r1, #1
  4006d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4006d8:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4006dc:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4006de:	1e5c      	subs	r4, r3, #1
  4006e0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4006e4:	428c      	cmp	r4, r1
  4006e6:	d8e5      	bhi.n	4006b4 <usart_set_async_baudrate+0x24>
  4006e8:	e7d7      	b.n	40069a <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  4006ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006ee:	4770      	bx	lr

004006f0 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4006f0:	4b08      	ldr	r3, [pc, #32]	; (400714 <usart_reset+0x24>)
  4006f2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4006f6:	2300      	movs	r3, #0
  4006f8:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4006fa:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4006fc:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4006fe:	2388      	movs	r3, #136	; 0x88
  400700:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400702:	2324      	movs	r3, #36	; 0x24
  400704:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  400706:	f44f 7380 	mov.w	r3, #256	; 0x100
  40070a:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  40070c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400710:	6003      	str	r3, [r0, #0]
  400712:	4770      	bx	lr
  400714:	55534100 	.word	0x55534100

00400718 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400718:	b570      	push	{r4, r5, r6, lr}
  40071a:	4605      	mov	r5, r0
  40071c:	460c      	mov	r4, r1
  40071e:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400720:	4b0f      	ldr	r3, [pc, #60]	; (400760 <usart_init_rs232+0x48>)
  400722:	4798      	blx	r3

	ul_reg_val = 0;
  400724:	2200      	movs	r2, #0
  400726:	4b0f      	ldr	r3, [pc, #60]	; (400764 <usart_init_rs232+0x4c>)
  400728:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40072a:	b19c      	cbz	r4, 400754 <usart_init_rs232+0x3c>
  40072c:	4632      	mov	r2, r6
  40072e:	6821      	ldr	r1, [r4, #0]
  400730:	4628      	mov	r0, r5
  400732:	4b0d      	ldr	r3, [pc, #52]	; (400768 <usart_init_rs232+0x50>)
  400734:	4798      	blx	r3
  400736:	4602      	mov	r2, r0
  400738:	b970      	cbnz	r0, 400758 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40073a:	6861      	ldr	r1, [r4, #4]
  40073c:	68a3      	ldr	r3, [r4, #8]
  40073e:	4319      	orrs	r1, r3
  400740:	6923      	ldr	r3, [r4, #16]
  400742:	4319      	orrs	r1, r3
  400744:	68e3      	ldr	r3, [r4, #12]
  400746:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400748:	4906      	ldr	r1, [pc, #24]	; (400764 <usart_init_rs232+0x4c>)
  40074a:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  40074c:	6869      	ldr	r1, [r5, #4]
  40074e:	430b      	orrs	r3, r1
  400750:	606b      	str	r3, [r5, #4]

	return 0;
  400752:	e002      	b.n	40075a <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400754:	2201      	movs	r2, #1
  400756:	e000      	b.n	40075a <usart_init_rs232+0x42>
  400758:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  40075a:	4610      	mov	r0, r2
  40075c:	bd70      	pop	{r4, r5, r6, pc}
  40075e:	bf00      	nop
  400760:	004006f1 	.word	0x004006f1
  400764:	20400938 	.word	0x20400938
  400768:	00400691 	.word	0x00400691

0040076c <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  40076c:	2340      	movs	r3, #64	; 0x40
  40076e:	6003      	str	r3, [r0, #0]
  400770:	4770      	bx	lr
  400772:	bf00      	nop

00400774 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  400774:	2310      	movs	r3, #16
  400776:	6003      	str	r3, [r0, #0]
  400778:	4770      	bx	lr
  40077a:	bf00      	nop

0040077c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40077c:	6943      	ldr	r3, [r0, #20]
  40077e:	f013 0f02 	tst.w	r3, #2
  400782:	d004      	beq.n	40078e <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400784:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400788:	61c1      	str	r1, [r0, #28]
	return 0;
  40078a:	2000      	movs	r0, #0
  40078c:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  40078e:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400790:	4770      	bx	lr
  400792:	bf00      	nop

00400794 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400794:	6943      	ldr	r3, [r0, #20]
  400796:	f013 0f01 	tst.w	r3, #1
  40079a:	d005      	beq.n	4007a8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40079c:	6983      	ldr	r3, [r0, #24]
  40079e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4007a2:	600b      	str	r3, [r1, #0]

	return 0;
  4007a4:	2000      	movs	r0, #0
  4007a6:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4007a8:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4007aa:	4770      	bx	lr

004007ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4007ac:	e7fe      	b.n	4007ac <Dummy_Handler>
  4007ae:	bf00      	nop

004007b0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4007b0:	b500      	push	{lr}
  4007b2:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  4007b4:	4b27      	ldr	r3, [pc, #156]	; (400854 <Reset_Handler+0xa4>)
  4007b6:	4a28      	ldr	r2, [pc, #160]	; (400858 <Reset_Handler+0xa8>)
  4007b8:	429a      	cmp	r2, r3
  4007ba:	d003      	beq.n	4007c4 <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  4007bc:	4b27      	ldr	r3, [pc, #156]	; (40085c <Reset_Handler+0xac>)
  4007be:	4a25      	ldr	r2, [pc, #148]	; (400854 <Reset_Handler+0xa4>)
  4007c0:	429a      	cmp	r2, r3
  4007c2:	d304      	bcc.n	4007ce <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4007c4:	4b26      	ldr	r3, [pc, #152]	; (400860 <Reset_Handler+0xb0>)
  4007c6:	4a27      	ldr	r2, [pc, #156]	; (400864 <Reset_Handler+0xb4>)
  4007c8:	429a      	cmp	r2, r3
  4007ca:	d30f      	bcc.n	4007ec <Reset_Handler+0x3c>
  4007cc:	e01a      	b.n	400804 <Reset_Handler+0x54>
  4007ce:	4921      	ldr	r1, [pc, #132]	; (400854 <Reset_Handler+0xa4>)
  4007d0:	4b25      	ldr	r3, [pc, #148]	; (400868 <Reset_Handler+0xb8>)
  4007d2:	1a5b      	subs	r3, r3, r1
  4007d4:	f023 0303 	bic.w	r3, r3, #3
  4007d8:	3304      	adds	r3, #4
  4007da:	4a1f      	ldr	r2, [pc, #124]	; (400858 <Reset_Handler+0xa8>)
  4007dc:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  4007de:	f852 0b04 	ldr.w	r0, [r2], #4
  4007e2:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  4007e6:	429a      	cmp	r2, r3
  4007e8:	d1f9      	bne.n	4007de <Reset_Handler+0x2e>
  4007ea:	e7eb      	b.n	4007c4 <Reset_Handler+0x14>
  4007ec:	4b1f      	ldr	r3, [pc, #124]	; (40086c <Reset_Handler+0xbc>)
  4007ee:	4a20      	ldr	r2, [pc, #128]	; (400870 <Reset_Handler+0xc0>)
  4007f0:	1ad2      	subs	r2, r2, r3
  4007f2:	f022 0203 	bic.w	r2, r2, #3
  4007f6:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4007f8:	3b04      	subs	r3, #4
                *pDest++ = 0;
  4007fa:	2100      	movs	r1, #0
  4007fc:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400800:	4293      	cmp	r3, r2
  400802:	d1fb      	bne.n	4007fc <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400804:	4a1b      	ldr	r2, [pc, #108]	; (400874 <Reset_Handler+0xc4>)
  400806:	4b1c      	ldr	r3, [pc, #112]	; (400878 <Reset_Handler+0xc8>)
  400808:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40080c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40080e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400812:	fab3 f383 	clz	r3, r3
  400816:	095b      	lsrs	r3, r3, #5
  400818:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40081a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40081c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400820:	2200      	movs	r2, #0
  400822:	4b16      	ldr	r3, [pc, #88]	; (40087c <Reset_Handler+0xcc>)
  400824:	701a      	strb	r2, [r3, #0]
	return flags;
  400826:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400828:	4a15      	ldr	r2, [pc, #84]	; (400880 <Reset_Handler+0xd0>)
  40082a:	6813      	ldr	r3, [r2, #0]
  40082c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400830:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400832:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400836:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40083a:	b129      	cbz	r1, 400848 <Reset_Handler+0x98>
		cpu_irq_enable();
  40083c:	2201      	movs	r2, #1
  40083e:	4b0f      	ldr	r3, [pc, #60]	; (40087c <Reset_Handler+0xcc>)
  400840:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400842:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400846:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  400848:	4b0e      	ldr	r3, [pc, #56]	; (400884 <Reset_Handler+0xd4>)
  40084a:	4798      	blx	r3

        /* Branch to main function */
        main();
  40084c:	4b0e      	ldr	r3, [pc, #56]	; (400888 <Reset_Handler+0xd8>)
  40084e:	4798      	blx	r3
  400850:	e7fe      	b.n	400850 <Reset_Handler+0xa0>
  400852:	bf00      	nop
  400854:	20400000 	.word	0x20400000
  400858:	004097e0 	.word	0x004097e0
  40085c:	204008ac 	.word	0x204008ac
  400860:	20400c04 	.word	0x20400c04
  400864:	204008ac 	.word	0x204008ac
  400868:	204008ab 	.word	0x204008ab
  40086c:	204008b0 	.word	0x204008b0
  400870:	20400c07 	.word	0x20400c07
  400874:	e000ed00 	.word	0xe000ed00
  400878:	00400000 	.word	0x00400000
  40087c:	20400000 	.word	0x20400000
  400880:	e000ed88 	.word	0xe000ed88
  400884:	00402c9d 	.word	0x00402c9d
  400888:	00402b35 	.word	0x00402b35

0040088c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40088c:	4b3c      	ldr	r3, [pc, #240]	; (400980 <SystemCoreClockUpdate+0xf4>)
  40088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400890:	f003 0303 	and.w	r3, r3, #3
  400894:	2b01      	cmp	r3, #1
  400896:	d00f      	beq.n	4008b8 <SystemCoreClockUpdate+0x2c>
  400898:	b113      	cbz	r3, 4008a0 <SystemCoreClockUpdate+0x14>
  40089a:	2b02      	cmp	r3, #2
  40089c:	d029      	beq.n	4008f2 <SystemCoreClockUpdate+0x66>
  40089e:	e057      	b.n	400950 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4008a0:	4b38      	ldr	r3, [pc, #224]	; (400984 <SystemCoreClockUpdate+0xf8>)
  4008a2:	695b      	ldr	r3, [r3, #20]
  4008a4:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4008a8:	bf14      	ite	ne
  4008aa:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4008ae:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4008b2:	4b35      	ldr	r3, [pc, #212]	; (400988 <SystemCoreClockUpdate+0xfc>)
  4008b4:	601a      	str	r2, [r3, #0]
  4008b6:	e04b      	b.n	400950 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4008b8:	4b31      	ldr	r3, [pc, #196]	; (400980 <SystemCoreClockUpdate+0xf4>)
  4008ba:	6a1b      	ldr	r3, [r3, #32]
  4008bc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4008c0:	d003      	beq.n	4008ca <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4008c2:	4a32      	ldr	r2, [pc, #200]	; (40098c <SystemCoreClockUpdate+0x100>)
  4008c4:	4b30      	ldr	r3, [pc, #192]	; (400988 <SystemCoreClockUpdate+0xfc>)
  4008c6:	601a      	str	r2, [r3, #0]
  4008c8:	e042      	b.n	400950 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4008ca:	4a31      	ldr	r2, [pc, #196]	; (400990 <SystemCoreClockUpdate+0x104>)
  4008cc:	4b2e      	ldr	r3, [pc, #184]	; (400988 <SystemCoreClockUpdate+0xfc>)
  4008ce:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4008d0:	4b2b      	ldr	r3, [pc, #172]	; (400980 <SystemCoreClockUpdate+0xf4>)
  4008d2:	6a1b      	ldr	r3, [r3, #32]
  4008d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4008d8:	2b10      	cmp	r3, #16
  4008da:	d002      	beq.n	4008e2 <SystemCoreClockUpdate+0x56>
  4008dc:	2b20      	cmp	r3, #32
  4008de:	d004      	beq.n	4008ea <SystemCoreClockUpdate+0x5e>
  4008e0:	e036      	b.n	400950 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4008e2:	4a2c      	ldr	r2, [pc, #176]	; (400994 <SystemCoreClockUpdate+0x108>)
  4008e4:	4b28      	ldr	r3, [pc, #160]	; (400988 <SystemCoreClockUpdate+0xfc>)
  4008e6:	601a      	str	r2, [r3, #0]
          break;
  4008e8:	e032      	b.n	400950 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4008ea:	4a28      	ldr	r2, [pc, #160]	; (40098c <SystemCoreClockUpdate+0x100>)
  4008ec:	4b26      	ldr	r3, [pc, #152]	; (400988 <SystemCoreClockUpdate+0xfc>)
  4008ee:	601a      	str	r2, [r3, #0]
          break;
  4008f0:	e02e      	b.n	400950 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4008f2:	4b23      	ldr	r3, [pc, #140]	; (400980 <SystemCoreClockUpdate+0xf4>)
  4008f4:	6a1b      	ldr	r3, [r3, #32]
  4008f6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4008fa:	d003      	beq.n	400904 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4008fc:	4a23      	ldr	r2, [pc, #140]	; (40098c <SystemCoreClockUpdate+0x100>)
  4008fe:	4b22      	ldr	r3, [pc, #136]	; (400988 <SystemCoreClockUpdate+0xfc>)
  400900:	601a      	str	r2, [r3, #0]
  400902:	e012      	b.n	40092a <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400904:	4a22      	ldr	r2, [pc, #136]	; (400990 <SystemCoreClockUpdate+0x104>)
  400906:	4b20      	ldr	r3, [pc, #128]	; (400988 <SystemCoreClockUpdate+0xfc>)
  400908:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40090a:	4b1d      	ldr	r3, [pc, #116]	; (400980 <SystemCoreClockUpdate+0xf4>)
  40090c:	6a1b      	ldr	r3, [r3, #32]
  40090e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400912:	2b10      	cmp	r3, #16
  400914:	d002      	beq.n	40091c <SystemCoreClockUpdate+0x90>
  400916:	2b20      	cmp	r3, #32
  400918:	d004      	beq.n	400924 <SystemCoreClockUpdate+0x98>
  40091a:	e006      	b.n	40092a <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40091c:	4a1d      	ldr	r2, [pc, #116]	; (400994 <SystemCoreClockUpdate+0x108>)
  40091e:	4b1a      	ldr	r3, [pc, #104]	; (400988 <SystemCoreClockUpdate+0xfc>)
  400920:	601a      	str	r2, [r3, #0]
          break;
  400922:	e002      	b.n	40092a <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  400924:	4a19      	ldr	r2, [pc, #100]	; (40098c <SystemCoreClockUpdate+0x100>)
  400926:	4b18      	ldr	r3, [pc, #96]	; (400988 <SystemCoreClockUpdate+0xfc>)
  400928:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40092a:	4b15      	ldr	r3, [pc, #84]	; (400980 <SystemCoreClockUpdate+0xf4>)
  40092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40092e:	f003 0303 	and.w	r3, r3, #3
  400932:	2b02      	cmp	r3, #2
  400934:	d10c      	bne.n	400950 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400936:	4a12      	ldr	r2, [pc, #72]	; (400980 <SystemCoreClockUpdate+0xf4>)
  400938:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40093a:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40093c:	4812      	ldr	r0, [pc, #72]	; (400988 <SystemCoreClockUpdate+0xfc>)
  40093e:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400942:	6803      	ldr	r3, [r0, #0]
  400944:	fb01 3303 	mla	r3, r1, r3, r3
  400948:	b2d2      	uxtb	r2, r2
  40094a:	fbb3 f3f2 	udiv	r3, r3, r2
  40094e:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400950:	4b0b      	ldr	r3, [pc, #44]	; (400980 <SystemCoreClockUpdate+0xf4>)
  400952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400954:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400958:	2b70      	cmp	r3, #112	; 0x70
  40095a:	d107      	bne.n	40096c <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  40095c:	4a0a      	ldr	r2, [pc, #40]	; (400988 <SystemCoreClockUpdate+0xfc>)
  40095e:	6813      	ldr	r3, [r2, #0]
  400960:	490d      	ldr	r1, [pc, #52]	; (400998 <SystemCoreClockUpdate+0x10c>)
  400962:	fba1 1303 	umull	r1, r3, r1, r3
  400966:	085b      	lsrs	r3, r3, #1
  400968:	6013      	str	r3, [r2, #0]
  40096a:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40096c:	4b04      	ldr	r3, [pc, #16]	; (400980 <SystemCoreClockUpdate+0xf4>)
  40096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400970:	4905      	ldr	r1, [pc, #20]	; (400988 <SystemCoreClockUpdate+0xfc>)
  400972:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400976:	680b      	ldr	r3, [r1, #0]
  400978:	40d3      	lsrs	r3, r2
  40097a:	600b      	str	r3, [r1, #0]
  40097c:	4770      	bx	lr
  40097e:	bf00      	nop
  400980:	400e0600 	.word	0x400e0600
  400984:	400e1810 	.word	0x400e1810
  400988:	20400004 	.word	0x20400004
  40098c:	00b71b00 	.word	0x00b71b00
  400990:	003d0900 	.word	0x003d0900
  400994:	007a1200 	.word	0x007a1200
  400998:	aaaaaaab 	.word	0xaaaaaaab

0040099c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40099c:	4b12      	ldr	r3, [pc, #72]	; (4009e8 <system_init_flash+0x4c>)
  40099e:	4298      	cmp	r0, r3
  4009a0:	d804      	bhi.n	4009ac <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4009a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4009a6:	4b11      	ldr	r3, [pc, #68]	; (4009ec <system_init_flash+0x50>)
  4009a8:	601a      	str	r2, [r3, #0]
  4009aa:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4009ac:	4b10      	ldr	r3, [pc, #64]	; (4009f0 <system_init_flash+0x54>)
  4009ae:	4298      	cmp	r0, r3
  4009b0:	d803      	bhi.n	4009ba <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4009b2:	4a10      	ldr	r2, [pc, #64]	; (4009f4 <system_init_flash+0x58>)
  4009b4:	4b0d      	ldr	r3, [pc, #52]	; (4009ec <system_init_flash+0x50>)
  4009b6:	601a      	str	r2, [r3, #0]
  4009b8:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4009ba:	4b0f      	ldr	r3, [pc, #60]	; (4009f8 <system_init_flash+0x5c>)
  4009bc:	4298      	cmp	r0, r3
  4009be:	d803      	bhi.n	4009c8 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4009c0:	4a0e      	ldr	r2, [pc, #56]	; (4009fc <system_init_flash+0x60>)
  4009c2:	4b0a      	ldr	r3, [pc, #40]	; (4009ec <system_init_flash+0x50>)
  4009c4:	601a      	str	r2, [r3, #0]
  4009c6:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4009c8:	4b0d      	ldr	r3, [pc, #52]	; (400a00 <system_init_flash+0x64>)
  4009ca:	4298      	cmp	r0, r3
  4009cc:	d803      	bhi.n	4009d6 <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4009ce:	4a0d      	ldr	r2, [pc, #52]	; (400a04 <system_init_flash+0x68>)
  4009d0:	4b06      	ldr	r3, [pc, #24]	; (4009ec <system_init_flash+0x50>)
  4009d2:	601a      	str	r2, [r3, #0]
  4009d4:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4009d6:	4b0c      	ldr	r3, [pc, #48]	; (400a08 <system_init_flash+0x6c>)
  4009d8:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4009da:	bf94      	ite	ls
  4009dc:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4009e0:	4a0a      	ldrhi	r2, [pc, #40]	; (400a0c <system_init_flash+0x70>)
  4009e2:	4b02      	ldr	r3, [pc, #8]	; (4009ec <system_init_flash+0x50>)
  4009e4:	601a      	str	r2, [r3, #0]
  4009e6:	4770      	bx	lr
  4009e8:	01312cff 	.word	0x01312cff
  4009ec:	400e0c00 	.word	0x400e0c00
  4009f0:	026259ff 	.word	0x026259ff
  4009f4:	04000100 	.word	0x04000100
  4009f8:	039386ff 	.word	0x039386ff
  4009fc:	04000200 	.word	0x04000200
  400a00:	04c4b3ff 	.word	0x04c4b3ff
  400a04:	04000300 	.word	0x04000300
  400a08:	05f5e0ff 	.word	0x05f5e0ff
  400a0c:	04000500 	.word	0x04000500

00400a10 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400a10:	4b09      	ldr	r3, [pc, #36]	; (400a38 <_sbrk+0x28>)
  400a12:	681b      	ldr	r3, [r3, #0]
  400a14:	b913      	cbnz	r3, 400a1c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400a16:	4a09      	ldr	r2, [pc, #36]	; (400a3c <_sbrk+0x2c>)
  400a18:	4b07      	ldr	r3, [pc, #28]	; (400a38 <_sbrk+0x28>)
  400a1a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400a1c:	4b06      	ldr	r3, [pc, #24]	; (400a38 <_sbrk+0x28>)
  400a1e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400a20:	181a      	adds	r2, r3, r0
  400a22:	4907      	ldr	r1, [pc, #28]	; (400a40 <_sbrk+0x30>)
  400a24:	4291      	cmp	r1, r2
  400a26:	db04      	blt.n	400a32 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400a28:	4610      	mov	r0, r2
  400a2a:	4a03      	ldr	r2, [pc, #12]	; (400a38 <_sbrk+0x28>)
  400a2c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400a2e:	4618      	mov	r0, r3
  400a30:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400a32:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400a36:	4770      	bx	lr
  400a38:	2040093c 	.word	0x2040093c
  400a3c:	20402e08 	.word	0x20402e08
  400a40:	2045fffc 	.word	0x2045fffc

00400a44 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400a44:	f04f 30ff 	mov.w	r0, #4294967295
  400a48:	4770      	bx	lr
  400a4a:	bf00      	nop

00400a4c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400a50:	604b      	str	r3, [r1, #4]

	return 0;
}
  400a52:	2000      	movs	r0, #0
  400a54:	4770      	bx	lr
  400a56:	bf00      	nop

00400a58 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400a58:	2001      	movs	r0, #1
  400a5a:	4770      	bx	lr

00400a5c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400a5c:	2000      	movs	r0, #0
  400a5e:	4770      	bx	lr

00400a60 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400a60:	f100 0308 	add.w	r3, r0, #8
  400a64:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400a66:	f04f 32ff 	mov.w	r2, #4294967295
  400a6a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400a6c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400a6e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400a70:	2300      	movs	r3, #0
  400a72:	6003      	str	r3, [r0, #0]
  400a74:	4770      	bx	lr
  400a76:	bf00      	nop

00400a78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400a78:	2300      	movs	r3, #0
  400a7a:	6103      	str	r3, [r0, #16]
  400a7c:	4770      	bx	lr
  400a7e:	bf00      	nop

00400a80 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400a80:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400a82:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400a84:	689a      	ldr	r2, [r3, #8]
  400a86:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400a88:	689a      	ldr	r2, [r3, #8]
  400a8a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400a8c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400a8e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400a90:	6803      	ldr	r3, [r0, #0]
  400a92:	3301      	adds	r3, #1
  400a94:	6003      	str	r3, [r0, #0]
  400a96:	4770      	bx	lr

00400a98 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400a98:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400a9a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400a9c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400aa0:	d101      	bne.n	400aa6 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400aa2:	6902      	ldr	r2, [r0, #16]
  400aa4:	e007      	b.n	400ab6 <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400aa6:	f100 0208 	add.w	r2, r0, #8
  400aaa:	e000      	b.n	400aae <vListInsert+0x16>
  400aac:	461a      	mov	r2, r3
  400aae:	6853      	ldr	r3, [r2, #4]
  400ab0:	681c      	ldr	r4, [r3, #0]
  400ab2:	42a5      	cmp	r5, r4
  400ab4:	d2fa      	bcs.n	400aac <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400ab6:	6853      	ldr	r3, [r2, #4]
  400ab8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400aba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400abc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400abe:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400ac0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400ac2:	6803      	ldr	r3, [r0, #0]
  400ac4:	3301      	adds	r3, #1
  400ac6:	6003      	str	r3, [r0, #0]
}
  400ac8:	bc30      	pop	{r4, r5}
  400aca:	4770      	bx	lr

00400acc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400acc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400ace:	6842      	ldr	r2, [r0, #4]
  400ad0:	6881      	ldr	r1, [r0, #8]
  400ad2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400ad4:	6882      	ldr	r2, [r0, #8]
  400ad6:	6841      	ldr	r1, [r0, #4]
  400ad8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400ada:	685a      	ldr	r2, [r3, #4]
  400adc:	4290      	cmp	r0, r2
  400ade:	d101      	bne.n	400ae4 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400ae0:	6882      	ldr	r2, [r0, #8]
  400ae2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400ae4:	2200      	movs	r2, #0
  400ae6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400ae8:	6818      	ldr	r0, [r3, #0]
  400aea:	3801      	subs	r0, #1
  400aec:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400aee:	4770      	bx	lr

00400af0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400af0:	4b0d      	ldr	r3, [pc, #52]	; (400b28 <prvTaskExitError+0x38>)
  400af2:	681b      	ldr	r3, [r3, #0]
  400af4:	f1b3 3fff 	cmp.w	r3, #4294967295
  400af8:	d00a      	beq.n	400b10 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400afa:	f04f 0380 	mov.w	r3, #128	; 0x80
  400afe:	b672      	cpsid	i
  400b00:	f383 8811 	msr	BASEPRI, r3
  400b04:	f3bf 8f6f 	isb	sy
  400b08:	f3bf 8f4f 	dsb	sy
  400b0c:	b662      	cpsie	i
  400b0e:	e7fe      	b.n	400b0e <prvTaskExitError+0x1e>
  400b10:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b14:	b672      	cpsid	i
  400b16:	f383 8811 	msr	BASEPRI, r3
  400b1a:	f3bf 8f6f 	isb	sy
  400b1e:	f3bf 8f4f 	dsb	sy
  400b22:	b662      	cpsie	i
  400b24:	e7fe      	b.n	400b24 <prvTaskExitError+0x34>
  400b26:	bf00      	nop
  400b28:	20400008 	.word	0x20400008

00400b2c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400b2c:	4806      	ldr	r0, [pc, #24]	; (400b48 <prvPortStartFirstTask+0x1c>)
  400b2e:	6800      	ldr	r0, [r0, #0]
  400b30:	6800      	ldr	r0, [r0, #0]
  400b32:	f380 8808 	msr	MSP, r0
  400b36:	b662      	cpsie	i
  400b38:	b661      	cpsie	f
  400b3a:	f3bf 8f4f 	dsb	sy
  400b3e:	f3bf 8f6f 	isb	sy
  400b42:	df00      	svc	0
  400b44:	bf00      	nop
  400b46:	0000      	.short	0x0000
  400b48:	e000ed08 	.word	0xe000ed08

00400b4c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400b4c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400b5c <vPortEnableVFP+0x10>
  400b50:	6801      	ldr	r1, [r0, #0]
  400b52:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400b56:	6001      	str	r1, [r0, #0]
  400b58:	4770      	bx	lr
  400b5a:	0000      	.short	0x0000
  400b5c:	e000ed88 	.word	0xe000ed88

00400b60 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400b64:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400b68:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400b6c:	4b05      	ldr	r3, [pc, #20]	; (400b84 <pxPortInitialiseStack+0x24>)
  400b6e:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400b72:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400b76:	f06f 0302 	mvn.w	r3, #2
  400b7a:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  400b7e:	3844      	subs	r0, #68	; 0x44
  400b80:	4770      	bx	lr
  400b82:	bf00      	nop
  400b84:	00400af1 	.word	0x00400af1

00400b88 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  400b88:	4b06      	ldr	r3, [pc, #24]	; (400ba4 <pxCurrentTCBConst2>)
  400b8a:	6819      	ldr	r1, [r3, #0]
  400b8c:	6808      	ldr	r0, [r1, #0]
  400b8e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b92:	f380 8809 	msr	PSP, r0
  400b96:	f3bf 8f6f 	isb	sy
  400b9a:	f04f 0000 	mov.w	r0, #0
  400b9e:	f380 8811 	msr	BASEPRI, r0
  400ba2:	4770      	bx	lr

00400ba4 <pxCurrentTCBConst2>:
  400ba4:	204009ec 	.word	0x204009ec
  400ba8:	4770      	bx	lr
  400baa:	bf00      	nop

00400bac <vPortEnterCritical>:
  400bac:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bb0:	b672      	cpsid	i
  400bb2:	f383 8811 	msr	BASEPRI, r3
  400bb6:	f3bf 8f6f 	isb	sy
  400bba:	f3bf 8f4f 	dsb	sy
  400bbe:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  400bc0:	4a0b      	ldr	r2, [pc, #44]	; (400bf0 <vPortEnterCritical+0x44>)
  400bc2:	6813      	ldr	r3, [r2, #0]
  400bc4:	3301      	adds	r3, #1
  400bc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  400bc8:	2b01      	cmp	r3, #1
  400bca:	d10f      	bne.n	400bec <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400bcc:	4b09      	ldr	r3, [pc, #36]	; (400bf4 <vPortEnterCritical+0x48>)
  400bce:	681b      	ldr	r3, [r3, #0]
  400bd0:	f013 0fff 	tst.w	r3, #255	; 0xff
  400bd4:	d00a      	beq.n	400bec <vPortEnterCritical+0x40>
  400bd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bda:	b672      	cpsid	i
  400bdc:	f383 8811 	msr	BASEPRI, r3
  400be0:	f3bf 8f6f 	isb	sy
  400be4:	f3bf 8f4f 	dsb	sy
  400be8:	b662      	cpsie	i
  400bea:	e7fe      	b.n	400bea <vPortEnterCritical+0x3e>
  400bec:	4770      	bx	lr
  400bee:	bf00      	nop
  400bf0:	20400008 	.word	0x20400008
  400bf4:	e000ed04 	.word	0xe000ed04

00400bf8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  400bf8:	4b0a      	ldr	r3, [pc, #40]	; (400c24 <vPortExitCritical+0x2c>)
  400bfa:	681b      	ldr	r3, [r3, #0]
  400bfc:	b953      	cbnz	r3, 400c14 <vPortExitCritical+0x1c>
  400bfe:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c02:	b672      	cpsid	i
  400c04:	f383 8811 	msr	BASEPRI, r3
  400c08:	f3bf 8f6f 	isb	sy
  400c0c:	f3bf 8f4f 	dsb	sy
  400c10:	b662      	cpsie	i
  400c12:	e7fe      	b.n	400c12 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400c14:	3b01      	subs	r3, #1
  400c16:	4a03      	ldr	r2, [pc, #12]	; (400c24 <vPortExitCritical+0x2c>)
  400c18:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400c1a:	b90b      	cbnz	r3, 400c20 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400c1c:	f383 8811 	msr	BASEPRI, r3
  400c20:	4770      	bx	lr
  400c22:	bf00      	nop
  400c24:	20400008 	.word	0x20400008

00400c28 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  400c28:	f3ef 8009 	mrs	r0, PSP
  400c2c:	f3bf 8f6f 	isb	sy
  400c30:	4b15      	ldr	r3, [pc, #84]	; (400c88 <pxCurrentTCBConst>)
  400c32:	681a      	ldr	r2, [r3, #0]
  400c34:	f01e 0f10 	tst.w	lr, #16
  400c38:	bf08      	it	eq
  400c3a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400c3e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c42:	6010      	str	r0, [r2, #0]
  400c44:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400c48:	f04f 0080 	mov.w	r0, #128	; 0x80
  400c4c:	b672      	cpsid	i
  400c4e:	f380 8811 	msr	BASEPRI, r0
  400c52:	f3bf 8f4f 	dsb	sy
  400c56:	f3bf 8f6f 	isb	sy
  400c5a:	b662      	cpsie	i
  400c5c:	f001 f922 	bl	401ea4 <vTaskSwitchContext>
  400c60:	f04f 0000 	mov.w	r0, #0
  400c64:	f380 8811 	msr	BASEPRI, r0
  400c68:	bc08      	pop	{r3}
  400c6a:	6819      	ldr	r1, [r3, #0]
  400c6c:	6808      	ldr	r0, [r1, #0]
  400c6e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c72:	f01e 0f10 	tst.w	lr, #16
  400c76:	bf08      	it	eq
  400c78:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400c7c:	f380 8809 	msr	PSP, r0
  400c80:	f3bf 8f6f 	isb	sy
  400c84:	4770      	bx	lr
  400c86:	bf00      	nop

00400c88 <pxCurrentTCBConst>:
  400c88:	204009ec 	.word	0x204009ec
  400c8c:	4770      	bx	lr
  400c8e:	bf00      	nop

00400c90 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  400c90:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400c92:	f3ef 8311 	mrs	r3, BASEPRI
  400c96:	f04f 0280 	mov.w	r2, #128	; 0x80
  400c9a:	b672      	cpsid	i
  400c9c:	f382 8811 	msr	BASEPRI, r2
  400ca0:	f3bf 8f6f 	isb	sy
  400ca4:	f3bf 8f4f 	dsb	sy
  400ca8:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  400caa:	4b05      	ldr	r3, [pc, #20]	; (400cc0 <SysTick_Handler+0x30>)
  400cac:	4798      	blx	r3
  400cae:	b118      	cbz	r0, 400cb8 <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cb4:	4b03      	ldr	r3, [pc, #12]	; (400cc4 <SysTick_Handler+0x34>)
  400cb6:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400cb8:	2300      	movs	r3, #0
  400cba:	f383 8811 	msr	BASEPRI, r3
  400cbe:	bd08      	pop	{r3, pc}
  400cc0:	00401a79 	.word	0x00401a79
  400cc4:	e000ed04 	.word	0xe000ed04

00400cc8 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400cc8:	4a03      	ldr	r2, [pc, #12]	; (400cd8 <vPortSetupTimerInterrupt+0x10>)
  400cca:	4b04      	ldr	r3, [pc, #16]	; (400cdc <vPortSetupTimerInterrupt+0x14>)
  400ccc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400cce:	2207      	movs	r2, #7
  400cd0:	3b04      	subs	r3, #4
  400cd2:	601a      	str	r2, [r3, #0]
  400cd4:	4770      	bx	lr
  400cd6:	bf00      	nop
  400cd8:	000927bf 	.word	0x000927bf
  400cdc:	e000e014 	.word	0xe000e014

00400ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  400ce0:	b500      	push	{lr}
  400ce2:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400ce4:	4b25      	ldr	r3, [pc, #148]	; (400d7c <xPortStartScheduler+0x9c>)
  400ce6:	781a      	ldrb	r2, [r3, #0]
  400ce8:	b2d2      	uxtb	r2, r2
  400cea:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400cec:	22ff      	movs	r2, #255	; 0xff
  400cee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400cf0:	781b      	ldrb	r3, [r3, #0]
  400cf2:	b2db      	uxtb	r3, r3
  400cf4:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400cf8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400d00:	4a1f      	ldr	r2, [pc, #124]	; (400d80 <xPortStartScheduler+0xa0>)
  400d02:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400d04:	2207      	movs	r2, #7
  400d06:	4b1f      	ldr	r3, [pc, #124]	; (400d84 <xPortStartScheduler+0xa4>)
  400d08:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400d0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400d0e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400d12:	d010      	beq.n	400d36 <xPortStartScheduler+0x56>
  400d14:	2206      	movs	r2, #6
  400d16:	e000      	b.n	400d1a <xPortStartScheduler+0x3a>
  400d18:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400d1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400d1e:	005b      	lsls	r3, r3, #1
  400d20:	b2db      	uxtb	r3, r3
  400d22:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400d26:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400d2a:	1e51      	subs	r1, r2, #1
  400d2c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400d30:	d1f2      	bne.n	400d18 <xPortStartScheduler+0x38>
  400d32:	4b14      	ldr	r3, [pc, #80]	; (400d84 <xPortStartScheduler+0xa4>)
  400d34:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400d36:	4a13      	ldr	r2, [pc, #76]	; (400d84 <xPortStartScheduler+0xa4>)
  400d38:	6813      	ldr	r3, [r2, #0]
  400d3a:	021b      	lsls	r3, r3, #8
  400d3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400d40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400d42:	9b01      	ldr	r3, [sp, #4]
  400d44:	b2db      	uxtb	r3, r3
  400d46:	4a0d      	ldr	r2, [pc, #52]	; (400d7c <xPortStartScheduler+0x9c>)
  400d48:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400d4a:	4b0f      	ldr	r3, [pc, #60]	; (400d88 <xPortStartScheduler+0xa8>)
  400d4c:	681a      	ldr	r2, [r3, #0]
  400d4e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400d52:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400d54:	681a      	ldr	r2, [r3, #0]
  400d56:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400d5a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  400d5c:	4b0b      	ldr	r3, [pc, #44]	; (400d8c <xPortStartScheduler+0xac>)
  400d5e:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400d60:	2200      	movs	r2, #0
  400d62:	4b0b      	ldr	r3, [pc, #44]	; (400d90 <xPortStartScheduler+0xb0>)
  400d64:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400d66:	4b0b      	ldr	r3, [pc, #44]	; (400d94 <xPortStartScheduler+0xb4>)
  400d68:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400d6a:	4a0b      	ldr	r2, [pc, #44]	; (400d98 <xPortStartScheduler+0xb8>)
  400d6c:	6813      	ldr	r3, [r2, #0]
  400d6e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400d72:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400d74:	4b09      	ldr	r3, [pc, #36]	; (400d9c <xPortStartScheduler+0xbc>)
  400d76:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  400d78:	4b09      	ldr	r3, [pc, #36]	; (400da0 <xPortStartScheduler+0xc0>)
  400d7a:	4798      	blx	r3
  400d7c:	e000e400 	.word	0xe000e400
  400d80:	20400940 	.word	0x20400940
  400d84:	20400944 	.word	0x20400944
  400d88:	e000ed20 	.word	0xe000ed20
  400d8c:	00400cc9 	.word	0x00400cc9
  400d90:	20400008 	.word	0x20400008
  400d94:	00400b4d 	.word	0x00400b4d
  400d98:	e000ef34 	.word	0xe000ef34
  400d9c:	00400b2d 	.word	0x00400b2d
  400da0:	00400af1 	.word	0x00400af1

00400da4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400da4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400da8:	2b0f      	cmp	r3, #15
  400daa:	d911      	bls.n	400dd0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400dac:	4a12      	ldr	r2, [pc, #72]	; (400df8 <vPortValidateInterruptPriority+0x54>)
  400dae:	5c9b      	ldrb	r3, [r3, r2]
  400db0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400db2:	4a12      	ldr	r2, [pc, #72]	; (400dfc <vPortValidateInterruptPriority+0x58>)
  400db4:	7812      	ldrb	r2, [r2, #0]
  400db6:	429a      	cmp	r2, r3
  400db8:	d90a      	bls.n	400dd0 <vPortValidateInterruptPriority+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400dba:	f04f 0380 	mov.w	r3, #128	; 0x80
  400dbe:	b672      	cpsid	i
  400dc0:	f383 8811 	msr	BASEPRI, r3
  400dc4:	f3bf 8f6f 	isb	sy
  400dc8:	f3bf 8f4f 	dsb	sy
  400dcc:	b662      	cpsie	i
  400dce:	e7fe      	b.n	400dce <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400dd0:	4b0b      	ldr	r3, [pc, #44]	; (400e00 <vPortValidateInterruptPriority+0x5c>)
  400dd2:	681b      	ldr	r3, [r3, #0]
  400dd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400dd8:	4a0a      	ldr	r2, [pc, #40]	; (400e04 <vPortValidateInterruptPriority+0x60>)
  400dda:	6812      	ldr	r2, [r2, #0]
  400ddc:	4293      	cmp	r3, r2
  400dde:	d90a      	bls.n	400df6 <vPortValidateInterruptPriority+0x52>
  400de0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400de4:	b672      	cpsid	i
  400de6:	f383 8811 	msr	BASEPRI, r3
  400dea:	f3bf 8f6f 	isb	sy
  400dee:	f3bf 8f4f 	dsb	sy
  400df2:	b662      	cpsie	i
  400df4:	e7fe      	b.n	400df4 <vPortValidateInterruptPriority+0x50>
  400df6:	4770      	bx	lr
  400df8:	e000e3f0 	.word	0xe000e3f0
  400dfc:	20400940 	.word	0x20400940
  400e00:	e000ed0c 	.word	0xe000ed0c
  400e04:	20400944 	.word	0x20400944

00400e08 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400e08:	b510      	push	{r4, lr}
  400e0a:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  400e0c:	4b06      	ldr	r3, [pc, #24]	; (400e28 <pvPortMalloc+0x20>)
  400e0e:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  400e10:	4620      	mov	r0, r4
  400e12:	4b06      	ldr	r3, [pc, #24]	; (400e2c <pvPortMalloc+0x24>)
  400e14:	4798      	blx	r3
  400e16:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400e18:	4b05      	ldr	r3, [pc, #20]	; (400e30 <pvPortMalloc+0x28>)
  400e1a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  400e1c:	b90c      	cbnz	r4, 400e22 <pvPortMalloc+0x1a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
  400e1e:	4b05      	ldr	r3, [pc, #20]	; (400e34 <pvPortMalloc+0x2c>)
  400e20:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  400e22:	4620      	mov	r0, r4
  400e24:	bd10      	pop	{r4, pc}
  400e26:	bf00      	nop
  400e28:	00401a51 	.word	0x00401a51
  400e2c:	00402d15 	.word	0x00402d15
  400e30:	00401bc1 	.word	0x00401bc1
  400e34:	00402b1d 	.word	0x00402b1d

00400e38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  400e38:	b148      	cbz	r0, 400e4e <vPortFree+0x16>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  400e3a:	b510      	push	{r4, lr}
  400e3c:	4604      	mov	r4, r0
	if( pv )
	{
		vTaskSuspendAll();
  400e3e:	4b04      	ldr	r3, [pc, #16]	; (400e50 <vPortFree+0x18>)
  400e40:	4798      	blx	r3
		{
			free( pv );
  400e42:	4620      	mov	r0, r4
  400e44:	4b03      	ldr	r3, [pc, #12]	; (400e54 <vPortFree+0x1c>)
  400e46:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  400e48:	4b03      	ldr	r3, [pc, #12]	; (400e58 <vPortFree+0x20>)
  400e4a:	4798      	blx	r3
  400e4c:	bd10      	pop	{r4, pc}
  400e4e:	4770      	bx	lr
  400e50:	00401a51 	.word	0x00401a51
  400e54:	00402d25 	.word	0x00402d25
  400e58:	00401bc1 	.word	0x00401bc1

00400e5c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400e5c:	b538      	push	{r3, r4, r5, lr}
  400e5e:	4604      	mov	r4, r0
  400e60:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400e62:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400e64:	b942      	cbnz	r2, 400e78 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400e66:	6803      	ldr	r3, [r0, #0]
  400e68:	2b00      	cmp	r3, #0
  400e6a:	d12b      	bne.n	400ec4 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400e6c:	6840      	ldr	r0, [r0, #4]
  400e6e:	4b1b      	ldr	r3, [pc, #108]	; (400edc <prvCopyDataToQueue+0x80>)
  400e70:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400e72:	2300      	movs	r3, #0
  400e74:	6063      	str	r3, [r4, #4]
  400e76:	e02c      	b.n	400ed2 <prvCopyDataToQueue+0x76>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  400e78:	b96d      	cbnz	r5, 400e96 <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400e7a:	6880      	ldr	r0, [r0, #8]
  400e7c:	4b18      	ldr	r3, [pc, #96]	; (400ee0 <prvCopyDataToQueue+0x84>)
  400e7e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400e80:	68a2      	ldr	r2, [r4, #8]
  400e82:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400e84:	4413      	add	r3, r2
  400e86:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400e88:	6862      	ldr	r2, [r4, #4]
  400e8a:	4293      	cmp	r3, r2
  400e8c:	d31c      	bcc.n	400ec8 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400e8e:	6823      	ldr	r3, [r4, #0]
  400e90:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400e92:	2000      	movs	r0, #0
  400e94:	e01d      	b.n	400ed2 <prvCopyDataToQueue+0x76>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400e96:	68c0      	ldr	r0, [r0, #12]
  400e98:	4b11      	ldr	r3, [pc, #68]	; (400ee0 <prvCopyDataToQueue+0x84>)
  400e9a:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400e9e:	425b      	negs	r3, r3
  400ea0:	68e2      	ldr	r2, [r4, #12]
  400ea2:	441a      	add	r2, r3
  400ea4:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400ea6:	6821      	ldr	r1, [r4, #0]
  400ea8:	428a      	cmp	r2, r1
  400eaa:	d202      	bcs.n	400eb2 <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400eac:	6862      	ldr	r2, [r4, #4]
  400eae:	4413      	add	r3, r2
  400eb0:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  400eb2:	2d02      	cmp	r5, #2
  400eb4:	d10a      	bne.n	400ecc <prvCopyDataToQueue+0x70>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400eb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400eb8:	b153      	cbz	r3, 400ed0 <prvCopyDataToQueue+0x74>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  400eba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400ebc:	3b01      	subs	r3, #1
  400ebe:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400ec0:	2000      	movs	r0, #0
  400ec2:	e006      	b.n	400ed2 <prvCopyDataToQueue+0x76>
  400ec4:	2000      	movs	r0, #0
  400ec6:	e004      	b.n	400ed2 <prvCopyDataToQueue+0x76>
  400ec8:	2000      	movs	r0, #0
  400eca:	e002      	b.n	400ed2 <prvCopyDataToQueue+0x76>
  400ecc:	2000      	movs	r0, #0
  400ece:	e000      	b.n	400ed2 <prvCopyDataToQueue+0x76>
  400ed0:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400ed2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400ed4:	3301      	adds	r3, #1
  400ed6:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400ed8:	bd38      	pop	{r3, r4, r5, pc}
  400eda:	bf00      	nop
  400edc:	004022a5 	.word	0x004022a5
  400ee0:	004032a5 	.word	0x004032a5

00400ee4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400ee4:	b530      	push	{r4, r5, lr}
  400ee6:	b083      	sub	sp, #12
  400ee8:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400eea:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400eec:	b954      	cbnz	r4, 400f04 <prvNotifyQueueSetContainer+0x20>
  400eee:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ef2:	b672      	cpsid	i
  400ef4:	f383 8811 	msr	BASEPRI, r3
  400ef8:	f3bf 8f6f 	isb	sy
  400efc:	f3bf 8f4f 	dsb	sy
  400f00:	b662      	cpsie	i
  400f02:	e7fe      	b.n	400f02 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400f04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f08:	429a      	cmp	r2, r3
  400f0a:	d30a      	bcc.n	400f22 <prvNotifyQueueSetContainer+0x3e>
  400f0c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f10:	b672      	cpsid	i
  400f12:	f383 8811 	msr	BASEPRI, r3
  400f16:	f3bf 8f6f 	isb	sy
  400f1a:	f3bf 8f4f 	dsb	sy
  400f1e:	b662      	cpsie	i
  400f20:	e7fe      	b.n	400f20 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400f22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f24:	4293      	cmp	r3, r2
  400f26:	d917      	bls.n	400f58 <prvNotifyQueueSetContainer+0x74>
  400f28:	460a      	mov	r2, r1
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400f2a:	a901      	add	r1, sp, #4
  400f2c:	4620      	mov	r0, r4
  400f2e:	4b0c      	ldr	r3, [pc, #48]	; (400f60 <prvNotifyQueueSetContainer+0x7c>)
  400f30:	4798      	blx	r3
  400f32:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400f34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f36:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f3a:	d109      	bne.n	400f50 <prvNotifyQueueSetContainer+0x6c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400f3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400f3e:	b163      	cbz	r3, 400f5a <prvNotifyQueueSetContainer+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400f40:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f44:	4b07      	ldr	r3, [pc, #28]	; (400f64 <prvNotifyQueueSetContainer+0x80>)
  400f46:	4798      	blx	r3
  400f48:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  400f4a:	bf18      	it	ne
  400f4c:	2501      	movne	r5, #1
  400f4e:	e004      	b.n	400f5a <prvNotifyQueueSetContainer+0x76>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  400f50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f52:	3301      	adds	r3, #1
  400f54:	64a3      	str	r3, [r4, #72]	; 0x48
  400f56:	e000      	b.n	400f5a <prvNotifyQueueSetContainer+0x76>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  400f58:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400f5a:	4628      	mov	r0, r5
  400f5c:	b003      	add	sp, #12
  400f5e:	bd30      	pop	{r4, r5, pc}
  400f60:	00400e5d 	.word	0x00400e5d
  400f64:	00402075 	.word	0x00402075

00400f68 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400f68:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400f6a:	b172      	cbz	r2, 400f8a <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  400f6c:	b510      	push	{r4, lr}
  400f6e:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400f70:	68c4      	ldr	r4, [r0, #12]
  400f72:	4414      	add	r4, r2
  400f74:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400f76:	6840      	ldr	r0, [r0, #4]
  400f78:	4284      	cmp	r4, r0
  400f7a:	d301      	bcc.n	400f80 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400f7c:	6818      	ldr	r0, [r3, #0]
  400f7e:	60d8      	str	r0, [r3, #12]
  400f80:	4608      	mov	r0, r1
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400f82:	68d9      	ldr	r1, [r3, #12]
  400f84:	4b01      	ldr	r3, [pc, #4]	; (400f8c <prvCopyDataFromQueue+0x24>)
  400f86:	4798      	blx	r3
  400f88:	bd10      	pop	{r4, pc}
  400f8a:	4770      	bx	lr
  400f8c:	004032a5 	.word	0x004032a5

00400f90 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  400f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f92:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400f94:	4b20      	ldr	r3, [pc, #128]	; (401018 <prvUnlockQueue+0x88>)
  400f96:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400f98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f9a:	2b00      	cmp	r3, #0
  400f9c:	dd18      	ble.n	400fd0 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400f9e:	4d1f      	ldr	r5, [pc, #124]	; (40101c <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  400fa0:	4f1f      	ldr	r7, [pc, #124]	; (401020 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400fa2:	4e20      	ldr	r6, [pc, #128]	; (401024 <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  400fa4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400fa6:	b133      	cbz	r3, 400fb6 <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400fa8:	2100      	movs	r1, #0
  400faa:	4620      	mov	r0, r4
  400fac:	47a8      	blx	r5
  400fae:	2801      	cmp	r0, #1
  400fb0:	d108      	bne.n	400fc4 <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  400fb2:	47b8      	blx	r7
  400fb4:	e006      	b.n	400fc4 <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400fb8:	b153      	cbz	r3, 400fd0 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400fba:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fbe:	47b0      	blx	r6
  400fc0:	b100      	cbz	r0, 400fc4 <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  400fc2:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  400fc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fc6:	3b01      	subs	r3, #1
  400fc8:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400fca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fcc:	2b00      	cmp	r3, #0
  400fce:	dce9      	bgt.n	400fa4 <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400fd0:	f04f 33ff 	mov.w	r3, #4294967295
  400fd4:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400fd6:	4b14      	ldr	r3, [pc, #80]	; (401028 <prvUnlockQueue+0x98>)
  400fd8:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  400fda:	4b0f      	ldr	r3, [pc, #60]	; (401018 <prvUnlockQueue+0x88>)
  400fdc:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400fde:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400fe0:	2b00      	cmp	r3, #0
  400fe2:	dd13      	ble.n	40100c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400fe4:	6923      	ldr	r3, [r4, #16]
  400fe6:	b91b      	cbnz	r3, 400ff0 <prvUnlockQueue+0x60>
  400fe8:	e010      	b.n	40100c <prvUnlockQueue+0x7c>
  400fea:	6923      	ldr	r3, [r4, #16]
  400fec:	b923      	cbnz	r3, 400ff8 <prvUnlockQueue+0x68>
  400fee:	e00d      	b.n	40100c <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400ff0:	f104 0610 	add.w	r6, r4, #16
  400ff4:	4d0b      	ldr	r5, [pc, #44]	; (401024 <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  400ff6:	4f0a      	ldr	r7, [pc, #40]	; (401020 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400ff8:	4630      	mov	r0, r6
  400ffa:	47a8      	blx	r5
  400ffc:	b100      	cbz	r0, 401000 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  400ffe:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  401000:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401002:	3b01      	subs	r3, #1
  401004:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401006:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401008:	2b00      	cmp	r3, #0
  40100a:	dcee      	bgt.n	400fea <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  40100c:	f04f 33ff 	mov.w	r3, #4294967295
  401010:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  401012:	4b05      	ldr	r3, [pc, #20]	; (401028 <prvUnlockQueue+0x98>)
  401014:	4798      	blx	r3
  401016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401018:	00400bad 	.word	0x00400bad
  40101c:	00400ee5 	.word	0x00400ee5
  401020:	004021d1 	.word	0x004021d1
  401024:	00402075 	.word	0x00402075
  401028:	00400bf9 	.word	0x00400bf9

0040102c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  40102c:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  40102e:	b950      	cbnz	r0, 401046 <xQueueGenericReset+0x1a>
  401030:	f04f 0380 	mov.w	r3, #128	; 0x80
  401034:	b672      	cpsid	i
  401036:	f383 8811 	msr	BASEPRI, r3
  40103a:	f3bf 8f6f 	isb	sy
  40103e:	f3bf 8f4f 	dsb	sy
  401042:	b662      	cpsie	i
  401044:	e7fe      	b.n	401044 <xQueueGenericReset+0x18>
  401046:	4604      	mov	r4, r0
  401048:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  40104a:	4b18      	ldr	r3, [pc, #96]	; (4010ac <xQueueGenericReset+0x80>)
  40104c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40104e:	6822      	ldr	r2, [r4, #0]
  401050:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401052:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401054:	fb03 f301 	mul.w	r3, r3, r1
  401058:	18d0      	adds	r0, r2, r3
  40105a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  40105c:	2000      	movs	r0, #0
  40105e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401060:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401062:	1a5b      	subs	r3, r3, r1
  401064:	4413      	add	r3, r2
  401066:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401068:	f04f 33ff 	mov.w	r3, #4294967295
  40106c:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  40106e:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  401070:	b985      	cbnz	r5, 401094 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401072:	6923      	ldr	r3, [r4, #16]
  401074:	b1ab      	cbz	r3, 4010a2 <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401076:	f104 0010 	add.w	r0, r4, #16
  40107a:	4b0d      	ldr	r3, [pc, #52]	; (4010b0 <xQueueGenericReset+0x84>)
  40107c:	4798      	blx	r3
  40107e:	2801      	cmp	r0, #1
  401080:	d10f      	bne.n	4010a2 <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
  401082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401086:	4b0b      	ldr	r3, [pc, #44]	; (4010b4 <xQueueGenericReset+0x88>)
  401088:	601a      	str	r2, [r3, #0]
  40108a:	f3bf 8f4f 	dsb	sy
  40108e:	f3bf 8f6f 	isb	sy
  401092:	e006      	b.n	4010a2 <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401094:	f104 0010 	add.w	r0, r4, #16
  401098:	4d07      	ldr	r5, [pc, #28]	; (4010b8 <xQueueGenericReset+0x8c>)
  40109a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40109c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4010a0:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  4010a2:	4b06      	ldr	r3, [pc, #24]	; (4010bc <xQueueGenericReset+0x90>)
  4010a4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  4010a6:	2001      	movs	r0, #1
  4010a8:	bd38      	pop	{r3, r4, r5, pc}
  4010aa:	bf00      	nop
  4010ac:	00400bad 	.word	0x00400bad
  4010b0:	00402075 	.word	0x00402075
  4010b4:	e000ed04 	.word	0xe000ed04
  4010b8:	00400a61 	.word	0x00400a61
  4010bc:	00400bf9 	.word	0x00400bf9

004010c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  4010c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4010c2:	b950      	cbnz	r0, 4010da <xQueueGenericCreate+0x1a>
  4010c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010c8:	b672      	cpsid	i
  4010ca:	f383 8811 	msr	BASEPRI, r3
  4010ce:	f3bf 8f6f 	isb	sy
  4010d2:	f3bf 8f4f 	dsb	sy
  4010d6:	b662      	cpsie	i
  4010d8:	e7fe      	b.n	4010d8 <xQueueGenericCreate+0x18>
  4010da:	4606      	mov	r6, r0
  4010dc:	4617      	mov	r7, r2
  4010de:	460d      	mov	r5, r1

	if( uxItemSize == ( UBaseType_t ) 0 )
  4010e0:	b1c1      	cbz	r1, 401114 <xQueueGenericCreate+0x54>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4010e2:	fb01 f000 	mul.w	r0, r1, r0
  4010e6:	3059      	adds	r0, #89	; 0x59
  4010e8:	4b14      	ldr	r3, [pc, #80]	; (40113c <xQueueGenericCreate+0x7c>)
  4010ea:	4798      	blx	r3

	if( pxNewQueue != NULL )
  4010ec:	4604      	mov	r4, r0
  4010ee:	b910      	cbnz	r0, 4010f6 <xQueueGenericCreate+0x36>
  4010f0:	e005      	b.n	4010fe <xQueueGenericCreate+0x3e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4010f2:	6024      	str	r4, [r4, #0]
  4010f4:	e015      	b.n	401122 <xQueueGenericCreate+0x62>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4010f6:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4010fa:	6003      	str	r3, [r0, #0]
  4010fc:	e011      	b.n	401122 <xQueueGenericCreate+0x62>
  4010fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401102:	b672      	cpsid	i
  401104:	f383 8811 	msr	BASEPRI, r3
  401108:	f3bf 8f6f 	isb	sy
  40110c:	f3bf 8f4f 	dsb	sy
  401110:	b662      	cpsie	i
  401112:	e7fe      	b.n	401112 <xQueueGenericCreate+0x52>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401114:	2058      	movs	r0, #88	; 0x58
  401116:	4b09      	ldr	r3, [pc, #36]	; (40113c <xQueueGenericCreate+0x7c>)
  401118:	4798      	blx	r3

	if( pxNewQueue != NULL )
  40111a:	4604      	mov	r4, r0
  40111c:	2800      	cmp	r0, #0
  40111e:	d1e8      	bne.n	4010f2 <xQueueGenericCreate+0x32>
  401120:	e7ed      	b.n	4010fe <xQueueGenericCreate+0x3e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  401122:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401124:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401126:	2101      	movs	r1, #1
  401128:	4620      	mov	r0, r4
  40112a:	4b05      	ldr	r3, [pc, #20]	; (401140 <xQueueGenericCreate+0x80>)
  40112c:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  40112e:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  401132:	2300      	movs	r3, #0
  401134:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  401136:	4620      	mov	r0, r4
  401138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40113a:	bf00      	nop
  40113c:	00400e09 	.word	0x00400e09
  401140:	0040102d 	.word	0x0040102d

00401144 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  401144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401148:	b085      	sub	sp, #20
  40114a:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  40114c:	b950      	cbnz	r0, 401164 <xQueueGenericSend+0x20>
  40114e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401152:	b672      	cpsid	i
  401154:	f383 8811 	msr	BASEPRI, r3
  401158:	f3bf 8f6f 	isb	sy
  40115c:	f3bf 8f4f 	dsb	sy
  401160:	b662      	cpsie	i
  401162:	e7fe      	b.n	401162 <xQueueGenericSend+0x1e>
  401164:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401166:	b961      	cbnz	r1, 401182 <xQueueGenericSend+0x3e>
  401168:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40116a:	b152      	cbz	r2, 401182 <xQueueGenericSend+0x3e>
  40116c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401170:	b672      	cpsid	i
  401172:	f383 8811 	msr	BASEPRI, r3
  401176:	f3bf 8f6f 	isb	sy
  40117a:	f3bf 8f4f 	dsb	sy
  40117e:	b662      	cpsie	i
  401180:	e7fe      	b.n	401180 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401182:	2b02      	cmp	r3, #2
  401184:	d10d      	bne.n	4011a2 <xQueueGenericSend+0x5e>
  401186:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401188:	2a01      	cmp	r2, #1
  40118a:	d00a      	beq.n	4011a2 <xQueueGenericSend+0x5e>
  40118c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401190:	b672      	cpsid	i
  401192:	f383 8811 	msr	BASEPRI, r3
  401196:	f3bf 8f6f 	isb	sy
  40119a:	f3bf 8f4f 	dsb	sy
  40119e:	b662      	cpsie	i
  4011a0:	e7fe      	b.n	4011a0 <xQueueGenericSend+0x5c>
  4011a2:	461d      	mov	r5, r3
  4011a4:	9100      	str	r1, [sp, #0]
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4011a6:	4b51      	ldr	r3, [pc, #324]	; (4012ec <xQueueGenericSend+0x1a8>)
  4011a8:	4798      	blx	r3
  4011aa:	b960      	cbnz	r0, 4011c6 <xQueueGenericSend+0x82>
  4011ac:	9b01      	ldr	r3, [sp, #4]
  4011ae:	b163      	cbz	r3, 4011ca <xQueueGenericSend+0x86>
  4011b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011b4:	b672      	cpsid	i
  4011b6:	f383 8811 	msr	BASEPRI, r3
  4011ba:	f3bf 8f6f 	isb	sy
  4011be:	f3bf 8f4f 	dsb	sy
  4011c2:	b662      	cpsie	i
  4011c4:	e7fe      	b.n	4011c4 <xQueueGenericSend+0x80>
  4011c6:	2700      	movs	r7, #0
  4011c8:	e000      	b.n	4011cc <xQueueGenericSend+0x88>
  4011ca:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  4011cc:	4e48      	ldr	r6, [pc, #288]	; (4012f0 <xQueueGenericSend+0x1ac>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4011ce:	f8df 914c 	ldr.w	r9, [pc, #332]	; 40131c <xQueueGenericSend+0x1d8>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  4011d2:	f8df 8128 	ldr.w	r8, [pc, #296]	; 4012fc <xQueueGenericSend+0x1b8>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  4011d6:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4011d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4011da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4011dc:	429a      	cmp	r2, r3
  4011de:	d301      	bcc.n	4011e4 <xQueueGenericSend+0xa0>
  4011e0:	2d02      	cmp	r5, #2
  4011e2:	d133      	bne.n	40124c <xQueueGenericSend+0x108>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4011e4:	462a      	mov	r2, r5
  4011e6:	9900      	ldr	r1, [sp, #0]
  4011e8:	4620      	mov	r0, r4
  4011ea:	4b42      	ldr	r3, [pc, #264]	; (4012f4 <xQueueGenericSend+0x1b0>)
  4011ec:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  4011ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4011f0:	b173      	cbz	r3, 401210 <xQueueGenericSend+0xcc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4011f2:	4629      	mov	r1, r5
  4011f4:	4620      	mov	r0, r4
  4011f6:	4b40      	ldr	r3, [pc, #256]	; (4012f8 <xQueueGenericSend+0x1b4>)
  4011f8:	4798      	blx	r3
  4011fa:	2801      	cmp	r0, #1
  4011fc:	d122      	bne.n	401244 <xQueueGenericSend+0x100>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  4011fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401202:	4b3e      	ldr	r3, [pc, #248]	; (4012fc <xQueueGenericSend+0x1b8>)
  401204:	601a      	str	r2, [r3, #0]
  401206:	f3bf 8f4f 	dsb	sy
  40120a:	f3bf 8f6f 	isb	sy
  40120e:	e019      	b.n	401244 <xQueueGenericSend+0x100>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401210:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401212:	b173      	cbz	r3, 401232 <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401214:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401218:	4b39      	ldr	r3, [pc, #228]	; (401300 <xQueueGenericSend+0x1bc>)
  40121a:	4798      	blx	r3
  40121c:	2801      	cmp	r0, #1
  40121e:	d111      	bne.n	401244 <xQueueGenericSend+0x100>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  401220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401224:	4b35      	ldr	r3, [pc, #212]	; (4012fc <xQueueGenericSend+0x1b8>)
  401226:	601a      	str	r2, [r3, #0]
  401228:	f3bf 8f4f 	dsb	sy
  40122c:	f3bf 8f6f 	isb	sy
  401230:	e008      	b.n	401244 <xQueueGenericSend+0x100>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  401232:	b138      	cbz	r0, 401244 <xQueueGenericSend+0x100>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  401234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401238:	4b30      	ldr	r3, [pc, #192]	; (4012fc <xQueueGenericSend+0x1b8>)
  40123a:	601a      	str	r2, [r3, #0]
  40123c:	f3bf 8f4f 	dsb	sy
  401240:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  401244:	4b2f      	ldr	r3, [pc, #188]	; (401304 <xQueueGenericSend+0x1c0>)
  401246:	4798      	blx	r3
				return pdPASS;
  401248:	2001      	movs	r0, #1
  40124a:	e04b      	b.n	4012e4 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  40124c:	9b01      	ldr	r3, [sp, #4]
  40124e:	b91b      	cbnz	r3, 401258 <xQueueGenericSend+0x114>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401250:	4b2c      	ldr	r3, [pc, #176]	; (401304 <xQueueGenericSend+0x1c0>)
  401252:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  401254:	2000      	movs	r0, #0
  401256:	e045      	b.n	4012e4 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
  401258:	b917      	cbnz	r7, 401260 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40125a:	a802      	add	r0, sp, #8
  40125c:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  40125e:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401260:	4b28      	ldr	r3, [pc, #160]	; (401304 <xQueueGenericSend+0x1c0>)
  401262:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401264:	4b28      	ldr	r3, [pc, #160]	; (401308 <xQueueGenericSend+0x1c4>)
  401266:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401268:	47b0      	blx	r6
  40126a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40126c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401270:	d101      	bne.n	401276 <xQueueGenericSend+0x132>
  401272:	2300      	movs	r3, #0
  401274:	6463      	str	r3, [r4, #68]	; 0x44
  401276:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401278:	f1b3 3fff 	cmp.w	r3, #4294967295
  40127c:	d101      	bne.n	401282 <xQueueGenericSend+0x13e>
  40127e:	2300      	movs	r3, #0
  401280:	64a3      	str	r3, [r4, #72]	; 0x48
  401282:	4b20      	ldr	r3, [pc, #128]	; (401304 <xQueueGenericSend+0x1c0>)
  401284:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401286:	a901      	add	r1, sp, #4
  401288:	a802      	add	r0, sp, #8
  40128a:	4b20      	ldr	r3, [pc, #128]	; (40130c <xQueueGenericSend+0x1c8>)
  40128c:	4798      	blx	r3
  40128e:	bb18      	cbnz	r0, 4012d8 <xQueueGenericSend+0x194>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401290:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401292:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401296:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  40129a:	4b1a      	ldr	r3, [pc, #104]	; (401304 <xQueueGenericSend+0x1c0>)
  40129c:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40129e:	45d3      	cmp	fp, sl
  4012a0:	d114      	bne.n	4012cc <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4012a2:	9901      	ldr	r1, [sp, #4]
  4012a4:	f104 0010 	add.w	r0, r4, #16
  4012a8:	4b19      	ldr	r3, [pc, #100]	; (401310 <xQueueGenericSend+0x1cc>)
  4012aa:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  4012ac:	4620      	mov	r0, r4
  4012ae:	4b19      	ldr	r3, [pc, #100]	; (401314 <xQueueGenericSend+0x1d0>)
  4012b0:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  4012b2:	4b19      	ldr	r3, [pc, #100]	; (401318 <xQueueGenericSend+0x1d4>)
  4012b4:	4798      	blx	r3
  4012b6:	2800      	cmp	r0, #0
  4012b8:	d18d      	bne.n	4011d6 <xQueueGenericSend+0x92>
				{
					portYIELD_WITHIN_API();
  4012ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4012be:	f8c8 3000 	str.w	r3, [r8]
  4012c2:	f3bf 8f4f 	dsb	sy
  4012c6:	f3bf 8f6f 	isb	sy
  4012ca:	e784      	b.n	4011d6 <xQueueGenericSend+0x92>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4012cc:	4620      	mov	r0, r4
  4012ce:	4b11      	ldr	r3, [pc, #68]	; (401314 <xQueueGenericSend+0x1d0>)
  4012d0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4012d2:	4b11      	ldr	r3, [pc, #68]	; (401318 <xQueueGenericSend+0x1d4>)
  4012d4:	4798      	blx	r3
  4012d6:	e77e      	b.n	4011d6 <xQueueGenericSend+0x92>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  4012d8:	4620      	mov	r0, r4
  4012da:	4b0e      	ldr	r3, [pc, #56]	; (401314 <xQueueGenericSend+0x1d0>)
  4012dc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4012de:	4b0e      	ldr	r3, [pc, #56]	; (401318 <xQueueGenericSend+0x1d4>)
  4012e0:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  4012e2:	2000      	movs	r0, #0
		}
	}
}
  4012e4:	b005      	add	sp, #20
  4012e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4012ea:	bf00      	nop
  4012ec:	004021dd 	.word	0x004021dd
  4012f0:	00400bad 	.word	0x00400bad
  4012f4:	00400e5d 	.word	0x00400e5d
  4012f8:	00400ee5 	.word	0x00400ee5
  4012fc:	e000ed04 	.word	0xe000ed04
  401300:	00402075 	.word	0x00402075
  401304:	00400bf9 	.word	0x00400bf9
  401308:	00401a51 	.word	0x00401a51
  40130c:	0040213d 	.word	0x0040213d
  401310:	00401f71 	.word	0x00401f71
  401314:	00400f91 	.word	0x00400f91
  401318:	00401bc1 	.word	0x00401bc1
  40131c:	0040210d 	.word	0x0040210d

00401320 <xQueueGenericSendFromISR>:
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401320:	b950      	cbnz	r0, 401338 <xQueueGenericSendFromISR+0x18>
  401322:	f04f 0380 	mov.w	r3, #128	; 0x80
  401326:	b672      	cpsid	i
  401328:	f383 8811 	msr	BASEPRI, r3
  40132c:	f3bf 8f6f 	isb	sy
  401330:	f3bf 8f4f 	dsb	sy
  401334:	b662      	cpsie	i
  401336:	e7fe      	b.n	401336 <xQueueGenericSendFromISR+0x16>

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  401338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40133c:	4604      	mov	r4, r0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40133e:	b961      	cbnz	r1, 40135a <xQueueGenericSendFromISR+0x3a>
  401340:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401342:	b150      	cbz	r0, 40135a <xQueueGenericSendFromISR+0x3a>
  401344:	f04f 0380 	mov.w	r3, #128	; 0x80
  401348:	b672      	cpsid	i
  40134a:	f383 8811 	msr	BASEPRI, r3
  40134e:	f3bf 8f6f 	isb	sy
  401352:	f3bf 8f4f 	dsb	sy
  401356:	b662      	cpsie	i
  401358:	e7fe      	b.n	401358 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40135a:	2b02      	cmp	r3, #2
  40135c:	d10d      	bne.n	40137a <xQueueGenericSendFromISR+0x5a>
  40135e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401360:	2801      	cmp	r0, #1
  401362:	d00a      	beq.n	40137a <xQueueGenericSendFromISR+0x5a>
  401364:	f04f 0380 	mov.w	r3, #128	; 0x80
  401368:	b672      	cpsid	i
  40136a:	f383 8811 	msr	BASEPRI, r3
  40136e:	f3bf 8f6f 	isb	sy
  401372:	f3bf 8f4f 	dsb	sy
  401376:	b662      	cpsie	i
  401378:	e7fe      	b.n	401378 <xQueueGenericSendFromISR+0x58>
  40137a:	461e      	mov	r6, r3
  40137c:	4615      	mov	r5, r2
  40137e:	4688      	mov	r8, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401380:	4b21      	ldr	r3, [pc, #132]	; (401408 <xQueueGenericSendFromISR+0xe8>)
  401382:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  401384:	f3ef 8711 	mrs	r7, BASEPRI
  401388:	f04f 0380 	mov.w	r3, #128	; 0x80
  40138c:	b672      	cpsid	i
  40138e:	f383 8811 	msr	BASEPRI, r3
  401392:	f3bf 8f6f 	isb	sy
  401396:	f3bf 8f4f 	dsb	sy
  40139a:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40139c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40139e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4013a0:	429a      	cmp	r2, r3
  4013a2:	d301      	bcc.n	4013a8 <xQueueGenericSendFromISR+0x88>
  4013a4:	2e02      	cmp	r6, #2
  4013a6:	d123      	bne.n	4013f0 <xQueueGenericSendFromISR+0xd0>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4013a8:	4632      	mov	r2, r6
  4013aa:	4641      	mov	r1, r8
  4013ac:	4620      	mov	r0, r4
  4013ae:	4b17      	ldr	r3, [pc, #92]	; (40140c <xQueueGenericSendFromISR+0xec>)
  4013b0:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  4013b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4013b4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4013b8:	d115      	bne.n	4013e6 <xQueueGenericSendFromISR+0xc6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  4013ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4013bc:	b143      	cbz	r3, 4013d0 <xQueueGenericSendFromISR+0xb0>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4013be:	4631      	mov	r1, r6
  4013c0:	4620      	mov	r0, r4
  4013c2:	4b13      	ldr	r3, [pc, #76]	; (401410 <xQueueGenericSendFromISR+0xf0>)
  4013c4:	4798      	blx	r3
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  4013c6:	b1ad      	cbz	r5, 4013f4 <xQueueGenericSendFromISR+0xd4>
  4013c8:	2801      	cmp	r0, #1
  4013ca:	d113      	bne.n	4013f4 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  4013cc:	6028      	str	r0, [r5, #0]
  4013ce:	e016      	b.n	4013fe <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4013d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4013d2:	b18b      	cbz	r3, 4013f8 <xQueueGenericSendFromISR+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4013d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4013d8:	4b0e      	ldr	r3, [pc, #56]	; (401414 <xQueueGenericSendFromISR+0xf4>)
  4013da:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  4013dc:	b175      	cbz	r5, 4013fc <xQueueGenericSendFromISR+0xdc>
  4013de:	b168      	cbz	r0, 4013fc <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  4013e0:	2001      	movs	r0, #1
  4013e2:	6028      	str	r0, [r5, #0]
  4013e4:	e00b      	b.n	4013fe <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  4013e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4013e8:	3301      	adds	r3, #1
  4013ea:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  4013ec:	2001      	movs	r0, #1
  4013ee:	e006      	b.n	4013fe <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  4013f0:	2000      	movs	r0, #0
  4013f2:	e004      	b.n	4013fe <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  4013f4:	2001      	movs	r0, #1
  4013f6:	e002      	b.n	4013fe <xQueueGenericSendFromISR+0xde>
  4013f8:	2001      	movs	r0, #1
  4013fa:	e000      	b.n	4013fe <xQueueGenericSendFromISR+0xde>
  4013fc:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4013fe:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  401402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401406:	bf00      	nop
  401408:	00400da5 	.word	0x00400da5
  40140c:	00400e5d 	.word	0x00400e5d
  401410:	00400ee5 	.word	0x00400ee5
  401414:	00402075 	.word	0x00402075

00401418 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  401418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40141c:	b085      	sub	sp, #20
  40141e:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401420:	b950      	cbnz	r0, 401438 <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401422:	f04f 0380 	mov.w	r3, #128	; 0x80
  401426:	b672      	cpsid	i
  401428:	f383 8811 	msr	BASEPRI, r3
  40142c:	f3bf 8f6f 	isb	sy
  401430:	f3bf 8f4f 	dsb	sy
  401434:	b662      	cpsie	i
  401436:	e7fe      	b.n	401436 <xQueueGenericReceive+0x1e>
  401438:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40143a:	b961      	cbnz	r1, 401456 <xQueueGenericReceive+0x3e>
  40143c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40143e:	b152      	cbz	r2, 401456 <xQueueGenericReceive+0x3e>
  401440:	f04f 0380 	mov.w	r3, #128	; 0x80
  401444:	b672      	cpsid	i
  401446:	f383 8811 	msr	BASEPRI, r3
  40144a:	f3bf 8f6f 	isb	sy
  40144e:	f3bf 8f4f 	dsb	sy
  401452:	b662      	cpsie	i
  401454:	e7fe      	b.n	401454 <xQueueGenericReceive+0x3c>
  401456:	4698      	mov	r8, r3
  401458:	468b      	mov	fp, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40145a:	4b52      	ldr	r3, [pc, #328]	; (4015a4 <xQueueGenericReceive+0x18c>)
  40145c:	4798      	blx	r3
  40145e:	b960      	cbnz	r0, 40147a <xQueueGenericReceive+0x62>
  401460:	9b01      	ldr	r3, [sp, #4]
  401462:	b163      	cbz	r3, 40147e <xQueueGenericReceive+0x66>
  401464:	f04f 0380 	mov.w	r3, #128	; 0x80
  401468:	b672      	cpsid	i
  40146a:	f383 8811 	msr	BASEPRI, r3
  40146e:	f3bf 8f6f 	isb	sy
  401472:	f3bf 8f4f 	dsb	sy
  401476:	b662      	cpsie	i
  401478:	e7fe      	b.n	401478 <xQueueGenericReceive+0x60>
  40147a:	2600      	movs	r6, #0
  40147c:	e000      	b.n	401480 <xQueueGenericReceive+0x68>
  40147e:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401480:	4d49      	ldr	r5, [pc, #292]	; (4015a8 <xQueueGenericReceive+0x190>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401482:	f8df a154 	ldr.w	sl, [pc, #340]	; 4015d8 <xQueueGenericReceive+0x1c0>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  401486:	f8df 9130 	ldr.w	r9, [pc, #304]	; 4015b8 <xQueueGenericReceive+0x1a0>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  40148a:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40148c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40148e:	2b00      	cmp	r3, #0
  401490:	d034      	beq.n	4014fc <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401492:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401494:	4659      	mov	r1, fp
  401496:	4620      	mov	r0, r4
  401498:	4b44      	ldr	r3, [pc, #272]	; (4015ac <xQueueGenericReceive+0x194>)
  40149a:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  40149c:	f1b8 0f00 	cmp.w	r8, #0
  4014a0:	d118      	bne.n	4014d4 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  4014a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4014a4:	3b01      	subs	r3, #1
  4014a6:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4014a8:	6823      	ldr	r3, [r4, #0]
  4014aa:	b913      	cbnz	r3, 4014b2 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4014ac:	4b40      	ldr	r3, [pc, #256]	; (4015b0 <xQueueGenericReceive+0x198>)
  4014ae:	4798      	blx	r3
  4014b0:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4014b2:	6923      	ldr	r3, [r4, #16]
  4014b4:	b1f3      	cbz	r3, 4014f4 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4014b6:	f104 0010 	add.w	r0, r4, #16
  4014ba:	4b3e      	ldr	r3, [pc, #248]	; (4015b4 <xQueueGenericReceive+0x19c>)
  4014bc:	4798      	blx	r3
  4014be:	2801      	cmp	r0, #1
  4014c0:	d118      	bne.n	4014f4 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
  4014c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4014c6:	4b3c      	ldr	r3, [pc, #240]	; (4015b8 <xQueueGenericReceive+0x1a0>)
  4014c8:	601a      	str	r2, [r3, #0]
  4014ca:	f3bf 8f4f 	dsb	sy
  4014ce:	f3bf 8f6f 	isb	sy
  4014d2:	e00f      	b.n	4014f4 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4014d4:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4014d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014d8:	b163      	cbz	r3, 4014f4 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4014da:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014de:	4b35      	ldr	r3, [pc, #212]	; (4015b4 <xQueueGenericReceive+0x19c>)
  4014e0:	4798      	blx	r3
  4014e2:	b138      	cbz	r0, 4014f4 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  4014e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4014e8:	4b33      	ldr	r3, [pc, #204]	; (4015b8 <xQueueGenericReceive+0x1a0>)
  4014ea:	601a      	str	r2, [r3, #0]
  4014ec:	f3bf 8f4f 	dsb	sy
  4014f0:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  4014f4:	4b31      	ldr	r3, [pc, #196]	; (4015bc <xQueueGenericReceive+0x1a4>)
  4014f6:	4798      	blx	r3
				return pdPASS;
  4014f8:	2001      	movs	r0, #1
  4014fa:	e04f      	b.n	40159c <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  4014fc:	9b01      	ldr	r3, [sp, #4]
  4014fe:	b91b      	cbnz	r3, 401508 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401500:	4b2e      	ldr	r3, [pc, #184]	; (4015bc <xQueueGenericReceive+0x1a4>)
  401502:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  401504:	2000      	movs	r0, #0
  401506:	e049      	b.n	40159c <xQueueGenericReceive+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
  401508:	b916      	cbnz	r6, 401510 <xQueueGenericReceive+0xf8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40150a:	a802      	add	r0, sp, #8
  40150c:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  40150e:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401510:	4b2a      	ldr	r3, [pc, #168]	; (4015bc <xQueueGenericReceive+0x1a4>)
  401512:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401514:	4b2a      	ldr	r3, [pc, #168]	; (4015c0 <xQueueGenericReceive+0x1a8>)
  401516:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401518:	47a8      	blx	r5
  40151a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40151c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401520:	d101      	bne.n	401526 <xQueueGenericReceive+0x10e>
  401522:	2300      	movs	r3, #0
  401524:	6463      	str	r3, [r4, #68]	; 0x44
  401526:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401528:	f1b3 3fff 	cmp.w	r3, #4294967295
  40152c:	d101      	bne.n	401532 <xQueueGenericReceive+0x11a>
  40152e:	2300      	movs	r3, #0
  401530:	64a3      	str	r3, [r4, #72]	; 0x48
  401532:	4b22      	ldr	r3, [pc, #136]	; (4015bc <xQueueGenericReceive+0x1a4>)
  401534:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401536:	a901      	add	r1, sp, #4
  401538:	a802      	add	r0, sp, #8
  40153a:	4b22      	ldr	r3, [pc, #136]	; (4015c4 <xQueueGenericReceive+0x1ac>)
  40153c:	4798      	blx	r3
  40153e:	bb38      	cbnz	r0, 401590 <xQueueGenericReceive+0x178>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401540:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401542:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  401544:	4b1d      	ldr	r3, [pc, #116]	; (4015bc <xQueueGenericReceive+0x1a4>)
  401546:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401548:	b9e7      	cbnz	r7, 401584 <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40154a:	6823      	ldr	r3, [r4, #0]
  40154c:	b92b      	cbnz	r3, 40155a <xQueueGenericReceive+0x142>
					{
						taskENTER_CRITICAL();
  40154e:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401550:	6860      	ldr	r0, [r4, #4]
  401552:	4b1d      	ldr	r3, [pc, #116]	; (4015c8 <xQueueGenericReceive+0x1b0>)
  401554:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  401556:	4b19      	ldr	r3, [pc, #100]	; (4015bc <xQueueGenericReceive+0x1a4>)
  401558:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40155a:	9901      	ldr	r1, [sp, #4]
  40155c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401560:	4b1a      	ldr	r3, [pc, #104]	; (4015cc <xQueueGenericReceive+0x1b4>)
  401562:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401564:	4620      	mov	r0, r4
  401566:	4b1a      	ldr	r3, [pc, #104]	; (4015d0 <xQueueGenericReceive+0x1b8>)
  401568:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40156a:	4b1a      	ldr	r3, [pc, #104]	; (4015d4 <xQueueGenericReceive+0x1bc>)
  40156c:	4798      	blx	r3
  40156e:	2800      	cmp	r0, #0
  401570:	d18b      	bne.n	40148a <xQueueGenericReceive+0x72>
				{
					portYIELD_WITHIN_API();
  401572:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401576:	f8c9 3000 	str.w	r3, [r9]
  40157a:	f3bf 8f4f 	dsb	sy
  40157e:	f3bf 8f6f 	isb	sy
  401582:	e782      	b.n	40148a <xQueueGenericReceive+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401584:	4620      	mov	r0, r4
  401586:	4b12      	ldr	r3, [pc, #72]	; (4015d0 <xQueueGenericReceive+0x1b8>)
  401588:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40158a:	4b12      	ldr	r3, [pc, #72]	; (4015d4 <xQueueGenericReceive+0x1bc>)
  40158c:	4798      	blx	r3
  40158e:	e77c      	b.n	40148a <xQueueGenericReceive+0x72>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  401590:	4620      	mov	r0, r4
  401592:	4b0f      	ldr	r3, [pc, #60]	; (4015d0 <xQueueGenericReceive+0x1b8>)
  401594:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401596:	4b0f      	ldr	r3, [pc, #60]	; (4015d4 <xQueueGenericReceive+0x1bc>)
  401598:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  40159a:	2000      	movs	r0, #0
		}
	}
}
  40159c:	b005      	add	sp, #20
  40159e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015a2:	bf00      	nop
  4015a4:	004021dd 	.word	0x004021dd
  4015a8:	00400bad 	.word	0x00400bad
  4015ac:	00400f69 	.word	0x00400f69
  4015b0:	00402465 	.word	0x00402465
  4015b4:	00402075 	.word	0x00402075
  4015b8:	e000ed04 	.word	0xe000ed04
  4015bc:	00400bf9 	.word	0x00400bf9
  4015c0:	00401a51 	.word	0x00401a51
  4015c4:	0040213d 	.word	0x0040213d
  4015c8:	004021fd 	.word	0x004021fd
  4015cc:	00401f71 	.word	0x00401f71
  4015d0:	00400f91 	.word	0x00400f91
  4015d4:	00401bc1 	.word	0x00401bc1
  4015d8:	0040210d 	.word	0x0040210d

004015dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  4015dc:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4015de:	4b0b      	ldr	r3, [pc, #44]	; (40160c <vQueueAddToRegistry+0x30>)
  4015e0:	681b      	ldr	r3, [r3, #0]
  4015e2:	b12b      	cbz	r3, 4015f0 <vQueueAddToRegistry+0x14>
  4015e4:	2301      	movs	r3, #1
  4015e6:	4c09      	ldr	r4, [pc, #36]	; (40160c <vQueueAddToRegistry+0x30>)
  4015e8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4015ec:	b942      	cbnz	r2, 401600 <vQueueAddToRegistry+0x24>
  4015ee:	e000      	b.n	4015f2 <vQueueAddToRegistry+0x16>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4015f0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4015f2:	4a06      	ldr	r2, [pc, #24]	; (40160c <vQueueAddToRegistry+0x30>)
  4015f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4015f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4015fc:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  4015fe:	e002      	b.n	401606 <vQueueAddToRegistry+0x2a>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401600:	3301      	adds	r3, #1
  401602:	2b08      	cmp	r3, #8
  401604:	d1f0      	bne.n	4015e8 <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  401606:	f85d 4b04 	ldr.w	r4, [sp], #4
  40160a:	4770      	bx	lr
  40160c:	20400bc0 	.word	0x20400bc0

00401610 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401610:	b570      	push	{r4, r5, r6, lr}
  401612:	4604      	mov	r4, r0
  401614:	460d      	mov	r5, r1
  401616:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  401618:	4b0d      	ldr	r3, [pc, #52]	; (401650 <vQueueWaitForMessageRestricted+0x40>)
  40161a:	4798      	blx	r3
  40161c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40161e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401622:	d101      	bne.n	401628 <vQueueWaitForMessageRestricted+0x18>
  401624:	2300      	movs	r3, #0
  401626:	6463      	str	r3, [r4, #68]	; 0x44
  401628:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40162a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40162e:	d101      	bne.n	401634 <vQueueWaitForMessageRestricted+0x24>
  401630:	2300      	movs	r3, #0
  401632:	64a3      	str	r3, [r4, #72]	; 0x48
  401634:	4b07      	ldr	r3, [pc, #28]	; (401654 <vQueueWaitForMessageRestricted+0x44>)
  401636:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401638:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40163a:	b92b      	cbnz	r3, 401648 <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  40163c:	4632      	mov	r2, r6
  40163e:	4629      	mov	r1, r5
  401640:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401644:	4b04      	ldr	r3, [pc, #16]	; (401658 <vQueueWaitForMessageRestricted+0x48>)
  401646:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  401648:	4620      	mov	r0, r4
  40164a:	4b04      	ldr	r3, [pc, #16]	; (40165c <vQueueWaitForMessageRestricted+0x4c>)
  40164c:	4798      	blx	r3
  40164e:	bd70      	pop	{r4, r5, r6, pc}
  401650:	00400bad 	.word	0x00400bad
  401654:	00400bf9 	.word	0x00400bf9
  401658:	00401ff5 	.word	0x00401ff5
  40165c:	00400f91 	.word	0x00400f91

00401660 <prvListTaskWithinSingleList>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
  401660:	680b      	ldr	r3, [r1, #0]
  401662:	2b00      	cmp	r3, #0
  401664:	d054      	beq.n	401710 <prvListTaskWithinSingleList+0xb0>
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
  401666:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  40166a:	684b      	ldr	r3, [r1, #4]
  40166c:	685b      	ldr	r3, [r3, #4]
  40166e:	604b      	str	r3, [r1, #4]
  401670:	f101 0e08 	add.w	lr, r1, #8
  401674:	4573      	cmp	r3, lr
  401676:	d101      	bne.n	40167c <prvListTaskWithinSingleList+0x1c>
  401678:	685b      	ldr	r3, [r3, #4]
  40167a:	604b      	str	r3, [r1, #4]
  40167c:	684b      	ldr	r3, [r1, #4]
  40167e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401682:	f100 061c 	add.w	r6, r0, #28
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
  401686:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
  401688:	f04f 0802 	mov.w	r8, #2
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
  40168c:	4607      	mov	r7, r0
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  40168e:	684b      	ldr	r3, [r1, #4]
  401690:	685b      	ldr	r3, [r3, #4]
  401692:	604b      	str	r3, [r1, #4]
  401694:	459e      	cmp	lr, r3
  401696:	d101      	bne.n	40169c <prvListTaskWithinSingleList+0x3c>
  401698:	68cb      	ldr	r3, [r1, #12]
  40169a:	604b      	str	r3, [r1, #4]
  40169c:	684b      	ldr	r3, [r1, #4]
  40169e:	f8d3 900c 	ldr.w	r9, [r3, #12]
  4016a2:	46b2      	mov	sl, r6

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
  4016a4:	f846 9c1c 	str.w	r9, [r6, #-28]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
  4016a8:	f109 0334 	add.w	r3, r9, #52	; 0x34
  4016ac:	f846 3c18 	str.w	r3, [r6, #-24]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
  4016b0:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
  4016b4:	f846 3c14 	str.w	r3, [r6, #-20]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
  4016b8:	f806 2c10 	strb.w	r2, [r6, #-16]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
  4016bc:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
  4016c0:	f846 3c0c 	str.w	r3, [r6, #-12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a chance
					it is actually just blocked indefinitely - so really it should
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
  4016c4:	2a03      	cmp	r2, #3
  4016c6:	d104      	bne.n	4016d2 <prvListTaskWithinSingleList+0x72>
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
  4016c8:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
  4016cc:	b10b      	cbz	r3, 4016d2 <prvListTaskWithinSingleList+0x72>
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
  4016ce:	f806 8c10 	strb.w	r8, [r6, #-16]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
  4016d2:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
  4016d6:	f84a 3c08 	str.w	r3, [sl, #-8]
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
  4016da:	f84a 7c04 	str.w	r7, [sl, #-4]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
  4016de:	f8d9 b030 	ldr.w	fp, [r9, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  4016e2:	f89b 3000 	ldrb.w	r3, [fp]
  4016e6:	2ba5      	cmp	r3, #165	; 0xa5
  4016e8:	d108      	bne.n	4016fc <prvListTaskWithinSingleList+0x9c>
  4016ea:	f10b 0301 	add.w	r3, fp, #1
  4016ee:	ebcb 0503 	rsb	r5, fp, r3
  4016f2:	f813 4b01 	ldrb.w	r4, [r3], #1
  4016f6:	2ca5      	cmp	r4, #165	; 0xa5
  4016f8:	d0f9      	beq.n	4016ee <prvListTaskWithinSingleList+0x8e>
  4016fa:	e000      	b.n	4016fe <prvListTaskWithinSingleList+0x9e>

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
  4016fc:	463d      	mov	r5, r7
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
  4016fe:	08ad      	lsrs	r5, r5, #2
  401700:	f8aa 5000 	strh.w	r5, [sl]
				}
				#endif

				uxTask++;
  401704:	3001      	adds	r0, #1
  401706:	3620      	adds	r6, #32

			} while( pxNextTCB != pxFirstTCB );
  401708:	45cc      	cmp	ip, r9
  40170a:	d1c0      	bne.n	40168e <prvListTaskWithinSingleList+0x2e>
  40170c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
  401710:	2000      	movs	r0, #0
  401712:	4770      	bx	lr

00401714 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401714:	4b08      	ldr	r3, [pc, #32]	; (401738 <prvResetNextTaskUnblockTime+0x24>)
  401716:	681b      	ldr	r3, [r3, #0]
  401718:	681b      	ldr	r3, [r3, #0]
  40171a:	b923      	cbnz	r3, 401726 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  40171c:	f04f 32ff 	mov.w	r2, #4294967295
  401720:	4b06      	ldr	r3, [pc, #24]	; (40173c <prvResetNextTaskUnblockTime+0x28>)
  401722:	601a      	str	r2, [r3, #0]
  401724:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401726:	4b04      	ldr	r3, [pc, #16]	; (401738 <prvResetNextTaskUnblockTime+0x24>)
  401728:	681b      	ldr	r3, [r3, #0]
  40172a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40172c:	68db      	ldr	r3, [r3, #12]
  40172e:	685a      	ldr	r2, [r3, #4]
  401730:	4b02      	ldr	r3, [pc, #8]	; (40173c <prvResetNextTaskUnblockTime+0x28>)
  401732:	601a      	str	r2, [r3, #0]
  401734:	4770      	bx	lr
  401736:	bf00      	nop
  401738:	2040094c 	.word	0x2040094c
  40173c:	20400a0c 	.word	0x20400a0c

00401740 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  401740:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401742:	4b0f      	ldr	r3, [pc, #60]	; (401780 <prvAddCurrentTaskToDelayedList+0x40>)
  401744:	681b      	ldr	r3, [r3, #0]
  401746:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  401748:	4b0e      	ldr	r3, [pc, #56]	; (401784 <prvAddCurrentTaskToDelayedList+0x44>)
  40174a:	681b      	ldr	r3, [r3, #0]
  40174c:	4298      	cmp	r0, r3
  40174e:	d207      	bcs.n	401760 <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401750:	4b0d      	ldr	r3, [pc, #52]	; (401788 <prvAddCurrentTaskToDelayedList+0x48>)
  401752:	6818      	ldr	r0, [r3, #0]
  401754:	4b0a      	ldr	r3, [pc, #40]	; (401780 <prvAddCurrentTaskToDelayedList+0x40>)
  401756:	6819      	ldr	r1, [r3, #0]
  401758:	3104      	adds	r1, #4
  40175a:	4b0c      	ldr	r3, [pc, #48]	; (40178c <prvAddCurrentTaskToDelayedList+0x4c>)
  40175c:	4798      	blx	r3
  40175e:	bd10      	pop	{r4, pc}
  401760:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401762:	4b0b      	ldr	r3, [pc, #44]	; (401790 <prvAddCurrentTaskToDelayedList+0x50>)
  401764:	6818      	ldr	r0, [r3, #0]
  401766:	4b06      	ldr	r3, [pc, #24]	; (401780 <prvAddCurrentTaskToDelayedList+0x40>)
  401768:	6819      	ldr	r1, [r3, #0]
  40176a:	3104      	adds	r1, #4
  40176c:	4b07      	ldr	r3, [pc, #28]	; (40178c <prvAddCurrentTaskToDelayedList+0x4c>)
  40176e:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  401770:	4b08      	ldr	r3, [pc, #32]	; (401794 <prvAddCurrentTaskToDelayedList+0x54>)
  401772:	681b      	ldr	r3, [r3, #0]
  401774:	429c      	cmp	r4, r3
  401776:	d201      	bcs.n	40177c <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  401778:	4b06      	ldr	r3, [pc, #24]	; (401794 <prvAddCurrentTaskToDelayedList+0x54>)
  40177a:	601c      	str	r4, [r3, #0]
  40177c:	bd10      	pop	{r4, pc}
  40177e:	bf00      	nop
  401780:	204009ec 	.word	0x204009ec
  401784:	20400a08 	.word	0x20400a08
  401788:	2040096c 	.word	0x2040096c
  40178c:	00400a99 	.word	0x00400a99
  401790:	2040094c 	.word	0x2040094c
  401794:	20400a0c 	.word	0x20400a0c

00401798 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  401798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40179c:	b083      	sub	sp, #12
  40179e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4017a0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4017a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  4017a6:	b950      	cbnz	r0, 4017be <xTaskGenericCreate+0x26>
  4017a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017ac:	b672      	cpsid	i
  4017ae:	f383 8811 	msr	BASEPRI, r3
  4017b2:	f3bf 8f6f 	isb	sy
  4017b6:	f3bf 8f4f 	dsb	sy
  4017ba:	b662      	cpsie	i
  4017bc:	e7fe      	b.n	4017bc <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4017be:	2f04      	cmp	r7, #4
  4017c0:	d90a      	bls.n	4017d8 <xTaskGenericCreate+0x40>
  4017c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017c6:	b672      	cpsid	i
  4017c8:	f383 8811 	msr	BASEPRI, r3
  4017cc:	f3bf 8f6f 	isb	sy
  4017d0:	f3bf 8f4f 	dsb	sy
  4017d4:	b662      	cpsie	i
  4017d6:	e7fe      	b.n	4017d6 <xTaskGenericCreate+0x3e>
  4017d8:	9001      	str	r0, [sp, #4]
  4017da:	9300      	str	r3, [sp, #0]
  4017dc:	4690      	mov	r8, r2
  4017de:	460e      	mov	r6, r1
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4017e0:	b935      	cbnz	r5, 4017f0 <xTaskGenericCreate+0x58>
  4017e2:	0090      	lsls	r0, r2, #2
  4017e4:	4b5f      	ldr	r3, [pc, #380]	; (401964 <xTaskGenericCreate+0x1cc>)
  4017e6:	4798      	blx	r3

		if( pxStack != NULL )
  4017e8:	4605      	mov	r5, r0
  4017ea:	2800      	cmp	r0, #0
  4017ec:	f000 80b4 	beq.w	401958 <xTaskGenericCreate+0x1c0>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  4017f0:	2058      	movs	r0, #88	; 0x58
  4017f2:	4b5c      	ldr	r3, [pc, #368]	; (401964 <xTaskGenericCreate+0x1cc>)
  4017f4:	4798      	blx	r3

			if( pxNewTCB != NULL )
  4017f6:	4604      	mov	r4, r0
  4017f8:	b1a0      	cbz	r0, 401824 <xTaskGenericCreate+0x8c>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  4017fa:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4017fc:	ea4f 0288 	mov.w	r2, r8, lsl #2
  401800:	21a5      	movs	r1, #165	; 0xa5
  401802:	4628      	mov	r0, r5
  401804:	4b58      	ldr	r3, [pc, #352]	; (401968 <xTaskGenericCreate+0x1d0>)
  401806:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401808:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  40180c:	4445      	add	r5, r8
  40180e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401810:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  401814:	f023 0507 	bic.w	r5, r3, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401818:	7833      	ldrb	r3, [r6, #0]
  40181a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  40181e:	7833      	ldrb	r3, [r6, #0]
  401820:	b923      	cbnz	r3, 40182c <xTaskGenericCreate+0x94>
  401822:	e00f      	b.n	401844 <xTaskGenericCreate+0xac>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  401824:	4628      	mov	r0, r5
  401826:	4b51      	ldr	r3, [pc, #324]	; (40196c <xTaskGenericCreate+0x1d4>)
  401828:	4798      	blx	r3
  40182a:	e095      	b.n	401958 <xTaskGenericCreate+0x1c0>
  40182c:	4633      	mov	r3, r6
  40182e:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401832:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401834:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401838:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  40183c:	7819      	ldrb	r1, [r3, #0]
  40183e:	b109      	cbz	r1, 401844 <xTaskGenericCreate+0xac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401840:	429e      	cmp	r6, r3
  401842:	d1f7      	bne.n	401834 <xTaskGenericCreate+0x9c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401844:	f04f 0800 	mov.w	r8, #0
  401848:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  40184c:	463e      	mov	r6, r7
  40184e:	2f04      	cmp	r7, #4
  401850:	bf28      	it	cs
  401852:	2604      	movcs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  401854:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  401856:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401858:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40185c:	f104 0904 	add.w	r9, r4, #4
  401860:	4648      	mov	r0, r9
  401862:	f8df b154 	ldr.w	fp, [pc, #340]	; 4019b8 <xTaskGenericCreate+0x220>
  401866:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401868:	f104 0018 	add.w	r0, r4, #24
  40186c:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40186e:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401870:	f1c6 0605 	rsb	r6, r6, #5
  401874:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401876:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  401878:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  40187c:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401880:	9a00      	ldr	r2, [sp, #0]
  401882:	9901      	ldr	r1, [sp, #4]
  401884:	4628      	mov	r0, r5
  401886:	4b3a      	ldr	r3, [pc, #232]	; (401970 <xTaskGenericCreate+0x1d8>)
  401888:	4798      	blx	r3
  40188a:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  40188c:	f1ba 0f00 	cmp.w	sl, #0
  401890:	d001      	beq.n	401896 <xTaskGenericCreate+0xfe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401892:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  401896:	4b37      	ldr	r3, [pc, #220]	; (401974 <xTaskGenericCreate+0x1dc>)
  401898:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  40189a:	4a37      	ldr	r2, [pc, #220]	; (401978 <xTaskGenericCreate+0x1e0>)
  40189c:	6813      	ldr	r3, [r2, #0]
  40189e:	3301      	adds	r3, #1
  4018a0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4018a2:	4b36      	ldr	r3, [pc, #216]	; (40197c <xTaskGenericCreate+0x1e4>)
  4018a4:	681b      	ldr	r3, [r3, #0]
  4018a6:	bb0b      	cbnz	r3, 4018ec <xTaskGenericCreate+0x154>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4018a8:	4b34      	ldr	r3, [pc, #208]	; (40197c <xTaskGenericCreate+0x1e4>)
  4018aa:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4018ac:	6813      	ldr	r3, [r2, #0]
  4018ae:	2b01      	cmp	r3, #1
  4018b0:	d126      	bne.n	401900 <xTaskGenericCreate+0x168>
  4018b2:	4d33      	ldr	r5, [pc, #204]	; (401980 <xTaskGenericCreate+0x1e8>)
  4018b4:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4018b8:	4e32      	ldr	r6, [pc, #200]	; (401984 <xTaskGenericCreate+0x1ec>)
  4018ba:	4628      	mov	r0, r5
  4018bc:	47b0      	blx	r6
  4018be:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4018c0:	4545      	cmp	r5, r8
  4018c2:	d1fa      	bne.n	4018ba <xTaskGenericCreate+0x122>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  4018c4:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 4019bc <xTaskGenericCreate+0x224>
  4018c8:	4640      	mov	r0, r8
  4018ca:	4d2e      	ldr	r5, [pc, #184]	; (401984 <xTaskGenericCreate+0x1ec>)
  4018cc:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  4018ce:	4e2e      	ldr	r6, [pc, #184]	; (401988 <xTaskGenericCreate+0x1f0>)
  4018d0:	4630      	mov	r0, r6
  4018d2:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  4018d4:	482d      	ldr	r0, [pc, #180]	; (40198c <xTaskGenericCreate+0x1f4>)
  4018d6:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  4018d8:	482d      	ldr	r0, [pc, #180]	; (401990 <xTaskGenericCreate+0x1f8>)
  4018da:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  4018dc:	482d      	ldr	r0, [pc, #180]	; (401994 <xTaskGenericCreate+0x1fc>)
  4018de:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  4018e0:	4b2d      	ldr	r3, [pc, #180]	; (401998 <xTaskGenericCreate+0x200>)
  4018e2:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4018e6:	4b2d      	ldr	r3, [pc, #180]	; (40199c <xTaskGenericCreate+0x204>)
  4018e8:	601e      	str	r6, [r3, #0]
  4018ea:	e009      	b.n	401900 <xTaskGenericCreate+0x168>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  4018ec:	4b2c      	ldr	r3, [pc, #176]	; (4019a0 <xTaskGenericCreate+0x208>)
  4018ee:	681b      	ldr	r3, [r3, #0]
  4018f0:	b933      	cbnz	r3, 401900 <xTaskGenericCreate+0x168>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4018f2:	4b22      	ldr	r3, [pc, #136]	; (40197c <xTaskGenericCreate+0x1e4>)
  4018f4:	681b      	ldr	r3, [r3, #0]
  4018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4018f8:	429f      	cmp	r7, r3
  4018fa:	d301      	bcc.n	401900 <xTaskGenericCreate+0x168>
					{
						pxCurrentTCB = pxNewTCB;
  4018fc:	4b1f      	ldr	r3, [pc, #124]	; (40197c <xTaskGenericCreate+0x1e4>)
  4018fe:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  401900:	4a28      	ldr	r2, [pc, #160]	; (4019a4 <xTaskGenericCreate+0x20c>)
  401902:	6813      	ldr	r3, [r2, #0]
  401904:	3301      	adds	r3, #1
  401906:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401908:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  40190a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40190c:	4926      	ldr	r1, [pc, #152]	; (4019a8 <xTaskGenericCreate+0x210>)
  40190e:	680b      	ldr	r3, [r1, #0]
  401910:	2201      	movs	r2, #1
  401912:	4082      	lsls	r2, r0
  401914:	4313      	orrs	r3, r2
  401916:	600b      	str	r3, [r1, #0]
  401918:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40191c:	4649      	mov	r1, r9
  40191e:	4b18      	ldr	r3, [pc, #96]	; (401980 <xTaskGenericCreate+0x1e8>)
  401920:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401924:	4b21      	ldr	r3, [pc, #132]	; (4019ac <xTaskGenericCreate+0x214>)
  401926:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  401928:	4b21      	ldr	r3, [pc, #132]	; (4019b0 <xTaskGenericCreate+0x218>)
  40192a:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  40192c:	4b1c      	ldr	r3, [pc, #112]	; (4019a0 <xTaskGenericCreate+0x208>)
  40192e:	681b      	ldr	r3, [r3, #0]
  401930:	b173      	cbz	r3, 401950 <xTaskGenericCreate+0x1b8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  401932:	4b12      	ldr	r3, [pc, #72]	; (40197c <xTaskGenericCreate+0x1e4>)
  401934:	681b      	ldr	r3, [r3, #0]
  401936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401938:	429f      	cmp	r7, r3
  40193a:	d90b      	bls.n	401954 <xTaskGenericCreate+0x1bc>
			{
				taskYIELD_IF_USING_PREEMPTION();
  40193c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401940:	4b1c      	ldr	r3, [pc, #112]	; (4019b4 <xTaskGenericCreate+0x21c>)
  401942:	601a      	str	r2, [r3, #0]
  401944:	f3bf 8f4f 	dsb	sy
  401948:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  40194c:	2001      	movs	r0, #1
  40194e:	e005      	b.n	40195c <xTaskGenericCreate+0x1c4>
  401950:	2001      	movs	r0, #1
  401952:	e003      	b.n	40195c <xTaskGenericCreate+0x1c4>
  401954:	2001      	movs	r0, #1
  401956:	e001      	b.n	40195c <xTaskGenericCreate+0x1c4>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401958:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  40195c:	b003      	add	sp, #12
  40195e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401962:	bf00      	nop
  401964:	00400e09 	.word	0x00400e09
  401968:	004033d9 	.word	0x004033d9
  40196c:	00400e39 	.word	0x00400e39
  401970:	00400b61 	.word	0x00400b61
  401974:	00400bad 	.word	0x00400bad
  401978:	20400a14 	.word	0x20400a14
  40197c:	204009ec 	.word	0x204009ec
  401980:	20400974 	.word	0x20400974
  401984:	00400a61 	.word	0x00400a61
  401988:	20400a18 	.word	0x20400a18
  40198c:	204009f0 	.word	0x204009f0
  401990:	204009d8 	.word	0x204009d8
  401994:	20400a2c 	.word	0x20400a2c
  401998:	2040094c 	.word	0x2040094c
  40199c:	2040096c 	.word	0x2040096c
  4019a0:	20400950 	.word	0x20400950
  4019a4:	20400a10 	.word	0x20400a10
  4019a8:	20400a40 	.word	0x20400a40
  4019ac:	00400a81 	.word	0x00400a81
  4019b0:	00400bf9 	.word	0x00400bf9
  4019b4:	e000ed04 	.word	0xe000ed04
  4019b8:	00400a79 	.word	0x00400a79
  4019bc:	20400958 	.word	0x20400958

004019c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  4019c0:	b510      	push	{r4, lr}
  4019c2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4019c4:	2300      	movs	r3, #0
  4019c6:	9303      	str	r3, [sp, #12]
  4019c8:	9302      	str	r3, [sp, #8]
  4019ca:	9301      	str	r3, [sp, #4]
  4019cc:	9300      	str	r3, [sp, #0]
  4019ce:	2282      	movs	r2, #130	; 0x82
  4019d0:	4917      	ldr	r1, [pc, #92]	; (401a30 <vTaskStartScheduler+0x70>)
  4019d2:	4818      	ldr	r0, [pc, #96]	; (401a34 <vTaskStartScheduler+0x74>)
  4019d4:	4c18      	ldr	r4, [pc, #96]	; (401a38 <vTaskStartScheduler+0x78>)
  4019d6:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  4019d8:	2801      	cmp	r0, #1
  4019da:	d11a      	bne.n	401a12 <vTaskStartScheduler+0x52>
		{
			xReturn = xTimerCreateTimerTask();
  4019dc:	4b17      	ldr	r3, [pc, #92]	; (401a3c <vTaskStartScheduler+0x7c>)
  4019de:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  4019e0:	2801      	cmp	r0, #1
  4019e2:	d116      	bne.n	401a12 <vTaskStartScheduler+0x52>
  4019e4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019e8:	b672      	cpsid	i
  4019ea:	f383 8811 	msr	BASEPRI, r3
  4019ee:	f3bf 8f6f 	isb	sy
  4019f2:	f3bf 8f4f 	dsb	sy
  4019f6:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  4019f8:	f04f 32ff 	mov.w	r2, #4294967295
  4019fc:	4b10      	ldr	r3, [pc, #64]	; (401a40 <vTaskStartScheduler+0x80>)
  4019fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401a00:	2201      	movs	r2, #1
  401a02:	4b10      	ldr	r3, [pc, #64]	; (401a44 <vTaskStartScheduler+0x84>)
  401a04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401a06:	2200      	movs	r2, #0
  401a08:	4b0f      	ldr	r3, [pc, #60]	; (401a48 <vTaskStartScheduler+0x88>)
  401a0a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  401a0c:	4b0f      	ldr	r3, [pc, #60]	; (401a4c <vTaskStartScheduler+0x8c>)
  401a0e:	4798      	blx	r3
  401a10:	e00b      	b.n	401a2a <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  401a12:	b950      	cbnz	r0, 401a2a <vTaskStartScheduler+0x6a>
  401a14:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a18:	b672      	cpsid	i
  401a1a:	f383 8811 	msr	BASEPRI, r3
  401a1e:	f3bf 8f6f 	isb	sy
  401a22:	f3bf 8f4f 	dsb	sy
  401a26:	b662      	cpsie	i
  401a28:	e7fe      	b.n	401a28 <vTaskStartScheduler+0x68>
	}
}
  401a2a:	b004      	add	sp, #16
  401a2c:	bd10      	pop	{r4, pc}
  401a2e:	bf00      	nop
  401a30:	004094ec 	.word	0x004094ec
  401a34:	00401d69 	.word	0x00401d69
  401a38:	00401799 	.word	0x00401799
  401a3c:	0040254d 	.word	0x0040254d
  401a40:	20400a0c 	.word	0x20400a0c
  401a44:	20400950 	.word	0x20400950
  401a48:	20400a08 	.word	0x20400a08
  401a4c:	00400ce1 	.word	0x00400ce1

00401a50 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  401a50:	4a02      	ldr	r2, [pc, #8]	; (401a5c <vTaskSuspendAll+0xc>)
  401a52:	6813      	ldr	r3, [r2, #0]
  401a54:	3301      	adds	r3, #1
  401a56:	6013      	str	r3, [r2, #0]
  401a58:	4770      	bx	lr
  401a5a:	bf00      	nop
  401a5c:	20400a04 	.word	0x20400a04

00401a60 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  401a60:	4b01      	ldr	r3, [pc, #4]	; (401a68 <xTaskGetTickCount+0x8>)
  401a62:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  401a64:	4770      	bx	lr
  401a66:	bf00      	nop
  401a68:	20400a08 	.word	0x20400a08

00401a6c <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
  401a6c:	4b01      	ldr	r3, [pc, #4]	; (401a74 <uxTaskGetNumberOfTasks+0x8>)
  401a6e:	6818      	ldr	r0, [r3, #0]
}
  401a70:	4770      	bx	lr
  401a72:	bf00      	nop
  401a74:	20400a14 	.word	0x20400a14

00401a78 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  401a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401a7c:	4b41      	ldr	r3, [pc, #260]	; (401b84 <xTaskIncrementTick+0x10c>)
  401a7e:	681b      	ldr	r3, [r3, #0]
  401a80:	2b00      	cmp	r3, #0
  401a82:	d16f      	bne.n	401b64 <xTaskIncrementTick+0xec>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  401a84:	4b40      	ldr	r3, [pc, #256]	; (401b88 <xTaskIncrementTick+0x110>)
  401a86:	681a      	ldr	r2, [r3, #0]
  401a88:	3201      	adds	r2, #1
  401a8a:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  401a8c:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  401a8e:	b9d6      	cbnz	r6, 401ac6 <xTaskIncrementTick+0x4e>
			{
				taskSWITCH_DELAYED_LISTS();
  401a90:	4b3e      	ldr	r3, [pc, #248]	; (401b8c <xTaskIncrementTick+0x114>)
  401a92:	681b      	ldr	r3, [r3, #0]
  401a94:	681b      	ldr	r3, [r3, #0]
  401a96:	b153      	cbz	r3, 401aae <xTaskIncrementTick+0x36>
  401a98:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a9c:	b672      	cpsid	i
  401a9e:	f383 8811 	msr	BASEPRI, r3
  401aa2:	f3bf 8f6f 	isb	sy
  401aa6:	f3bf 8f4f 	dsb	sy
  401aaa:	b662      	cpsie	i
  401aac:	e7fe      	b.n	401aac <xTaskIncrementTick+0x34>
  401aae:	4a37      	ldr	r2, [pc, #220]	; (401b8c <xTaskIncrementTick+0x114>)
  401ab0:	6811      	ldr	r1, [r2, #0]
  401ab2:	4b37      	ldr	r3, [pc, #220]	; (401b90 <xTaskIncrementTick+0x118>)
  401ab4:	6818      	ldr	r0, [r3, #0]
  401ab6:	6010      	str	r0, [r2, #0]
  401ab8:	6019      	str	r1, [r3, #0]
  401aba:	4a36      	ldr	r2, [pc, #216]	; (401b94 <xTaskIncrementTick+0x11c>)
  401abc:	6813      	ldr	r3, [r2, #0]
  401abe:	3301      	adds	r3, #1
  401ac0:	6013      	str	r3, [r2, #0]
  401ac2:	4b35      	ldr	r3, [pc, #212]	; (401b98 <xTaskIncrementTick+0x120>)
  401ac4:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  401ac6:	4b35      	ldr	r3, [pc, #212]	; (401b9c <xTaskIncrementTick+0x124>)
  401ac8:	681b      	ldr	r3, [r3, #0]
  401aca:	429e      	cmp	r6, r3
  401acc:	d201      	bcs.n	401ad2 <xTaskIncrementTick+0x5a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401ace:	2400      	movs	r4, #0
  401ad0:	e037      	b.n	401b42 <xTaskIncrementTick+0xca>
  401ad2:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401ad4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 401b8c <xTaskIncrementTick+0x114>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401ad8:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 401bbc <xTaskIncrementTick+0x144>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401adc:	4f30      	ldr	r7, [pc, #192]	; (401ba0 <xTaskIncrementTick+0x128>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401ade:	f8d9 3000 	ldr.w	r3, [r9]
  401ae2:	681b      	ldr	r3, [r3, #0]
  401ae4:	b923      	cbnz	r3, 401af0 <xTaskIncrementTick+0x78>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  401ae6:	f04f 32ff 	mov.w	r2, #4294967295
  401aea:	4b2c      	ldr	r3, [pc, #176]	; (401b9c <xTaskIncrementTick+0x124>)
  401aec:	601a      	str	r2, [r3, #0]
						break;
  401aee:	e028      	b.n	401b42 <xTaskIncrementTick+0xca>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401af0:	f8d9 3000 	ldr.w	r3, [r9]
  401af4:	68db      	ldr	r3, [r3, #12]
  401af6:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401af8:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  401afa:	429e      	cmp	r6, r3
  401afc:	d202      	bcs.n	401b04 <xTaskIncrementTick+0x8c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  401afe:	4a27      	ldr	r2, [pc, #156]	; (401b9c <xTaskIncrementTick+0x124>)
  401b00:	6013      	str	r3, [r2, #0]
							break;
  401b02:	e01e      	b.n	401b42 <xTaskIncrementTick+0xca>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b04:	f105 0a04 	add.w	sl, r5, #4
  401b08:	4650      	mov	r0, sl
  401b0a:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401b0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401b0e:	b113      	cbz	r3, 401b16 <xTaskIncrementTick+0x9e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401b10:	f105 0018 	add.w	r0, r5, #24
  401b14:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401b16:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401b18:	683b      	ldr	r3, [r7, #0]
  401b1a:	2201      	movs	r2, #1
  401b1c:	4082      	lsls	r2, r0
  401b1e:	4313      	orrs	r3, r2
  401b20:	603b      	str	r3, [r7, #0]
  401b22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b26:	4651      	mov	r1, sl
  401b28:	4b1e      	ldr	r3, [pc, #120]	; (401ba4 <xTaskIncrementTick+0x12c>)
  401b2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b2e:	4b1e      	ldr	r3, [pc, #120]	; (401ba8 <xTaskIncrementTick+0x130>)
  401b30:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401b32:	4b1e      	ldr	r3, [pc, #120]	; (401bac <xTaskIncrementTick+0x134>)
  401b34:	681b      	ldr	r3, [r3, #0]
  401b36:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  401b3a:	429a      	cmp	r2, r3
  401b3c:	bf28      	it	cs
  401b3e:	2401      	movcs	r4, #1
  401b40:	e7cd      	b.n	401ade <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401b42:	4b1a      	ldr	r3, [pc, #104]	; (401bac <xTaskIncrementTick+0x134>)
  401b44:	681b      	ldr	r3, [r3, #0]
  401b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b48:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401b4c:	4a15      	ldr	r2, [pc, #84]	; (401ba4 <xTaskIncrementTick+0x12c>)
  401b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  401b52:	2b02      	cmp	r3, #2
  401b54:	bf28      	it	cs
  401b56:	2401      	movcs	r4, #1

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401b58:	4b15      	ldr	r3, [pc, #84]	; (401bb0 <xTaskIncrementTick+0x138>)
  401b5a:	681b      	ldr	r3, [r3, #0]
  401b5c:	b94b      	cbnz	r3, 401b72 <xTaskIncrementTick+0xfa>
			{
				vApplicationTickHook();
  401b5e:	4b15      	ldr	r3, [pc, #84]	; (401bb4 <xTaskIncrementTick+0x13c>)
  401b60:	4798      	blx	r3
  401b62:	e006      	b.n	401b72 <xTaskIncrementTick+0xfa>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  401b64:	4a12      	ldr	r2, [pc, #72]	; (401bb0 <xTaskIncrementTick+0x138>)
  401b66:	6813      	ldr	r3, [r2, #0]
  401b68:	3301      	adds	r3, #1
  401b6a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
  401b6c:	4b11      	ldr	r3, [pc, #68]	; (401bb4 <xTaskIncrementTick+0x13c>)
  401b6e:	4798      	blx	r3

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401b70:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  401b72:	4b11      	ldr	r3, [pc, #68]	; (401bb8 <xTaskIncrementTick+0x140>)
  401b74:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  401b76:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  401b78:	bf0c      	ite	eq
  401b7a:	4620      	moveq	r0, r4
  401b7c:	2001      	movne	r0, #1
  401b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401b82:	bf00      	nop
  401b84:	20400a04 	.word	0x20400a04
  401b88:	20400a08 	.word	0x20400a08
  401b8c:	2040094c 	.word	0x2040094c
  401b90:	2040096c 	.word	0x2040096c
  401b94:	20400948 	.word	0x20400948
  401b98:	00401715 	.word	0x00401715
  401b9c:	20400a0c 	.word	0x20400a0c
  401ba0:	20400a40 	.word	0x20400a40
  401ba4:	20400974 	.word	0x20400974
  401ba8:	00400a81 	.word	0x00400a81
  401bac:	204009ec 	.word	0x204009ec
  401bb0:	20400970 	.word	0x20400970
  401bb4:	00402b19 	.word	0x00402b19
  401bb8:	20400a44 	.word	0x20400a44
  401bbc:	00400acd 	.word	0x00400acd

00401bc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  401bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401bc4:	4b36      	ldr	r3, [pc, #216]	; (401ca0 <xTaskResumeAll+0xe0>)
  401bc6:	681b      	ldr	r3, [r3, #0]
  401bc8:	b953      	cbnz	r3, 401be0 <xTaskResumeAll+0x20>
  401bca:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bce:	b672      	cpsid	i
  401bd0:	f383 8811 	msr	BASEPRI, r3
  401bd4:	f3bf 8f6f 	isb	sy
  401bd8:	f3bf 8f4f 	dsb	sy
  401bdc:	b662      	cpsie	i
  401bde:	e7fe      	b.n	401bde <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401be0:	4b30      	ldr	r3, [pc, #192]	; (401ca4 <xTaskResumeAll+0xe4>)
  401be2:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401be4:	4b2e      	ldr	r3, [pc, #184]	; (401ca0 <xTaskResumeAll+0xe0>)
  401be6:	681a      	ldr	r2, [r3, #0]
  401be8:	3a01      	subs	r2, #1
  401bea:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401bec:	681b      	ldr	r3, [r3, #0]
  401bee:	2b00      	cmp	r3, #0
  401bf0:	d14d      	bne.n	401c8e <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401bf2:	4b2d      	ldr	r3, [pc, #180]	; (401ca8 <xTaskResumeAll+0xe8>)
  401bf4:	681b      	ldr	r3, [r3, #0]
  401bf6:	bb0b      	cbnz	r3, 401c3c <xTaskResumeAll+0x7c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401bf8:	2400      	movs	r4, #0
  401bfa:	e04b      	b.n	401c94 <xTaskResumeAll+0xd4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401bfc:	68fb      	ldr	r3, [r7, #12]
  401bfe:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401c00:	f104 0018 	add.w	r0, r4, #24
  401c04:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401c06:	f104 0804 	add.w	r8, r4, #4
  401c0a:	4640      	mov	r0, r8
  401c0c:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401c0e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c10:	682b      	ldr	r3, [r5, #0]
  401c12:	2201      	movs	r2, #1
  401c14:	4082      	lsls	r2, r0
  401c16:	4313      	orrs	r3, r2
  401c18:	602b      	str	r3, [r5, #0]
  401c1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c1e:	4641      	mov	r1, r8
  401c20:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401c24:	4b21      	ldr	r3, [pc, #132]	; (401cac <xTaskResumeAll+0xec>)
  401c26:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401c28:	4b21      	ldr	r3, [pc, #132]	; (401cb0 <xTaskResumeAll+0xf0>)
  401c2a:	681b      	ldr	r3, [r3, #0]
  401c2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c30:	429a      	cmp	r2, r3
  401c32:	d308      	bcc.n	401c46 <xTaskResumeAll+0x86>
					{
						xYieldPending = pdTRUE;
  401c34:	2201      	movs	r2, #1
  401c36:	4b1f      	ldr	r3, [pc, #124]	; (401cb4 <xTaskResumeAll+0xf4>)
  401c38:	601a      	str	r2, [r3, #0]
  401c3a:	e004      	b.n	401c46 <xTaskResumeAll+0x86>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401c3c:	4f1e      	ldr	r7, [pc, #120]	; (401cb8 <xTaskResumeAll+0xf8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401c3e:	4e1f      	ldr	r6, [pc, #124]	; (401cbc <xTaskResumeAll+0xfc>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  401c40:	4d1f      	ldr	r5, [pc, #124]	; (401cc0 <xTaskResumeAll+0x100>)
  401c42:	f8df 9090 	ldr.w	r9, [pc, #144]	; 401cd4 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401c46:	683b      	ldr	r3, [r7, #0]
  401c48:	2b00      	cmp	r3, #0
  401c4a:	d1d7      	bne.n	401bfc <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401c4c:	4b1d      	ldr	r3, [pc, #116]	; (401cc4 <xTaskResumeAll+0x104>)
  401c4e:	681b      	ldr	r3, [r3, #0]
  401c50:	b17b      	cbz	r3, 401c72 <xTaskResumeAll+0xb2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401c52:	4b1c      	ldr	r3, [pc, #112]	; (401cc4 <xTaskResumeAll+0x104>)
  401c54:	681b      	ldr	r3, [r3, #0]
  401c56:	b163      	cbz	r3, 401c72 <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  401c58:	4e1b      	ldr	r6, [pc, #108]	; (401cc8 <xTaskResumeAll+0x108>)
						{
							xYieldPending = pdTRUE;
  401c5a:	4d16      	ldr	r5, [pc, #88]	; (401cb4 <xTaskResumeAll+0xf4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401c5c:	4c19      	ldr	r4, [pc, #100]	; (401cc4 <xTaskResumeAll+0x104>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  401c5e:	47b0      	blx	r6
  401c60:	b108      	cbz	r0, 401c66 <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
  401c62:	2301      	movs	r3, #1
  401c64:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401c66:	6823      	ldr	r3, [r4, #0]
  401c68:	3b01      	subs	r3, #1
  401c6a:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401c6c:	6823      	ldr	r3, [r4, #0]
  401c6e:	2b00      	cmp	r3, #0
  401c70:	d1f5      	bne.n	401c5e <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  401c72:	4b10      	ldr	r3, [pc, #64]	; (401cb4 <xTaskResumeAll+0xf4>)
  401c74:	681b      	ldr	r3, [r3, #0]
  401c76:	2b01      	cmp	r3, #1
  401c78:	d10b      	bne.n	401c92 <xTaskResumeAll+0xd2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  401c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c7e:	4b13      	ldr	r3, [pc, #76]	; (401ccc <xTaskResumeAll+0x10c>)
  401c80:	601a      	str	r2, [r3, #0]
  401c82:	f3bf 8f4f 	dsb	sy
  401c86:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  401c8a:	2401      	movs	r4, #1
  401c8c:	e002      	b.n	401c94 <xTaskResumeAll+0xd4>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401c8e:	2400      	movs	r4, #0
  401c90:	e000      	b.n	401c94 <xTaskResumeAll+0xd4>
  401c92:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401c94:	4b0e      	ldr	r3, [pc, #56]	; (401cd0 <xTaskResumeAll+0x110>)
  401c96:	4798      	blx	r3

	return xAlreadyYielded;
}
  401c98:	4620      	mov	r0, r4
  401c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401c9e:	bf00      	nop
  401ca0:	20400a04 	.word	0x20400a04
  401ca4:	00400bad 	.word	0x00400bad
  401ca8:	20400a14 	.word	0x20400a14
  401cac:	00400a81 	.word	0x00400a81
  401cb0:	204009ec 	.word	0x204009ec
  401cb4:	20400a44 	.word	0x20400a44
  401cb8:	204009f0 	.word	0x204009f0
  401cbc:	00400acd 	.word	0x00400acd
  401cc0:	20400a40 	.word	0x20400a40
  401cc4:	20400970 	.word	0x20400970
  401cc8:	00401a79 	.word	0x00401a79
  401ccc:	e000ed04 	.word	0xe000ed04
  401cd0:	00400bf9 	.word	0x00400bf9
  401cd4:	20400974 	.word	0x20400974

00401cd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  401cd8:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  401cda:	2800      	cmp	r0, #0
  401cdc:	d029      	beq.n	401d32 <vTaskDelay+0x5a>
  401cde:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  401ce0:	4b18      	ldr	r3, [pc, #96]	; (401d44 <vTaskDelay+0x6c>)
  401ce2:	681b      	ldr	r3, [r3, #0]
  401ce4:	b153      	cbz	r3, 401cfc <vTaskDelay+0x24>
  401ce6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cea:	b672      	cpsid	i
  401cec:	f383 8811 	msr	BASEPRI, r3
  401cf0:	f3bf 8f6f 	isb	sy
  401cf4:	f3bf 8f4f 	dsb	sy
  401cf8:	b662      	cpsie	i
  401cfa:	e7fe      	b.n	401cfa <vTaskDelay+0x22>
			vTaskSuspendAll();
  401cfc:	4b12      	ldr	r3, [pc, #72]	; (401d48 <vTaskDelay+0x70>)
  401cfe:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  401d00:	4b12      	ldr	r3, [pc, #72]	; (401d4c <vTaskDelay+0x74>)
  401d02:	681b      	ldr	r3, [r3, #0]
  401d04:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401d06:	4b12      	ldr	r3, [pc, #72]	; (401d50 <vTaskDelay+0x78>)
  401d08:	6818      	ldr	r0, [r3, #0]
  401d0a:	3004      	adds	r0, #4
  401d0c:	4b11      	ldr	r3, [pc, #68]	; (401d54 <vTaskDelay+0x7c>)
  401d0e:	4798      	blx	r3
  401d10:	b948      	cbnz	r0, 401d26 <vTaskDelay+0x4e>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401d12:	4b0f      	ldr	r3, [pc, #60]	; (401d50 <vTaskDelay+0x78>)
  401d14:	681a      	ldr	r2, [r3, #0]
  401d16:	4910      	ldr	r1, [pc, #64]	; (401d58 <vTaskDelay+0x80>)
  401d18:	680b      	ldr	r3, [r1, #0]
  401d1a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401d1c:	2201      	movs	r2, #1
  401d1e:	4082      	lsls	r2, r0
  401d20:	ea23 0302 	bic.w	r3, r3, r2
  401d24:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401d26:	4620      	mov	r0, r4
  401d28:	4b0c      	ldr	r3, [pc, #48]	; (401d5c <vTaskDelay+0x84>)
  401d2a:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  401d2c:	4b0c      	ldr	r3, [pc, #48]	; (401d60 <vTaskDelay+0x88>)
  401d2e:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  401d30:	b938      	cbnz	r0, 401d42 <vTaskDelay+0x6a>
		{
			portYIELD_WITHIN_API();
  401d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d36:	4b0b      	ldr	r3, [pc, #44]	; (401d64 <vTaskDelay+0x8c>)
  401d38:	601a      	str	r2, [r3, #0]
  401d3a:	f3bf 8f4f 	dsb	sy
  401d3e:	f3bf 8f6f 	isb	sy
  401d42:	bd10      	pop	{r4, pc}
  401d44:	20400a04 	.word	0x20400a04
  401d48:	00401a51 	.word	0x00401a51
  401d4c:	20400a08 	.word	0x20400a08
  401d50:	204009ec 	.word	0x204009ec
  401d54:	00400acd 	.word	0x00400acd
  401d58:	20400a40 	.word	0x20400a40
  401d5c:	00401741 	.word	0x00401741
  401d60:	00401bc1 	.word	0x00401bc1
  401d64:	e000ed04 	.word	0xe000ed04

00401d68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401d68:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401d6a:	4d18      	ldr	r5, [pc, #96]	; (401dcc <prvIdleTask+0x64>)
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401d6c:	4f18      	ldr	r7, [pc, #96]	; (401dd0 <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401d6e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 401df0 <prvIdleTask+0x88>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
  401d72:	4e18      	ldr	r6, [pc, #96]	; (401dd4 <prvIdleTask+0x6c>)
  401d74:	e019      	b.n	401daa <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401d76:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401d78:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
  401d7a:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
  401d7c:	b1ac      	cbz	r4, 401daa <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  401d7e:	4b16      	ldr	r3, [pc, #88]	; (401dd8 <prvIdleTask+0x70>)
  401d80:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401d82:	68fb      	ldr	r3, [r7, #12]
  401d84:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401d86:	1d20      	adds	r0, r4, #4
  401d88:	4b14      	ldr	r3, [pc, #80]	; (401ddc <prvIdleTask+0x74>)
  401d8a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401d8c:	4a14      	ldr	r2, [pc, #80]	; (401de0 <prvIdleTask+0x78>)
  401d8e:	6813      	ldr	r3, [r2, #0]
  401d90:	3b01      	subs	r3, #1
  401d92:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401d94:	682b      	ldr	r3, [r5, #0]
  401d96:	3b01      	subs	r3, #1
  401d98:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  401d9a:	4b12      	ldr	r3, [pc, #72]	; (401de4 <prvIdleTask+0x7c>)
  401d9c:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  401d9e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401da0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401df4 <prvIdleTask+0x8c>
  401da4:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  401da6:	4620      	mov	r0, r4
  401da8:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401daa:	682b      	ldr	r3, [r5, #0]
  401dac:	2b00      	cmp	r3, #0
  401dae:	d1e2      	bne.n	401d76 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401db0:	4b0d      	ldr	r3, [pc, #52]	; (401de8 <prvIdleTask+0x80>)
  401db2:	681b      	ldr	r3, [r3, #0]
  401db4:	2b01      	cmp	r3, #1
  401db6:	d9dc      	bls.n	401d72 <prvIdleTask+0xa>
			{
				taskYIELD();
  401db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401dbc:	4b0b      	ldr	r3, [pc, #44]	; (401dec <prvIdleTask+0x84>)
  401dbe:	601a      	str	r2, [r3, #0]
  401dc0:	f3bf 8f4f 	dsb	sy
  401dc4:	f3bf 8f6f 	isb	sy
  401dc8:	e7d1      	b.n	401d6e <prvIdleTask+0x6>
  401dca:	bf00      	nop
  401dcc:	20400954 	.word	0x20400954
  401dd0:	204009d8 	.word	0x204009d8
  401dd4:	00401bc1 	.word	0x00401bc1
  401dd8:	00400bad 	.word	0x00400bad
  401ddc:	00400acd 	.word	0x00400acd
  401de0:	20400a14 	.word	0x20400a14
  401de4:	00400bf9 	.word	0x00400bf9
  401de8:	20400974 	.word	0x20400974
  401dec:	e000ed04 	.word	0xe000ed04
  401df0:	00401a51 	.word	0x00401a51
  401df4:	00400e39 	.word	0x00400e39

00401df8 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
  401df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401dfc:	4606      	mov	r6, r0
  401dfe:	460c      	mov	r4, r1
  401e00:	4617      	mov	r7, r2
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;

		vTaskSuspendAll();
  401e02:	4b1f      	ldr	r3, [pc, #124]	; (401e80 <uxTaskGetSystemState+0x88>)
  401e04:	4798      	blx	r3
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
  401e06:	4b1f      	ldr	r3, [pc, #124]	; (401e84 <uxTaskGetSystemState+0x8c>)
  401e08:	681b      	ldr	r3, [r3, #0]
  401e0a:	42a3      	cmp	r3, r4
  401e0c:	d831      	bhi.n	401e72 <uxTaskGetSystemState+0x7a>
  401e0e:	4b1e      	ldr	r3, [pc, #120]	; (401e88 <uxTaskGetSystemState+0x90>)
  401e10:	f103 0550 	add.w	r5, r3, #80	; 0x50
  401e14:	f1a3 0814 	sub.w	r8, r3, #20
  401e18:	2400      	movs	r4, #0
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
  401e1a:	f04f 0a01 	mov.w	sl, #1
  401e1e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 401e90 <uxTaskGetSystemState+0x98>
  401e22:	4652      	mov	r2, sl
  401e24:	4629      	mov	r1, r5
  401e26:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401e2a:	47c8      	blx	r9
  401e2c:	4404      	add	r4, r0
  401e2e:	3d14      	subs	r5, #20

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e30:	4545      	cmp	r5, r8
  401e32:	d1f6      	bne.n	401e22 <uxTaskGetSystemState+0x2a>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
  401e34:	4b15      	ldr	r3, [pc, #84]	; (401e8c <uxTaskGetSystemState+0x94>)
  401e36:	6819      	ldr	r1, [r3, #0]
  401e38:	2202      	movs	r2, #2
  401e3a:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401e3e:	4d14      	ldr	r5, [pc, #80]	; (401e90 <uxTaskGetSystemState+0x98>)
  401e40:	47a8      	blx	r5
  401e42:	4404      	add	r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
  401e44:	4b13      	ldr	r3, [pc, #76]	; (401e94 <uxTaskGetSystemState+0x9c>)
  401e46:	6819      	ldr	r1, [r3, #0]
  401e48:	2202      	movs	r2, #2
  401e4a:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401e4e:	47a8      	blx	r5
  401e50:	4404      	add	r4, r0

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
  401e52:	2204      	movs	r2, #4
  401e54:	4910      	ldr	r1, [pc, #64]	; (401e98 <uxTaskGetSystemState+0xa0>)
  401e56:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401e5a:	47a8      	blx	r5
  401e5c:	4404      	add	r4, r0

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
  401e5e:	2203      	movs	r2, #3
  401e60:	490e      	ldr	r1, [pc, #56]	; (401e9c <uxTaskGetSystemState+0xa4>)
  401e62:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401e66:	47a8      	blx	r5
  401e68:	4404      	add	r4, r0
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
  401e6a:	b11f      	cbz	r7, 401e74 <uxTaskGetSystemState+0x7c>
					{
						*pulTotalRunTime = 0;
  401e6c:	2300      	movs	r3, #0
  401e6e:	603b      	str	r3, [r7, #0]
  401e70:	e000      	b.n	401e74 <uxTaskGetSystemState+0x7c>

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
  401e72:	2400      	movs	r4, #0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
  401e74:	4b0a      	ldr	r3, [pc, #40]	; (401ea0 <uxTaskGetSystemState+0xa8>)
  401e76:	4798      	blx	r3

		return uxTask;
	}
  401e78:	4620      	mov	r0, r4
  401e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e7e:	bf00      	nop
  401e80:	00401a51 	.word	0x00401a51
  401e84:	20400a14 	.word	0x20400a14
  401e88:	20400974 	.word	0x20400974
  401e8c:	2040094c 	.word	0x2040094c
  401e90:	00401661 	.word	0x00401661
  401e94:	2040096c 	.word	0x2040096c
  401e98:	204009d8 	.word	0x204009d8
  401e9c:	20400a2c 	.word	0x20400a2c
  401ea0:	00401bc1 	.word	0x00401bc1

00401ea4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401ea4:	4b2c      	ldr	r3, [pc, #176]	; (401f58 <vTaskSwitchContext+0xb4>)
  401ea6:	681b      	ldr	r3, [r3, #0]
  401ea8:	b11b      	cbz	r3, 401eb2 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  401eaa:	2201      	movs	r2, #1
  401eac:	4b2b      	ldr	r3, [pc, #172]	; (401f5c <vTaskSwitchContext+0xb8>)
  401eae:	601a      	str	r2, [r3, #0]
  401eb0:	4770      	bx	lr

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401eb2:	b510      	push	{r4, lr}
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
  401eb4:	2200      	movs	r2, #0
  401eb6:	4b29      	ldr	r3, [pc, #164]	; (401f5c <vTaskSwitchContext+0xb8>)
  401eb8:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
  401eba:	4b29      	ldr	r3, [pc, #164]	; (401f60 <vTaskSwitchContext+0xbc>)
  401ebc:	681b      	ldr	r3, [r3, #0]
  401ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ec0:	681a      	ldr	r2, [r3, #0]
  401ec2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401ec6:	d10b      	bne.n	401ee0 <vTaskSwitchContext+0x3c>
  401ec8:	685a      	ldr	r2, [r3, #4]
  401eca:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401ece:	d107      	bne.n	401ee0 <vTaskSwitchContext+0x3c>
  401ed0:	689a      	ldr	r2, [r3, #8]
  401ed2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401ed6:	d103      	bne.n	401ee0 <vTaskSwitchContext+0x3c>
  401ed8:	68db      	ldr	r3, [r3, #12]
  401eda:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401ede:	d005      	beq.n	401eec <vTaskSwitchContext+0x48>
  401ee0:	4b1f      	ldr	r3, [pc, #124]	; (401f60 <vTaskSwitchContext+0xbc>)
  401ee2:	6818      	ldr	r0, [r3, #0]
  401ee4:	6819      	ldr	r1, [r3, #0]
  401ee6:	3134      	adds	r1, #52	; 0x34
  401ee8:	4b1e      	ldr	r3, [pc, #120]	; (401f64 <vTaskSwitchContext+0xc0>)
  401eea:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401eec:	4b1e      	ldr	r3, [pc, #120]	; (401f68 <vTaskSwitchContext+0xc4>)
  401eee:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401ef0:	fab3 f383 	clz	r3, r3
  401ef4:	b2db      	uxtb	r3, r3
  401ef6:	f1c3 031f 	rsb	r3, r3, #31
  401efa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401efe:	4a1b      	ldr	r2, [pc, #108]	; (401f6c <vTaskSwitchContext+0xc8>)
  401f00:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401f04:	b952      	cbnz	r2, 401f1c <vTaskSwitchContext+0x78>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401f06:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f0a:	b672      	cpsid	i
  401f0c:	f383 8811 	msr	BASEPRI, r3
  401f10:	f3bf 8f6f 	isb	sy
  401f14:	f3bf 8f4f 	dsb	sy
  401f18:	b662      	cpsie	i
  401f1a:	e7fe      	b.n	401f1a <vTaskSwitchContext+0x76>
  401f1c:	4a13      	ldr	r2, [pc, #76]	; (401f6c <vTaskSwitchContext+0xc8>)
  401f1e:	0099      	lsls	r1, r3, #2
  401f20:	18c8      	adds	r0, r1, r3
  401f22:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401f26:	6844      	ldr	r4, [r0, #4]
  401f28:	6864      	ldr	r4, [r4, #4]
  401f2a:	6044      	str	r4, [r0, #4]
  401f2c:	4602      	mov	r2, r0
  401f2e:	3208      	adds	r2, #8
  401f30:	4294      	cmp	r4, r2
  401f32:	d106      	bne.n	401f42 <vTaskSwitchContext+0x9e>
  401f34:	6860      	ldr	r0, [r4, #4]
  401f36:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401f3a:	4a0c      	ldr	r2, [pc, #48]	; (401f6c <vTaskSwitchContext+0xc8>)
  401f3c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401f40:	6050      	str	r0, [r2, #4]
  401f42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401f46:	4a09      	ldr	r2, [pc, #36]	; (401f6c <vTaskSwitchContext+0xc8>)
  401f48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401f4c:	685b      	ldr	r3, [r3, #4]
  401f4e:	68da      	ldr	r2, [r3, #12]
  401f50:	4b03      	ldr	r3, [pc, #12]	; (401f60 <vTaskSwitchContext+0xbc>)
  401f52:	601a      	str	r2, [r3, #0]
  401f54:	bd10      	pop	{r4, pc}
  401f56:	bf00      	nop
  401f58:	20400a04 	.word	0x20400a04
  401f5c:	20400a44 	.word	0x20400a44
  401f60:	204009ec 	.word	0x204009ec
  401f64:	00402b01 	.word	0x00402b01
  401f68:	20400a40 	.word	0x20400a40
  401f6c:	20400974 	.word	0x20400974

00401f70 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  401f70:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  401f72:	b950      	cbnz	r0, 401f8a <vTaskPlaceOnEventList+0x1a>
  401f74:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f78:	b672      	cpsid	i
  401f7a:	f383 8811 	msr	BASEPRI, r3
  401f7e:	f3bf 8f6f 	isb	sy
  401f82:	f3bf 8f4f 	dsb	sy
  401f86:	b662      	cpsie	i
  401f88:	e7fe      	b.n	401f88 <vTaskPlaceOnEventList+0x18>
  401f8a:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401f8c:	4d11      	ldr	r5, [pc, #68]	; (401fd4 <vTaskPlaceOnEventList+0x64>)
  401f8e:	6829      	ldr	r1, [r5, #0]
  401f90:	3118      	adds	r1, #24
  401f92:	4b11      	ldr	r3, [pc, #68]	; (401fd8 <vTaskPlaceOnEventList+0x68>)
  401f94:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401f96:	6828      	ldr	r0, [r5, #0]
  401f98:	3004      	adds	r0, #4
  401f9a:	4b10      	ldr	r3, [pc, #64]	; (401fdc <vTaskPlaceOnEventList+0x6c>)
  401f9c:	4798      	blx	r3
  401f9e:	b940      	cbnz	r0, 401fb2 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401fa0:	682a      	ldr	r2, [r5, #0]
  401fa2:	490f      	ldr	r1, [pc, #60]	; (401fe0 <vTaskPlaceOnEventList+0x70>)
  401fa4:	680b      	ldr	r3, [r1, #0]
  401fa6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401fa8:	2201      	movs	r2, #1
  401faa:	4082      	lsls	r2, r0
  401fac:	ea23 0302 	bic.w	r3, r3, r2
  401fb0:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401fb2:	f1b4 3fff 	cmp.w	r4, #4294967295
  401fb6:	d106      	bne.n	401fc6 <vTaskPlaceOnEventList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401fb8:	4b06      	ldr	r3, [pc, #24]	; (401fd4 <vTaskPlaceOnEventList+0x64>)
  401fba:	6819      	ldr	r1, [r3, #0]
  401fbc:	3104      	adds	r1, #4
  401fbe:	4809      	ldr	r0, [pc, #36]	; (401fe4 <vTaskPlaceOnEventList+0x74>)
  401fc0:	4b09      	ldr	r3, [pc, #36]	; (401fe8 <vTaskPlaceOnEventList+0x78>)
  401fc2:	4798      	blx	r3
  401fc4:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  401fc6:	4b09      	ldr	r3, [pc, #36]	; (401fec <vTaskPlaceOnEventList+0x7c>)
  401fc8:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401fca:	4420      	add	r0, r4
  401fcc:	4b08      	ldr	r3, [pc, #32]	; (401ff0 <vTaskPlaceOnEventList+0x80>)
  401fce:	4798      	blx	r3
  401fd0:	bd38      	pop	{r3, r4, r5, pc}
  401fd2:	bf00      	nop
  401fd4:	204009ec 	.word	0x204009ec
  401fd8:	00400a99 	.word	0x00400a99
  401fdc:	00400acd 	.word	0x00400acd
  401fe0:	20400a40 	.word	0x20400a40
  401fe4:	20400a2c 	.word	0x20400a2c
  401fe8:	00400a81 	.word	0x00400a81
  401fec:	20400a08 	.word	0x20400a08
  401ff0:	00401741 	.word	0x00401741

00401ff4 <vTaskPlaceOnEventListRestricted>:

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  401ff4:	b950      	cbnz	r0, 40200c <vTaskPlaceOnEventListRestricted+0x18>
  401ff6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ffa:	b672      	cpsid	i
  401ffc:	f383 8811 	msr	BASEPRI, r3
  402000:	f3bf 8f6f 	isb	sy
  402004:	f3bf 8f4f 	dsb	sy
  402008:	b662      	cpsie	i
  40200a:	e7fe      	b.n	40200a <vTaskPlaceOnEventListRestricted+0x16>
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  40200c:	b570      	push	{r4, r5, r6, lr}
  40200e:	4615      	mov	r5, r2
  402010:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402012:	4e11      	ldr	r6, [pc, #68]	; (402058 <vTaskPlaceOnEventListRestricted+0x64>)
  402014:	6831      	ldr	r1, [r6, #0]
  402016:	3118      	adds	r1, #24
  402018:	4b10      	ldr	r3, [pc, #64]	; (40205c <vTaskPlaceOnEventListRestricted+0x68>)
  40201a:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40201c:	6830      	ldr	r0, [r6, #0]
  40201e:	3004      	adds	r0, #4
  402020:	4b0f      	ldr	r3, [pc, #60]	; (402060 <vTaskPlaceOnEventListRestricted+0x6c>)
  402022:	4798      	blx	r3
  402024:	b940      	cbnz	r0, 402038 <vTaskPlaceOnEventListRestricted+0x44>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402026:	6832      	ldr	r2, [r6, #0]
  402028:	490e      	ldr	r1, [pc, #56]	; (402064 <vTaskPlaceOnEventListRestricted+0x70>)
  40202a:	680b      	ldr	r3, [r1, #0]
  40202c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40202e:	2201      	movs	r2, #1
  402030:	4082      	lsls	r2, r0
  402032:	ea23 0302 	bic.w	r3, r3, r2
  402036:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  402038:	2d01      	cmp	r5, #1
  40203a:	d106      	bne.n	40204a <vTaskPlaceOnEventListRestricted+0x56>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40203c:	4b06      	ldr	r3, [pc, #24]	; (402058 <vTaskPlaceOnEventListRestricted+0x64>)
  40203e:	6819      	ldr	r1, [r3, #0]
  402040:	3104      	adds	r1, #4
  402042:	4809      	ldr	r0, [pc, #36]	; (402068 <vTaskPlaceOnEventListRestricted+0x74>)
  402044:	4b05      	ldr	r3, [pc, #20]	; (40205c <vTaskPlaceOnEventListRestricted+0x68>)
  402046:	4798      	blx	r3
  402048:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  40204a:	4b08      	ldr	r3, [pc, #32]	; (40206c <vTaskPlaceOnEventListRestricted+0x78>)
  40204c:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40204e:	4420      	add	r0, r4
  402050:	4b07      	ldr	r3, [pc, #28]	; (402070 <vTaskPlaceOnEventListRestricted+0x7c>)
  402052:	4798      	blx	r3
  402054:	bd70      	pop	{r4, r5, r6, pc}
  402056:	bf00      	nop
  402058:	204009ec 	.word	0x204009ec
  40205c:	00400a81 	.word	0x00400a81
  402060:	00400acd 	.word	0x00400acd
  402064:	20400a40 	.word	0x20400a40
  402068:	20400a2c 	.word	0x20400a2c
  40206c:	20400a08 	.word	0x20400a08
  402070:	00401741 	.word	0x00401741

00402074 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  402074:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402076:	68c3      	ldr	r3, [r0, #12]
  402078:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40207a:	b954      	cbnz	r4, 402092 <xTaskRemoveFromEventList+0x1e>
  40207c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402080:	b672      	cpsid	i
  402082:	f383 8811 	msr	BASEPRI, r3
  402086:	f3bf 8f6f 	isb	sy
  40208a:	f3bf 8f4f 	dsb	sy
  40208e:	b662      	cpsie	i
  402090:	e7fe      	b.n	402090 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402092:	f104 0518 	add.w	r5, r4, #24
  402096:	4628      	mov	r0, r5
  402098:	4b14      	ldr	r3, [pc, #80]	; (4020ec <xTaskRemoveFromEventList+0x78>)
  40209a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40209c:	4b14      	ldr	r3, [pc, #80]	; (4020f0 <xTaskRemoveFromEventList+0x7c>)
  40209e:	681b      	ldr	r3, [r3, #0]
  4020a0:	b99b      	cbnz	r3, 4020ca <xTaskRemoveFromEventList+0x56>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4020a2:	1d25      	adds	r5, r4, #4
  4020a4:	4628      	mov	r0, r5
  4020a6:	4b11      	ldr	r3, [pc, #68]	; (4020ec <xTaskRemoveFromEventList+0x78>)
  4020a8:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4020aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4020ac:	4911      	ldr	r1, [pc, #68]	; (4020f4 <xTaskRemoveFromEventList+0x80>)
  4020ae:	680b      	ldr	r3, [r1, #0]
  4020b0:	2201      	movs	r2, #1
  4020b2:	4082      	lsls	r2, r0
  4020b4:	4313      	orrs	r3, r2
  4020b6:	600b      	str	r3, [r1, #0]
  4020b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4020bc:	4629      	mov	r1, r5
  4020be:	4b0e      	ldr	r3, [pc, #56]	; (4020f8 <xTaskRemoveFromEventList+0x84>)
  4020c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4020c4:	4b0d      	ldr	r3, [pc, #52]	; (4020fc <xTaskRemoveFromEventList+0x88>)
  4020c6:	4798      	blx	r3
  4020c8:	e003      	b.n	4020d2 <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4020ca:	4629      	mov	r1, r5
  4020cc:	480c      	ldr	r0, [pc, #48]	; (402100 <xTaskRemoveFromEventList+0x8c>)
  4020ce:	4b0b      	ldr	r3, [pc, #44]	; (4020fc <xTaskRemoveFromEventList+0x88>)
  4020d0:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4020d2:	4b0c      	ldr	r3, [pc, #48]	; (402104 <xTaskRemoveFromEventList+0x90>)
  4020d4:	681b      	ldr	r3, [r3, #0]
  4020d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4020da:	429a      	cmp	r2, r3
  4020dc:	d903      	bls.n	4020e6 <xTaskRemoveFromEventList+0x72>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  4020de:	2001      	movs	r0, #1
  4020e0:	4b09      	ldr	r3, [pc, #36]	; (402108 <xTaskRemoveFromEventList+0x94>)
  4020e2:	6018      	str	r0, [r3, #0]
  4020e4:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
  4020e6:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  4020e8:	bd38      	pop	{r3, r4, r5, pc}
  4020ea:	bf00      	nop
  4020ec:	00400acd 	.word	0x00400acd
  4020f0:	20400a04 	.word	0x20400a04
  4020f4:	20400a40 	.word	0x20400a40
  4020f8:	20400974 	.word	0x20400974
  4020fc:	00400a81 	.word	0x00400a81
  402100:	204009f0 	.word	0x204009f0
  402104:	204009ec 	.word	0x204009ec
  402108:	20400a44 	.word	0x20400a44

0040210c <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
  40210c:	b950      	cbnz	r0, 402124 <vTaskSetTimeOutState+0x18>
  40210e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402112:	b672      	cpsid	i
  402114:	f383 8811 	msr	BASEPRI, r3
  402118:	f3bf 8f6f 	isb	sy
  40211c:	f3bf 8f4f 	dsb	sy
  402120:	b662      	cpsie	i
  402122:	e7fe      	b.n	402122 <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402124:	4a03      	ldr	r2, [pc, #12]	; (402134 <vTaskSetTimeOutState+0x28>)
  402126:	6812      	ldr	r2, [r2, #0]
  402128:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40212a:	4a03      	ldr	r2, [pc, #12]	; (402138 <vTaskSetTimeOutState+0x2c>)
  40212c:	6812      	ldr	r2, [r2, #0]
  40212e:	6042      	str	r2, [r0, #4]
  402130:	4770      	bx	lr
  402132:	bf00      	nop
  402134:	20400948 	.word	0x20400948
  402138:	20400a08 	.word	0x20400a08

0040213c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  40213c:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  40213e:	b950      	cbnz	r0, 402156 <xTaskCheckForTimeOut+0x1a>
  402140:	f04f 0380 	mov.w	r3, #128	; 0x80
  402144:	b672      	cpsid	i
  402146:	f383 8811 	msr	BASEPRI, r3
  40214a:	f3bf 8f6f 	isb	sy
  40214e:	f3bf 8f4f 	dsb	sy
  402152:	b662      	cpsie	i
  402154:	e7fe      	b.n	402154 <xTaskCheckForTimeOut+0x18>
  402156:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402158:	b951      	cbnz	r1, 402170 <xTaskCheckForTimeOut+0x34>
  40215a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40215e:	b672      	cpsid	i
  402160:	f383 8811 	msr	BASEPRI, r3
  402164:	f3bf 8f6f 	isb	sy
  402168:	f3bf 8f4f 	dsb	sy
  40216c:	b662      	cpsie	i
  40216e:	e7fe      	b.n	40216e <xTaskCheckForTimeOut+0x32>
  402170:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  402172:	4b12      	ldr	r3, [pc, #72]	; (4021bc <xTaskCheckForTimeOut+0x80>)
  402174:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  402176:	4b12      	ldr	r3, [pc, #72]	; (4021c0 <xTaskCheckForTimeOut+0x84>)
  402178:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  40217a:	682b      	ldr	r3, [r5, #0]
  40217c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402180:	d013      	beq.n	4021aa <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402182:	4a10      	ldr	r2, [pc, #64]	; (4021c4 <xTaskCheckForTimeOut+0x88>)
  402184:	6812      	ldr	r2, [r2, #0]
  402186:	6820      	ldr	r0, [r4, #0]
  402188:	4290      	cmp	r0, r2
  40218a:	d002      	beq.n	402192 <xTaskCheckForTimeOut+0x56>
  40218c:	6862      	ldr	r2, [r4, #4]
  40218e:	4291      	cmp	r1, r2
  402190:	d20d      	bcs.n	4021ae <xTaskCheckForTimeOut+0x72>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402192:	6862      	ldr	r2, [r4, #4]
  402194:	1a88      	subs	r0, r1, r2
  402196:	4283      	cmp	r3, r0
  402198:	d90b      	bls.n	4021b2 <xTaskCheckForTimeOut+0x76>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40219a:	1a52      	subs	r2, r2, r1
  40219c:	4413      	add	r3, r2
  40219e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4021a0:	4620      	mov	r0, r4
  4021a2:	4b09      	ldr	r3, [pc, #36]	; (4021c8 <xTaskCheckForTimeOut+0x8c>)
  4021a4:	4798      	blx	r3
			xReturn = pdFALSE;
  4021a6:	2400      	movs	r4, #0
  4021a8:	e004      	b.n	4021b4 <xTaskCheckForTimeOut+0x78>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  4021aa:	2400      	movs	r4, #0
  4021ac:	e002      	b.n	4021b4 <xTaskCheckForTimeOut+0x78>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  4021ae:	2401      	movs	r4, #1
  4021b0:	e000      	b.n	4021b4 <xTaskCheckForTimeOut+0x78>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  4021b2:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  4021b4:	4b05      	ldr	r3, [pc, #20]	; (4021cc <xTaskCheckForTimeOut+0x90>)
  4021b6:	4798      	blx	r3

	return xReturn;
}
  4021b8:	4620      	mov	r0, r4
  4021ba:	bd38      	pop	{r3, r4, r5, pc}
  4021bc:	00400bad 	.word	0x00400bad
  4021c0:	20400a08 	.word	0x20400a08
  4021c4:	20400948 	.word	0x20400948
  4021c8:	0040210d 	.word	0x0040210d
  4021cc:	00400bf9 	.word	0x00400bf9

004021d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  4021d0:	2201      	movs	r2, #1
  4021d2:	4b01      	ldr	r3, [pc, #4]	; (4021d8 <vTaskMissedYield+0x8>)
  4021d4:	601a      	str	r2, [r3, #0]
  4021d6:	4770      	bx	lr
  4021d8:	20400a44 	.word	0x20400a44

004021dc <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4021dc:	4b05      	ldr	r3, [pc, #20]	; (4021f4 <xTaskGetSchedulerState+0x18>)
  4021de:	681b      	ldr	r3, [r3, #0]
  4021e0:	b133      	cbz	r3, 4021f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4021e2:	4b05      	ldr	r3, [pc, #20]	; (4021f8 <xTaskGetSchedulerState+0x1c>)
  4021e4:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4021e6:	2b00      	cmp	r3, #0
  4021e8:	bf0c      	ite	eq
  4021ea:	2002      	moveq	r0, #2
  4021ec:	2000      	movne	r0, #0
  4021ee:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  4021f0:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  4021f2:	4770      	bx	lr
  4021f4:	20400950 	.word	0x20400950
  4021f8:	20400a04 	.word	0x20400a04

004021fc <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4021fc:	2800      	cmp	r0, #0
  4021fe:	d045      	beq.n	40228c <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  402200:	b538      	push	{r3, r4, r5, lr}
  402202:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402204:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402206:	4922      	ldr	r1, [pc, #136]	; (402290 <vTaskPriorityInherit+0x94>)
  402208:	6809      	ldr	r1, [r1, #0]
  40220a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40220c:	428a      	cmp	r2, r1
  40220e:	d23c      	bcs.n	40228a <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402210:	6981      	ldr	r1, [r0, #24]
  402212:	2900      	cmp	r1, #0
  402214:	db05      	blt.n	402222 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402216:	491e      	ldr	r1, [pc, #120]	; (402290 <vTaskPriorityInherit+0x94>)
  402218:	6809      	ldr	r1, [r1, #0]
  40221a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40221c:	f1c1 0105 	rsb	r1, r1, #5
  402220:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402222:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402226:	491b      	ldr	r1, [pc, #108]	; (402294 <vTaskPriorityInherit+0x98>)
  402228:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40222c:	6959      	ldr	r1, [r3, #20]
  40222e:	4291      	cmp	r1, r2
  402230:	d127      	bne.n	402282 <vTaskPriorityInherit+0x86>
  402232:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402234:	1d1d      	adds	r5, r3, #4
  402236:	4628      	mov	r0, r5
  402238:	4b17      	ldr	r3, [pc, #92]	; (402298 <vTaskPriorityInherit+0x9c>)
  40223a:	4798      	blx	r3
  40223c:	b970      	cbnz	r0, 40225c <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40223e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402240:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402244:	4a13      	ldr	r2, [pc, #76]	; (402294 <vTaskPriorityInherit+0x98>)
  402246:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40224a:	b93a      	cbnz	r2, 40225c <vTaskPriorityInherit+0x60>
  40224c:	4813      	ldr	r0, [pc, #76]	; (40229c <vTaskPriorityInherit+0xa0>)
  40224e:	6802      	ldr	r2, [r0, #0]
  402250:	2101      	movs	r1, #1
  402252:	fa01 f303 	lsl.w	r3, r1, r3
  402256:	ea22 0303 	bic.w	r3, r2, r3
  40225a:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40225c:	4b0c      	ldr	r3, [pc, #48]	; (402290 <vTaskPriorityInherit+0x94>)
  40225e:	681b      	ldr	r3, [r3, #0]
  402260:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402262:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402264:	490d      	ldr	r1, [pc, #52]	; (40229c <vTaskPriorityInherit+0xa0>)
  402266:	680a      	ldr	r2, [r1, #0]
  402268:	2301      	movs	r3, #1
  40226a:	4083      	lsls	r3, r0
  40226c:	4313      	orrs	r3, r2
  40226e:	600b      	str	r3, [r1, #0]
  402270:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402274:	4629      	mov	r1, r5
  402276:	4b07      	ldr	r3, [pc, #28]	; (402294 <vTaskPriorityInherit+0x98>)
  402278:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40227c:	4b08      	ldr	r3, [pc, #32]	; (4022a0 <vTaskPriorityInherit+0xa4>)
  40227e:	4798      	blx	r3
  402280:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402282:	4a03      	ldr	r2, [pc, #12]	; (402290 <vTaskPriorityInherit+0x94>)
  402284:	6812      	ldr	r2, [r2, #0]
  402286:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402288:	62da      	str	r2, [r3, #44]	; 0x2c
  40228a:	bd38      	pop	{r3, r4, r5, pc}
  40228c:	4770      	bx	lr
  40228e:	bf00      	nop
  402290:	204009ec 	.word	0x204009ec
  402294:	20400974 	.word	0x20400974
  402298:	00400acd 	.word	0x00400acd
  40229c:	20400a40 	.word	0x20400a40
  4022a0:	00400a81 	.word	0x00400a81

004022a4 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  4022a4:	2800      	cmp	r0, #0
  4022a6:	d04e      	beq.n	402346 <xTaskPriorityDisinherit+0xa2>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  4022a8:	b538      	push	{r3, r4, r5, lr}
  4022aa:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  4022ac:	4a28      	ldr	r2, [pc, #160]	; (402350 <xTaskPriorityDisinherit+0xac>)
  4022ae:	6812      	ldr	r2, [r2, #0]
  4022b0:	4290      	cmp	r0, r2
  4022b2:	d00a      	beq.n	4022ca <xTaskPriorityDisinherit+0x26>
  4022b4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022b8:	b672      	cpsid	i
  4022ba:	f383 8811 	msr	BASEPRI, r3
  4022be:	f3bf 8f6f 	isb	sy
  4022c2:	f3bf 8f4f 	dsb	sy
  4022c6:	b662      	cpsie	i
  4022c8:	e7fe      	b.n	4022c8 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  4022ca:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4022cc:	b952      	cbnz	r2, 4022e4 <xTaskPriorityDisinherit+0x40>
  4022ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022d2:	b672      	cpsid	i
  4022d4:	f383 8811 	msr	BASEPRI, r3
  4022d8:	f3bf 8f6f 	isb	sy
  4022dc:	f3bf 8f4f 	dsb	sy
  4022e0:	b662      	cpsie	i
  4022e2:	e7fe      	b.n	4022e2 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4022e4:	3a01      	subs	r2, #1
  4022e6:	64c2      	str	r2, [r0, #76]	; 0x4c
			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4022e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4022ea:	6c99      	ldr	r1, [r3, #72]	; 0x48
  4022ec:	4288      	cmp	r0, r1
  4022ee:	d02c      	beq.n	40234a <xTaskPriorityDisinherit+0xa6>
  4022f0:	bb5a      	cbnz	r2, 40234a <xTaskPriorityDisinherit+0xa6>
  4022f2:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4022f4:	1d1d      	adds	r5, r3, #4
  4022f6:	4628      	mov	r0, r5
  4022f8:	4b16      	ldr	r3, [pc, #88]	; (402354 <xTaskPriorityDisinherit+0xb0>)
  4022fa:	4798      	blx	r3
  4022fc:	b968      	cbnz	r0, 40231a <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4022fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402300:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402304:	4b14      	ldr	r3, [pc, #80]	; (402358 <xTaskPriorityDisinherit+0xb4>)
  402306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40230a:	b933      	cbnz	r3, 40231a <xTaskPriorityDisinherit+0x76>
  40230c:	4813      	ldr	r0, [pc, #76]	; (40235c <xTaskPriorityDisinherit+0xb8>)
  40230e:	6803      	ldr	r3, [r0, #0]
  402310:	2201      	movs	r2, #1
  402312:	408a      	lsls	r2, r1
  402314:	ea23 0302 	bic.w	r3, r3, r2
  402318:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40231a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40231c:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40231e:	f1c0 0305 	rsb	r3, r0, #5
  402322:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402324:	4a0d      	ldr	r2, [pc, #52]	; (40235c <xTaskPriorityDisinherit+0xb8>)
  402326:	6813      	ldr	r3, [r2, #0]
  402328:	2401      	movs	r4, #1
  40232a:	fa04 f100 	lsl.w	r1, r4, r0
  40232e:	430b      	orrs	r3, r1
  402330:	6013      	str	r3, [r2, #0]
  402332:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402336:	4629      	mov	r1, r5
  402338:	4b07      	ldr	r3, [pc, #28]	; (402358 <xTaskPriorityDisinherit+0xb4>)
  40233a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40233e:	4b08      	ldr	r3, [pc, #32]	; (402360 <xTaskPriorityDisinherit+0xbc>)
  402340:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402342:	4620      	mov	r0, r4
  402344:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  402346:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402348:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  40234a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40234c:	bd38      	pop	{r3, r4, r5, pc}
  40234e:	bf00      	nop
  402350:	204009ec 	.word	0x204009ec
  402354:	00400acd 	.word	0x00400acd
  402358:	20400974 	.word	0x20400974
  40235c:	20400a40 	.word	0x20400a40
  402360:	00400a81 	.word	0x00400a81

00402364 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
  402364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402368:	b084      	sub	sp, #16
  40236a:	4604      	mov	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
  40236c:	2300      	movs	r3, #0
  40236e:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
  402370:	4b34      	ldr	r3, [pc, #208]	; (402444 <vTaskList+0xe0>)
  402372:	681a      	ldr	r2, [r3, #0]
  402374:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
  402376:	6818      	ldr	r0, [r3, #0]
  402378:	0140      	lsls	r0, r0, #5
  40237a:	4b33      	ldr	r3, [pc, #204]	; (402448 <vTaskList+0xe4>)
  40237c:	4798      	blx	r3

		if( pxTaskStatusArray != NULL )
  40237e:	2800      	cmp	r0, #0
  402380:	d05c      	beq.n	40243c <vTaskList+0xd8>
  402382:	4605      	mov	r5, r0
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
  402384:	9903      	ldr	r1, [sp, #12]
  402386:	2200      	movs	r2, #0
  402388:	4b30      	ldr	r3, [pc, #192]	; (40244c <vTaskList+0xe8>)
  40238a:	4798      	blx	r3
  40238c:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
  40238e:	2300      	movs	r3, #0
  402390:	9302      	str	r3, [sp, #8]
  402392:	9a02      	ldr	r2, [sp, #8]
  402394:	9b03      	ldr	r3, [sp, #12]
  402396:	429a      	cmp	r2, r3
  402398:	d24d      	bcs.n	402436 <vTaskList+0xd2>
					case eDeleted:		cStatus = tskDELETED_CHAR;
										break;

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
  40239a:	f04f 0800 	mov.w	r8, #0
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
  40239e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 402460 <vTaskList+0xfc>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  4023a2:	4e2b      	ldr	r6, [pc, #172]	; (402450 <vTaskList+0xec>)
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
  4023a4:	9b02      	ldr	r3, [sp, #8]
  4023a6:	eb05 1343 	add.w	r3, r5, r3, lsl #5
  4023aa:	7b1b      	ldrb	r3, [r3, #12]
  4023ac:	3b01      	subs	r3, #1
  4023ae:	2b03      	cmp	r3, #3
  4023b0:	d809      	bhi.n	4023c6 <vTaskList+0x62>
  4023b2:	e8df f003 	tbb	[pc, r3]
  4023b6:	020a      	.short	0x020a
  4023b8:	0604      	.short	0x0604
				{
					case eReady:		cStatus = tskREADY_CHAR;
										break;

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
  4023ba:	2742      	movs	r7, #66	; 0x42
  4023bc:	e006      	b.n	4023cc <vTaskList+0x68>
										break;

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
  4023be:	2753      	movs	r7, #83	; 0x53
										break;
  4023c0:	e004      	b.n	4023cc <vTaskList+0x68>

					case eDeleted:		cStatus = tskDELETED_CHAR;
  4023c2:	2744      	movs	r7, #68	; 0x44
										break;
  4023c4:	e002      	b.n	4023cc <vTaskList+0x68>

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
  4023c6:	4647      	mov	r7, r8
										break;
  4023c8:	e000      	b.n	4023cc <vTaskList+0x68>
			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
				{
					case eReady:		cStatus = tskREADY_CHAR;
  4023ca:	2752      	movs	r7, #82	; 0x52
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
  4023cc:	9b02      	ldr	r3, [sp, #8]
  4023ce:	eb05 1343 	add.w	r3, r5, r3, lsl #5
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
  4023d2:	6859      	ldr	r1, [r3, #4]
  4023d4:	4620      	mov	r0, r4
  4023d6:	47c8      	blx	r9

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  4023d8:	4620      	mov	r0, r4
  4023da:	47b0      	blx	r6
  4023dc:	2808      	cmp	r0, #8
  4023de:	d808      	bhi.n	4023f2 <vTaskList+0x8e>
  4023e0:	4420      	add	r0, r4
  4023e2:	f104 0209 	add.w	r2, r4, #9
		{
			pcBuffer[ x ] = ' ';
  4023e6:	2320      	movs	r3, #32
  4023e8:	f800 3b01 	strb.w	r3, [r0], #1
		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  4023ec:	4290      	cmp	r0, r2
  4023ee:	d1fb      	bne.n	4023e8 <vTaskList+0x84>
  4023f0:	2009      	movs	r0, #9
		{
			pcBuffer[ x ] = ' ';
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
  4023f2:	eb04 0a00 	add.w	sl, r4, r0
  4023f6:	f804 8000 	strb.w	r8, [r4, r0]
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
  4023fa:	9b02      	ldr	r3, [sp, #8]
  4023fc:	9a02      	ldr	r2, [sp, #8]
  4023fe:	9902      	ldr	r1, [sp, #8]
  402400:	eb05 1343 	add.w	r3, r5, r3, lsl #5
  402404:	691b      	ldr	r3, [r3, #16]
  402406:	eb05 1141 	add.w	r1, r5, r1, lsl #5
  40240a:	6889      	ldr	r1, [r1, #8]
  40240c:	9101      	str	r1, [sp, #4]
  40240e:	eb05 1242 	add.w	r2, r5, r2, lsl #5
  402412:	8b92      	ldrh	r2, [r2, #28]
  402414:	9200      	str	r2, [sp, #0]
  402416:	463a      	mov	r2, r7
  402418:	490e      	ldr	r1, [pc, #56]	; (402454 <vTaskList+0xf0>)
  40241a:	4650      	mov	r0, sl
  40241c:	4c0e      	ldr	r4, [pc, #56]	; (402458 <vTaskList+0xf4>)
  40241e:	47a0      	blx	r4
				pcWriteBuffer += strlen( pcWriteBuffer );
  402420:	4650      	mov	r0, sl
  402422:	47b0      	blx	r6
  402424:	eb0a 0400 	add.w	r4, sl, r0
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
  402428:	9b02      	ldr	r3, [sp, #8]
  40242a:	3301      	adds	r3, #1
  40242c:	9302      	str	r3, [sp, #8]
  40242e:	9a02      	ldr	r2, [sp, #8]
  402430:	9b03      	ldr	r3, [sp, #12]
  402432:	429a      	cmp	r2, r3
  402434:	d3b6      	bcc.n	4023a4 <vTaskList+0x40>
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
				pcWriteBuffer += strlen( pcWriteBuffer );
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
  402436:	4628      	mov	r0, r5
  402438:	4b08      	ldr	r3, [pc, #32]	; (40245c <vTaskList+0xf8>)
  40243a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
  40243c:	b004      	add	sp, #16
  40243e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402442:	bf00      	nop
  402444:	20400a14 	.word	0x20400a14
  402448:	00400e09 	.word	0x00400e09
  40244c:	00401df9 	.word	0x00401df9
  402450:	00403741 	.word	0x00403741
  402454:	004094f4 	.word	0x004094f4
  402458:	00403601 	.word	0x00403601
  40245c:	00400e39 	.word	0x00400e39
  402460:	0040364d 	.word	0x0040364d

00402464 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402464:	4b05      	ldr	r3, [pc, #20]	; (40247c <pvTaskIncrementMutexHeldCount+0x18>)
  402466:	681b      	ldr	r3, [r3, #0]
  402468:	b123      	cbz	r3, 402474 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40246a:	4b04      	ldr	r3, [pc, #16]	; (40247c <pvTaskIncrementMutexHeldCount+0x18>)
  40246c:	681a      	ldr	r2, [r3, #0]
  40246e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402470:	3301      	adds	r3, #1
  402472:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402474:	4b01      	ldr	r3, [pc, #4]	; (40247c <pvTaskIncrementMutexHeldCount+0x18>)
  402476:	6818      	ldr	r0, [r3, #0]
	}
  402478:	4770      	bx	lr
  40247a:	bf00      	nop
  40247c:	204009ec 	.word	0x204009ec

00402480 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402480:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402482:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402484:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402486:	4291      	cmp	r1, r2
  402488:	d80a      	bhi.n	4024a0 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  40248a:	1ad2      	subs	r2, r2, r3
  40248c:	6983      	ldr	r3, [r0, #24]
  40248e:	429a      	cmp	r2, r3
  402490:	d211      	bcs.n	4024b6 <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402492:	1d01      	adds	r1, r0, #4
  402494:	4b0a      	ldr	r3, [pc, #40]	; (4024c0 <prvInsertTimerInActiveList+0x40>)
  402496:	6818      	ldr	r0, [r3, #0]
  402498:	4b0a      	ldr	r3, [pc, #40]	; (4024c4 <prvInsertTimerInActiveList+0x44>)
  40249a:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  40249c:	2000      	movs	r0, #0
  40249e:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4024a0:	429a      	cmp	r2, r3
  4024a2:	d201      	bcs.n	4024a8 <prvInsertTimerInActiveList+0x28>
  4024a4:	4299      	cmp	r1, r3
  4024a6:	d208      	bcs.n	4024ba <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4024a8:	1d01      	adds	r1, r0, #4
  4024aa:	4b07      	ldr	r3, [pc, #28]	; (4024c8 <prvInsertTimerInActiveList+0x48>)
  4024ac:	6818      	ldr	r0, [r3, #0]
  4024ae:	4b05      	ldr	r3, [pc, #20]	; (4024c4 <prvInsertTimerInActiveList+0x44>)
  4024b0:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  4024b2:	2000      	movs	r0, #0
  4024b4:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4024b6:	2001      	movs	r0, #1
  4024b8:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4024ba:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4024bc:	bd08      	pop	{r3, pc}
  4024be:	bf00      	nop
  4024c0:	20400a7c 	.word	0x20400a7c
  4024c4:	00400a99 	.word	0x00400a99
  4024c8:	20400a48 	.word	0x20400a48

004024cc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4024cc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4024ce:	4b14      	ldr	r3, [pc, #80]	; (402520 <prvCheckForValidListAndQueue+0x54>)
  4024d0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4024d2:	4b14      	ldr	r3, [pc, #80]	; (402524 <prvCheckForValidListAndQueue+0x58>)
  4024d4:	681b      	ldr	r3, [r3, #0]
  4024d6:	bb03      	cbnz	r3, 40251a <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
  4024d8:	4d13      	ldr	r5, [pc, #76]	; (402528 <prvCheckForValidListAndQueue+0x5c>)
  4024da:	4628      	mov	r0, r5
  4024dc:	4e13      	ldr	r6, [pc, #76]	; (40252c <prvCheckForValidListAndQueue+0x60>)
  4024de:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4024e0:	4c13      	ldr	r4, [pc, #76]	; (402530 <prvCheckForValidListAndQueue+0x64>)
  4024e2:	4620      	mov	r0, r4
  4024e4:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4024e6:	4b13      	ldr	r3, [pc, #76]	; (402534 <prvCheckForValidListAndQueue+0x68>)
  4024e8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4024ea:	4b13      	ldr	r3, [pc, #76]	; (402538 <prvCheckForValidListAndQueue+0x6c>)
  4024ec:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4024ee:	2200      	movs	r2, #0
  4024f0:	2110      	movs	r1, #16
  4024f2:	2005      	movs	r0, #5
  4024f4:	4b11      	ldr	r3, [pc, #68]	; (40253c <prvCheckForValidListAndQueue+0x70>)
  4024f6:	4798      	blx	r3
  4024f8:	4b0a      	ldr	r3, [pc, #40]	; (402524 <prvCheckForValidListAndQueue+0x58>)
  4024fa:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4024fc:	b950      	cbnz	r0, 402514 <prvCheckForValidListAndQueue+0x48>
  4024fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402502:	b672      	cpsid	i
  402504:	f383 8811 	msr	BASEPRI, r3
  402508:	f3bf 8f6f 	isb	sy
  40250c:	f3bf 8f4f 	dsb	sy
  402510:	b662      	cpsie	i
  402512:	e7fe      	b.n	402512 <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402514:	490a      	ldr	r1, [pc, #40]	; (402540 <prvCheckForValidListAndQueue+0x74>)
  402516:	4b0b      	ldr	r3, [pc, #44]	; (402544 <prvCheckForValidListAndQueue+0x78>)
  402518:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  40251a:	4b0b      	ldr	r3, [pc, #44]	; (402548 <prvCheckForValidListAndQueue+0x7c>)
  40251c:	4798      	blx	r3
  40251e:	bd70      	pop	{r4, r5, r6, pc}
  402520:	00400bad 	.word	0x00400bad
  402524:	20400a78 	.word	0x20400a78
  402528:	20400a4c 	.word	0x20400a4c
  40252c:	00400a61 	.word	0x00400a61
  402530:	20400a60 	.word	0x20400a60
  402534:	20400a48 	.word	0x20400a48
  402538:	20400a7c 	.word	0x20400a7c
  40253c:	004010c1 	.word	0x004010c1
  402540:	00409504 	.word	0x00409504
  402544:	004015dd 	.word	0x004015dd
  402548:	00400bf9 	.word	0x00400bf9

0040254c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  40254c:	b510      	push	{r4, lr}
  40254e:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  402550:	4b0f      	ldr	r3, [pc, #60]	; (402590 <xTimerCreateTimerTask+0x44>)
  402552:	4798      	blx	r3

	if( xTimerQueue != NULL )
  402554:	4b0f      	ldr	r3, [pc, #60]	; (402594 <xTimerCreateTimerTask+0x48>)
  402556:	681b      	ldr	r3, [r3, #0]
  402558:	b163      	cbz	r3, 402574 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40255a:	2300      	movs	r3, #0
  40255c:	9303      	str	r3, [sp, #12]
  40255e:	9302      	str	r3, [sp, #8]
  402560:	9301      	str	r3, [sp, #4]
  402562:	2204      	movs	r2, #4
  402564:	9200      	str	r2, [sp, #0]
  402566:	f44f 7282 	mov.w	r2, #260	; 0x104
  40256a:	490b      	ldr	r1, [pc, #44]	; (402598 <xTimerCreateTimerTask+0x4c>)
  40256c:	480b      	ldr	r0, [pc, #44]	; (40259c <xTimerCreateTimerTask+0x50>)
  40256e:	4c0c      	ldr	r4, [pc, #48]	; (4025a0 <xTimerCreateTimerTask+0x54>)
  402570:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  402572:	b950      	cbnz	r0, 40258a <xTimerCreateTimerTask+0x3e>
  402574:	f04f 0380 	mov.w	r3, #128	; 0x80
  402578:	b672      	cpsid	i
  40257a:	f383 8811 	msr	BASEPRI, r3
  40257e:	f3bf 8f6f 	isb	sy
  402582:	f3bf 8f4f 	dsb	sy
  402586:	b662      	cpsie	i
  402588:	e7fe      	b.n	402588 <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
  40258a:	b004      	add	sp, #16
  40258c:	bd10      	pop	{r4, pc}
  40258e:	bf00      	nop
  402590:	004024cd 	.word	0x004024cd
  402594:	20400a78 	.word	0x20400a78
  402598:	0040950c 	.word	0x0040950c
  40259c:	004026d1 	.word	0x004026d1
  4025a0:	00401799 	.word	0x00401799

004025a4 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  4025a4:	b950      	cbnz	r0, 4025bc <xTimerGenericCommand+0x18>
  4025a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025aa:	b672      	cpsid	i
  4025ac:	f383 8811 	msr	BASEPRI, r3
  4025b0:	f3bf 8f6f 	isb	sy
  4025b4:	f3bf 8f4f 	dsb	sy
  4025b8:	b662      	cpsie	i
  4025ba:	e7fe      	b.n	4025ba <xTimerGenericCommand+0x16>
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  4025bc:	b530      	push	{r4, r5, lr}
  4025be:	b085      	sub	sp, #20
  4025c0:	4615      	mov	r5, r2
  4025c2:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  4025c4:	4a0f      	ldr	r2, [pc, #60]	; (402604 <xTimerGenericCommand+0x60>)
  4025c6:	6810      	ldr	r0, [r2, #0]
  4025c8:	b1c0      	cbz	r0, 4025fc <xTimerGenericCommand+0x58>
  4025ca:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  4025cc:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4025ce:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4025d0:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4025d2:	2905      	cmp	r1, #5
  4025d4:	dc0d      	bgt.n	4025f2 <xTimerGenericCommand+0x4e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4025d6:	4b0c      	ldr	r3, [pc, #48]	; (402608 <xTimerGenericCommand+0x64>)
  4025d8:	4798      	blx	r3
  4025da:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4025dc:	f04f 0300 	mov.w	r3, #0
  4025e0:	bf0c      	ite	eq
  4025e2:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4025e4:	461a      	movne	r2, r3
  4025e6:	4669      	mov	r1, sp
  4025e8:	4806      	ldr	r0, [pc, #24]	; (402604 <xTimerGenericCommand+0x60>)
  4025ea:	6800      	ldr	r0, [r0, #0]
  4025ec:	4c07      	ldr	r4, [pc, #28]	; (40260c <xTimerGenericCommand+0x68>)
  4025ee:	47a0      	blx	r4
  4025f0:	e005      	b.n	4025fe <xTimerGenericCommand+0x5a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4025f2:	2300      	movs	r3, #0
  4025f4:	4669      	mov	r1, sp
  4025f6:	4c06      	ldr	r4, [pc, #24]	; (402610 <xTimerGenericCommand+0x6c>)
  4025f8:	47a0      	blx	r4
  4025fa:	e000      	b.n	4025fe <xTimerGenericCommand+0x5a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  4025fc:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  4025fe:	b005      	add	sp, #20
  402600:	bd30      	pop	{r4, r5, pc}
  402602:	bf00      	nop
  402604:	20400a78 	.word	0x20400a78
  402608:	004021dd 	.word	0x004021dd
  40260c:	00401145 	.word	0x00401145
  402610:	00401321 	.word	0x00401321

00402614 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  402614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402618:	b082      	sub	sp, #8
  40261a:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  40261c:	4b25      	ldr	r3, [pc, #148]	; (4026b4 <prvSampleTimeNow+0xa0>)
  40261e:	4798      	blx	r3
  402620:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  402622:	4b25      	ldr	r3, [pc, #148]	; (4026b8 <prvSampleTimeNow+0xa4>)
  402624:	681b      	ldr	r3, [r3, #0]
  402626:	4298      	cmp	r0, r3
  402628:	d23b      	bcs.n	4026a2 <prvSampleTimeNow+0x8e>
  40262a:	e02b      	b.n	402684 <prvSampleTimeNow+0x70>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40262c:	68db      	ldr	r3, [r3, #12]
  40262e:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402632:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402634:	f104 0904 	add.w	r9, r4, #4
  402638:	4648      	mov	r0, r9
  40263a:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40263c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40263e:	4620      	mov	r0, r4
  402640:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402642:	69e3      	ldr	r3, [r4, #28]
  402644:	2b01      	cmp	r3, #1
  402646:	d11f      	bne.n	402688 <prvSampleTimeNow+0x74>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402648:	69a3      	ldr	r3, [r4, #24]
  40264a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  40264c:	459a      	cmp	sl, r3
  40264e:	d206      	bcs.n	40265e <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402650:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402652:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402654:	4649      	mov	r1, r9
  402656:	6828      	ldr	r0, [r5, #0]
  402658:	4b18      	ldr	r3, [pc, #96]	; (4026bc <prvSampleTimeNow+0xa8>)
  40265a:	4798      	blx	r3
  40265c:	e014      	b.n	402688 <prvSampleTimeNow+0x74>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40265e:	2100      	movs	r1, #0
  402660:	9100      	str	r1, [sp, #0]
  402662:	460b      	mov	r3, r1
  402664:	4652      	mov	r2, sl
  402666:	4620      	mov	r0, r4
  402668:	4c15      	ldr	r4, [pc, #84]	; (4026c0 <prvSampleTimeNow+0xac>)
  40266a:	47a0      	blx	r4
				configASSERT( xResult );
  40266c:	b960      	cbnz	r0, 402688 <prvSampleTimeNow+0x74>
  40266e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402672:	b672      	cpsid	i
  402674:	f383 8811 	msr	BASEPRI, r3
  402678:	f3bf 8f6f 	isb	sy
  40267c:	f3bf 8f4f 	dsb	sy
  402680:	b662      	cpsie	i
  402682:	e7fe      	b.n	402682 <prvSampleTimeNow+0x6e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402684:	4d0f      	ldr	r5, [pc, #60]	; (4026c4 <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402686:	4e10      	ldr	r6, [pc, #64]	; (4026c8 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402688:	682b      	ldr	r3, [r5, #0]
  40268a:	681a      	ldr	r2, [r3, #0]
  40268c:	2a00      	cmp	r2, #0
  40268e:	d1cd      	bne.n	40262c <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  402690:	4a0e      	ldr	r2, [pc, #56]	; (4026cc <prvSampleTimeNow+0xb8>)
  402692:	6810      	ldr	r0, [r2, #0]
  402694:	490b      	ldr	r1, [pc, #44]	; (4026c4 <prvSampleTimeNow+0xb0>)
  402696:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402698:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  40269a:	2301      	movs	r3, #1
  40269c:	f8c8 3000 	str.w	r3, [r8]
  4026a0:	e002      	b.n	4026a8 <prvSampleTimeNow+0x94>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  4026a2:	2300      	movs	r3, #0
  4026a4:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  4026a8:	4b03      	ldr	r3, [pc, #12]	; (4026b8 <prvSampleTimeNow+0xa4>)
  4026aa:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  4026ac:	4638      	mov	r0, r7
  4026ae:	b002      	add	sp, #8
  4026b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4026b4:	00401a61 	.word	0x00401a61
  4026b8:	20400a74 	.word	0x20400a74
  4026bc:	00400a99 	.word	0x00400a99
  4026c0:	004025a5 	.word	0x004025a5
  4026c4:	20400a48 	.word	0x20400a48
  4026c8:	00400acd 	.word	0x00400acd
  4026cc:	20400a7c 	.word	0x20400a7c

004026d0 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  4026d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4026d4:	b089      	sub	sp, #36	; 0x24
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4026d6:	4c68      	ldr	r4, [pc, #416]	; (402878 <prvTimerTask+0x1a8>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  4026d8:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 4028a8 <prvTimerTask+0x1d8>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4026dc:	4d67      	ldr	r5, [pc, #412]	; (40287c <prvTimerTask+0x1ac>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4026de:	4b68      	ldr	r3, [pc, #416]	; (402880 <prvTimerTask+0x1b0>)
  4026e0:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  4026e2:	681a      	ldr	r2, [r3, #0]
  4026e4:	2a00      	cmp	r2, #0
  4026e6:	f000 80b5 	beq.w	402854 <prvTimerTask+0x184>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4026ea:	68db      	ldr	r3, [r3, #12]
  4026ec:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  4026ee:	4b65      	ldr	r3, [pc, #404]	; (402884 <prvTimerTask+0x1b4>)
  4026f0:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4026f2:	a804      	add	r0, sp, #16
  4026f4:	4b64      	ldr	r3, [pc, #400]	; (402888 <prvTimerTask+0x1b8>)
  4026f6:	4798      	blx	r3
  4026f8:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4026fa:	9b04      	ldr	r3, [sp, #16]
  4026fc:	2b00      	cmp	r3, #0
  4026fe:	d144      	bne.n	40278a <prvTimerTask+0xba>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402700:	42b0      	cmp	r0, r6
  402702:	d330      	bcc.n	402766 <prvTimerTask+0x96>
			{
				( void ) xTaskResumeAll();
  402704:	4b61      	ldr	r3, [pc, #388]	; (40288c <prvTimerTask+0x1bc>)
  402706:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402708:	4b5d      	ldr	r3, [pc, #372]	; (402880 <prvTimerTask+0x1b0>)
  40270a:	681b      	ldr	r3, [r3, #0]
  40270c:	68db      	ldr	r3, [r3, #12]
  40270e:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402712:	f109 0004 	add.w	r0, r9, #4
  402716:	4b5e      	ldr	r3, [pc, #376]	; (402890 <prvTimerTask+0x1c0>)
  402718:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40271a:	f8d9 301c 	ldr.w	r3, [r9, #28]
  40271e:	2b01      	cmp	r3, #1
  402720:	d11c      	bne.n	40275c <prvTimerTask+0x8c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402722:	f8d9 1018 	ldr.w	r1, [r9, #24]
  402726:	4633      	mov	r3, r6
  402728:	463a      	mov	r2, r7
  40272a:	4431      	add	r1, r6
  40272c:	4648      	mov	r0, r9
  40272e:	4f59      	ldr	r7, [pc, #356]	; (402894 <prvTimerTask+0x1c4>)
  402730:	47b8      	blx	r7
  402732:	2801      	cmp	r0, #1
  402734:	d112      	bne.n	40275c <prvTimerTask+0x8c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402736:	2100      	movs	r1, #0
  402738:	9100      	str	r1, [sp, #0]
  40273a:	460b      	mov	r3, r1
  40273c:	4632      	mov	r2, r6
  40273e:	4648      	mov	r0, r9
  402740:	4e55      	ldr	r6, [pc, #340]	; (402898 <prvTimerTask+0x1c8>)
  402742:	47b0      	blx	r6
			configASSERT( xResult );
  402744:	b950      	cbnz	r0, 40275c <prvTimerTask+0x8c>
  402746:	f04f 0380 	mov.w	r3, #128	; 0x80
  40274a:	b672      	cpsid	i
  40274c:	f383 8811 	msr	BASEPRI, r3
  402750:	f3bf 8f6f 	isb	sy
  402754:	f3bf 8f4f 	dsb	sy
  402758:	b662      	cpsie	i
  40275a:	e7fe      	b.n	40275a <prvTimerTask+0x8a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40275c:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  402760:	4648      	mov	r0, r9
  402762:	4798      	blx	r3
  402764:	e06d      	b.n	402842 <prvTimerTask+0x172>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402766:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402768:	1bf1      	subs	r1, r6, r7
  40276a:	6820      	ldr	r0, [r4, #0]
  40276c:	4b4b      	ldr	r3, [pc, #300]	; (40289c <prvTimerTask+0x1cc>)
  40276e:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  402770:	4b46      	ldr	r3, [pc, #280]	; (40288c <prvTimerTask+0x1bc>)
  402772:	4798      	blx	r3
  402774:	2800      	cmp	r0, #0
  402776:	d164      	bne.n	402842 <prvTimerTask+0x172>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  402778:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40277c:	f8c8 3000 	str.w	r3, [r8]
  402780:	f3bf 8f4f 	dsb	sy
  402784:	f3bf 8f6f 	isb	sy
  402788:	e05b      	b.n	402842 <prvTimerTask+0x172>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  40278a:	4b40      	ldr	r3, [pc, #256]	; (40288c <prvTimerTask+0x1bc>)
  40278c:	4798      	blx	r3
  40278e:	e058      	b.n	402842 <prvTimerTask+0x172>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402790:	9b04      	ldr	r3, [sp, #16]
  402792:	2b00      	cmp	r3, #0
  402794:	da06      	bge.n	4027a4 <prvTimerTask+0xd4>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402796:	9907      	ldr	r1, [sp, #28]
  402798:	9806      	ldr	r0, [sp, #24]
  40279a:	9b05      	ldr	r3, [sp, #20]
  40279c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  40279e:	9b04      	ldr	r3, [sp, #16]
  4027a0:	2b00      	cmp	r3, #0
  4027a2:	db4f      	blt.n	402844 <prvTimerTask+0x174>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4027a4:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4027a6:	6973      	ldr	r3, [r6, #20]
  4027a8:	b10b      	cbz	r3, 4027ae <prvTimerTask+0xde>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4027aa:	1d30      	adds	r0, r6, #4
  4027ac:	47b8      	blx	r7
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4027ae:	a803      	add	r0, sp, #12
  4027b0:	4b35      	ldr	r3, [pc, #212]	; (402888 <prvTimerTask+0x1b8>)
  4027b2:	4798      	blx	r3

			switch( xMessage.xMessageID )
  4027b4:	9b04      	ldr	r3, [sp, #16]
  4027b6:	2b09      	cmp	r3, #9
  4027b8:	d844      	bhi.n	402844 <prvTimerTask+0x174>
  4027ba:	e8df f003 	tbb	[pc, r3]
  4027be:	0505      	.short	0x0505
  4027c0:	3f2a4305 	.word	0x3f2a4305
  4027c4:	2a430505 	.word	0x2a430505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4027c8:	9f05      	ldr	r7, [sp, #20]
  4027ca:	69b1      	ldr	r1, [r6, #24]
  4027cc:	463b      	mov	r3, r7
  4027ce:	4602      	mov	r2, r0
  4027d0:	4439      	add	r1, r7
  4027d2:	4630      	mov	r0, r6
  4027d4:	4f2f      	ldr	r7, [pc, #188]	; (402894 <prvTimerTask+0x1c4>)
  4027d6:	47b8      	blx	r7
  4027d8:	2801      	cmp	r0, #1
  4027da:	d132      	bne.n	402842 <prvTimerTask+0x172>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4027dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4027de:	4630      	mov	r0, r6
  4027e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4027e2:	69f3      	ldr	r3, [r6, #28]
  4027e4:	2b01      	cmp	r3, #1
  4027e6:	d12c      	bne.n	402842 <prvTimerTask+0x172>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4027e8:	69b2      	ldr	r2, [r6, #24]
  4027ea:	2100      	movs	r1, #0
  4027ec:	9100      	str	r1, [sp, #0]
  4027ee:	460b      	mov	r3, r1
  4027f0:	9805      	ldr	r0, [sp, #20]
  4027f2:	4402      	add	r2, r0
  4027f4:	4630      	mov	r0, r6
  4027f6:	4e28      	ldr	r6, [pc, #160]	; (402898 <prvTimerTask+0x1c8>)
  4027f8:	47b0      	blx	r6
							configASSERT( xResult );
  4027fa:	bb10      	cbnz	r0, 402842 <prvTimerTask+0x172>
  4027fc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402800:	b672      	cpsid	i
  402802:	f383 8811 	msr	BASEPRI, r3
  402806:	f3bf 8f6f 	isb	sy
  40280a:	f3bf 8f4f 	dsb	sy
  40280e:	b662      	cpsie	i
  402810:	e7fe      	b.n	402810 <prvTimerTask+0x140>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402812:	9905      	ldr	r1, [sp, #20]
  402814:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402816:	b951      	cbnz	r1, 40282e <prvTimerTask+0x15e>
  402818:	f04f 0380 	mov.w	r3, #128	; 0x80
  40281c:	b672      	cpsid	i
  40281e:	f383 8811 	msr	BASEPRI, r3
  402822:	f3bf 8f6f 	isb	sy
  402826:	f3bf 8f4f 	dsb	sy
  40282a:	b662      	cpsie	i
  40282c:	e7fe      	b.n	40282c <prvTimerTask+0x15c>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40282e:	4603      	mov	r3, r0
  402830:	4602      	mov	r2, r0
  402832:	4401      	add	r1, r0
  402834:	4630      	mov	r0, r6
  402836:	4e17      	ldr	r6, [pc, #92]	; (402894 <prvTimerTask+0x1c4>)
  402838:	47b0      	blx	r6
  40283a:	e002      	b.n	402842 <prvTimerTask+0x172>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  40283c:	4630      	mov	r0, r6
  40283e:	4b18      	ldr	r3, [pc, #96]	; (4028a0 <prvTimerTask+0x1d0>)
  402840:	4798      	blx	r3
			pxTimer = xMessage.u.xTimerParameters.pxTimer;

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402842:	4f13      	ldr	r7, [pc, #76]	; (402890 <prvTimerTask+0x1c0>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402844:	2300      	movs	r3, #0
  402846:	461a      	mov	r2, r3
  402848:	a904      	add	r1, sp, #16
  40284a:	6820      	ldr	r0, [r4, #0]
  40284c:	47a8      	blx	r5
  40284e:	2800      	cmp	r0, #0
  402850:	d19e      	bne.n	402790 <prvTimerTask+0xc0>
  402852:	e744      	b.n	4026de <prvTimerTask+0xe>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402854:	4b0b      	ldr	r3, [pc, #44]	; (402884 <prvTimerTask+0x1b4>)
  402856:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402858:	a804      	add	r0, sp, #16
  40285a:	4b0b      	ldr	r3, [pc, #44]	; (402888 <prvTimerTask+0x1b8>)
  40285c:	4798      	blx	r3
  40285e:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402860:	9b04      	ldr	r3, [sp, #16]
  402862:	2b00      	cmp	r3, #0
  402864:	d191      	bne.n	40278a <prvTimerTask+0xba>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402866:	4b0f      	ldr	r3, [pc, #60]	; (4028a4 <prvTimerTask+0x1d4>)
  402868:	681b      	ldr	r3, [r3, #0]
  40286a:	681a      	ldr	r2, [r3, #0]
  40286c:	fab2 f282 	clz	r2, r2
  402870:	0952      	lsrs	r2, r2, #5
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  402872:	2600      	movs	r6, #0
  402874:	e778      	b.n	402768 <prvTimerTask+0x98>
  402876:	bf00      	nop
  402878:	20400a78 	.word	0x20400a78
  40287c:	00401419 	.word	0x00401419
  402880:	20400a48 	.word	0x20400a48
  402884:	00401a51 	.word	0x00401a51
  402888:	00402615 	.word	0x00402615
  40288c:	00401bc1 	.word	0x00401bc1
  402890:	00400acd 	.word	0x00400acd
  402894:	00402481 	.word	0x00402481
  402898:	004025a5 	.word	0x004025a5
  40289c:	00401611 	.word	0x00401611
  4028a0:	00400e39 	.word	0x00400e39
  4028a4:	20400a7c 	.word	0x20400a7c
  4028a8:	e000ed04 	.word	0xe000ed04

004028ac <task_led1>:
		vTaskDelay(500);
	}
}

static void task_led1(void *pvParameters)
{
  4028ac:	b508      	push	{r3, lr}
	UNUSED(pvParameters);
	for (;;) {
		#if SAM4CM
		LED_Toggle(LED4);
		#else
		if(pio_get_output_data_status(LED1_PIO, LED1_PIN_MASK))
  4028ae:	4c0a      	ldr	r4, [pc, #40]	; (4028d8 <task_led1+0x2c>)
  4028b0:	4d0a      	ldr	r5, [pc, #40]	; (4028dc <task_led1+0x30>)
		pio_clear(LED1_PIO, LED1_PIN_MASK);
		else
		pio_set(LED1_PIO,LED1_PIN_MASK);
  4028b2:	4e0b      	ldr	r6, [pc, #44]	; (4028e0 <task_led1+0x34>)
	UNUSED(pvParameters);
	for (;;) {
		#if SAM4CM
		LED_Toggle(LED4);
		#else
		if(pio_get_output_data_status(LED1_PIO, LED1_PIN_MASK))
  4028b4:	2101      	movs	r1, #1
  4028b6:	4620      	mov	r0, r4
  4028b8:	47a8      	blx	r5
  4028ba:	b120      	cbz	r0, 4028c6 <task_led1+0x1a>
		pio_clear(LED1_PIO, LED1_PIN_MASK);
  4028bc:	2101      	movs	r1, #1
  4028be:	4620      	mov	r0, r4
  4028c0:	4b08      	ldr	r3, [pc, #32]	; (4028e4 <task_led1+0x38>)
  4028c2:	4798      	blx	r3
  4028c4:	e002      	b.n	4028cc <task_led1+0x20>
		else
		pio_set(LED1_PIO,LED1_PIN_MASK);
  4028c6:	2101      	movs	r1, #1
  4028c8:	4620      	mov	r0, r4
  4028ca:	47b0      	blx	r6
		#endif
		vTaskDelay(500);
  4028cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4028d0:	4b05      	ldr	r3, [pc, #20]	; (4028e8 <task_led1+0x3c>)
  4028d2:	4798      	blx	r3
	}
  4028d4:	e7ee      	b.n	4028b4 <task_led1+0x8>
  4028d6:	bf00      	nop
  4028d8:	400e0e00 	.word	0x400e0e00
  4028dc:	00400425 	.word	0x00400425
  4028e0:	0040041d 	.word	0x0040041d
  4028e4:	00400421 	.word	0x00400421
  4028e8:	00401cd9 	.word	0x00401cd9

004028ec <task_led>:

/**
 * \brief This task, when activated, make LED blink at a fixed rate
 */
static void task_led(void *pvParameters)
{
  4028ec:	b508      	push	{r3, lr}
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4028ee:	4c07      	ldr	r4, [pc, #28]	; (40290c <task_led+0x20>)
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  4028f0:	f44f 7680 	mov.w	r6, #256	; 0x100
	#if SAM4CM
		LED_Toggle(LED4);
	#else
		LED_Toggle(LED0);
	#endif
		vTaskDelay(500);
  4028f4:	4d06      	ldr	r5, [pc, #24]	; (402910 <task_led+0x24>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4028f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4028f8:	f413 7f80 	tst.w	r3, #256	; 0x100
  4028fc:	d001      	beq.n	402902 <task_led+0x16>
		port->PIO_CODR = mask;
  4028fe:	6366      	str	r6, [r4, #52]	; 0x34
  402900:	e000      	b.n	402904 <task_led+0x18>
	} else {
		port->PIO_SODR = mask;
  402902:	6326      	str	r6, [r4, #48]	; 0x30
  402904:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402908:	47a8      	blx	r5
	}
  40290a:	e7f4      	b.n	4028f6 <task_led+0xa>
  40290c:	400e1200 	.word	0x400e1200
  402910:	00401cd9 	.word	0x00401cd9

00402914 <task_monitor>:
/**
 * \brief This task, when activated, send every ten seconds on debug UART
 * the whole report of free heap and total tasks status
 */
static void task_monitor(void *pvParameters)
{
  402914:	b580      	push	{r7, lr}
	static portCHAR szList[256];
	UNUSED(pvParameters);

	for (;;) {
		printf("--- task ## %u", (unsigned int)uxTaskGetNumberOfTasks());
  402916:	4f09      	ldr	r7, [pc, #36]	; (40293c <task_monitor+0x28>)
  402918:	4e09      	ldr	r6, [pc, #36]	; (402940 <task_monitor+0x2c>)
  40291a:	4d0a      	ldr	r5, [pc, #40]	; (402944 <task_monitor+0x30>)
  40291c:	47b8      	blx	r7
  40291e:	4601      	mov	r1, r0
  402920:	4630      	mov	r0, r6
  402922:	47a8      	blx	r5
		vTaskList((signed portCHAR *)szList);
  402924:	4c08      	ldr	r4, [pc, #32]	; (402948 <task_monitor+0x34>)
  402926:	4620      	mov	r0, r4
  402928:	4b08      	ldr	r3, [pc, #32]	; (40294c <task_monitor+0x38>)
  40292a:	4798      	blx	r3
		printf(szList);
  40292c:	4620      	mov	r0, r4
  40292e:	47a8      	blx	r5
		vTaskDelay(1000);
  402930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402934:	4b06      	ldr	r3, [pc, #24]	; (402950 <task_monitor+0x3c>)
  402936:	4798      	blx	r3
  402938:	e7f0      	b.n	40291c <task_monitor+0x8>
  40293a:	bf00      	nop
  40293c:	00401a6d 	.word	0x00401a6d
  402940:	00409514 	.word	0x00409514
  402944:	00402ced 	.word	0x00402ced
  402948:	20400a80 	.word	0x20400a80
  40294c:	00402365 	.word	0x00402365
  402950:	00401cd9 	.word	0x00401cd9

00402954 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402954:	b5f0      	push	{r4, r5, r6, r7, lr}
  402956:	b083      	sub	sp, #12
  402958:	4605      	mov	r5, r0
  40295a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40295c:	2300      	movs	r3, #0
  40295e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402960:	4b29      	ldr	r3, [pc, #164]	; (402a08 <usart_serial_getchar+0xb4>)
  402962:	4298      	cmp	r0, r3
  402964:	d107      	bne.n	402976 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  402966:	461f      	mov	r7, r3
  402968:	4e28      	ldr	r6, [pc, #160]	; (402a0c <usart_serial_getchar+0xb8>)
  40296a:	4621      	mov	r1, r4
  40296c:	4638      	mov	r0, r7
  40296e:	47b0      	blx	r6
  402970:	2800      	cmp	r0, #0
  402972:	d1fa      	bne.n	40296a <usart_serial_getchar+0x16>
  402974:	e015      	b.n	4029a2 <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402976:	4b26      	ldr	r3, [pc, #152]	; (402a10 <usart_serial_getchar+0xbc>)
  402978:	4298      	cmp	r0, r3
  40297a:	d107      	bne.n	40298c <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  40297c:	461f      	mov	r7, r3
  40297e:	4e23      	ldr	r6, [pc, #140]	; (402a0c <usart_serial_getchar+0xb8>)
  402980:	4621      	mov	r1, r4
  402982:	4638      	mov	r0, r7
  402984:	47b0      	blx	r6
  402986:	2800      	cmp	r0, #0
  402988:	d1fa      	bne.n	402980 <usart_serial_getchar+0x2c>
  40298a:	e015      	b.n	4029b8 <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40298c:	4b21      	ldr	r3, [pc, #132]	; (402a14 <usart_serial_getchar+0xc0>)
  40298e:	4298      	cmp	r0, r3
  402990:	d107      	bne.n	4029a2 <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  402992:	461f      	mov	r7, r3
  402994:	4e1d      	ldr	r6, [pc, #116]	; (402a0c <usart_serial_getchar+0xb8>)
  402996:	4621      	mov	r1, r4
  402998:	4638      	mov	r0, r7
  40299a:	47b0      	blx	r6
  40299c:	2800      	cmp	r0, #0
  40299e:	d1fa      	bne.n	402996 <usart_serial_getchar+0x42>
  4029a0:	e017      	b.n	4029d2 <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4029a2:	4b1d      	ldr	r3, [pc, #116]	; (402a18 <usart_serial_getchar+0xc4>)
  4029a4:	429d      	cmp	r5, r3
  4029a6:	d107      	bne.n	4029b8 <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  4029a8:	461f      	mov	r7, r3
  4029aa:	4e18      	ldr	r6, [pc, #96]	; (402a0c <usart_serial_getchar+0xb8>)
  4029ac:	4621      	mov	r1, r4
  4029ae:	4638      	mov	r0, r7
  4029b0:	47b0      	blx	r6
  4029b2:	2800      	cmp	r0, #0
  4029b4:	d1fa      	bne.n	4029ac <usart_serial_getchar+0x58>
  4029b6:	e019      	b.n	4029ec <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4029b8:	4b18      	ldr	r3, [pc, #96]	; (402a1c <usart_serial_getchar+0xc8>)
  4029ba:	429d      	cmp	r5, r3
  4029bc:	d109      	bne.n	4029d2 <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  4029be:	461e      	mov	r6, r3
  4029c0:	4d17      	ldr	r5, [pc, #92]	; (402a20 <usart_serial_getchar+0xcc>)
  4029c2:	a901      	add	r1, sp, #4
  4029c4:	4630      	mov	r0, r6
  4029c6:	47a8      	blx	r5
  4029c8:	2800      	cmp	r0, #0
  4029ca:	d1fa      	bne.n	4029c2 <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  4029cc:	9b01      	ldr	r3, [sp, #4]
  4029ce:	7023      	strb	r3, [r4, #0]
  4029d0:	e018      	b.n	402a04 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4029d2:	4b14      	ldr	r3, [pc, #80]	; (402a24 <usart_serial_getchar+0xd0>)
  4029d4:	429d      	cmp	r5, r3
  4029d6:	d109      	bne.n	4029ec <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  4029d8:	461e      	mov	r6, r3
  4029da:	4d11      	ldr	r5, [pc, #68]	; (402a20 <usart_serial_getchar+0xcc>)
  4029dc:	a901      	add	r1, sp, #4
  4029de:	4630      	mov	r0, r6
  4029e0:	47a8      	blx	r5
  4029e2:	2800      	cmp	r0, #0
  4029e4:	d1fa      	bne.n	4029dc <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  4029e6:	9b01      	ldr	r3, [sp, #4]
  4029e8:	7023      	strb	r3, [r4, #0]
  4029ea:	e00b      	b.n	402a04 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4029ec:	4b0e      	ldr	r3, [pc, #56]	; (402a28 <usart_serial_getchar+0xd4>)
  4029ee:	429d      	cmp	r5, r3
  4029f0:	d108      	bne.n	402a04 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  4029f2:	461e      	mov	r6, r3
  4029f4:	4d0a      	ldr	r5, [pc, #40]	; (402a20 <usart_serial_getchar+0xcc>)
  4029f6:	a901      	add	r1, sp, #4
  4029f8:	4630      	mov	r0, r6
  4029fa:	47a8      	blx	r5
  4029fc:	2800      	cmp	r0, #0
  4029fe:	d1fa      	bne.n	4029f6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  402a00:	9b01      	ldr	r3, [sp, #4]
  402a02:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402a04:	b003      	add	sp, #12
  402a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402a08:	400e0800 	.word	0x400e0800
  402a0c:	0040067d 	.word	0x0040067d
  402a10:	400e0a00 	.word	0x400e0a00
  402a14:	400e1a00 	.word	0x400e1a00
  402a18:	400e1c00 	.word	0x400e1c00
  402a1c:	40024000 	.word	0x40024000
  402a20:	00400795 	.word	0x00400795
  402a24:	40028000 	.word	0x40028000
  402a28:	4002c000 	.word	0x4002c000

00402a2c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  402a2c:	b570      	push	{r4, r5, r6, lr}
  402a2e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402a30:	4b2a      	ldr	r3, [pc, #168]	; (402adc <usart_serial_putchar+0xb0>)
  402a32:	4298      	cmp	r0, r3
  402a34:	d108      	bne.n	402a48 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  402a36:	461e      	mov	r6, r3
  402a38:	4d29      	ldr	r5, [pc, #164]	; (402ae0 <usart_serial_putchar+0xb4>)
  402a3a:	4621      	mov	r1, r4
  402a3c:	4630      	mov	r0, r6
  402a3e:	47a8      	blx	r5
  402a40:	2800      	cmp	r0, #0
  402a42:	d1fa      	bne.n	402a3a <usart_serial_putchar+0xe>
		return 1;
  402a44:	2001      	movs	r0, #1
  402a46:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402a48:	4b26      	ldr	r3, [pc, #152]	; (402ae4 <usart_serial_putchar+0xb8>)
  402a4a:	4298      	cmp	r0, r3
  402a4c:	d108      	bne.n	402a60 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  402a4e:	461e      	mov	r6, r3
  402a50:	4d23      	ldr	r5, [pc, #140]	; (402ae0 <usart_serial_putchar+0xb4>)
  402a52:	4621      	mov	r1, r4
  402a54:	4630      	mov	r0, r6
  402a56:	47a8      	blx	r5
  402a58:	2800      	cmp	r0, #0
  402a5a:	d1fa      	bne.n	402a52 <usart_serial_putchar+0x26>
		return 1;
  402a5c:	2001      	movs	r0, #1
  402a5e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402a60:	4b21      	ldr	r3, [pc, #132]	; (402ae8 <usart_serial_putchar+0xbc>)
  402a62:	4298      	cmp	r0, r3
  402a64:	d108      	bne.n	402a78 <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  402a66:	461e      	mov	r6, r3
  402a68:	4d1d      	ldr	r5, [pc, #116]	; (402ae0 <usart_serial_putchar+0xb4>)
  402a6a:	4621      	mov	r1, r4
  402a6c:	4630      	mov	r0, r6
  402a6e:	47a8      	blx	r5
  402a70:	2800      	cmp	r0, #0
  402a72:	d1fa      	bne.n	402a6a <usart_serial_putchar+0x3e>
		return 1;
  402a74:	2001      	movs	r0, #1
  402a76:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402a78:	4b1c      	ldr	r3, [pc, #112]	; (402aec <usart_serial_putchar+0xc0>)
  402a7a:	4298      	cmp	r0, r3
  402a7c:	d108      	bne.n	402a90 <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  402a7e:	461e      	mov	r6, r3
  402a80:	4d17      	ldr	r5, [pc, #92]	; (402ae0 <usart_serial_putchar+0xb4>)
  402a82:	4621      	mov	r1, r4
  402a84:	4630      	mov	r0, r6
  402a86:	47a8      	blx	r5
  402a88:	2800      	cmp	r0, #0
  402a8a:	d1fa      	bne.n	402a82 <usart_serial_putchar+0x56>
		return 1;
  402a8c:	2001      	movs	r0, #1
  402a8e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402a90:	4b17      	ldr	r3, [pc, #92]	; (402af0 <usart_serial_putchar+0xc4>)
  402a92:	4298      	cmp	r0, r3
  402a94:	d108      	bne.n	402aa8 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  402a96:	461e      	mov	r6, r3
  402a98:	4d16      	ldr	r5, [pc, #88]	; (402af4 <usart_serial_putchar+0xc8>)
  402a9a:	4621      	mov	r1, r4
  402a9c:	4630      	mov	r0, r6
  402a9e:	47a8      	blx	r5
  402aa0:	2800      	cmp	r0, #0
  402aa2:	d1fa      	bne.n	402a9a <usart_serial_putchar+0x6e>
		return 1;
  402aa4:	2001      	movs	r0, #1
  402aa6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402aa8:	4b13      	ldr	r3, [pc, #76]	; (402af8 <usart_serial_putchar+0xcc>)
  402aaa:	4298      	cmp	r0, r3
  402aac:	d108      	bne.n	402ac0 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  402aae:	461e      	mov	r6, r3
  402ab0:	4d10      	ldr	r5, [pc, #64]	; (402af4 <usart_serial_putchar+0xc8>)
  402ab2:	4621      	mov	r1, r4
  402ab4:	4630      	mov	r0, r6
  402ab6:	47a8      	blx	r5
  402ab8:	2800      	cmp	r0, #0
  402aba:	d1fa      	bne.n	402ab2 <usart_serial_putchar+0x86>
		return 1;
  402abc:	2001      	movs	r0, #1
  402abe:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402ac0:	4b0e      	ldr	r3, [pc, #56]	; (402afc <usart_serial_putchar+0xd0>)
  402ac2:	4298      	cmp	r0, r3
  402ac4:	d108      	bne.n	402ad8 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  402ac6:	461e      	mov	r6, r3
  402ac8:	4d0a      	ldr	r5, [pc, #40]	; (402af4 <usart_serial_putchar+0xc8>)
  402aca:	4621      	mov	r1, r4
  402acc:	4630      	mov	r0, r6
  402ace:	47a8      	blx	r5
  402ad0:	2800      	cmp	r0, #0
  402ad2:	d1fa      	bne.n	402aca <usart_serial_putchar+0x9e>
		return 1;
  402ad4:	2001      	movs	r0, #1
  402ad6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402ad8:	2000      	movs	r0, #0
}
  402ada:	bd70      	pop	{r4, r5, r6, pc}
  402adc:	400e0800 	.word	0x400e0800
  402ae0:	00400669 	.word	0x00400669
  402ae4:	400e0a00 	.word	0x400e0a00
  402ae8:	400e1a00 	.word	0x400e1a00
  402aec:	400e1c00 	.word	0x400e1c00
  402af0:	40024000 	.word	0x40024000
  402af4:	0040077d 	.word	0x0040077d
  402af8:	40028000 	.word	0x40028000
  402afc:	4002c000 	.word	0x4002c000

00402b00 <vApplicationStackOverflowHook>:
/**
 * \brief Called if stack overflow during execution
 */
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
		signed char *pcTaskName)
{
  402b00:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402b02:	460a      	mov	r2, r1
  402b04:	4601      	mov	r1, r0
  402b06:	4802      	ldr	r0, [pc, #8]	; (402b10 <vApplicationStackOverflowHook+0x10>)
  402b08:	4b02      	ldr	r3, [pc, #8]	; (402b14 <vApplicationStackOverflowHook+0x14>)
  402b0a:	4798      	blx	r3
  402b0c:	e7fe      	b.n	402b0c <vApplicationStackOverflowHook+0xc>
  402b0e:	bf00      	nop
  402b10:	00409524 	.word	0x00409524
  402b14:	00402ced 	.word	0x00402ced

00402b18 <vApplicationTickHook>:

/**
 * \brief This function is called by FreeRTOS each tick
 */
extern void vApplicationTickHook(void)
{
  402b18:	4770      	bx	lr
  402b1a:	bf00      	nop

00402b1c <vApplicationMallocFailedHook>:
  402b1c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b20:	b672      	cpsid	i
  402b22:	f383 8811 	msr	BASEPRI, r3
  402b26:	f3bf 8f6f 	isb	sy
  402b2a:	f3bf 8f4f 	dsb	sy
  402b2e:	b662      	cpsie	i
  402b30:	e7fe      	b.n	402b30 <vApplicationMallocFailedHook+0x14>
  402b32:	bf00      	nop

00402b34 <main>:
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  402b34:	b570      	push	{r4, r5, r6, lr}
  402b36:	b08a      	sub	sp, #40	; 0x28
	/* Initialize the SAM system */
	sysclk_init();
  402b38:	4b38      	ldr	r3, [pc, #224]	; (402c1c <main+0xe8>)
  402b3a:	4798      	blx	r3
	board_init();
  402b3c:	4b38      	ldr	r3, [pc, #224]	; (402c20 <main+0xec>)
  402b3e:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  402b40:	4d38      	ldr	r5, [pc, #224]	; (402c24 <main+0xf0>)
  402b42:	4b39      	ldr	r3, [pc, #228]	; (402c28 <main+0xf4>)
  402b44:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402b46:	4a39      	ldr	r2, [pc, #228]	; (402c2c <main+0xf8>)
  402b48:	4b39      	ldr	r3, [pc, #228]	; (402c30 <main+0xfc>)
  402b4a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402b4c:	4a39      	ldr	r2, [pc, #228]	; (402c34 <main+0x100>)
  402b4e:	4b3a      	ldr	r3, [pc, #232]	; (402c38 <main+0x104>)
  402b50:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  402b52:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402b56:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  402b58:	23c0      	movs	r3, #192	; 0xc0
  402b5a:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  402b5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402b60:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  402b62:	2400      	movs	r4, #0
  402b64:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402b66:	9408      	str	r4, [sp, #32]
  402b68:	200e      	movs	r0, #14
  402b6a:	4b34      	ldr	r3, [pc, #208]	; (402c3c <main+0x108>)
  402b6c:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402b6e:	4a34      	ldr	r2, [pc, #208]	; (402c40 <main+0x10c>)
  402b70:	a904      	add	r1, sp, #16
  402b72:	4628      	mov	r0, r5
  402b74:	4b33      	ldr	r3, [pc, #204]	; (402c44 <main+0x110>)
  402b76:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402b78:	4628      	mov	r0, r5
  402b7a:	4b33      	ldr	r3, [pc, #204]	; (402c48 <main+0x114>)
  402b7c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402b7e:	4628      	mov	r0, r5
  402b80:	4b32      	ldr	r3, [pc, #200]	; (402c4c <main+0x118>)
  402b82:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402b84:	4e32      	ldr	r6, [pc, #200]	; (402c50 <main+0x11c>)
  402b86:	6833      	ldr	r3, [r6, #0]
  402b88:	4621      	mov	r1, r4
  402b8a:	6898      	ldr	r0, [r3, #8]
  402b8c:	4d31      	ldr	r5, [pc, #196]	; (402c54 <main+0x120>)
  402b8e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402b90:	6833      	ldr	r3, [r6, #0]
  402b92:	4621      	mov	r1, r4
  402b94:	6858      	ldr	r0, [r3, #4]
  402b96:	47a8      	blx	r5
	/* Configure console UART. */
	stdio_serial_init(CONF_UART, &uart_serial_options);

	/* Specify that stdout should not be buffered. */
#if defined(__GNUC__)
	setbuf(stdout, NULL);
  402b98:	6833      	ldr	r3, [r6, #0]
  402b9a:	4621      	mov	r1, r4
  402b9c:	6898      	ldr	r0, [r3, #8]
  402b9e:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();

	/* Output demo infomation. */
	printf("-- Freertos Example --\n\r");
  402ba0:	482d      	ldr	r0, [pc, #180]	; (402c58 <main+0x124>)
  402ba2:	4d2e      	ldr	r5, [pc, #184]	; (402c5c <main+0x128>)
  402ba4:	47a8      	blx	r5
	printf("-- %s\n\r", BOARD_NAME);
  402ba6:	492e      	ldr	r1, [pc, #184]	; (402c60 <main+0x12c>)
  402ba8:	482e      	ldr	r0, [pc, #184]	; (402c64 <main+0x130>)
  402baa:	47a8      	blx	r5
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  402bac:	4a2e      	ldr	r2, [pc, #184]	; (402c68 <main+0x134>)
  402bae:	492f      	ldr	r1, [pc, #188]	; (402c6c <main+0x138>)
  402bb0:	482f      	ldr	r0, [pc, #188]	; (402c70 <main+0x13c>)
  402bb2:	47a8      	blx	r5


	/* Create task to monitor processor activity */
	if (xTaskCreate(task_monitor, "Monitor", TASK_MONITOR_STACK_SIZE, NULL,
  402bb4:	9403      	str	r4, [sp, #12]
  402bb6:	9402      	str	r4, [sp, #8]
  402bb8:	9401      	str	r4, [sp, #4]
  402bba:	9400      	str	r4, [sp, #0]
  402bbc:	4623      	mov	r3, r4
  402bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
  402bc2:	492c      	ldr	r1, [pc, #176]	; (402c74 <main+0x140>)
  402bc4:	482c      	ldr	r0, [pc, #176]	; (402c78 <main+0x144>)
  402bc6:	4c2d      	ldr	r4, [pc, #180]	; (402c7c <main+0x148>)
  402bc8:	47a0      	blx	r4
  402bca:	2801      	cmp	r0, #1
  402bcc:	d001      	beq.n	402bd2 <main+0x9e>
			TASK_MONITOR_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create Monitor task\r\n");
  402bce:	482c      	ldr	r0, [pc, #176]	; (402c80 <main+0x14c>)
  402bd0:	47a8      	blx	r5
	}

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
  402bd2:	2300      	movs	r3, #0
  402bd4:	9303      	str	r3, [sp, #12]
  402bd6:	9302      	str	r3, [sp, #8]
  402bd8:	9301      	str	r3, [sp, #4]
  402bda:	9300      	str	r3, [sp, #0]
  402bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
  402be0:	4928      	ldr	r1, [pc, #160]	; (402c84 <main+0x150>)
  402be2:	4829      	ldr	r0, [pc, #164]	; (402c88 <main+0x154>)
  402be4:	4c25      	ldr	r4, [pc, #148]	; (402c7c <main+0x148>)
  402be6:	47a0      	blx	r4
  402be8:	2801      	cmp	r0, #1
  402bea:	d002      	beq.n	402bf2 <main+0xbe>
			TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  402bec:	4827      	ldr	r0, [pc, #156]	; (402c8c <main+0x158>)
  402bee:	4b1b      	ldr	r3, [pc, #108]	; (402c5c <main+0x128>)
  402bf0:	4798      	blx	r3
	}

		/* Create task to make led blink */
	if (xTaskCreate(task_led1, "Led", TASK_LED_STACK_SIZE, NULL,
  402bf2:	2300      	movs	r3, #0
  402bf4:	9303      	str	r3, [sp, #12]
  402bf6:	9302      	str	r3, [sp, #8]
  402bf8:	9301      	str	r3, [sp, #4]
  402bfa:	9300      	str	r3, [sp, #0]
  402bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
  402c00:	4920      	ldr	r1, [pc, #128]	; (402c84 <main+0x150>)
  402c02:	4823      	ldr	r0, [pc, #140]	; (402c90 <main+0x15c>)
  402c04:	4c1d      	ldr	r4, [pc, #116]	; (402c7c <main+0x148>)
  402c06:	47a0      	blx	r4
  402c08:	2801      	cmp	r0, #1
  402c0a:	d002      	beq.n	402c12 <main+0xde>
		TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led1 task\r\n");
  402c0c:	4821      	ldr	r0, [pc, #132]	; (402c94 <main+0x160>)
  402c0e:	4b13      	ldr	r3, [pc, #76]	; (402c5c <main+0x128>)
  402c10:	4798      	blx	r3
	}
	/* Start the scheduler. */
	vTaskStartScheduler();
  402c12:	4b21      	ldr	r3, [pc, #132]	; (402c98 <main+0x164>)
  402c14:	4798      	blx	r3

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;
}
  402c16:	2000      	movs	r0, #0
  402c18:	b00a      	add	sp, #40	; 0x28
  402c1a:	bd70      	pop	{r4, r5, r6, pc}
  402c1c:	0040019d 	.word	0x0040019d
  402c20:	00400299 	.word	0x00400299
  402c24:	40028000 	.word	0x40028000
  402c28:	20400bbc 	.word	0x20400bbc
  402c2c:	00402a2d 	.word	0x00402a2d
  402c30:	20400bb8 	.word	0x20400bb8
  402c34:	00402955 	.word	0x00402955
  402c38:	20400bb4 	.word	0x20400bb4
  402c3c:	00400615 	.word	0x00400615
  402c40:	08f0d180 	.word	0x08f0d180
  402c44:	00400719 	.word	0x00400719
  402c48:	0040076d 	.word	0x0040076d
  402c4c:	00400775 	.word	0x00400775
  402c50:	20400438 	.word	0x20400438
  402c54:	004034a1 	.word	0x004034a1
  402c58:	0040953c 	.word	0x0040953c
  402c5c:	00402ced 	.word	0x00402ced
  402c60:	00409558 	.word	0x00409558
  402c64:	00409564 	.word	0x00409564
  402c68:	0040956c 	.word	0x0040956c
  402c6c:	00409578 	.word	0x00409578
  402c70:	00409584 	.word	0x00409584
  402c74:	0040959c 	.word	0x0040959c
  402c78:	00402915 	.word	0x00402915
  402c7c:	00401799 	.word	0x00401799
  402c80:	004095a4 	.word	0x004095a4
  402c84:	004095c4 	.word	0x004095c4
  402c88:	004028ed 	.word	0x004028ed
  402c8c:	004095c8 	.word	0x004095c8
  402c90:	004028ad 	.word	0x004028ad
  402c94:	004095ec 	.word	0x004095ec
  402c98:	004019c1 	.word	0x004019c1

00402c9c <__libc_init_array>:
  402c9c:	b570      	push	{r4, r5, r6, lr}
  402c9e:	4e0f      	ldr	r6, [pc, #60]	; (402cdc <__libc_init_array+0x40>)
  402ca0:	4d0f      	ldr	r5, [pc, #60]	; (402ce0 <__libc_init_array+0x44>)
  402ca2:	1b76      	subs	r6, r6, r5
  402ca4:	10b6      	asrs	r6, r6, #2
  402ca6:	bf18      	it	ne
  402ca8:	2400      	movne	r4, #0
  402caa:	d005      	beq.n	402cb8 <__libc_init_array+0x1c>
  402cac:	3401      	adds	r4, #1
  402cae:	f855 3b04 	ldr.w	r3, [r5], #4
  402cb2:	4798      	blx	r3
  402cb4:	42a6      	cmp	r6, r4
  402cb6:	d1f9      	bne.n	402cac <__libc_init_array+0x10>
  402cb8:	4e0a      	ldr	r6, [pc, #40]	; (402ce4 <__libc_init_array+0x48>)
  402cba:	4d0b      	ldr	r5, [pc, #44]	; (402ce8 <__libc_init_array+0x4c>)
  402cbc:	1b76      	subs	r6, r6, r5
  402cbe:	f006 fd79 	bl	4097b4 <_init>
  402cc2:	10b6      	asrs	r6, r6, #2
  402cc4:	bf18      	it	ne
  402cc6:	2400      	movne	r4, #0
  402cc8:	d006      	beq.n	402cd8 <__libc_init_array+0x3c>
  402cca:	3401      	adds	r4, #1
  402ccc:	f855 3b04 	ldr.w	r3, [r5], #4
  402cd0:	4798      	blx	r3
  402cd2:	42a6      	cmp	r6, r4
  402cd4:	d1f9      	bne.n	402cca <__libc_init_array+0x2e>
  402cd6:	bd70      	pop	{r4, r5, r6, pc}
  402cd8:	bd70      	pop	{r4, r5, r6, pc}
  402cda:	bf00      	nop
  402cdc:	004097c0 	.word	0x004097c0
  402ce0:	004097c0 	.word	0x004097c0
  402ce4:	004097c8 	.word	0x004097c8
  402ce8:	004097c0 	.word	0x004097c0

00402cec <iprintf>:
  402cec:	b40f      	push	{r0, r1, r2, r3}
  402cee:	b500      	push	{lr}
  402cf0:	4907      	ldr	r1, [pc, #28]	; (402d10 <iprintf+0x24>)
  402cf2:	b083      	sub	sp, #12
  402cf4:	ab04      	add	r3, sp, #16
  402cf6:	6808      	ldr	r0, [r1, #0]
  402cf8:	f853 2b04 	ldr.w	r2, [r3], #4
  402cfc:	6881      	ldr	r1, [r0, #8]
  402cfe:	9301      	str	r3, [sp, #4]
  402d00:	f002 f916 	bl	404f30 <_vfiprintf_r>
  402d04:	b003      	add	sp, #12
  402d06:	f85d eb04 	ldr.w	lr, [sp], #4
  402d0a:	b004      	add	sp, #16
  402d0c:	4770      	bx	lr
  402d0e:	bf00      	nop
  402d10:	20400438 	.word	0x20400438

00402d14 <malloc>:
  402d14:	4b02      	ldr	r3, [pc, #8]	; (402d20 <malloc+0xc>)
  402d16:	4601      	mov	r1, r0
  402d18:	6818      	ldr	r0, [r3, #0]
  402d1a:	f000 b80b 	b.w	402d34 <_malloc_r>
  402d1e:	bf00      	nop
  402d20:	20400438 	.word	0x20400438

00402d24 <free>:
  402d24:	4b02      	ldr	r3, [pc, #8]	; (402d30 <free+0xc>)
  402d26:	4601      	mov	r1, r0
  402d28:	6818      	ldr	r0, [r3, #0]
  402d2a:	f004 ba6b 	b.w	407204 <_free_r>
  402d2e:	bf00      	nop
  402d30:	20400438 	.word	0x20400438

00402d34 <_malloc_r>:
  402d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d38:	f101 050b 	add.w	r5, r1, #11
  402d3c:	2d16      	cmp	r5, #22
  402d3e:	b083      	sub	sp, #12
  402d40:	4606      	mov	r6, r0
  402d42:	f240 809f 	bls.w	402e84 <_malloc_r+0x150>
  402d46:	f035 0507 	bics.w	r5, r5, #7
  402d4a:	f100 80bf 	bmi.w	402ecc <_malloc_r+0x198>
  402d4e:	42a9      	cmp	r1, r5
  402d50:	f200 80bc 	bhi.w	402ecc <_malloc_r+0x198>
  402d54:	f000 fb8e 	bl	403474 <__malloc_lock>
  402d58:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  402d5c:	f0c0 829c 	bcc.w	403298 <_malloc_r+0x564>
  402d60:	0a6b      	lsrs	r3, r5, #9
  402d62:	f000 80ba 	beq.w	402eda <_malloc_r+0x1a6>
  402d66:	2b04      	cmp	r3, #4
  402d68:	f200 8183 	bhi.w	403072 <_malloc_r+0x33e>
  402d6c:	09a8      	lsrs	r0, r5, #6
  402d6e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  402d72:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402d76:	3038      	adds	r0, #56	; 0x38
  402d78:	4fc4      	ldr	r7, [pc, #784]	; (40308c <_malloc_r+0x358>)
  402d7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402d7e:	f1a3 0108 	sub.w	r1, r3, #8
  402d82:	685c      	ldr	r4, [r3, #4]
  402d84:	42a1      	cmp	r1, r4
  402d86:	d107      	bne.n	402d98 <_malloc_r+0x64>
  402d88:	e0ac      	b.n	402ee4 <_malloc_r+0x1b0>
  402d8a:	2a00      	cmp	r2, #0
  402d8c:	f280 80ac 	bge.w	402ee8 <_malloc_r+0x1b4>
  402d90:	68e4      	ldr	r4, [r4, #12]
  402d92:	42a1      	cmp	r1, r4
  402d94:	f000 80a6 	beq.w	402ee4 <_malloc_r+0x1b0>
  402d98:	6863      	ldr	r3, [r4, #4]
  402d9a:	f023 0303 	bic.w	r3, r3, #3
  402d9e:	1b5a      	subs	r2, r3, r5
  402da0:	2a0f      	cmp	r2, #15
  402da2:	ddf2      	ble.n	402d8a <_malloc_r+0x56>
  402da4:	49b9      	ldr	r1, [pc, #740]	; (40308c <_malloc_r+0x358>)
  402da6:	693c      	ldr	r4, [r7, #16]
  402da8:	f101 0e08 	add.w	lr, r1, #8
  402dac:	4574      	cmp	r4, lr
  402dae:	f000 81b3 	beq.w	403118 <_malloc_r+0x3e4>
  402db2:	6863      	ldr	r3, [r4, #4]
  402db4:	f023 0303 	bic.w	r3, r3, #3
  402db8:	1b5a      	subs	r2, r3, r5
  402dba:	2a0f      	cmp	r2, #15
  402dbc:	f300 8199 	bgt.w	4030f2 <_malloc_r+0x3be>
  402dc0:	2a00      	cmp	r2, #0
  402dc2:	f8c1 e014 	str.w	lr, [r1, #20]
  402dc6:	f8c1 e010 	str.w	lr, [r1, #16]
  402dca:	f280 809e 	bge.w	402f0a <_malloc_r+0x1d6>
  402dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402dd2:	f080 8167 	bcs.w	4030a4 <_malloc_r+0x370>
  402dd6:	08db      	lsrs	r3, r3, #3
  402dd8:	f103 0c01 	add.w	ip, r3, #1
  402ddc:	2201      	movs	r2, #1
  402dde:	109b      	asrs	r3, r3, #2
  402de0:	fa02 f303 	lsl.w	r3, r2, r3
  402de4:	684a      	ldr	r2, [r1, #4]
  402de6:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  402dea:	f8c4 8008 	str.w	r8, [r4, #8]
  402dee:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  402df2:	431a      	orrs	r2, r3
  402df4:	f1a9 0308 	sub.w	r3, r9, #8
  402df8:	60e3      	str	r3, [r4, #12]
  402dfa:	604a      	str	r2, [r1, #4]
  402dfc:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  402e00:	f8c8 400c 	str.w	r4, [r8, #12]
  402e04:	1083      	asrs	r3, r0, #2
  402e06:	2401      	movs	r4, #1
  402e08:	409c      	lsls	r4, r3
  402e0a:	4294      	cmp	r4, r2
  402e0c:	f200 808a 	bhi.w	402f24 <_malloc_r+0x1f0>
  402e10:	4214      	tst	r4, r2
  402e12:	d106      	bne.n	402e22 <_malloc_r+0xee>
  402e14:	f020 0003 	bic.w	r0, r0, #3
  402e18:	0064      	lsls	r4, r4, #1
  402e1a:	4214      	tst	r4, r2
  402e1c:	f100 0004 	add.w	r0, r0, #4
  402e20:	d0fa      	beq.n	402e18 <_malloc_r+0xe4>
  402e22:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402e26:	46cc      	mov	ip, r9
  402e28:	4680      	mov	r8, r0
  402e2a:	f8dc 100c 	ldr.w	r1, [ip, #12]
  402e2e:	458c      	cmp	ip, r1
  402e30:	d107      	bne.n	402e42 <_malloc_r+0x10e>
  402e32:	e173      	b.n	40311c <_malloc_r+0x3e8>
  402e34:	2a00      	cmp	r2, #0
  402e36:	f280 8181 	bge.w	40313c <_malloc_r+0x408>
  402e3a:	68c9      	ldr	r1, [r1, #12]
  402e3c:	458c      	cmp	ip, r1
  402e3e:	f000 816d 	beq.w	40311c <_malloc_r+0x3e8>
  402e42:	684b      	ldr	r3, [r1, #4]
  402e44:	f023 0303 	bic.w	r3, r3, #3
  402e48:	1b5a      	subs	r2, r3, r5
  402e4a:	2a0f      	cmp	r2, #15
  402e4c:	ddf2      	ble.n	402e34 <_malloc_r+0x100>
  402e4e:	460c      	mov	r4, r1
  402e50:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  402e54:	f854 8f08 	ldr.w	r8, [r4, #8]!
  402e58:	194b      	adds	r3, r1, r5
  402e5a:	f045 0501 	orr.w	r5, r5, #1
  402e5e:	604d      	str	r5, [r1, #4]
  402e60:	f042 0101 	orr.w	r1, r2, #1
  402e64:	f8c8 c00c 	str.w	ip, [r8, #12]
  402e68:	4630      	mov	r0, r6
  402e6a:	f8cc 8008 	str.w	r8, [ip, #8]
  402e6e:	617b      	str	r3, [r7, #20]
  402e70:	613b      	str	r3, [r7, #16]
  402e72:	f8c3 e00c 	str.w	lr, [r3, #12]
  402e76:	f8c3 e008 	str.w	lr, [r3, #8]
  402e7a:	6059      	str	r1, [r3, #4]
  402e7c:	509a      	str	r2, [r3, r2]
  402e7e:	f000 fafb 	bl	403478 <__malloc_unlock>
  402e82:	e01f      	b.n	402ec4 <_malloc_r+0x190>
  402e84:	2910      	cmp	r1, #16
  402e86:	d821      	bhi.n	402ecc <_malloc_r+0x198>
  402e88:	f000 faf4 	bl	403474 <__malloc_lock>
  402e8c:	2510      	movs	r5, #16
  402e8e:	2306      	movs	r3, #6
  402e90:	2002      	movs	r0, #2
  402e92:	4f7e      	ldr	r7, [pc, #504]	; (40308c <_malloc_r+0x358>)
  402e94:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402e98:	f1a3 0208 	sub.w	r2, r3, #8
  402e9c:	685c      	ldr	r4, [r3, #4]
  402e9e:	4294      	cmp	r4, r2
  402ea0:	f000 8145 	beq.w	40312e <_malloc_r+0x3fa>
  402ea4:	6863      	ldr	r3, [r4, #4]
  402ea6:	68e1      	ldr	r1, [r4, #12]
  402ea8:	68a5      	ldr	r5, [r4, #8]
  402eaa:	f023 0303 	bic.w	r3, r3, #3
  402eae:	4423      	add	r3, r4
  402eb0:	4630      	mov	r0, r6
  402eb2:	685a      	ldr	r2, [r3, #4]
  402eb4:	60e9      	str	r1, [r5, #12]
  402eb6:	f042 0201 	orr.w	r2, r2, #1
  402eba:	608d      	str	r5, [r1, #8]
  402ebc:	605a      	str	r2, [r3, #4]
  402ebe:	f000 fadb 	bl	403478 <__malloc_unlock>
  402ec2:	3408      	adds	r4, #8
  402ec4:	4620      	mov	r0, r4
  402ec6:	b003      	add	sp, #12
  402ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ecc:	2400      	movs	r4, #0
  402ece:	230c      	movs	r3, #12
  402ed0:	4620      	mov	r0, r4
  402ed2:	6033      	str	r3, [r6, #0]
  402ed4:	b003      	add	sp, #12
  402ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402eda:	2380      	movs	r3, #128	; 0x80
  402edc:	f04f 0e40 	mov.w	lr, #64	; 0x40
  402ee0:	203f      	movs	r0, #63	; 0x3f
  402ee2:	e749      	b.n	402d78 <_malloc_r+0x44>
  402ee4:	4670      	mov	r0, lr
  402ee6:	e75d      	b.n	402da4 <_malloc_r+0x70>
  402ee8:	4423      	add	r3, r4
  402eea:	68e1      	ldr	r1, [r4, #12]
  402eec:	685a      	ldr	r2, [r3, #4]
  402eee:	68a5      	ldr	r5, [r4, #8]
  402ef0:	f042 0201 	orr.w	r2, r2, #1
  402ef4:	60e9      	str	r1, [r5, #12]
  402ef6:	4630      	mov	r0, r6
  402ef8:	608d      	str	r5, [r1, #8]
  402efa:	605a      	str	r2, [r3, #4]
  402efc:	f000 fabc 	bl	403478 <__malloc_unlock>
  402f00:	3408      	adds	r4, #8
  402f02:	4620      	mov	r0, r4
  402f04:	b003      	add	sp, #12
  402f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f0a:	4423      	add	r3, r4
  402f0c:	4630      	mov	r0, r6
  402f0e:	685a      	ldr	r2, [r3, #4]
  402f10:	f042 0201 	orr.w	r2, r2, #1
  402f14:	605a      	str	r2, [r3, #4]
  402f16:	f000 faaf 	bl	403478 <__malloc_unlock>
  402f1a:	3408      	adds	r4, #8
  402f1c:	4620      	mov	r0, r4
  402f1e:	b003      	add	sp, #12
  402f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f24:	68bc      	ldr	r4, [r7, #8]
  402f26:	6863      	ldr	r3, [r4, #4]
  402f28:	f023 0803 	bic.w	r8, r3, #3
  402f2c:	45a8      	cmp	r8, r5
  402f2e:	d304      	bcc.n	402f3a <_malloc_r+0x206>
  402f30:	ebc5 0308 	rsb	r3, r5, r8
  402f34:	2b0f      	cmp	r3, #15
  402f36:	f300 808c 	bgt.w	403052 <_malloc_r+0x31e>
  402f3a:	4b55      	ldr	r3, [pc, #340]	; (403090 <_malloc_r+0x35c>)
  402f3c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4030a0 <_malloc_r+0x36c>
  402f40:	681a      	ldr	r2, [r3, #0]
  402f42:	f8d9 3000 	ldr.w	r3, [r9]
  402f46:	3301      	adds	r3, #1
  402f48:	442a      	add	r2, r5
  402f4a:	eb04 0a08 	add.w	sl, r4, r8
  402f4e:	f000 8160 	beq.w	403212 <_malloc_r+0x4de>
  402f52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  402f56:	320f      	adds	r2, #15
  402f58:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  402f5c:	f022 020f 	bic.w	r2, r2, #15
  402f60:	4611      	mov	r1, r2
  402f62:	4630      	mov	r0, r6
  402f64:	9201      	str	r2, [sp, #4]
  402f66:	f000 fa89 	bl	40347c <_sbrk_r>
  402f6a:	f1b0 3fff 	cmp.w	r0, #4294967295
  402f6e:	4683      	mov	fp, r0
  402f70:	9a01      	ldr	r2, [sp, #4]
  402f72:	f000 8158 	beq.w	403226 <_malloc_r+0x4f2>
  402f76:	4582      	cmp	sl, r0
  402f78:	f200 80fc 	bhi.w	403174 <_malloc_r+0x440>
  402f7c:	4b45      	ldr	r3, [pc, #276]	; (403094 <_malloc_r+0x360>)
  402f7e:	6819      	ldr	r1, [r3, #0]
  402f80:	45da      	cmp	sl, fp
  402f82:	4411      	add	r1, r2
  402f84:	6019      	str	r1, [r3, #0]
  402f86:	f000 8153 	beq.w	403230 <_malloc_r+0x4fc>
  402f8a:	f8d9 0000 	ldr.w	r0, [r9]
  402f8e:	f8df e110 	ldr.w	lr, [pc, #272]	; 4030a0 <_malloc_r+0x36c>
  402f92:	3001      	adds	r0, #1
  402f94:	bf1b      	ittet	ne
  402f96:	ebca 0a0b 	rsbne	sl, sl, fp
  402f9a:	4451      	addne	r1, sl
  402f9c:	f8ce b000 	streq.w	fp, [lr]
  402fa0:	6019      	strne	r1, [r3, #0]
  402fa2:	f01b 0107 	ands.w	r1, fp, #7
  402fa6:	f000 8117 	beq.w	4031d8 <_malloc_r+0x4a4>
  402faa:	f1c1 0008 	rsb	r0, r1, #8
  402fae:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402fb2:	4483      	add	fp, r0
  402fb4:	3108      	adds	r1, #8
  402fb6:	445a      	add	r2, fp
  402fb8:	f3c2 020b 	ubfx	r2, r2, #0, #12
  402fbc:	ebc2 0901 	rsb	r9, r2, r1
  402fc0:	4649      	mov	r1, r9
  402fc2:	4630      	mov	r0, r6
  402fc4:	9301      	str	r3, [sp, #4]
  402fc6:	f000 fa59 	bl	40347c <_sbrk_r>
  402fca:	1c43      	adds	r3, r0, #1
  402fcc:	9b01      	ldr	r3, [sp, #4]
  402fce:	f000 813f 	beq.w	403250 <_malloc_r+0x51c>
  402fd2:	ebcb 0200 	rsb	r2, fp, r0
  402fd6:	444a      	add	r2, r9
  402fd8:	f042 0201 	orr.w	r2, r2, #1
  402fdc:	6819      	ldr	r1, [r3, #0]
  402fde:	f8c7 b008 	str.w	fp, [r7, #8]
  402fe2:	4449      	add	r1, r9
  402fe4:	42bc      	cmp	r4, r7
  402fe6:	f8cb 2004 	str.w	r2, [fp, #4]
  402fea:	6019      	str	r1, [r3, #0]
  402fec:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 403094 <_malloc_r+0x360>
  402ff0:	d016      	beq.n	403020 <_malloc_r+0x2ec>
  402ff2:	f1b8 0f0f 	cmp.w	r8, #15
  402ff6:	f240 80fd 	bls.w	4031f4 <_malloc_r+0x4c0>
  402ffa:	6862      	ldr	r2, [r4, #4]
  402ffc:	f1a8 030c 	sub.w	r3, r8, #12
  403000:	f023 0307 	bic.w	r3, r3, #7
  403004:	18e0      	adds	r0, r4, r3
  403006:	f002 0201 	and.w	r2, r2, #1
  40300a:	f04f 0e05 	mov.w	lr, #5
  40300e:	431a      	orrs	r2, r3
  403010:	2b0f      	cmp	r3, #15
  403012:	6062      	str	r2, [r4, #4]
  403014:	f8c0 e004 	str.w	lr, [r0, #4]
  403018:	f8c0 e008 	str.w	lr, [r0, #8]
  40301c:	f200 811c 	bhi.w	403258 <_malloc_r+0x524>
  403020:	4b1d      	ldr	r3, [pc, #116]	; (403098 <_malloc_r+0x364>)
  403022:	68bc      	ldr	r4, [r7, #8]
  403024:	681a      	ldr	r2, [r3, #0]
  403026:	4291      	cmp	r1, r2
  403028:	bf88      	it	hi
  40302a:	6019      	strhi	r1, [r3, #0]
  40302c:	4b1b      	ldr	r3, [pc, #108]	; (40309c <_malloc_r+0x368>)
  40302e:	681a      	ldr	r2, [r3, #0]
  403030:	4291      	cmp	r1, r2
  403032:	6862      	ldr	r2, [r4, #4]
  403034:	bf88      	it	hi
  403036:	6019      	strhi	r1, [r3, #0]
  403038:	f022 0203 	bic.w	r2, r2, #3
  40303c:	4295      	cmp	r5, r2
  40303e:	eba2 0305 	sub.w	r3, r2, r5
  403042:	d801      	bhi.n	403048 <_malloc_r+0x314>
  403044:	2b0f      	cmp	r3, #15
  403046:	dc04      	bgt.n	403052 <_malloc_r+0x31e>
  403048:	4630      	mov	r0, r6
  40304a:	f000 fa15 	bl	403478 <__malloc_unlock>
  40304e:	2400      	movs	r4, #0
  403050:	e738      	b.n	402ec4 <_malloc_r+0x190>
  403052:	1962      	adds	r2, r4, r5
  403054:	f043 0301 	orr.w	r3, r3, #1
  403058:	f045 0501 	orr.w	r5, r5, #1
  40305c:	6065      	str	r5, [r4, #4]
  40305e:	4630      	mov	r0, r6
  403060:	60ba      	str	r2, [r7, #8]
  403062:	6053      	str	r3, [r2, #4]
  403064:	f000 fa08 	bl	403478 <__malloc_unlock>
  403068:	3408      	adds	r4, #8
  40306a:	4620      	mov	r0, r4
  40306c:	b003      	add	sp, #12
  40306e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403072:	2b14      	cmp	r3, #20
  403074:	d971      	bls.n	40315a <_malloc_r+0x426>
  403076:	2b54      	cmp	r3, #84	; 0x54
  403078:	f200 80a4 	bhi.w	4031c4 <_malloc_r+0x490>
  40307c:	0b28      	lsrs	r0, r5, #12
  40307e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  403082:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403086:	306e      	adds	r0, #110	; 0x6e
  403088:	e676      	b.n	402d78 <_malloc_r+0x44>
  40308a:	bf00      	nop
  40308c:	2040043c 	.word	0x2040043c
  403090:	20400b88 	.word	0x20400b88
  403094:	20400b8c 	.word	0x20400b8c
  403098:	20400b84 	.word	0x20400b84
  40309c:	20400b80 	.word	0x20400b80
  4030a0:	20400848 	.word	0x20400848
  4030a4:	0a5a      	lsrs	r2, r3, #9
  4030a6:	2a04      	cmp	r2, #4
  4030a8:	d95e      	bls.n	403168 <_malloc_r+0x434>
  4030aa:	2a14      	cmp	r2, #20
  4030ac:	f200 80b3 	bhi.w	403216 <_malloc_r+0x4e2>
  4030b0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4030b4:	0049      	lsls	r1, r1, #1
  4030b6:	325b      	adds	r2, #91	; 0x5b
  4030b8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  4030bc:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  4030c0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4032a0 <_malloc_r+0x56c>
  4030c4:	f1ac 0c08 	sub.w	ip, ip, #8
  4030c8:	458c      	cmp	ip, r1
  4030ca:	f000 8088 	beq.w	4031de <_malloc_r+0x4aa>
  4030ce:	684a      	ldr	r2, [r1, #4]
  4030d0:	f022 0203 	bic.w	r2, r2, #3
  4030d4:	4293      	cmp	r3, r2
  4030d6:	d202      	bcs.n	4030de <_malloc_r+0x3aa>
  4030d8:	6889      	ldr	r1, [r1, #8]
  4030da:	458c      	cmp	ip, r1
  4030dc:	d1f7      	bne.n	4030ce <_malloc_r+0x39a>
  4030de:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4030e2:	687a      	ldr	r2, [r7, #4]
  4030e4:	f8c4 c00c 	str.w	ip, [r4, #12]
  4030e8:	60a1      	str	r1, [r4, #8]
  4030ea:	f8cc 4008 	str.w	r4, [ip, #8]
  4030ee:	60cc      	str	r4, [r1, #12]
  4030f0:	e688      	b.n	402e04 <_malloc_r+0xd0>
  4030f2:	1963      	adds	r3, r4, r5
  4030f4:	f042 0701 	orr.w	r7, r2, #1
  4030f8:	f045 0501 	orr.w	r5, r5, #1
  4030fc:	6065      	str	r5, [r4, #4]
  4030fe:	4630      	mov	r0, r6
  403100:	614b      	str	r3, [r1, #20]
  403102:	610b      	str	r3, [r1, #16]
  403104:	f8c3 e00c 	str.w	lr, [r3, #12]
  403108:	f8c3 e008 	str.w	lr, [r3, #8]
  40310c:	605f      	str	r7, [r3, #4]
  40310e:	509a      	str	r2, [r3, r2]
  403110:	3408      	adds	r4, #8
  403112:	f000 f9b1 	bl	403478 <__malloc_unlock>
  403116:	e6d5      	b.n	402ec4 <_malloc_r+0x190>
  403118:	684a      	ldr	r2, [r1, #4]
  40311a:	e673      	b.n	402e04 <_malloc_r+0xd0>
  40311c:	f108 0801 	add.w	r8, r8, #1
  403120:	f018 0f03 	tst.w	r8, #3
  403124:	f10c 0c08 	add.w	ip, ip, #8
  403128:	f47f ae7f 	bne.w	402e2a <_malloc_r+0xf6>
  40312c:	e030      	b.n	403190 <_malloc_r+0x45c>
  40312e:	68dc      	ldr	r4, [r3, #12]
  403130:	42a3      	cmp	r3, r4
  403132:	bf08      	it	eq
  403134:	3002      	addeq	r0, #2
  403136:	f43f ae35 	beq.w	402da4 <_malloc_r+0x70>
  40313a:	e6b3      	b.n	402ea4 <_malloc_r+0x170>
  40313c:	440b      	add	r3, r1
  40313e:	460c      	mov	r4, r1
  403140:	685a      	ldr	r2, [r3, #4]
  403142:	68c9      	ldr	r1, [r1, #12]
  403144:	f854 5f08 	ldr.w	r5, [r4, #8]!
  403148:	f042 0201 	orr.w	r2, r2, #1
  40314c:	605a      	str	r2, [r3, #4]
  40314e:	4630      	mov	r0, r6
  403150:	60e9      	str	r1, [r5, #12]
  403152:	608d      	str	r5, [r1, #8]
  403154:	f000 f990 	bl	403478 <__malloc_unlock>
  403158:	e6b4      	b.n	402ec4 <_malloc_r+0x190>
  40315a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  40315e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  403162:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403166:	e607      	b.n	402d78 <_malloc_r+0x44>
  403168:	099a      	lsrs	r2, r3, #6
  40316a:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40316e:	0049      	lsls	r1, r1, #1
  403170:	3238      	adds	r2, #56	; 0x38
  403172:	e7a1      	b.n	4030b8 <_malloc_r+0x384>
  403174:	42bc      	cmp	r4, r7
  403176:	4b4a      	ldr	r3, [pc, #296]	; (4032a0 <_malloc_r+0x56c>)
  403178:	f43f af00 	beq.w	402f7c <_malloc_r+0x248>
  40317c:	689c      	ldr	r4, [r3, #8]
  40317e:	6862      	ldr	r2, [r4, #4]
  403180:	f022 0203 	bic.w	r2, r2, #3
  403184:	e75a      	b.n	40303c <_malloc_r+0x308>
  403186:	f859 3908 	ldr.w	r3, [r9], #-8
  40318a:	4599      	cmp	r9, r3
  40318c:	f040 8082 	bne.w	403294 <_malloc_r+0x560>
  403190:	f010 0f03 	tst.w	r0, #3
  403194:	f100 30ff 	add.w	r0, r0, #4294967295
  403198:	d1f5      	bne.n	403186 <_malloc_r+0x452>
  40319a:	687b      	ldr	r3, [r7, #4]
  40319c:	ea23 0304 	bic.w	r3, r3, r4
  4031a0:	607b      	str	r3, [r7, #4]
  4031a2:	0064      	lsls	r4, r4, #1
  4031a4:	429c      	cmp	r4, r3
  4031a6:	f63f aebd 	bhi.w	402f24 <_malloc_r+0x1f0>
  4031aa:	2c00      	cmp	r4, #0
  4031ac:	f43f aeba 	beq.w	402f24 <_malloc_r+0x1f0>
  4031b0:	421c      	tst	r4, r3
  4031b2:	4640      	mov	r0, r8
  4031b4:	f47f ae35 	bne.w	402e22 <_malloc_r+0xee>
  4031b8:	0064      	lsls	r4, r4, #1
  4031ba:	421c      	tst	r4, r3
  4031bc:	f100 0004 	add.w	r0, r0, #4
  4031c0:	d0fa      	beq.n	4031b8 <_malloc_r+0x484>
  4031c2:	e62e      	b.n	402e22 <_malloc_r+0xee>
  4031c4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4031c8:	d818      	bhi.n	4031fc <_malloc_r+0x4c8>
  4031ca:	0be8      	lsrs	r0, r5, #15
  4031cc:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  4031d0:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4031d4:	3077      	adds	r0, #119	; 0x77
  4031d6:	e5cf      	b.n	402d78 <_malloc_r+0x44>
  4031d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4031dc:	e6eb      	b.n	402fb6 <_malloc_r+0x282>
  4031de:	2101      	movs	r1, #1
  4031e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4031e4:	1092      	asrs	r2, r2, #2
  4031e6:	fa01 f202 	lsl.w	r2, r1, r2
  4031ea:	431a      	orrs	r2, r3
  4031ec:	f8c8 2004 	str.w	r2, [r8, #4]
  4031f0:	4661      	mov	r1, ip
  4031f2:	e777      	b.n	4030e4 <_malloc_r+0x3b0>
  4031f4:	2301      	movs	r3, #1
  4031f6:	f8cb 3004 	str.w	r3, [fp, #4]
  4031fa:	e725      	b.n	403048 <_malloc_r+0x314>
  4031fc:	f240 5254 	movw	r2, #1364	; 0x554
  403200:	4293      	cmp	r3, r2
  403202:	d820      	bhi.n	403246 <_malloc_r+0x512>
  403204:	0ca8      	lsrs	r0, r5, #18
  403206:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40320a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40320e:	307c      	adds	r0, #124	; 0x7c
  403210:	e5b2      	b.n	402d78 <_malloc_r+0x44>
  403212:	3210      	adds	r2, #16
  403214:	e6a4      	b.n	402f60 <_malloc_r+0x22c>
  403216:	2a54      	cmp	r2, #84	; 0x54
  403218:	d826      	bhi.n	403268 <_malloc_r+0x534>
  40321a:	0b1a      	lsrs	r2, r3, #12
  40321c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403220:	0049      	lsls	r1, r1, #1
  403222:	326e      	adds	r2, #110	; 0x6e
  403224:	e748      	b.n	4030b8 <_malloc_r+0x384>
  403226:	68bc      	ldr	r4, [r7, #8]
  403228:	6862      	ldr	r2, [r4, #4]
  40322a:	f022 0203 	bic.w	r2, r2, #3
  40322e:	e705      	b.n	40303c <_malloc_r+0x308>
  403230:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403234:	2800      	cmp	r0, #0
  403236:	f47f aea8 	bne.w	402f8a <_malloc_r+0x256>
  40323a:	4442      	add	r2, r8
  40323c:	68bb      	ldr	r3, [r7, #8]
  40323e:	f042 0201 	orr.w	r2, r2, #1
  403242:	605a      	str	r2, [r3, #4]
  403244:	e6ec      	b.n	403020 <_malloc_r+0x2ec>
  403246:	23fe      	movs	r3, #254	; 0xfe
  403248:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  40324c:	207e      	movs	r0, #126	; 0x7e
  40324e:	e593      	b.n	402d78 <_malloc_r+0x44>
  403250:	2201      	movs	r2, #1
  403252:	f04f 0900 	mov.w	r9, #0
  403256:	e6c1      	b.n	402fdc <_malloc_r+0x2a8>
  403258:	f104 0108 	add.w	r1, r4, #8
  40325c:	4630      	mov	r0, r6
  40325e:	f003 ffd1 	bl	407204 <_free_r>
  403262:	f8d9 1000 	ldr.w	r1, [r9]
  403266:	e6db      	b.n	403020 <_malloc_r+0x2ec>
  403268:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40326c:	d805      	bhi.n	40327a <_malloc_r+0x546>
  40326e:	0bda      	lsrs	r2, r3, #15
  403270:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403274:	0049      	lsls	r1, r1, #1
  403276:	3277      	adds	r2, #119	; 0x77
  403278:	e71e      	b.n	4030b8 <_malloc_r+0x384>
  40327a:	f240 5154 	movw	r1, #1364	; 0x554
  40327e:	428a      	cmp	r2, r1
  403280:	d805      	bhi.n	40328e <_malloc_r+0x55a>
  403282:	0c9a      	lsrs	r2, r3, #18
  403284:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403288:	0049      	lsls	r1, r1, #1
  40328a:	327c      	adds	r2, #124	; 0x7c
  40328c:	e714      	b.n	4030b8 <_malloc_r+0x384>
  40328e:	21fe      	movs	r1, #254	; 0xfe
  403290:	227e      	movs	r2, #126	; 0x7e
  403292:	e711      	b.n	4030b8 <_malloc_r+0x384>
  403294:	687b      	ldr	r3, [r7, #4]
  403296:	e784      	b.n	4031a2 <_malloc_r+0x46e>
  403298:	08e8      	lsrs	r0, r5, #3
  40329a:	1c43      	adds	r3, r0, #1
  40329c:	005b      	lsls	r3, r3, #1
  40329e:	e5f8      	b.n	402e92 <_malloc_r+0x15e>
  4032a0:	2040043c 	.word	0x2040043c

004032a4 <memcpy>:
  4032a4:	4684      	mov	ip, r0
  4032a6:	ea41 0300 	orr.w	r3, r1, r0
  4032aa:	f013 0303 	ands.w	r3, r3, #3
  4032ae:	d16d      	bne.n	40338c <memcpy+0xe8>
  4032b0:	3a40      	subs	r2, #64	; 0x40
  4032b2:	d341      	bcc.n	403338 <memcpy+0x94>
  4032b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4032b8:	f840 3b04 	str.w	r3, [r0], #4
  4032bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4032c0:	f840 3b04 	str.w	r3, [r0], #4
  4032c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4032c8:	f840 3b04 	str.w	r3, [r0], #4
  4032cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4032d0:	f840 3b04 	str.w	r3, [r0], #4
  4032d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4032d8:	f840 3b04 	str.w	r3, [r0], #4
  4032dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4032e0:	f840 3b04 	str.w	r3, [r0], #4
  4032e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4032e8:	f840 3b04 	str.w	r3, [r0], #4
  4032ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4032f0:	f840 3b04 	str.w	r3, [r0], #4
  4032f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4032f8:	f840 3b04 	str.w	r3, [r0], #4
  4032fc:	f851 3b04 	ldr.w	r3, [r1], #4
  403300:	f840 3b04 	str.w	r3, [r0], #4
  403304:	f851 3b04 	ldr.w	r3, [r1], #4
  403308:	f840 3b04 	str.w	r3, [r0], #4
  40330c:	f851 3b04 	ldr.w	r3, [r1], #4
  403310:	f840 3b04 	str.w	r3, [r0], #4
  403314:	f851 3b04 	ldr.w	r3, [r1], #4
  403318:	f840 3b04 	str.w	r3, [r0], #4
  40331c:	f851 3b04 	ldr.w	r3, [r1], #4
  403320:	f840 3b04 	str.w	r3, [r0], #4
  403324:	f851 3b04 	ldr.w	r3, [r1], #4
  403328:	f840 3b04 	str.w	r3, [r0], #4
  40332c:	f851 3b04 	ldr.w	r3, [r1], #4
  403330:	f840 3b04 	str.w	r3, [r0], #4
  403334:	3a40      	subs	r2, #64	; 0x40
  403336:	d2bd      	bcs.n	4032b4 <memcpy+0x10>
  403338:	3230      	adds	r2, #48	; 0x30
  40333a:	d311      	bcc.n	403360 <memcpy+0xbc>
  40333c:	f851 3b04 	ldr.w	r3, [r1], #4
  403340:	f840 3b04 	str.w	r3, [r0], #4
  403344:	f851 3b04 	ldr.w	r3, [r1], #4
  403348:	f840 3b04 	str.w	r3, [r0], #4
  40334c:	f851 3b04 	ldr.w	r3, [r1], #4
  403350:	f840 3b04 	str.w	r3, [r0], #4
  403354:	f851 3b04 	ldr.w	r3, [r1], #4
  403358:	f840 3b04 	str.w	r3, [r0], #4
  40335c:	3a10      	subs	r2, #16
  40335e:	d2ed      	bcs.n	40333c <memcpy+0x98>
  403360:	320c      	adds	r2, #12
  403362:	d305      	bcc.n	403370 <memcpy+0xcc>
  403364:	f851 3b04 	ldr.w	r3, [r1], #4
  403368:	f840 3b04 	str.w	r3, [r0], #4
  40336c:	3a04      	subs	r2, #4
  40336e:	d2f9      	bcs.n	403364 <memcpy+0xc0>
  403370:	3204      	adds	r2, #4
  403372:	d008      	beq.n	403386 <memcpy+0xe2>
  403374:	07d2      	lsls	r2, r2, #31
  403376:	bf1c      	itt	ne
  403378:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40337c:	f800 3b01 	strbne.w	r3, [r0], #1
  403380:	d301      	bcc.n	403386 <memcpy+0xe2>
  403382:	880b      	ldrh	r3, [r1, #0]
  403384:	8003      	strh	r3, [r0, #0]
  403386:	4660      	mov	r0, ip
  403388:	4770      	bx	lr
  40338a:	bf00      	nop
  40338c:	2a08      	cmp	r2, #8
  40338e:	d313      	bcc.n	4033b8 <memcpy+0x114>
  403390:	078b      	lsls	r3, r1, #30
  403392:	d08d      	beq.n	4032b0 <memcpy+0xc>
  403394:	f010 0303 	ands.w	r3, r0, #3
  403398:	d08a      	beq.n	4032b0 <memcpy+0xc>
  40339a:	f1c3 0304 	rsb	r3, r3, #4
  40339e:	1ad2      	subs	r2, r2, r3
  4033a0:	07db      	lsls	r3, r3, #31
  4033a2:	bf1c      	itt	ne
  4033a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4033a8:	f800 3b01 	strbne.w	r3, [r0], #1
  4033ac:	d380      	bcc.n	4032b0 <memcpy+0xc>
  4033ae:	f831 3b02 	ldrh.w	r3, [r1], #2
  4033b2:	f820 3b02 	strh.w	r3, [r0], #2
  4033b6:	e77b      	b.n	4032b0 <memcpy+0xc>
  4033b8:	3a04      	subs	r2, #4
  4033ba:	d3d9      	bcc.n	403370 <memcpy+0xcc>
  4033bc:	3a01      	subs	r2, #1
  4033be:	f811 3b01 	ldrb.w	r3, [r1], #1
  4033c2:	f800 3b01 	strb.w	r3, [r0], #1
  4033c6:	d2f9      	bcs.n	4033bc <memcpy+0x118>
  4033c8:	780b      	ldrb	r3, [r1, #0]
  4033ca:	7003      	strb	r3, [r0, #0]
  4033cc:	784b      	ldrb	r3, [r1, #1]
  4033ce:	7043      	strb	r3, [r0, #1]
  4033d0:	788b      	ldrb	r3, [r1, #2]
  4033d2:	7083      	strb	r3, [r0, #2]
  4033d4:	4660      	mov	r0, ip
  4033d6:	4770      	bx	lr

004033d8 <memset>:
  4033d8:	b470      	push	{r4, r5, r6}
  4033da:	0784      	lsls	r4, r0, #30
  4033dc:	d046      	beq.n	40346c <memset+0x94>
  4033de:	1e54      	subs	r4, r2, #1
  4033e0:	2a00      	cmp	r2, #0
  4033e2:	d041      	beq.n	403468 <memset+0x90>
  4033e4:	b2cd      	uxtb	r5, r1
  4033e6:	4603      	mov	r3, r0
  4033e8:	e002      	b.n	4033f0 <memset+0x18>
  4033ea:	1e62      	subs	r2, r4, #1
  4033ec:	b3e4      	cbz	r4, 403468 <memset+0x90>
  4033ee:	4614      	mov	r4, r2
  4033f0:	f803 5b01 	strb.w	r5, [r3], #1
  4033f4:	079a      	lsls	r2, r3, #30
  4033f6:	d1f8      	bne.n	4033ea <memset+0x12>
  4033f8:	2c03      	cmp	r4, #3
  4033fa:	d92e      	bls.n	40345a <memset+0x82>
  4033fc:	b2cd      	uxtb	r5, r1
  4033fe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403402:	2c0f      	cmp	r4, #15
  403404:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403408:	d919      	bls.n	40343e <memset+0x66>
  40340a:	f103 0210 	add.w	r2, r3, #16
  40340e:	4626      	mov	r6, r4
  403410:	3e10      	subs	r6, #16
  403412:	2e0f      	cmp	r6, #15
  403414:	f842 5c10 	str.w	r5, [r2, #-16]
  403418:	f842 5c0c 	str.w	r5, [r2, #-12]
  40341c:	f842 5c08 	str.w	r5, [r2, #-8]
  403420:	f842 5c04 	str.w	r5, [r2, #-4]
  403424:	f102 0210 	add.w	r2, r2, #16
  403428:	d8f2      	bhi.n	403410 <memset+0x38>
  40342a:	f1a4 0210 	sub.w	r2, r4, #16
  40342e:	f022 020f 	bic.w	r2, r2, #15
  403432:	f004 040f 	and.w	r4, r4, #15
  403436:	3210      	adds	r2, #16
  403438:	2c03      	cmp	r4, #3
  40343a:	4413      	add	r3, r2
  40343c:	d90d      	bls.n	40345a <memset+0x82>
  40343e:	461e      	mov	r6, r3
  403440:	4622      	mov	r2, r4
  403442:	3a04      	subs	r2, #4
  403444:	2a03      	cmp	r2, #3
  403446:	f846 5b04 	str.w	r5, [r6], #4
  40344a:	d8fa      	bhi.n	403442 <memset+0x6a>
  40344c:	1f22      	subs	r2, r4, #4
  40344e:	f022 0203 	bic.w	r2, r2, #3
  403452:	3204      	adds	r2, #4
  403454:	4413      	add	r3, r2
  403456:	f004 0403 	and.w	r4, r4, #3
  40345a:	b12c      	cbz	r4, 403468 <memset+0x90>
  40345c:	b2c9      	uxtb	r1, r1
  40345e:	441c      	add	r4, r3
  403460:	f803 1b01 	strb.w	r1, [r3], #1
  403464:	42a3      	cmp	r3, r4
  403466:	d1fb      	bne.n	403460 <memset+0x88>
  403468:	bc70      	pop	{r4, r5, r6}
  40346a:	4770      	bx	lr
  40346c:	4614      	mov	r4, r2
  40346e:	4603      	mov	r3, r0
  403470:	e7c2      	b.n	4033f8 <memset+0x20>
  403472:	bf00      	nop

00403474 <__malloc_lock>:
  403474:	4770      	bx	lr
  403476:	bf00      	nop

00403478 <__malloc_unlock>:
  403478:	4770      	bx	lr
  40347a:	bf00      	nop

0040347c <_sbrk_r>:
  40347c:	b538      	push	{r3, r4, r5, lr}
  40347e:	4c07      	ldr	r4, [pc, #28]	; (40349c <_sbrk_r+0x20>)
  403480:	2300      	movs	r3, #0
  403482:	4605      	mov	r5, r0
  403484:	4608      	mov	r0, r1
  403486:	6023      	str	r3, [r4, #0]
  403488:	f7fd fac2 	bl	400a10 <_sbrk>
  40348c:	1c43      	adds	r3, r0, #1
  40348e:	d000      	beq.n	403492 <_sbrk_r+0x16>
  403490:	bd38      	pop	{r3, r4, r5, pc}
  403492:	6823      	ldr	r3, [r4, #0]
  403494:	2b00      	cmp	r3, #0
  403496:	d0fb      	beq.n	403490 <_sbrk_r+0x14>
  403498:	602b      	str	r3, [r5, #0]
  40349a:	bd38      	pop	{r3, r4, r5, pc}
  40349c:	20400c00 	.word	0x20400c00

004034a0 <setbuf>:
  4034a0:	2900      	cmp	r1, #0
  4034a2:	bf0c      	ite	eq
  4034a4:	2202      	moveq	r2, #2
  4034a6:	2200      	movne	r2, #0
  4034a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4034ac:	f000 b800 	b.w	4034b0 <setvbuf>

004034b0 <setvbuf>:
  4034b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4034b4:	4c51      	ldr	r4, [pc, #324]	; (4035fc <setvbuf+0x14c>)
  4034b6:	6825      	ldr	r5, [r4, #0]
  4034b8:	b083      	sub	sp, #12
  4034ba:	4604      	mov	r4, r0
  4034bc:	460f      	mov	r7, r1
  4034be:	4690      	mov	r8, r2
  4034c0:	461e      	mov	r6, r3
  4034c2:	b115      	cbz	r5, 4034ca <setvbuf+0x1a>
  4034c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4034c6:	2b00      	cmp	r3, #0
  4034c8:	d079      	beq.n	4035be <setvbuf+0x10e>
  4034ca:	f1b8 0f02 	cmp.w	r8, #2
  4034ce:	d004      	beq.n	4034da <setvbuf+0x2a>
  4034d0:	f1b8 0f01 	cmp.w	r8, #1
  4034d4:	d87f      	bhi.n	4035d6 <setvbuf+0x126>
  4034d6:	2e00      	cmp	r6, #0
  4034d8:	db7d      	blt.n	4035d6 <setvbuf+0x126>
  4034da:	4621      	mov	r1, r4
  4034dc:	4628      	mov	r0, r5
  4034de:	f003 fd33 	bl	406f48 <_fflush_r>
  4034e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4034e4:	b141      	cbz	r1, 4034f8 <setvbuf+0x48>
  4034e6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4034ea:	4299      	cmp	r1, r3
  4034ec:	d002      	beq.n	4034f4 <setvbuf+0x44>
  4034ee:	4628      	mov	r0, r5
  4034f0:	f003 fe88 	bl	407204 <_free_r>
  4034f4:	2300      	movs	r3, #0
  4034f6:	6323      	str	r3, [r4, #48]	; 0x30
  4034f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4034fc:	2200      	movs	r2, #0
  4034fe:	61a2      	str	r2, [r4, #24]
  403500:	6062      	str	r2, [r4, #4]
  403502:	061a      	lsls	r2, r3, #24
  403504:	d454      	bmi.n	4035b0 <setvbuf+0x100>
  403506:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40350a:	f023 0303 	bic.w	r3, r3, #3
  40350e:	f1b8 0f02 	cmp.w	r8, #2
  403512:	81a3      	strh	r3, [r4, #12]
  403514:	d039      	beq.n	40358a <setvbuf+0xda>
  403516:	ab01      	add	r3, sp, #4
  403518:	466a      	mov	r2, sp
  40351a:	4621      	mov	r1, r4
  40351c:	4628      	mov	r0, r5
  40351e:	f004 f913 	bl	407748 <__swhatbuf_r>
  403522:	89a3      	ldrh	r3, [r4, #12]
  403524:	4318      	orrs	r0, r3
  403526:	81a0      	strh	r0, [r4, #12]
  403528:	b326      	cbz	r6, 403574 <setvbuf+0xc4>
  40352a:	b327      	cbz	r7, 403576 <setvbuf+0xc6>
  40352c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40352e:	2b00      	cmp	r3, #0
  403530:	d04d      	beq.n	4035ce <setvbuf+0x11e>
  403532:	9b00      	ldr	r3, [sp, #0]
  403534:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  403538:	6027      	str	r7, [r4, #0]
  40353a:	429e      	cmp	r6, r3
  40353c:	bf1c      	itt	ne
  40353e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  403542:	81a0      	strhne	r0, [r4, #12]
  403544:	f1b8 0f01 	cmp.w	r8, #1
  403548:	bf08      	it	eq
  40354a:	f040 0001 	orreq.w	r0, r0, #1
  40354e:	b283      	uxth	r3, r0
  403550:	bf08      	it	eq
  403552:	81a0      	strheq	r0, [r4, #12]
  403554:	f003 0008 	and.w	r0, r3, #8
  403558:	b280      	uxth	r0, r0
  40355a:	6127      	str	r7, [r4, #16]
  40355c:	6166      	str	r6, [r4, #20]
  40355e:	b318      	cbz	r0, 4035a8 <setvbuf+0xf8>
  403560:	f013 0001 	ands.w	r0, r3, #1
  403564:	d02f      	beq.n	4035c6 <setvbuf+0x116>
  403566:	2000      	movs	r0, #0
  403568:	4276      	negs	r6, r6
  40356a:	61a6      	str	r6, [r4, #24]
  40356c:	60a0      	str	r0, [r4, #8]
  40356e:	b003      	add	sp, #12
  403570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403574:	9e00      	ldr	r6, [sp, #0]
  403576:	4630      	mov	r0, r6
  403578:	f7ff fbcc 	bl	402d14 <malloc>
  40357c:	4607      	mov	r7, r0
  40357e:	b368      	cbz	r0, 4035dc <setvbuf+0x12c>
  403580:	89a3      	ldrh	r3, [r4, #12]
  403582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403586:	81a3      	strh	r3, [r4, #12]
  403588:	e7d0      	b.n	40352c <setvbuf+0x7c>
  40358a:	2000      	movs	r0, #0
  40358c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403590:	f043 0302 	orr.w	r3, r3, #2
  403594:	2500      	movs	r5, #0
  403596:	2101      	movs	r1, #1
  403598:	81a3      	strh	r3, [r4, #12]
  40359a:	60a5      	str	r5, [r4, #8]
  40359c:	6022      	str	r2, [r4, #0]
  40359e:	6122      	str	r2, [r4, #16]
  4035a0:	6161      	str	r1, [r4, #20]
  4035a2:	b003      	add	sp, #12
  4035a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4035a8:	60a0      	str	r0, [r4, #8]
  4035aa:	b003      	add	sp, #12
  4035ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4035b0:	6921      	ldr	r1, [r4, #16]
  4035b2:	4628      	mov	r0, r5
  4035b4:	f003 fe26 	bl	407204 <_free_r>
  4035b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4035bc:	e7a3      	b.n	403506 <setvbuf+0x56>
  4035be:	4628      	mov	r0, r5
  4035c0:	f003 fd56 	bl	407070 <__sinit>
  4035c4:	e781      	b.n	4034ca <setvbuf+0x1a>
  4035c6:	60a6      	str	r6, [r4, #8]
  4035c8:	b003      	add	sp, #12
  4035ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4035ce:	4628      	mov	r0, r5
  4035d0:	f003 fd4e 	bl	407070 <__sinit>
  4035d4:	e7ad      	b.n	403532 <setvbuf+0x82>
  4035d6:	f04f 30ff 	mov.w	r0, #4294967295
  4035da:	e7e2      	b.n	4035a2 <setvbuf+0xf2>
  4035dc:	f8dd 9000 	ldr.w	r9, [sp]
  4035e0:	45b1      	cmp	r9, r6
  4035e2:	d006      	beq.n	4035f2 <setvbuf+0x142>
  4035e4:	4648      	mov	r0, r9
  4035e6:	f7ff fb95 	bl	402d14 <malloc>
  4035ea:	4607      	mov	r7, r0
  4035ec:	b108      	cbz	r0, 4035f2 <setvbuf+0x142>
  4035ee:	464e      	mov	r6, r9
  4035f0:	e7c6      	b.n	403580 <setvbuf+0xd0>
  4035f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4035f6:	f04f 30ff 	mov.w	r0, #4294967295
  4035fa:	e7c7      	b.n	40358c <setvbuf+0xdc>
  4035fc:	20400438 	.word	0x20400438

00403600 <sprintf>:
  403600:	b40e      	push	{r1, r2, r3}
  403602:	b5f0      	push	{r4, r5, r6, r7, lr}
  403604:	b09c      	sub	sp, #112	; 0x70
  403606:	ab21      	add	r3, sp, #132	; 0x84
  403608:	490f      	ldr	r1, [pc, #60]	; (403648 <sprintf+0x48>)
  40360a:	f853 2b04 	ldr.w	r2, [r3], #4
  40360e:	9301      	str	r3, [sp, #4]
  403610:	4605      	mov	r5, r0
  403612:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403616:	6808      	ldr	r0, [r1, #0]
  403618:	9502      	str	r5, [sp, #8]
  40361a:	f44f 7702 	mov.w	r7, #520	; 0x208
  40361e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  403622:	a902      	add	r1, sp, #8
  403624:	9506      	str	r5, [sp, #24]
  403626:	f8ad 7014 	strh.w	r7, [sp, #20]
  40362a:	9404      	str	r4, [sp, #16]
  40362c:	9407      	str	r4, [sp, #28]
  40362e:	f8ad 6016 	strh.w	r6, [sp, #22]
  403632:	f000 f8f3 	bl	40381c <_svfprintf_r>
  403636:	9b02      	ldr	r3, [sp, #8]
  403638:	2200      	movs	r2, #0
  40363a:	701a      	strb	r2, [r3, #0]
  40363c:	b01c      	add	sp, #112	; 0x70
  40363e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403642:	b003      	add	sp, #12
  403644:	4770      	bx	lr
  403646:	bf00      	nop
  403648:	20400438 	.word	0x20400438

0040364c <strcpy>:
  40364c:	ea80 0201 	eor.w	r2, r0, r1
  403650:	4684      	mov	ip, r0
  403652:	f012 0f03 	tst.w	r2, #3
  403656:	d14f      	bne.n	4036f8 <strcpy+0xac>
  403658:	f011 0f03 	tst.w	r1, #3
  40365c:	d132      	bne.n	4036c4 <strcpy+0x78>
  40365e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  403662:	f011 0f04 	tst.w	r1, #4
  403666:	f851 3b04 	ldr.w	r3, [r1], #4
  40366a:	d00b      	beq.n	403684 <strcpy+0x38>
  40366c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  403670:	439a      	bics	r2, r3
  403672:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  403676:	bf04      	itt	eq
  403678:	f84c 3b04 	streq.w	r3, [ip], #4
  40367c:	f851 3b04 	ldreq.w	r3, [r1], #4
  403680:	d116      	bne.n	4036b0 <strcpy+0x64>
  403682:	bf00      	nop
  403684:	f851 4b04 	ldr.w	r4, [r1], #4
  403688:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40368c:	439a      	bics	r2, r3
  40368e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  403692:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  403696:	d10b      	bne.n	4036b0 <strcpy+0x64>
  403698:	f84c 3b04 	str.w	r3, [ip], #4
  40369c:	43a2      	bics	r2, r4
  40369e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4036a2:	bf04      	itt	eq
  4036a4:	f851 3b04 	ldreq.w	r3, [r1], #4
  4036a8:	f84c 4b04 	streq.w	r4, [ip], #4
  4036ac:	d0ea      	beq.n	403684 <strcpy+0x38>
  4036ae:	4623      	mov	r3, r4
  4036b0:	f80c 3b01 	strb.w	r3, [ip], #1
  4036b4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4036b8:	ea4f 2333 	mov.w	r3, r3, ror #8
  4036bc:	d1f8      	bne.n	4036b0 <strcpy+0x64>
  4036be:	f85d 4b04 	ldr.w	r4, [sp], #4
  4036c2:	4770      	bx	lr
  4036c4:	f011 0f01 	tst.w	r1, #1
  4036c8:	d006      	beq.n	4036d8 <strcpy+0x8c>
  4036ca:	f811 2b01 	ldrb.w	r2, [r1], #1
  4036ce:	f80c 2b01 	strb.w	r2, [ip], #1
  4036d2:	2a00      	cmp	r2, #0
  4036d4:	bf08      	it	eq
  4036d6:	4770      	bxeq	lr
  4036d8:	f011 0f02 	tst.w	r1, #2
  4036dc:	d0bf      	beq.n	40365e <strcpy+0x12>
  4036de:	f831 2b02 	ldrh.w	r2, [r1], #2
  4036e2:	f012 0fff 	tst.w	r2, #255	; 0xff
  4036e6:	bf16      	itet	ne
  4036e8:	f82c 2b02 	strhne.w	r2, [ip], #2
  4036ec:	f88c 2000 	strbeq.w	r2, [ip]
  4036f0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  4036f4:	d1b3      	bne.n	40365e <strcpy+0x12>
  4036f6:	4770      	bx	lr
  4036f8:	f811 2b01 	ldrb.w	r2, [r1], #1
  4036fc:	f80c 2b01 	strb.w	r2, [ip], #1
  403700:	2a00      	cmp	r2, #0
  403702:	d1f9      	bne.n	4036f8 <strcpy+0xac>
  403704:	4770      	bx	lr
  403706:	bf00      	nop
	...

00403740 <strlen>:
  403740:	f890 f000 	pld	[r0]
  403744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403748:	f020 0107 	bic.w	r1, r0, #7
  40374c:	f06f 0c00 	mvn.w	ip, #0
  403750:	f010 0407 	ands.w	r4, r0, #7
  403754:	f891 f020 	pld	[r1, #32]
  403758:	f040 8049 	bne.w	4037ee <strlen+0xae>
  40375c:	f04f 0400 	mov.w	r4, #0
  403760:	f06f 0007 	mvn.w	r0, #7
  403764:	e9d1 2300 	ldrd	r2, r3, [r1]
  403768:	f891 f040 	pld	[r1, #64]	; 0x40
  40376c:	f100 0008 	add.w	r0, r0, #8
  403770:	fa82 f24c 	uadd8	r2, r2, ip
  403774:	faa4 f28c 	sel	r2, r4, ip
  403778:	fa83 f34c 	uadd8	r3, r3, ip
  40377c:	faa2 f38c 	sel	r3, r2, ip
  403780:	bb4b      	cbnz	r3, 4037d6 <strlen+0x96>
  403782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403786:	fa82 f24c 	uadd8	r2, r2, ip
  40378a:	f100 0008 	add.w	r0, r0, #8
  40378e:	faa4 f28c 	sel	r2, r4, ip
  403792:	fa83 f34c 	uadd8	r3, r3, ip
  403796:	faa2 f38c 	sel	r3, r2, ip
  40379a:	b9e3      	cbnz	r3, 4037d6 <strlen+0x96>
  40379c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4037a0:	fa82 f24c 	uadd8	r2, r2, ip
  4037a4:	f100 0008 	add.w	r0, r0, #8
  4037a8:	faa4 f28c 	sel	r2, r4, ip
  4037ac:	fa83 f34c 	uadd8	r3, r3, ip
  4037b0:	faa2 f38c 	sel	r3, r2, ip
  4037b4:	b97b      	cbnz	r3, 4037d6 <strlen+0x96>
  4037b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4037ba:	f101 0120 	add.w	r1, r1, #32
  4037be:	fa82 f24c 	uadd8	r2, r2, ip
  4037c2:	f100 0008 	add.w	r0, r0, #8
  4037c6:	faa4 f28c 	sel	r2, r4, ip
  4037ca:	fa83 f34c 	uadd8	r3, r3, ip
  4037ce:	faa2 f38c 	sel	r3, r2, ip
  4037d2:	2b00      	cmp	r3, #0
  4037d4:	d0c6      	beq.n	403764 <strlen+0x24>
  4037d6:	2a00      	cmp	r2, #0
  4037d8:	bf04      	itt	eq
  4037da:	3004      	addeq	r0, #4
  4037dc:	461a      	moveq	r2, r3
  4037de:	ba12      	rev	r2, r2
  4037e0:	fab2 f282 	clz	r2, r2
  4037e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4037e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4037ec:	4770      	bx	lr
  4037ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4037f2:	f004 0503 	and.w	r5, r4, #3
  4037f6:	f1c4 0000 	rsb	r0, r4, #0
  4037fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4037fe:	f014 0f04 	tst.w	r4, #4
  403802:	f891 f040 	pld	[r1, #64]	; 0x40
  403806:	fa0c f505 	lsl.w	r5, ip, r5
  40380a:	ea62 0205 	orn	r2, r2, r5
  40380e:	bf1c      	itt	ne
  403810:	ea63 0305 	ornne	r3, r3, r5
  403814:	4662      	movne	r2, ip
  403816:	f04f 0400 	mov.w	r4, #0
  40381a:	e7a9      	b.n	403770 <strlen+0x30>

0040381c <_svfprintf_r>:
  40381c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403820:	b0c1      	sub	sp, #260	; 0x104
  403822:	460c      	mov	r4, r1
  403824:	9109      	str	r1, [sp, #36]	; 0x24
  403826:	4615      	mov	r5, r2
  403828:	930e      	str	r3, [sp, #56]	; 0x38
  40382a:	900a      	str	r0, [sp, #40]	; 0x28
  40382c:	f003 ff88 	bl	407740 <_localeconv_r>
  403830:	6803      	ldr	r3, [r0, #0]
  403832:	9317      	str	r3, [sp, #92]	; 0x5c
  403834:	4618      	mov	r0, r3
  403836:	f7ff ff83 	bl	403740 <strlen>
  40383a:	89a3      	ldrh	r3, [r4, #12]
  40383c:	9016      	str	r0, [sp, #88]	; 0x58
  40383e:	061e      	lsls	r6, r3, #24
  403840:	d503      	bpl.n	40384a <_svfprintf_r+0x2e>
  403842:	6923      	ldr	r3, [r4, #16]
  403844:	2b00      	cmp	r3, #0
  403846:	f001 8119 	beq.w	404a7c <_svfprintf_r+0x1260>
  40384a:	2300      	movs	r3, #0
  40384c:	461a      	mov	r2, r3
  40384e:	9312      	str	r3, [sp, #72]	; 0x48
  403850:	9325      	str	r3, [sp, #148]	; 0x94
  403852:	9324      	str	r3, [sp, #144]	; 0x90
  403854:	9319      	str	r3, [sp, #100]	; 0x64
  403856:	930b      	str	r3, [sp, #44]	; 0x2c
  403858:	f8df a464 	ldr.w	sl, [pc, #1124]	; 403cc0 <_svfprintf_r+0x4a4>
  40385c:	9214      	str	r2, [sp, #80]	; 0x50
  40385e:	ab30      	add	r3, sp, #192	; 0xc0
  403860:	9323      	str	r3, [sp, #140]	; 0x8c
  403862:	4699      	mov	r9, r3
  403864:	9215      	str	r2, [sp, #84]	; 0x54
  403866:	46a8      	mov	r8, r5
  403868:	f898 3000 	ldrb.w	r3, [r8]
  40386c:	4644      	mov	r4, r8
  40386e:	b1eb      	cbz	r3, 4038ac <_svfprintf_r+0x90>
  403870:	2b25      	cmp	r3, #37	; 0x25
  403872:	d102      	bne.n	40387a <_svfprintf_r+0x5e>
  403874:	e01a      	b.n	4038ac <_svfprintf_r+0x90>
  403876:	2b25      	cmp	r3, #37	; 0x25
  403878:	d003      	beq.n	403882 <_svfprintf_r+0x66>
  40387a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40387e:	2b00      	cmp	r3, #0
  403880:	d1f9      	bne.n	403876 <_svfprintf_r+0x5a>
  403882:	ebc8 0504 	rsb	r5, r8, r4
  403886:	b18d      	cbz	r5, 4038ac <_svfprintf_r+0x90>
  403888:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40388a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40388c:	f8c9 8000 	str.w	r8, [r9]
  403890:	3301      	adds	r3, #1
  403892:	442a      	add	r2, r5
  403894:	2b07      	cmp	r3, #7
  403896:	f8c9 5004 	str.w	r5, [r9, #4]
  40389a:	9225      	str	r2, [sp, #148]	; 0x94
  40389c:	9324      	str	r3, [sp, #144]	; 0x90
  40389e:	f300 80a6 	bgt.w	4039ee <_svfprintf_r+0x1d2>
  4038a2:	f109 0908 	add.w	r9, r9, #8
  4038a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4038a8:	442b      	add	r3, r5
  4038aa:	930b      	str	r3, [sp, #44]	; 0x2c
  4038ac:	7823      	ldrb	r3, [r4, #0]
  4038ae:	2b00      	cmp	r3, #0
  4038b0:	f000 80a6 	beq.w	403a00 <_svfprintf_r+0x1e4>
  4038b4:	2300      	movs	r3, #0
  4038b6:	461a      	mov	r2, r3
  4038b8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4038bc:	4619      	mov	r1, r3
  4038be:	930c      	str	r3, [sp, #48]	; 0x30
  4038c0:	9307      	str	r3, [sp, #28]
  4038c2:	f04f 3bff 	mov.w	fp, #4294967295
  4038c6:	7863      	ldrb	r3, [r4, #1]
  4038c8:	f104 0801 	add.w	r8, r4, #1
  4038cc:	465d      	mov	r5, fp
  4038ce:	f108 0801 	add.w	r8, r8, #1
  4038d2:	f1a3 0020 	sub.w	r0, r3, #32
  4038d6:	2858      	cmp	r0, #88	; 0x58
  4038d8:	f200 8425 	bhi.w	404126 <_svfprintf_r+0x90a>
  4038dc:	e8df f010 	tbh	[pc, r0, lsl #1]
  4038e0:	04230388 	.word	0x04230388
  4038e4:	03900423 	.word	0x03900423
  4038e8:	04230423 	.word	0x04230423
  4038ec:	04230423 	.word	0x04230423
  4038f0:	04230423 	.word	0x04230423
  4038f4:	03a50397 	.word	0x03a50397
  4038f8:	005d0423 	.word	0x005d0423
  4038fc:	042300e2 	.word	0x042300e2
  403900:	010500fe 	.word	0x010500fe
  403904:	01050105 	.word	0x01050105
  403908:	01050105 	.word	0x01050105
  40390c:	01050105 	.word	0x01050105
  403910:	01050105 	.word	0x01050105
  403914:	04230423 	.word	0x04230423
  403918:	04230423 	.word	0x04230423
  40391c:	04230423 	.word	0x04230423
  403920:	04230423 	.word	0x04230423
  403924:	04230423 	.word	0x04230423
  403928:	02810115 	.word	0x02810115
  40392c:	02810423 	.word	0x02810423
  403930:	04230423 	.word	0x04230423
  403934:	04230423 	.word	0x04230423
  403938:	042302c6 	.word	0x042302c6
  40393c:	02cd0423 	.word	0x02cd0423
  403940:	04230423 	.word	0x04230423
  403944:	04230423 	.word	0x04230423
  403948:	02f70423 	.word	0x02f70423
  40394c:	04230423 	.word	0x04230423
  403950:	04230325 	.word	0x04230325
  403954:	04230423 	.word	0x04230423
  403958:	04230423 	.word	0x04230423
  40395c:	04230423 	.word	0x04230423
  403960:	04230423 	.word	0x04230423
  403964:	03660423 	.word	0x03660423
  403968:	02810379 	.word	0x02810379
  40396c:	02810281 	.word	0x02810281
  403970:	03790381 	.word	0x03790381
  403974:	04230423 	.word	0x04230423
  403978:	042303d1 	.word	0x042303d1
  40397c:	00a303db 	.word	0x00a303db
  403980:	03ee0064 	.word	0x03ee0064
  403984:	03f50423 	.word	0x03f50423
  403988:	03aa0423 	.word	0x03aa0423
  40398c:	04230423 	.word	0x04230423
  403990:	03bc      	.short	0x03bc
  403992:	980c      	ldr	r0, [sp, #48]	; 0x30
  403994:	930e      	str	r3, [sp, #56]	; 0x38
  403996:	4240      	negs	r0, r0
  403998:	900c      	str	r0, [sp, #48]	; 0x30
  40399a:	9b07      	ldr	r3, [sp, #28]
  40399c:	f043 0304 	orr.w	r3, r3, #4
  4039a0:	9307      	str	r3, [sp, #28]
  4039a2:	f898 3000 	ldrb.w	r3, [r8]
  4039a6:	e792      	b.n	4038ce <_svfprintf_r+0xb2>
  4039a8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4039aa:	46ab      	mov	fp, r5
  4039ac:	2100      	movs	r1, #0
  4039ae:	6804      	ldr	r4, [r0, #0]
  4039b0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4039b4:	1d07      	adds	r7, r0, #4
  4039b6:	9807      	ldr	r0, [sp, #28]
  4039b8:	2330      	movs	r3, #48	; 0x30
  4039ba:	2278      	movs	r2, #120	; 0x78
  4039bc:	458b      	cmp	fp, r1
  4039be:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4039c2:	f04f 0500 	mov.w	r5, #0
  4039c6:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  4039ca:	f040 0302 	orr.w	r3, r0, #2
  4039ce:	f2c0 83c7 	blt.w	404160 <_svfprintf_r+0x944>
  4039d2:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  4039d6:	f043 0302 	orr.w	r3, r3, #2
  4039da:	9307      	str	r3, [sp, #28]
  4039dc:	ea54 0305 	orrs.w	r3, r4, r5
  4039e0:	970e      	str	r7, [sp, #56]	; 0x38
  4039e2:	f000 8393 	beq.w	40410c <_svfprintf_r+0x8f0>
  4039e6:	460f      	mov	r7, r1
  4039e8:	9211      	str	r2, [sp, #68]	; 0x44
  4039ea:	48b3      	ldr	r0, [pc, #716]	; (403cb8 <_svfprintf_r+0x49c>)
  4039ec:	e2ce      	b.n	403f8c <_svfprintf_r+0x770>
  4039ee:	aa23      	add	r2, sp, #140	; 0x8c
  4039f0:	9909      	ldr	r1, [sp, #36]	; 0x24
  4039f2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4039f4:	f004 fd12 	bl	40841c <__ssprint_r>
  4039f8:	b948      	cbnz	r0, 403a0e <_svfprintf_r+0x1f2>
  4039fa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4039fe:	e752      	b.n	4038a6 <_svfprintf_r+0x8a>
  403a00:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403a02:	b123      	cbz	r3, 403a0e <_svfprintf_r+0x1f2>
  403a04:	980a      	ldr	r0, [sp, #40]	; 0x28
  403a06:	9909      	ldr	r1, [sp, #36]	; 0x24
  403a08:	aa23      	add	r2, sp, #140	; 0x8c
  403a0a:	f004 fd07 	bl	40841c <__ssprint_r>
  403a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403a10:	899b      	ldrh	r3, [r3, #12]
  403a12:	f013 0f40 	tst.w	r3, #64	; 0x40
  403a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403a18:	bf18      	it	ne
  403a1a:	f04f 33ff 	movne.w	r3, #4294967295
  403a1e:	4618      	mov	r0, r3
  403a20:	b041      	add	sp, #260	; 0x104
  403a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a26:	9311      	str	r3, [sp, #68]	; 0x44
  403a28:	46ab      	mov	fp, r5
  403a2a:	2a00      	cmp	r2, #0
  403a2c:	f041 8223 	bne.w	404e76 <_svfprintf_r+0x165a>
  403a30:	9a07      	ldr	r2, [sp, #28]
  403a32:	f012 0320 	ands.w	r3, r2, #32
  403a36:	f000 822e 	beq.w	403e96 <_svfprintf_r+0x67a>
  403a3a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403a3c:	3707      	adds	r7, #7
  403a3e:	f027 0307 	bic.w	r3, r7, #7
  403a42:	2700      	movs	r7, #0
  403a44:	f103 0108 	add.w	r1, r3, #8
  403a48:	45bb      	cmp	fp, r7
  403a4a:	910e      	str	r1, [sp, #56]	; 0x38
  403a4c:	e9d3 4500 	ldrd	r4, r5, [r3]
  403a50:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403a54:	f2c0 8752 	blt.w	4048fc <_svfprintf_r+0x10e0>
  403a58:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  403a5c:	9307      	str	r3, [sp, #28]
  403a5e:	ea54 0305 	orrs.w	r3, r4, r5
  403a62:	f000 8375 	beq.w	404150 <_svfprintf_r+0x934>
  403a66:	ae30      	add	r6, sp, #192	; 0xc0
  403a68:	08e2      	lsrs	r2, r4, #3
  403a6a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  403a6e:	08e9      	lsrs	r1, r5, #3
  403a70:	f004 0307 	and.w	r3, r4, #7
  403a74:	460d      	mov	r5, r1
  403a76:	4614      	mov	r4, r2
  403a78:	3330      	adds	r3, #48	; 0x30
  403a7a:	ea54 0205 	orrs.w	r2, r4, r5
  403a7e:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403a82:	d1f1      	bne.n	403a68 <_svfprintf_r+0x24c>
  403a84:	9a07      	ldr	r2, [sp, #28]
  403a86:	07d1      	lsls	r1, r2, #31
  403a88:	f140 8084 	bpl.w	403b94 <_svfprintf_r+0x378>
  403a8c:	2b30      	cmp	r3, #48	; 0x30
  403a8e:	f000 8081 	beq.w	403b94 <_svfprintf_r+0x378>
  403a92:	2230      	movs	r2, #48	; 0x30
  403a94:	1e73      	subs	r3, r6, #1
  403a96:	f806 2c01 	strb.w	r2, [r6, #-1]
  403a9a:	aa30      	add	r2, sp, #192	; 0xc0
  403a9c:	1ad2      	subs	r2, r2, r3
  403a9e:	920d      	str	r2, [sp, #52]	; 0x34
  403aa0:	461e      	mov	r6, r3
  403aa2:	e07a      	b.n	403b9a <_svfprintf_r+0x37e>
  403aa4:	f898 3000 	ldrb.w	r3, [r8]
  403aa8:	2b2a      	cmp	r3, #42	; 0x2a
  403aaa:	f108 0401 	add.w	r4, r8, #1
  403aae:	f001 81b1 	beq.w	404e14 <_svfprintf_r+0x15f8>
  403ab2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403ab6:	2809      	cmp	r0, #9
  403ab8:	bf98      	it	ls
  403aba:	2500      	movls	r5, #0
  403abc:	f201 8164 	bhi.w	404d88 <_svfprintf_r+0x156c>
  403ac0:	f814 3b01 	ldrb.w	r3, [r4], #1
  403ac4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  403ac8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  403acc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403ad0:	2809      	cmp	r0, #9
  403ad2:	d9f5      	bls.n	403ac0 <_svfprintf_r+0x2a4>
  403ad4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  403ad8:	46a0      	mov	r8, r4
  403ada:	e6fa      	b.n	4038d2 <_svfprintf_r+0xb6>
  403adc:	9b07      	ldr	r3, [sp, #28]
  403ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403ae2:	9307      	str	r3, [sp, #28]
  403ae4:	f898 3000 	ldrb.w	r3, [r8]
  403ae8:	e6f1      	b.n	4038ce <_svfprintf_r+0xb2>
  403aea:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403aee:	2300      	movs	r3, #0
  403af0:	461c      	mov	r4, r3
  403af2:	f818 3b01 	ldrb.w	r3, [r8], #1
  403af6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403afa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403afe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403b02:	2809      	cmp	r0, #9
  403b04:	d9f5      	bls.n	403af2 <_svfprintf_r+0x2d6>
  403b06:	940c      	str	r4, [sp, #48]	; 0x30
  403b08:	e6e3      	b.n	4038d2 <_svfprintf_r+0xb6>
  403b0a:	9311      	str	r3, [sp, #68]	; 0x44
  403b0c:	46ab      	mov	fp, r5
  403b0e:	2a00      	cmp	r2, #0
  403b10:	f041 81c9 	bne.w	404ea6 <_svfprintf_r+0x168a>
  403b14:	9b07      	ldr	r3, [sp, #28]
  403b16:	f043 0310 	orr.w	r3, r3, #16
  403b1a:	9307      	str	r3, [sp, #28]
  403b1c:	9b07      	ldr	r3, [sp, #28]
  403b1e:	0698      	lsls	r0, r3, #26
  403b20:	f140 8530 	bpl.w	404584 <_svfprintf_r+0xd68>
  403b24:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403b26:	3707      	adds	r7, #7
  403b28:	f027 0707 	bic.w	r7, r7, #7
  403b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
  403b30:	f107 0108 	add.w	r1, r7, #8
  403b34:	910e      	str	r1, [sp, #56]	; 0x38
  403b36:	4614      	mov	r4, r2
  403b38:	461d      	mov	r5, r3
  403b3a:	2a00      	cmp	r2, #0
  403b3c:	f173 0300 	sbcs.w	r3, r3, #0
  403b40:	f2c0 855b 	blt.w	4045fa <_svfprintf_r+0xdde>
  403b44:	f1bb 0f00 	cmp.w	fp, #0
  403b48:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403b4c:	f2c0 8538 	blt.w	4045c0 <_svfprintf_r+0xda4>
  403b50:	9b07      	ldr	r3, [sp, #28]
  403b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403b56:	9307      	str	r3, [sp, #28]
  403b58:	ea54 0305 	orrs.w	r3, r4, r5
  403b5c:	f000 81db 	beq.w	403f16 <_svfprintf_r+0x6fa>
  403b60:	2d00      	cmp	r5, #0
  403b62:	bf08      	it	eq
  403b64:	2c0a      	cmpeq	r4, #10
  403b66:	f0c0 81db 	bcc.w	403f20 <_svfprintf_r+0x704>
  403b6a:	ae30      	add	r6, sp, #192	; 0xc0
  403b6c:	4620      	mov	r0, r4
  403b6e:	4629      	mov	r1, r5
  403b70:	220a      	movs	r2, #10
  403b72:	2300      	movs	r3, #0
  403b74:	f005 fb2e 	bl	4091d4 <__aeabi_uldivmod>
  403b78:	3230      	adds	r2, #48	; 0x30
  403b7a:	f806 2d01 	strb.w	r2, [r6, #-1]!
  403b7e:	4620      	mov	r0, r4
  403b80:	4629      	mov	r1, r5
  403b82:	2300      	movs	r3, #0
  403b84:	220a      	movs	r2, #10
  403b86:	f005 fb25 	bl	4091d4 <__aeabi_uldivmod>
  403b8a:	4604      	mov	r4, r0
  403b8c:	460d      	mov	r5, r1
  403b8e:	ea54 0305 	orrs.w	r3, r4, r5
  403b92:	d1eb      	bne.n	403b6c <_svfprintf_r+0x350>
  403b94:	ab30      	add	r3, sp, #192	; 0xc0
  403b96:	1b9b      	subs	r3, r3, r6
  403b98:	930d      	str	r3, [sp, #52]	; 0x34
  403b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403b9c:	455b      	cmp	r3, fp
  403b9e:	bfb8      	it	lt
  403ba0:	465b      	movlt	r3, fp
  403ba2:	9308      	str	r3, [sp, #32]
  403ba4:	2300      	movs	r3, #0
  403ba6:	9313      	str	r3, [sp, #76]	; 0x4c
  403ba8:	b117      	cbz	r7, 403bb0 <_svfprintf_r+0x394>
  403baa:	9b08      	ldr	r3, [sp, #32]
  403bac:	3301      	adds	r3, #1
  403bae:	9308      	str	r3, [sp, #32]
  403bb0:	9b07      	ldr	r3, [sp, #28]
  403bb2:	f013 0302 	ands.w	r3, r3, #2
  403bb6:	930f      	str	r3, [sp, #60]	; 0x3c
  403bb8:	d002      	beq.n	403bc0 <_svfprintf_r+0x3a4>
  403bba:	9b08      	ldr	r3, [sp, #32]
  403bbc:	3302      	adds	r3, #2
  403bbe:	9308      	str	r3, [sp, #32]
  403bc0:	9b07      	ldr	r3, [sp, #28]
  403bc2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  403bc6:	9310      	str	r3, [sp, #64]	; 0x40
  403bc8:	f040 82d7 	bne.w	40417a <_svfprintf_r+0x95e>
  403bcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403bce:	9a08      	ldr	r2, [sp, #32]
  403bd0:	1a9d      	subs	r5, r3, r2
  403bd2:	2d00      	cmp	r5, #0
  403bd4:	f340 82d1 	ble.w	40417a <_svfprintf_r+0x95e>
  403bd8:	2d10      	cmp	r5, #16
  403bda:	9925      	ldr	r1, [sp, #148]	; 0x94
  403bdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403bde:	4f37      	ldr	r7, [pc, #220]	; (403cbc <_svfprintf_r+0x4a0>)
  403be0:	dd27      	ble.n	403c32 <_svfprintf_r+0x416>
  403be2:	9618      	str	r6, [sp, #96]	; 0x60
  403be4:	4648      	mov	r0, r9
  403be6:	2410      	movs	r4, #16
  403be8:	46b9      	mov	r9, r7
  403bea:	9e09      	ldr	r6, [sp, #36]	; 0x24
  403bec:	462f      	mov	r7, r5
  403bee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403bf0:	e004      	b.n	403bfc <_svfprintf_r+0x3e0>
  403bf2:	3f10      	subs	r7, #16
  403bf4:	2f10      	cmp	r7, #16
  403bf6:	f100 0008 	add.w	r0, r0, #8
  403bfa:	dd16      	ble.n	403c2a <_svfprintf_r+0x40e>
  403bfc:	3201      	adds	r2, #1
  403bfe:	4b2f      	ldr	r3, [pc, #188]	; (403cbc <_svfprintf_r+0x4a0>)
  403c00:	9224      	str	r2, [sp, #144]	; 0x90
  403c02:	3110      	adds	r1, #16
  403c04:	2a07      	cmp	r2, #7
  403c06:	9125      	str	r1, [sp, #148]	; 0x94
  403c08:	e880 0018 	stmia.w	r0, {r3, r4}
  403c0c:	ddf1      	ble.n	403bf2 <_svfprintf_r+0x3d6>
  403c0e:	aa23      	add	r2, sp, #140	; 0x8c
  403c10:	4631      	mov	r1, r6
  403c12:	4628      	mov	r0, r5
  403c14:	f004 fc02 	bl	40841c <__ssprint_r>
  403c18:	2800      	cmp	r0, #0
  403c1a:	f47f aef8 	bne.w	403a0e <_svfprintf_r+0x1f2>
  403c1e:	3f10      	subs	r7, #16
  403c20:	2f10      	cmp	r7, #16
  403c22:	9925      	ldr	r1, [sp, #148]	; 0x94
  403c24:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403c26:	a830      	add	r0, sp, #192	; 0xc0
  403c28:	dce8      	bgt.n	403bfc <_svfprintf_r+0x3e0>
  403c2a:	9e18      	ldr	r6, [sp, #96]	; 0x60
  403c2c:	463d      	mov	r5, r7
  403c2e:	464f      	mov	r7, r9
  403c30:	4681      	mov	r9, r0
  403c32:	3201      	adds	r2, #1
  403c34:	186c      	adds	r4, r5, r1
  403c36:	2a07      	cmp	r2, #7
  403c38:	9425      	str	r4, [sp, #148]	; 0x94
  403c3a:	9224      	str	r2, [sp, #144]	; 0x90
  403c3c:	f8c9 7000 	str.w	r7, [r9]
  403c40:	f8c9 5004 	str.w	r5, [r9, #4]
  403c44:	f300 8428 	bgt.w	404498 <_svfprintf_r+0xc7c>
  403c48:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403c4c:	f109 0908 	add.w	r9, r9, #8
  403c50:	b177      	cbz	r7, 403c70 <_svfprintf_r+0x454>
  403c52:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403c54:	3301      	adds	r3, #1
  403c56:	3401      	adds	r4, #1
  403c58:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  403c5c:	2201      	movs	r2, #1
  403c5e:	2b07      	cmp	r3, #7
  403c60:	9425      	str	r4, [sp, #148]	; 0x94
  403c62:	9324      	str	r3, [sp, #144]	; 0x90
  403c64:	e889 0006 	stmia.w	r9, {r1, r2}
  403c68:	f300 83a0 	bgt.w	4043ac <_svfprintf_r+0xb90>
  403c6c:	f109 0908 	add.w	r9, r9, #8
  403c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403c72:	b16b      	cbz	r3, 403c90 <_svfprintf_r+0x474>
  403c74:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403c76:	3301      	adds	r3, #1
  403c78:	3402      	adds	r4, #2
  403c7a:	a91c      	add	r1, sp, #112	; 0x70
  403c7c:	2202      	movs	r2, #2
  403c7e:	2b07      	cmp	r3, #7
  403c80:	9425      	str	r4, [sp, #148]	; 0x94
  403c82:	9324      	str	r3, [sp, #144]	; 0x90
  403c84:	e889 0006 	stmia.w	r9, {r1, r2}
  403c88:	f300 839c 	bgt.w	4043c4 <_svfprintf_r+0xba8>
  403c8c:	f109 0908 	add.w	r9, r9, #8
  403c90:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403c92:	2b80      	cmp	r3, #128	; 0x80
  403c94:	f000 82d5 	beq.w	404242 <_svfprintf_r+0xa26>
  403c98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403c9a:	ebc3 070b 	rsb	r7, r3, fp
  403c9e:	2f00      	cmp	r7, #0
  403ca0:	dd39      	ble.n	403d16 <_svfprintf_r+0x4fa>
  403ca2:	4a07      	ldr	r2, [pc, #28]	; (403cc0 <_svfprintf_r+0x4a4>)
  403ca4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ca6:	920f      	str	r2, [sp, #60]	; 0x3c
  403ca8:	2f10      	cmp	r7, #16
  403caa:	dd28      	ble.n	403cfe <_svfprintf_r+0x4e2>
  403cac:	4622      	mov	r2, r4
  403cae:	f04f 0b10 	mov.w	fp, #16
  403cb2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403cb4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403cb6:	e00a      	b.n	403cce <_svfprintf_r+0x4b2>
  403cb8:	0040964c 	.word	0x0040964c
  403cbc:	0040966c 	.word	0x0040966c
  403cc0:	00409618 	.word	0x00409618
  403cc4:	3f10      	subs	r7, #16
  403cc6:	2f10      	cmp	r7, #16
  403cc8:	f109 0908 	add.w	r9, r9, #8
  403ccc:	dd16      	ble.n	403cfc <_svfprintf_r+0x4e0>
  403cce:	3301      	adds	r3, #1
  403cd0:	3210      	adds	r2, #16
  403cd2:	2b07      	cmp	r3, #7
  403cd4:	9225      	str	r2, [sp, #148]	; 0x94
  403cd6:	9324      	str	r3, [sp, #144]	; 0x90
  403cd8:	e889 0c00 	stmia.w	r9, {sl, fp}
  403cdc:	ddf2      	ble.n	403cc4 <_svfprintf_r+0x4a8>
  403cde:	aa23      	add	r2, sp, #140	; 0x8c
  403ce0:	4621      	mov	r1, r4
  403ce2:	4628      	mov	r0, r5
  403ce4:	f004 fb9a 	bl	40841c <__ssprint_r>
  403ce8:	2800      	cmp	r0, #0
  403cea:	f47f ae90 	bne.w	403a0e <_svfprintf_r+0x1f2>
  403cee:	3f10      	subs	r7, #16
  403cf0:	2f10      	cmp	r7, #16
  403cf2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403cf4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403cf6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403cfa:	dce8      	bgt.n	403cce <_svfprintf_r+0x4b2>
  403cfc:	4614      	mov	r4, r2
  403cfe:	3301      	adds	r3, #1
  403d00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403d02:	9324      	str	r3, [sp, #144]	; 0x90
  403d04:	443c      	add	r4, r7
  403d06:	2b07      	cmp	r3, #7
  403d08:	9425      	str	r4, [sp, #148]	; 0x94
  403d0a:	e889 0084 	stmia.w	r9, {r2, r7}
  403d0e:	f300 8341 	bgt.w	404394 <_svfprintf_r+0xb78>
  403d12:	f109 0908 	add.w	r9, r9, #8
  403d16:	9b07      	ldr	r3, [sp, #28]
  403d18:	05da      	lsls	r2, r3, #23
  403d1a:	f100 8230 	bmi.w	40417e <_svfprintf_r+0x962>
  403d1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403d20:	990d      	ldr	r1, [sp, #52]	; 0x34
  403d22:	f8c9 6000 	str.w	r6, [r9]
  403d26:	3301      	adds	r3, #1
  403d28:	440c      	add	r4, r1
  403d2a:	2b07      	cmp	r3, #7
  403d2c:	9425      	str	r4, [sp, #148]	; 0x94
  403d2e:	f8c9 1004 	str.w	r1, [r9, #4]
  403d32:	9324      	str	r3, [sp, #144]	; 0x90
  403d34:	f300 8318 	bgt.w	404368 <_svfprintf_r+0xb4c>
  403d38:	f109 0908 	add.w	r9, r9, #8
  403d3c:	9b07      	ldr	r3, [sp, #28]
  403d3e:	0759      	lsls	r1, r3, #29
  403d40:	d53f      	bpl.n	403dc2 <_svfprintf_r+0x5a6>
  403d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403d44:	9a08      	ldr	r2, [sp, #32]
  403d46:	1a9d      	subs	r5, r3, r2
  403d48:	2d00      	cmp	r5, #0
  403d4a:	dd3a      	ble.n	403dc2 <_svfprintf_r+0x5a6>
  403d4c:	2d10      	cmp	r5, #16
  403d4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403d50:	4fbc      	ldr	r7, [pc, #752]	; (404044 <_svfprintf_r+0x828>)
  403d52:	dd23      	ble.n	403d9c <_svfprintf_r+0x580>
  403d54:	4622      	mov	r2, r4
  403d56:	2610      	movs	r6, #16
  403d58:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  403d5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403d5e:	e004      	b.n	403d6a <_svfprintf_r+0x54e>
  403d60:	3d10      	subs	r5, #16
  403d62:	2d10      	cmp	r5, #16
  403d64:	f109 0908 	add.w	r9, r9, #8
  403d68:	dd17      	ble.n	403d9a <_svfprintf_r+0x57e>
  403d6a:	3301      	adds	r3, #1
  403d6c:	49b5      	ldr	r1, [pc, #724]	; (404044 <_svfprintf_r+0x828>)
  403d6e:	9324      	str	r3, [sp, #144]	; 0x90
  403d70:	3210      	adds	r2, #16
  403d72:	2b07      	cmp	r3, #7
  403d74:	9225      	str	r2, [sp, #148]	; 0x94
  403d76:	e889 0042 	stmia.w	r9, {r1, r6}
  403d7a:	ddf1      	ble.n	403d60 <_svfprintf_r+0x544>
  403d7c:	aa23      	add	r2, sp, #140	; 0x8c
  403d7e:	4621      	mov	r1, r4
  403d80:	4658      	mov	r0, fp
  403d82:	f004 fb4b 	bl	40841c <__ssprint_r>
  403d86:	2800      	cmp	r0, #0
  403d88:	f47f ae41 	bne.w	403a0e <_svfprintf_r+0x1f2>
  403d8c:	3d10      	subs	r5, #16
  403d8e:	2d10      	cmp	r5, #16
  403d90:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403d92:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403d94:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403d98:	dce7      	bgt.n	403d6a <_svfprintf_r+0x54e>
  403d9a:	4614      	mov	r4, r2
  403d9c:	3301      	adds	r3, #1
  403d9e:	442c      	add	r4, r5
  403da0:	2b07      	cmp	r3, #7
  403da2:	9425      	str	r4, [sp, #148]	; 0x94
  403da4:	9324      	str	r3, [sp, #144]	; 0x90
  403da6:	f8c9 7000 	str.w	r7, [r9]
  403daa:	f8c9 5004 	str.w	r5, [r9, #4]
  403dae:	dd08      	ble.n	403dc2 <_svfprintf_r+0x5a6>
  403db0:	aa23      	add	r2, sp, #140	; 0x8c
  403db2:	9909      	ldr	r1, [sp, #36]	; 0x24
  403db4:	980a      	ldr	r0, [sp, #40]	; 0x28
  403db6:	f004 fb31 	bl	40841c <__ssprint_r>
  403dba:	2800      	cmp	r0, #0
  403dbc:	f47f ae27 	bne.w	403a0e <_svfprintf_r+0x1f2>
  403dc0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403dc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403dc6:	9908      	ldr	r1, [sp, #32]
  403dc8:	428a      	cmp	r2, r1
  403dca:	bfac      	ite	ge
  403dcc:	189b      	addge	r3, r3, r2
  403dce:	185b      	addlt	r3, r3, r1
  403dd0:	930b      	str	r3, [sp, #44]	; 0x2c
  403dd2:	2c00      	cmp	r4, #0
  403dd4:	f040 82d4 	bne.w	404380 <_svfprintf_r+0xb64>
  403dd8:	2300      	movs	r3, #0
  403dda:	9324      	str	r3, [sp, #144]	; 0x90
  403ddc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403de0:	e542      	b.n	403868 <_svfprintf_r+0x4c>
  403de2:	9311      	str	r3, [sp, #68]	; 0x44
  403de4:	46ab      	mov	fp, r5
  403de6:	2a00      	cmp	r2, #0
  403de8:	f041 8059 	bne.w	404e9e <_svfprintf_r+0x1682>
  403dec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403dee:	3707      	adds	r7, #7
  403df0:	f027 0307 	bic.w	r3, r7, #7
  403df4:	f103 0208 	add.w	r2, r3, #8
  403df8:	920e      	str	r2, [sp, #56]	; 0x38
  403dfa:	681a      	ldr	r2, [r3, #0]
  403dfc:	9214      	str	r2, [sp, #80]	; 0x50
  403dfe:	685b      	ldr	r3, [r3, #4]
  403e00:	9315      	str	r3, [sp, #84]	; 0x54
  403e02:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403e04:	9d14      	ldr	r5, [sp, #80]	; 0x50
  403e06:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  403e0a:	4628      	mov	r0, r5
  403e0c:	4621      	mov	r1, r4
  403e0e:	f04f 32ff 	mov.w	r2, #4294967295
  403e12:	4b8d      	ldr	r3, [pc, #564]	; (404048 <_svfprintf_r+0x82c>)
  403e14:	f005 f9a0 	bl	409158 <__aeabi_dcmpun>
  403e18:	2800      	cmp	r0, #0
  403e1a:	f040 84c1 	bne.w	4047a0 <_svfprintf_r+0xf84>
  403e1e:	4628      	mov	r0, r5
  403e20:	4621      	mov	r1, r4
  403e22:	f04f 32ff 	mov.w	r2, #4294967295
  403e26:	4b88      	ldr	r3, [pc, #544]	; (404048 <_svfprintf_r+0x82c>)
  403e28:	f005 f978 	bl	40911c <__aeabi_dcmple>
  403e2c:	2800      	cmp	r0, #0
  403e2e:	f040 84b7 	bne.w	4047a0 <_svfprintf_r+0xf84>
  403e32:	9814      	ldr	r0, [sp, #80]	; 0x50
  403e34:	9915      	ldr	r1, [sp, #84]	; 0x54
  403e36:	2200      	movs	r2, #0
  403e38:	2300      	movs	r3, #0
  403e3a:	f005 f965 	bl	409108 <__aeabi_dcmplt>
  403e3e:	2800      	cmp	r0, #0
  403e40:	f040 874b 	bne.w	404cda <_svfprintf_r+0x14be>
  403e44:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403e48:	4e80      	ldr	r6, [pc, #512]	; (40404c <_svfprintf_r+0x830>)
  403e4a:	4b81      	ldr	r3, [pc, #516]	; (404050 <_svfprintf_r+0x834>)
  403e4c:	9907      	ldr	r1, [sp, #28]
  403e4e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  403e52:	9107      	str	r1, [sp, #28]
  403e54:	9911      	ldr	r1, [sp, #68]	; 0x44
  403e56:	2203      	movs	r2, #3
  403e58:	f04f 0b00 	mov.w	fp, #0
  403e5c:	9208      	str	r2, [sp, #32]
  403e5e:	2947      	cmp	r1, #71	; 0x47
  403e60:	bfd8      	it	le
  403e62:	461e      	movle	r6, r3
  403e64:	920d      	str	r2, [sp, #52]	; 0x34
  403e66:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  403e6a:	e69d      	b.n	403ba8 <_svfprintf_r+0x38c>
  403e6c:	9b07      	ldr	r3, [sp, #28]
  403e6e:	f043 0308 	orr.w	r3, r3, #8
  403e72:	9307      	str	r3, [sp, #28]
  403e74:	f898 3000 	ldrb.w	r3, [r8]
  403e78:	e529      	b.n	4038ce <_svfprintf_r+0xb2>
  403e7a:	9311      	str	r3, [sp, #68]	; 0x44
  403e7c:	46ab      	mov	fp, r5
  403e7e:	2a00      	cmp	r2, #0
  403e80:	f041 8009 	bne.w	404e96 <_svfprintf_r+0x167a>
  403e84:	9b07      	ldr	r3, [sp, #28]
  403e86:	f043 0310 	orr.w	r3, r3, #16
  403e8a:	9307      	str	r3, [sp, #28]
  403e8c:	9a07      	ldr	r2, [sp, #28]
  403e8e:	f012 0320 	ands.w	r3, r2, #32
  403e92:	f47f add2 	bne.w	403a3a <_svfprintf_r+0x21e>
  403e96:	9907      	ldr	r1, [sp, #28]
  403e98:	f011 0210 	ands.w	r2, r1, #16
  403e9c:	f000 8507 	beq.w	4048ae <_svfprintf_r+0x1092>
  403ea0:	980e      	ldr	r0, [sp, #56]	; 0x38
  403ea2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403ea6:	f1bb 0f00 	cmp.w	fp, #0
  403eaa:	6804      	ldr	r4, [r0, #0]
  403eac:	f100 0704 	add.w	r7, r0, #4
  403eb0:	f04f 0500 	mov.w	r5, #0
  403eb4:	f2c0 8521 	blt.w	4048fa <_svfprintf_r+0x10de>
  403eb8:	460a      	mov	r2, r1
  403eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  403ebe:	9207      	str	r2, [sp, #28]
  403ec0:	ea54 0205 	orrs.w	r2, r4, r5
  403ec4:	970e      	str	r7, [sp, #56]	; 0x38
  403ec6:	f000 8143 	beq.w	404150 <_svfprintf_r+0x934>
  403eca:	461f      	mov	r7, r3
  403ecc:	e5cb      	b.n	403a66 <_svfprintf_r+0x24a>
  403ece:	9311      	str	r3, [sp, #68]	; 0x44
  403ed0:	46ab      	mov	fp, r5
  403ed2:	2a00      	cmp	r2, #0
  403ed4:	f040 87d7 	bne.w	404e86 <_svfprintf_r+0x166a>
  403ed8:	9b07      	ldr	r3, [sp, #28]
  403eda:	f043 0310 	orr.w	r3, r3, #16
  403ede:	9307      	str	r3, [sp, #28]
  403ee0:	9a07      	ldr	r2, [sp, #28]
  403ee2:	f012 0320 	ands.w	r3, r2, #32
  403ee6:	f000 8332 	beq.w	40454e <_svfprintf_r+0xd32>
  403eea:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403eec:	3707      	adds	r7, #7
  403eee:	f027 0307 	bic.w	r3, r7, #7
  403ef2:	2700      	movs	r7, #0
  403ef4:	f103 0108 	add.w	r1, r3, #8
  403ef8:	45bb      	cmp	fp, r7
  403efa:	910e      	str	r1, [sp, #56]	; 0x38
  403efc:	e9d3 4500 	ldrd	r4, r5, [r3]
  403f00:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403f04:	f2c0 835c 	blt.w	4045c0 <_svfprintf_r+0xda4>
  403f08:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  403f0c:	9307      	str	r3, [sp, #28]
  403f0e:	ea54 0305 	orrs.w	r3, r4, r5
  403f12:	f47f ae25 	bne.w	403b60 <_svfprintf_r+0x344>
  403f16:	f1bb 0f00 	cmp.w	fp, #0
  403f1a:	f000 80fe 	beq.w	40411a <_svfprintf_r+0x8fe>
  403f1e:	2400      	movs	r4, #0
  403f20:	ae40      	add	r6, sp, #256	; 0x100
  403f22:	3430      	adds	r4, #48	; 0x30
  403f24:	f806 4d41 	strb.w	r4, [r6, #-65]!
  403f28:	e634      	b.n	403b94 <_svfprintf_r+0x378>
  403f2a:	9311      	str	r3, [sp, #68]	; 0x44
  403f2c:	46ab      	mov	fp, r5
  403f2e:	2a00      	cmp	r2, #0
  403f30:	f040 87a5 	bne.w	404e7e <_svfprintf_r+0x1662>
  403f34:	9b07      	ldr	r3, [sp, #28]
  403f36:	4847      	ldr	r0, [pc, #284]	; (404054 <_svfprintf_r+0x838>)
  403f38:	069d      	lsls	r5, r3, #26
  403f3a:	f140 8097 	bpl.w	40406c <_svfprintf_r+0x850>
  403f3e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403f40:	3707      	adds	r7, #7
  403f42:	f027 0307 	bic.w	r3, r7, #7
  403f46:	e9d3 4500 	ldrd	r4, r5, [r3]
  403f4a:	f103 0208 	add.w	r2, r3, #8
  403f4e:	920e      	str	r2, [sp, #56]	; 0x38
  403f50:	9a07      	ldr	r2, [sp, #28]
  403f52:	f012 0701 	ands.w	r7, r2, #1
  403f56:	f000 8241 	beq.w	4043dc <_svfprintf_r+0xbc0>
  403f5a:	ea54 0305 	orrs.w	r3, r4, r5
  403f5e:	f000 84f5 	beq.w	40494c <_svfprintf_r+0x1130>
  403f62:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403f66:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  403f6a:	2700      	movs	r7, #0
  403f6c:	9a07      	ldr	r2, [sp, #28]
  403f6e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403f72:	2330      	movs	r3, #48	; 0x30
  403f74:	45bb      	cmp	fp, r7
  403f76:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  403f7a:	f042 0302 	orr.w	r3, r2, #2
  403f7e:	f2c0 86a9 	blt.w	404cd4 <_svfprintf_r+0x14b8>
  403f82:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  403f86:	f043 0302 	orr.w	r3, r3, #2
  403f8a:	9307      	str	r3, [sp, #28]
  403f8c:	ae30      	add	r6, sp, #192	; 0xc0
  403f8e:	0923      	lsrs	r3, r4, #4
  403f90:	f004 010f 	and.w	r1, r4, #15
  403f94:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403f98:	092a      	lsrs	r2, r5, #4
  403f9a:	461c      	mov	r4, r3
  403f9c:	4615      	mov	r5, r2
  403f9e:	5c43      	ldrb	r3, [r0, r1]
  403fa0:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403fa4:	ea54 0305 	orrs.w	r3, r4, r5
  403fa8:	d1f1      	bne.n	403f8e <_svfprintf_r+0x772>
  403faa:	e5f3      	b.n	403b94 <_svfprintf_r+0x378>
  403fac:	990e      	ldr	r1, [sp, #56]	; 0x38
  403fae:	9311      	str	r3, [sp, #68]	; 0x44
  403fb0:	680a      	ldr	r2, [r1, #0]
  403fb2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  403fb6:	2300      	movs	r3, #0
  403fb8:	460a      	mov	r2, r1
  403fba:	461f      	mov	r7, r3
  403fbc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403fc0:	3204      	adds	r2, #4
  403fc2:	2301      	movs	r3, #1
  403fc4:	9308      	str	r3, [sp, #32]
  403fc6:	46bb      	mov	fp, r7
  403fc8:	9713      	str	r7, [sp, #76]	; 0x4c
  403fca:	920e      	str	r2, [sp, #56]	; 0x38
  403fcc:	930d      	str	r3, [sp, #52]	; 0x34
  403fce:	ae26      	add	r6, sp, #152	; 0x98
  403fd0:	e5ee      	b.n	403bb0 <_svfprintf_r+0x394>
  403fd2:	9311      	str	r3, [sp, #68]	; 0x44
  403fd4:	46ab      	mov	fp, r5
  403fd6:	2a00      	cmp	r2, #0
  403fd8:	f43f ada0 	beq.w	403b1c <_svfprintf_r+0x300>
  403fdc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403fe0:	e59c      	b.n	403b1c <_svfprintf_r+0x300>
  403fe2:	9b07      	ldr	r3, [sp, #28]
  403fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403fe8:	9307      	str	r3, [sp, #28]
  403fea:	f898 3000 	ldrb.w	r3, [r8]
  403fee:	e46e      	b.n	4038ce <_svfprintf_r+0xb2>
  403ff0:	f898 3000 	ldrb.w	r3, [r8]
  403ff4:	2900      	cmp	r1, #0
  403ff6:	f47f ac6a 	bne.w	4038ce <_svfprintf_r+0xb2>
  403ffa:	2201      	movs	r2, #1
  403ffc:	2120      	movs	r1, #32
  403ffe:	e466      	b.n	4038ce <_svfprintf_r+0xb2>
  404000:	9b07      	ldr	r3, [sp, #28]
  404002:	f043 0301 	orr.w	r3, r3, #1
  404006:	9307      	str	r3, [sp, #28]
  404008:	f898 3000 	ldrb.w	r3, [r8]
  40400c:	e45f      	b.n	4038ce <_svfprintf_r+0xb2>
  40400e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  404010:	6823      	ldr	r3, [r4, #0]
  404012:	930c      	str	r3, [sp, #48]	; 0x30
  404014:	4618      	mov	r0, r3
  404016:	2800      	cmp	r0, #0
  404018:	4623      	mov	r3, r4
  40401a:	f103 0304 	add.w	r3, r3, #4
  40401e:	f6ff acb8 	blt.w	403992 <_svfprintf_r+0x176>
  404022:	930e      	str	r3, [sp, #56]	; 0x38
  404024:	f898 3000 	ldrb.w	r3, [r8]
  404028:	e451      	b.n	4038ce <_svfprintf_r+0xb2>
  40402a:	f898 3000 	ldrb.w	r3, [r8]
  40402e:	2201      	movs	r2, #1
  404030:	212b      	movs	r1, #43	; 0x2b
  404032:	e44c      	b.n	4038ce <_svfprintf_r+0xb2>
  404034:	9311      	str	r3, [sp, #68]	; 0x44
  404036:	46ab      	mov	fp, r5
  404038:	2a00      	cmp	r2, #0
  40403a:	f43f af51 	beq.w	403ee0 <_svfprintf_r+0x6c4>
  40403e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404042:	e74d      	b.n	403ee0 <_svfprintf_r+0x6c4>
  404044:	0040966c 	.word	0x0040966c
  404048:	7fefffff 	.word	0x7fefffff
  40404c:	0040962c 	.word	0x0040962c
  404050:	00409628 	.word	0x00409628
  404054:	00409638 	.word	0x00409638
  404058:	9311      	str	r3, [sp, #68]	; 0x44
  40405a:	46ab      	mov	fp, r5
  40405c:	2a00      	cmp	r2, #0
  40405e:	f040 8703 	bne.w	404e68 <_svfprintf_r+0x164c>
  404062:	9b07      	ldr	r3, [sp, #28]
  404064:	4899      	ldr	r0, [pc, #612]	; (4042cc <_svfprintf_r+0xab0>)
  404066:	069d      	lsls	r5, r3, #26
  404068:	f53f af69 	bmi.w	403f3e <_svfprintf_r+0x722>
  40406c:	9b07      	ldr	r3, [sp, #28]
  40406e:	06dc      	lsls	r4, r3, #27
  404070:	f140 845e 	bpl.w	404930 <_svfprintf_r+0x1114>
  404074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404076:	4613      	mov	r3, r2
  404078:	3304      	adds	r3, #4
  40407a:	6814      	ldr	r4, [r2, #0]
  40407c:	930e      	str	r3, [sp, #56]	; 0x38
  40407e:	2500      	movs	r5, #0
  404080:	e766      	b.n	403f50 <_svfprintf_r+0x734>
  404082:	f898 3000 	ldrb.w	r3, [r8]
  404086:	2b6c      	cmp	r3, #108	; 0x6c
  404088:	f000 84e1 	beq.w	404a4e <_svfprintf_r+0x1232>
  40408c:	9807      	ldr	r0, [sp, #28]
  40408e:	f040 0010 	orr.w	r0, r0, #16
  404092:	9007      	str	r0, [sp, #28]
  404094:	e41b      	b.n	4038ce <_svfprintf_r+0xb2>
  404096:	2a00      	cmp	r2, #0
  404098:	f040 86db 	bne.w	404e52 <_svfprintf_r+0x1636>
  40409c:	9b07      	ldr	r3, [sp, #28]
  40409e:	069b      	lsls	r3, r3, #26
  4040a0:	f140 842f 	bpl.w	404902 <_svfprintf_r+0x10e6>
  4040a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4040a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4040a8:	6813      	ldr	r3, [r2, #0]
  4040aa:	17cd      	asrs	r5, r1, #31
  4040ac:	4608      	mov	r0, r1
  4040ae:	3204      	adds	r2, #4
  4040b0:	4629      	mov	r1, r5
  4040b2:	920e      	str	r2, [sp, #56]	; 0x38
  4040b4:	e9c3 0100 	strd	r0, r1, [r3]
  4040b8:	f7ff bbd6 	b.w	403868 <_svfprintf_r+0x4c>
  4040bc:	9b07      	ldr	r3, [sp, #28]
  4040be:	f043 0320 	orr.w	r3, r3, #32
  4040c2:	9307      	str	r3, [sp, #28]
  4040c4:	f898 3000 	ldrb.w	r3, [r8]
  4040c8:	e401      	b.n	4038ce <_svfprintf_r+0xb2>
  4040ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4040cc:	9311      	str	r3, [sp, #68]	; 0x44
  4040ce:	6816      	ldr	r6, [r2, #0]
  4040d0:	2400      	movs	r4, #0
  4040d2:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  4040d6:	1d17      	adds	r7, r2, #4
  4040d8:	2e00      	cmp	r6, #0
  4040da:	f000 85bd 	beq.w	404c58 <_svfprintf_r+0x143c>
  4040de:	2d00      	cmp	r5, #0
  4040e0:	f2c0 850f 	blt.w	404b02 <_svfprintf_r+0x12e6>
  4040e4:	462a      	mov	r2, r5
  4040e6:	4621      	mov	r1, r4
  4040e8:	4630      	mov	r0, r6
  4040ea:	f003 fba1 	bl	407830 <memchr>
  4040ee:	2800      	cmp	r0, #0
  4040f0:	f000 8604 	beq.w	404cfc <_svfprintf_r+0x14e0>
  4040f4:	1b83      	subs	r3, r0, r6
  4040f6:	930d      	str	r3, [sp, #52]	; 0x34
  4040f8:	46a3      	mov	fp, r4
  4040fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4040fe:	970e      	str	r7, [sp, #56]	; 0x38
  404100:	9308      	str	r3, [sp, #32]
  404102:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  404106:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40410a:	e54d      	b.n	403ba8 <_svfprintf_r+0x38c>
  40410c:	486f      	ldr	r0, [pc, #444]	; (4042cc <_svfprintf_r+0xab0>)
  40410e:	9211      	str	r2, [sp, #68]	; 0x44
  404110:	f1bb 0f00 	cmp.w	fp, #0
  404114:	f040 8173 	bne.w	4043fe <_svfprintf_r+0xbe2>
  404118:	465f      	mov	r7, fp
  40411a:	f04f 0b00 	mov.w	fp, #0
  40411e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  404122:	ae30      	add	r6, sp, #192	; 0xc0
  404124:	e539      	b.n	403b9a <_svfprintf_r+0x37e>
  404126:	9311      	str	r3, [sp, #68]	; 0x44
  404128:	2a00      	cmp	r2, #0
  40412a:	f040 86b0 	bne.w	404e8e <_svfprintf_r+0x1672>
  40412e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404130:	2a00      	cmp	r2, #0
  404132:	f43f ac65 	beq.w	403a00 <_svfprintf_r+0x1e4>
  404136:	2300      	movs	r3, #0
  404138:	2101      	movs	r1, #1
  40413a:	461f      	mov	r7, r3
  40413c:	9108      	str	r1, [sp, #32]
  40413e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404142:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404146:	469b      	mov	fp, r3
  404148:	9313      	str	r3, [sp, #76]	; 0x4c
  40414a:	910d      	str	r1, [sp, #52]	; 0x34
  40414c:	ae26      	add	r6, sp, #152	; 0x98
  40414e:	e52f      	b.n	403bb0 <_svfprintf_r+0x394>
  404150:	f1bb 0f00 	cmp.w	fp, #0
  404154:	f000 85dd 	beq.w	404d12 <_svfprintf_r+0x14f6>
  404158:	2700      	movs	r7, #0
  40415a:	2400      	movs	r4, #0
  40415c:	2500      	movs	r5, #0
  40415e:	e482      	b.n	403a66 <_svfprintf_r+0x24a>
  404160:	485a      	ldr	r0, [pc, #360]	; (4042cc <_svfprintf_r+0xab0>)
  404162:	9307      	str	r3, [sp, #28]
  404164:	9211      	str	r2, [sp, #68]	; 0x44
  404166:	ea54 0305 	orrs.w	r3, r4, r5
  40416a:	970e      	str	r7, [sp, #56]	; 0x38
  40416c:	f04f 0700 	mov.w	r7, #0
  404170:	f47f af0c 	bne.w	403f8c <_svfprintf_r+0x770>
  404174:	2400      	movs	r4, #0
  404176:	2500      	movs	r5, #0
  404178:	e708      	b.n	403f8c <_svfprintf_r+0x770>
  40417a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40417c:	e568      	b.n	403c50 <_svfprintf_r+0x434>
  40417e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404180:	2b65      	cmp	r3, #101	; 0x65
  404182:	f340 80a9 	ble.w	4042d8 <_svfprintf_r+0xabc>
  404186:	9814      	ldr	r0, [sp, #80]	; 0x50
  404188:	9915      	ldr	r1, [sp, #84]	; 0x54
  40418a:	2200      	movs	r2, #0
  40418c:	2300      	movs	r3, #0
  40418e:	f004 ffb1 	bl	4090f4 <__aeabi_dcmpeq>
  404192:	2800      	cmp	r0, #0
  404194:	f000 8135 	beq.w	404402 <_svfprintf_r+0xbe6>
  404198:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40419a:	4a4d      	ldr	r2, [pc, #308]	; (4042d0 <_svfprintf_r+0xab4>)
  40419c:	f8c9 2000 	str.w	r2, [r9]
  4041a0:	3301      	adds	r3, #1
  4041a2:	3401      	adds	r4, #1
  4041a4:	2201      	movs	r2, #1
  4041a6:	2b07      	cmp	r3, #7
  4041a8:	9425      	str	r4, [sp, #148]	; 0x94
  4041aa:	9324      	str	r3, [sp, #144]	; 0x90
  4041ac:	f8c9 2004 	str.w	r2, [r9, #4]
  4041b0:	f300 83e6 	bgt.w	404980 <_svfprintf_r+0x1164>
  4041b4:	f109 0908 	add.w	r9, r9, #8
  4041b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4041ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4041bc:	4293      	cmp	r3, r2
  4041be:	db03      	blt.n	4041c8 <_svfprintf_r+0x9ac>
  4041c0:	9b07      	ldr	r3, [sp, #28]
  4041c2:	07db      	lsls	r3, r3, #31
  4041c4:	f57f adba 	bpl.w	403d3c <_svfprintf_r+0x520>
  4041c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4041ca:	9916      	ldr	r1, [sp, #88]	; 0x58
  4041cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  4041ce:	f8c9 2000 	str.w	r2, [r9]
  4041d2:	3301      	adds	r3, #1
  4041d4:	440c      	add	r4, r1
  4041d6:	2b07      	cmp	r3, #7
  4041d8:	9425      	str	r4, [sp, #148]	; 0x94
  4041da:	f8c9 1004 	str.w	r1, [r9, #4]
  4041de:	9324      	str	r3, [sp, #144]	; 0x90
  4041e0:	f300 843f 	bgt.w	404a62 <_svfprintf_r+0x1246>
  4041e4:	f109 0908 	add.w	r9, r9, #8
  4041e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4041ea:	1e5d      	subs	r5, r3, #1
  4041ec:	2d00      	cmp	r5, #0
  4041ee:	f77f ada5 	ble.w	403d3c <_svfprintf_r+0x520>
  4041f2:	4a38      	ldr	r2, [pc, #224]	; (4042d4 <_svfprintf_r+0xab8>)
  4041f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4041f6:	920f      	str	r2, [sp, #60]	; 0x3c
  4041f8:	2d10      	cmp	r5, #16
  4041fa:	f340 81e6 	ble.w	4045ca <_svfprintf_r+0xdae>
  4041fe:	2610      	movs	r6, #16
  404200:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404202:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  404206:	e005      	b.n	404214 <_svfprintf_r+0x9f8>
  404208:	f109 0908 	add.w	r9, r9, #8
  40420c:	3d10      	subs	r5, #16
  40420e:	2d10      	cmp	r5, #16
  404210:	f340 81db 	ble.w	4045ca <_svfprintf_r+0xdae>
  404214:	3301      	adds	r3, #1
  404216:	3410      	adds	r4, #16
  404218:	2b07      	cmp	r3, #7
  40421a:	9425      	str	r4, [sp, #148]	; 0x94
  40421c:	9324      	str	r3, [sp, #144]	; 0x90
  40421e:	f8c9 a000 	str.w	sl, [r9]
  404222:	f8c9 6004 	str.w	r6, [r9, #4]
  404226:	ddef      	ble.n	404208 <_svfprintf_r+0x9ec>
  404228:	aa23      	add	r2, sp, #140	; 0x8c
  40422a:	4659      	mov	r1, fp
  40422c:	4638      	mov	r0, r7
  40422e:	f004 f8f5 	bl	40841c <__ssprint_r>
  404232:	2800      	cmp	r0, #0
  404234:	f47f abeb 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404238:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40423a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40423c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404240:	e7e4      	b.n	40420c <_svfprintf_r+0x9f0>
  404242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404244:	9a08      	ldr	r2, [sp, #32]
  404246:	1a9f      	subs	r7, r3, r2
  404248:	2f00      	cmp	r7, #0
  40424a:	f77f ad25 	ble.w	403c98 <_svfprintf_r+0x47c>
  40424e:	4a21      	ldr	r2, [pc, #132]	; (4042d4 <_svfprintf_r+0xab8>)
  404250:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404252:	920f      	str	r2, [sp, #60]	; 0x3c
  404254:	2f10      	cmp	r7, #16
  404256:	dd2b      	ble.n	4042b0 <_svfprintf_r+0xa94>
  404258:	464a      	mov	r2, r9
  40425a:	4621      	mov	r1, r4
  40425c:	46b9      	mov	r9, r7
  40425e:	2510      	movs	r5, #16
  404260:	4637      	mov	r7, r6
  404262:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404264:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404266:	e006      	b.n	404276 <_svfprintf_r+0xa5a>
  404268:	f1a9 0910 	sub.w	r9, r9, #16
  40426c:	f1b9 0f10 	cmp.w	r9, #16
  404270:	f102 0208 	add.w	r2, r2, #8
  404274:	dd18      	ble.n	4042a8 <_svfprintf_r+0xa8c>
  404276:	3301      	adds	r3, #1
  404278:	3110      	adds	r1, #16
  40427a:	2b07      	cmp	r3, #7
  40427c:	9125      	str	r1, [sp, #148]	; 0x94
  40427e:	9324      	str	r3, [sp, #144]	; 0x90
  404280:	f8c2 a000 	str.w	sl, [r2]
  404284:	6055      	str	r5, [r2, #4]
  404286:	ddef      	ble.n	404268 <_svfprintf_r+0xa4c>
  404288:	aa23      	add	r2, sp, #140	; 0x8c
  40428a:	4631      	mov	r1, r6
  40428c:	4620      	mov	r0, r4
  40428e:	f004 f8c5 	bl	40841c <__ssprint_r>
  404292:	2800      	cmp	r0, #0
  404294:	f47f abbb 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404298:	f1a9 0910 	sub.w	r9, r9, #16
  40429c:	f1b9 0f10 	cmp.w	r9, #16
  4042a0:	9925      	ldr	r1, [sp, #148]	; 0x94
  4042a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4042a4:	aa30      	add	r2, sp, #192	; 0xc0
  4042a6:	dce6      	bgt.n	404276 <_svfprintf_r+0xa5a>
  4042a8:	463e      	mov	r6, r7
  4042aa:	460c      	mov	r4, r1
  4042ac:	464f      	mov	r7, r9
  4042ae:	4691      	mov	r9, r2
  4042b0:	3301      	adds	r3, #1
  4042b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4042b4:	9324      	str	r3, [sp, #144]	; 0x90
  4042b6:	443c      	add	r4, r7
  4042b8:	2b07      	cmp	r3, #7
  4042ba:	9425      	str	r4, [sp, #148]	; 0x94
  4042bc:	e889 0084 	stmia.w	r9, {r2, r7}
  4042c0:	f300 8245 	bgt.w	40474e <_svfprintf_r+0xf32>
  4042c4:	f109 0908 	add.w	r9, r9, #8
  4042c8:	e4e6      	b.n	403c98 <_svfprintf_r+0x47c>
  4042ca:	bf00      	nop
  4042cc:	0040964c 	.word	0x0040964c
  4042d0:	00409668 	.word	0x00409668
  4042d4:	00409618 	.word	0x00409618
  4042d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4042da:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4042dc:	2b01      	cmp	r3, #1
  4042de:	f340 8208 	ble.w	4046f2 <_svfprintf_r+0xed6>
  4042e2:	3501      	adds	r5, #1
  4042e4:	3401      	adds	r4, #1
  4042e6:	2301      	movs	r3, #1
  4042e8:	2d07      	cmp	r5, #7
  4042ea:	9425      	str	r4, [sp, #148]	; 0x94
  4042ec:	9524      	str	r5, [sp, #144]	; 0x90
  4042ee:	f8c9 6000 	str.w	r6, [r9]
  4042f2:	f8c9 3004 	str.w	r3, [r9, #4]
  4042f6:	f300 820d 	bgt.w	404714 <_svfprintf_r+0xef8>
  4042fa:	f109 0908 	add.w	r9, r9, #8
  4042fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404300:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404302:	f8c9 3000 	str.w	r3, [r9]
  404306:	3501      	adds	r5, #1
  404308:	4414      	add	r4, r2
  40430a:	2d07      	cmp	r5, #7
  40430c:	9425      	str	r4, [sp, #148]	; 0x94
  40430e:	9524      	str	r5, [sp, #144]	; 0x90
  404310:	f8c9 2004 	str.w	r2, [r9, #4]
  404314:	f300 820e 	bgt.w	404734 <_svfprintf_r+0xf18>
  404318:	f109 0908 	add.w	r9, r9, #8
  40431c:	2300      	movs	r3, #0
  40431e:	9814      	ldr	r0, [sp, #80]	; 0x50
  404320:	9915      	ldr	r1, [sp, #84]	; 0x54
  404322:	2200      	movs	r2, #0
  404324:	f004 fee6 	bl	4090f4 <__aeabi_dcmpeq>
  404328:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40432a:	2800      	cmp	r0, #0
  40432c:	f040 80c3 	bne.w	4044b6 <_svfprintf_r+0xc9a>
  404330:	3b01      	subs	r3, #1
  404332:	3501      	adds	r5, #1
  404334:	3601      	adds	r6, #1
  404336:	441c      	add	r4, r3
  404338:	2d07      	cmp	r5, #7
  40433a:	9524      	str	r5, [sp, #144]	; 0x90
  40433c:	9425      	str	r4, [sp, #148]	; 0x94
  40433e:	f8c9 6000 	str.w	r6, [r9]
  404342:	f8c9 3004 	str.w	r3, [r9, #4]
  404346:	f300 80f5 	bgt.w	404534 <_svfprintf_r+0xd18>
  40434a:	f109 0908 	add.w	r9, r9, #8
  40434e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404350:	f8c9 2004 	str.w	r2, [r9, #4]
  404354:	3501      	adds	r5, #1
  404356:	4414      	add	r4, r2
  404358:	ab1f      	add	r3, sp, #124	; 0x7c
  40435a:	2d07      	cmp	r5, #7
  40435c:	9425      	str	r4, [sp, #148]	; 0x94
  40435e:	9524      	str	r5, [sp, #144]	; 0x90
  404360:	f8c9 3000 	str.w	r3, [r9]
  404364:	f77f ace8 	ble.w	403d38 <_svfprintf_r+0x51c>
  404368:	aa23      	add	r2, sp, #140	; 0x8c
  40436a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40436c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40436e:	f004 f855 	bl	40841c <__ssprint_r>
  404372:	2800      	cmp	r0, #0
  404374:	f47f ab4b 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404378:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40437a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40437e:	e4dd      	b.n	403d3c <_svfprintf_r+0x520>
  404380:	aa23      	add	r2, sp, #140	; 0x8c
  404382:	9909      	ldr	r1, [sp, #36]	; 0x24
  404384:	980a      	ldr	r0, [sp, #40]	; 0x28
  404386:	f004 f849 	bl	40841c <__ssprint_r>
  40438a:	2800      	cmp	r0, #0
  40438c:	f43f ad24 	beq.w	403dd8 <_svfprintf_r+0x5bc>
  404390:	f7ff bb3d 	b.w	403a0e <_svfprintf_r+0x1f2>
  404394:	aa23      	add	r2, sp, #140	; 0x8c
  404396:	9909      	ldr	r1, [sp, #36]	; 0x24
  404398:	980a      	ldr	r0, [sp, #40]	; 0x28
  40439a:	f004 f83f 	bl	40841c <__ssprint_r>
  40439e:	2800      	cmp	r0, #0
  4043a0:	f47f ab35 	bne.w	403a0e <_svfprintf_r+0x1f2>
  4043a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4043a6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4043aa:	e4b4      	b.n	403d16 <_svfprintf_r+0x4fa>
  4043ac:	aa23      	add	r2, sp, #140	; 0x8c
  4043ae:	9909      	ldr	r1, [sp, #36]	; 0x24
  4043b0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4043b2:	f004 f833 	bl	40841c <__ssprint_r>
  4043b6:	2800      	cmp	r0, #0
  4043b8:	f47f ab29 	bne.w	403a0e <_svfprintf_r+0x1f2>
  4043bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4043be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4043c2:	e455      	b.n	403c70 <_svfprintf_r+0x454>
  4043c4:	aa23      	add	r2, sp, #140	; 0x8c
  4043c6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4043c8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4043ca:	f004 f827 	bl	40841c <__ssprint_r>
  4043ce:	2800      	cmp	r0, #0
  4043d0:	f47f ab1d 	bne.w	403a0e <_svfprintf_r+0x1f2>
  4043d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4043d6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4043da:	e459      	b.n	403c90 <_svfprintf_r+0x474>
  4043dc:	f1bb 0f00 	cmp.w	fp, #0
  4043e0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4043e4:	f2c0 82d8 	blt.w	404998 <_svfprintf_r+0x117c>
  4043e8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4043ec:	9307      	str	r3, [sp, #28]
  4043ee:	ea54 0305 	orrs.w	r3, r4, r5
  4043f2:	f47f adcb 	bne.w	403f8c <_svfprintf_r+0x770>
  4043f6:	f1bb 0f00 	cmp.w	fp, #0
  4043fa:	f43f ae8d 	beq.w	404118 <_svfprintf_r+0x8fc>
  4043fe:	2700      	movs	r7, #0
  404400:	e6b8      	b.n	404174 <_svfprintf_r+0x958>
  404402:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404404:	2d00      	cmp	r5, #0
  404406:	f340 82ca 	ble.w	40499e <_svfprintf_r+0x1182>
  40440a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40440c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40440e:	4293      	cmp	r3, r2
  404410:	bfa8      	it	ge
  404412:	4613      	movge	r3, r2
  404414:	2b00      	cmp	r3, #0
  404416:	461d      	mov	r5, r3
  404418:	dd0d      	ble.n	404436 <_svfprintf_r+0xc1a>
  40441a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40441c:	f8c9 6000 	str.w	r6, [r9]
  404420:	3301      	adds	r3, #1
  404422:	442c      	add	r4, r5
  404424:	2b07      	cmp	r3, #7
  404426:	9425      	str	r4, [sp, #148]	; 0x94
  404428:	f8c9 5004 	str.w	r5, [r9, #4]
  40442c:	9324      	str	r3, [sp, #144]	; 0x90
  40442e:	f300 839c 	bgt.w	404b6a <_svfprintf_r+0x134e>
  404432:	f109 0908 	add.w	r9, r9, #8
  404436:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404438:	2d00      	cmp	r5, #0
  40443a:	bfa8      	it	ge
  40443c:	1b5b      	subge	r3, r3, r5
  40443e:	2b00      	cmp	r3, #0
  404440:	461d      	mov	r5, r3
  404442:	f340 80f6 	ble.w	404632 <_svfprintf_r+0xe16>
  404446:	4aba      	ldr	r2, [pc, #744]	; (404730 <_svfprintf_r+0xf14>)
  404448:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40444a:	920f      	str	r2, [sp, #60]	; 0x3c
  40444c:	2d10      	cmp	r5, #16
  40444e:	f340 828a 	ble.w	404966 <_svfprintf_r+0x114a>
  404452:	4622      	mov	r2, r4
  404454:	2710      	movs	r7, #16
  404456:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40445a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40445c:	e005      	b.n	40446a <_svfprintf_r+0xc4e>
  40445e:	f109 0908 	add.w	r9, r9, #8
  404462:	3d10      	subs	r5, #16
  404464:	2d10      	cmp	r5, #16
  404466:	f340 827d 	ble.w	404964 <_svfprintf_r+0x1148>
  40446a:	3301      	adds	r3, #1
  40446c:	3210      	adds	r2, #16
  40446e:	2b07      	cmp	r3, #7
  404470:	9225      	str	r2, [sp, #148]	; 0x94
  404472:	9324      	str	r3, [sp, #144]	; 0x90
  404474:	f8c9 a000 	str.w	sl, [r9]
  404478:	f8c9 7004 	str.w	r7, [r9, #4]
  40447c:	ddef      	ble.n	40445e <_svfprintf_r+0xc42>
  40447e:	aa23      	add	r2, sp, #140	; 0x8c
  404480:	4621      	mov	r1, r4
  404482:	4658      	mov	r0, fp
  404484:	f003 ffca 	bl	40841c <__ssprint_r>
  404488:	2800      	cmp	r0, #0
  40448a:	f47f aac0 	bne.w	403a0e <_svfprintf_r+0x1f2>
  40448e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404490:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404492:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404496:	e7e4      	b.n	404462 <_svfprintf_r+0xc46>
  404498:	aa23      	add	r2, sp, #140	; 0x8c
  40449a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40449c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40449e:	f003 ffbd 	bl	40841c <__ssprint_r>
  4044a2:	2800      	cmp	r0, #0
  4044a4:	f47f aab3 	bne.w	403a0e <_svfprintf_r+0x1f2>
  4044a8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4044ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4044ae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4044b2:	f7ff bbcd 	b.w	403c50 <_svfprintf_r+0x434>
  4044b6:	1e5e      	subs	r6, r3, #1
  4044b8:	2e00      	cmp	r6, #0
  4044ba:	f77f af48 	ble.w	40434e <_svfprintf_r+0xb32>
  4044be:	4b9c      	ldr	r3, [pc, #624]	; (404730 <_svfprintf_r+0xf14>)
  4044c0:	930f      	str	r3, [sp, #60]	; 0x3c
  4044c2:	2e10      	cmp	r6, #16
  4044c4:	dd2c      	ble.n	404520 <_svfprintf_r+0xd04>
  4044c6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  4044ca:	2710      	movs	r7, #16
  4044cc:	46b0      	mov	r8, r6
  4044ce:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4044d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4044d4:	e006      	b.n	4044e4 <_svfprintf_r+0xcc8>
  4044d6:	f1a8 0810 	sub.w	r8, r8, #16
  4044da:	f1b8 0f10 	cmp.w	r8, #16
  4044de:	f109 0908 	add.w	r9, r9, #8
  4044e2:	dd1a      	ble.n	40451a <_svfprintf_r+0xcfe>
  4044e4:	3501      	adds	r5, #1
  4044e6:	3410      	adds	r4, #16
  4044e8:	2d07      	cmp	r5, #7
  4044ea:	9425      	str	r4, [sp, #148]	; 0x94
  4044ec:	9524      	str	r5, [sp, #144]	; 0x90
  4044ee:	f8c9 a000 	str.w	sl, [r9]
  4044f2:	f8c9 7004 	str.w	r7, [r9, #4]
  4044f6:	ddee      	ble.n	4044d6 <_svfprintf_r+0xcba>
  4044f8:	aa23      	add	r2, sp, #140	; 0x8c
  4044fa:	4631      	mov	r1, r6
  4044fc:	4658      	mov	r0, fp
  4044fe:	f003 ff8d 	bl	40841c <__ssprint_r>
  404502:	2800      	cmp	r0, #0
  404504:	f47f aa83 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404508:	f1a8 0810 	sub.w	r8, r8, #16
  40450c:	f1b8 0f10 	cmp.w	r8, #16
  404510:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404512:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404514:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404518:	dce4      	bgt.n	4044e4 <_svfprintf_r+0xcc8>
  40451a:	4646      	mov	r6, r8
  40451c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  404520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404522:	3501      	adds	r5, #1
  404524:	4434      	add	r4, r6
  404526:	2d07      	cmp	r5, #7
  404528:	9425      	str	r4, [sp, #148]	; 0x94
  40452a:	9524      	str	r5, [sp, #144]	; 0x90
  40452c:	e889 0048 	stmia.w	r9, {r3, r6}
  404530:	f77f af0b 	ble.w	40434a <_svfprintf_r+0xb2e>
  404534:	aa23      	add	r2, sp, #140	; 0x8c
  404536:	9909      	ldr	r1, [sp, #36]	; 0x24
  404538:	980a      	ldr	r0, [sp, #40]	; 0x28
  40453a:	f003 ff6f 	bl	40841c <__ssprint_r>
  40453e:	2800      	cmp	r0, #0
  404540:	f47f aa65 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404544:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404546:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404548:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40454c:	e6ff      	b.n	40434e <_svfprintf_r+0xb32>
  40454e:	9907      	ldr	r1, [sp, #28]
  404550:	f011 0210 	ands.w	r2, r1, #16
  404554:	f000 8108 	beq.w	404768 <_svfprintf_r+0xf4c>
  404558:	980e      	ldr	r0, [sp, #56]	; 0x38
  40455a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40455e:	f1bb 0f00 	cmp.w	fp, #0
  404562:	6804      	ldr	r4, [r0, #0]
  404564:	f100 0704 	add.w	r7, r0, #4
  404568:	f04f 0500 	mov.w	r5, #0
  40456c:	db26      	blt.n	4045bc <_svfprintf_r+0xda0>
  40456e:	460a      	mov	r2, r1
  404570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  404574:	9207      	str	r2, [sp, #28]
  404576:	ea54 0205 	orrs.w	r2, r4, r5
  40457a:	970e      	str	r7, [sp, #56]	; 0x38
  40457c:	461f      	mov	r7, r3
  40457e:	f47f aaef 	bne.w	403b60 <_svfprintf_r+0x344>
  404582:	e4c8      	b.n	403f16 <_svfprintf_r+0x6fa>
  404584:	9b07      	ldr	r3, [sp, #28]
  404586:	06d9      	lsls	r1, r3, #27
  404588:	d42a      	bmi.n	4045e0 <_svfprintf_r+0xdc4>
  40458a:	9b07      	ldr	r3, [sp, #28]
  40458c:	065a      	lsls	r2, r3, #25
  40458e:	d527      	bpl.n	4045e0 <_svfprintf_r+0xdc4>
  404590:	990e      	ldr	r1, [sp, #56]	; 0x38
  404592:	f9b1 4000 	ldrsh.w	r4, [r1]
  404596:	3104      	adds	r1, #4
  404598:	17e5      	asrs	r5, r4, #31
  40459a:	4622      	mov	r2, r4
  40459c:	462b      	mov	r3, r5
  40459e:	910e      	str	r1, [sp, #56]	; 0x38
  4045a0:	f7ff bacb 	b.w	403b3a <_svfprintf_r+0x31e>
  4045a4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4045a6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4045aa:	f1bb 0f00 	cmp.w	fp, #0
  4045ae:	680c      	ldr	r4, [r1, #0]
  4045b0:	f101 0704 	add.w	r7, r1, #4
  4045b4:	f04f 0500 	mov.w	r5, #0
  4045b8:	f280 8247 	bge.w	404a4a <_svfprintf_r+0x122e>
  4045bc:	970e      	str	r7, [sp, #56]	; 0x38
  4045be:	461f      	mov	r7, r3
  4045c0:	ea54 0305 	orrs.w	r3, r4, r5
  4045c4:	f47f aacc 	bne.w	403b60 <_svfprintf_r+0x344>
  4045c8:	e4aa      	b.n	403f20 <_svfprintf_r+0x704>
  4045ca:	3301      	adds	r3, #1
  4045cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4045ce:	9324      	str	r3, [sp, #144]	; 0x90
  4045d0:	442c      	add	r4, r5
  4045d2:	2b07      	cmp	r3, #7
  4045d4:	9425      	str	r4, [sp, #148]	; 0x94
  4045d6:	e889 0024 	stmia.w	r9, {r2, r5}
  4045da:	f77f abad 	ble.w	403d38 <_svfprintf_r+0x51c>
  4045de:	e6c3      	b.n	404368 <_svfprintf_r+0xb4c>
  4045e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4045e2:	6814      	ldr	r4, [r2, #0]
  4045e4:	4613      	mov	r3, r2
  4045e6:	3304      	adds	r3, #4
  4045e8:	17e5      	asrs	r5, r4, #31
  4045ea:	4622      	mov	r2, r4
  4045ec:	930e      	str	r3, [sp, #56]	; 0x38
  4045ee:	2a00      	cmp	r2, #0
  4045f0:	462b      	mov	r3, r5
  4045f2:	f173 0300 	sbcs.w	r3, r3, #0
  4045f6:	f6bf aaa5 	bge.w	403b44 <_svfprintf_r+0x328>
  4045fa:	4264      	negs	r4, r4
  4045fc:	f04f 072d 	mov.w	r7, #45	; 0x2d
  404600:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404604:	f1bb 0f00 	cmp.w	fp, #0
  404608:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40460c:	f6ff aaa8 	blt.w	403b60 <_svfprintf_r+0x344>
  404610:	9b07      	ldr	r3, [sp, #28]
  404612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404616:	9307      	str	r3, [sp, #28]
  404618:	f7ff baa2 	b.w	403b60 <_svfprintf_r+0x344>
  40461c:	aa23      	add	r2, sp, #140	; 0x8c
  40461e:	9909      	ldr	r1, [sp, #36]	; 0x24
  404620:	980a      	ldr	r0, [sp, #40]	; 0x28
  404622:	f003 fefb 	bl	40841c <__ssprint_r>
  404626:	2800      	cmp	r0, #0
  404628:	f47f a9f1 	bne.w	403a0e <_svfprintf_r+0x1f2>
  40462c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40462e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404632:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404634:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404636:	4432      	add	r2, r6
  404638:	4617      	mov	r7, r2
  40463a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40463c:	4293      	cmp	r3, r2
  40463e:	db47      	blt.n	4046d0 <_svfprintf_r+0xeb4>
  404640:	9a07      	ldr	r2, [sp, #28]
  404642:	07d5      	lsls	r5, r2, #31
  404644:	d444      	bmi.n	4046d0 <_svfprintf_r+0xeb4>
  404646:	9912      	ldr	r1, [sp, #72]	; 0x48
  404648:	440e      	add	r6, r1
  40464a:	1bf5      	subs	r5, r6, r7
  40464c:	1acb      	subs	r3, r1, r3
  40464e:	429d      	cmp	r5, r3
  404650:	bfa8      	it	ge
  404652:	461d      	movge	r5, r3
  404654:	2d00      	cmp	r5, #0
  404656:	462e      	mov	r6, r5
  404658:	dd0d      	ble.n	404676 <_svfprintf_r+0xe5a>
  40465a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40465c:	f8c9 7000 	str.w	r7, [r9]
  404660:	3201      	adds	r2, #1
  404662:	442c      	add	r4, r5
  404664:	2a07      	cmp	r2, #7
  404666:	9425      	str	r4, [sp, #148]	; 0x94
  404668:	f8c9 5004 	str.w	r5, [r9, #4]
  40466c:	9224      	str	r2, [sp, #144]	; 0x90
  40466e:	f300 830b 	bgt.w	404c88 <_svfprintf_r+0x146c>
  404672:	f109 0908 	add.w	r9, r9, #8
  404676:	2e00      	cmp	r6, #0
  404678:	bfac      	ite	ge
  40467a:	1b9d      	subge	r5, r3, r6
  40467c:	461d      	movlt	r5, r3
  40467e:	2d00      	cmp	r5, #0
  404680:	f77f ab5c 	ble.w	403d3c <_svfprintf_r+0x520>
  404684:	4a2a      	ldr	r2, [pc, #168]	; (404730 <_svfprintf_r+0xf14>)
  404686:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404688:	920f      	str	r2, [sp, #60]	; 0x3c
  40468a:	2d10      	cmp	r5, #16
  40468c:	dd9d      	ble.n	4045ca <_svfprintf_r+0xdae>
  40468e:	2610      	movs	r6, #16
  404690:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404692:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  404696:	e004      	b.n	4046a2 <_svfprintf_r+0xe86>
  404698:	f109 0908 	add.w	r9, r9, #8
  40469c:	3d10      	subs	r5, #16
  40469e:	2d10      	cmp	r5, #16
  4046a0:	dd93      	ble.n	4045ca <_svfprintf_r+0xdae>
  4046a2:	3301      	adds	r3, #1
  4046a4:	3410      	adds	r4, #16
  4046a6:	2b07      	cmp	r3, #7
  4046a8:	9425      	str	r4, [sp, #148]	; 0x94
  4046aa:	9324      	str	r3, [sp, #144]	; 0x90
  4046ac:	f8c9 a000 	str.w	sl, [r9]
  4046b0:	f8c9 6004 	str.w	r6, [r9, #4]
  4046b4:	ddf0      	ble.n	404698 <_svfprintf_r+0xe7c>
  4046b6:	aa23      	add	r2, sp, #140	; 0x8c
  4046b8:	4659      	mov	r1, fp
  4046ba:	4638      	mov	r0, r7
  4046bc:	f003 feae 	bl	40841c <__ssprint_r>
  4046c0:	2800      	cmp	r0, #0
  4046c2:	f47f a9a4 	bne.w	403a0e <_svfprintf_r+0x1f2>
  4046c6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4046c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4046ca:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4046ce:	e7e5      	b.n	40469c <_svfprintf_r+0xe80>
  4046d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4046d2:	9816      	ldr	r0, [sp, #88]	; 0x58
  4046d4:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4046d6:	f8c9 1000 	str.w	r1, [r9]
  4046da:	3201      	adds	r2, #1
  4046dc:	4404      	add	r4, r0
  4046de:	2a07      	cmp	r2, #7
  4046e0:	9425      	str	r4, [sp, #148]	; 0x94
  4046e2:	f8c9 0004 	str.w	r0, [r9, #4]
  4046e6:	9224      	str	r2, [sp, #144]	; 0x90
  4046e8:	f300 82a9 	bgt.w	404c3e <_svfprintf_r+0x1422>
  4046ec:	f109 0908 	add.w	r9, r9, #8
  4046f0:	e7a9      	b.n	404646 <_svfprintf_r+0xe2a>
  4046f2:	9b07      	ldr	r3, [sp, #28]
  4046f4:	07d8      	lsls	r0, r3, #31
  4046f6:	f53f adf4 	bmi.w	4042e2 <_svfprintf_r+0xac6>
  4046fa:	3501      	adds	r5, #1
  4046fc:	3401      	adds	r4, #1
  4046fe:	2301      	movs	r3, #1
  404700:	2d07      	cmp	r5, #7
  404702:	9425      	str	r4, [sp, #148]	; 0x94
  404704:	9524      	str	r5, [sp, #144]	; 0x90
  404706:	f8c9 6000 	str.w	r6, [r9]
  40470a:	f8c9 3004 	str.w	r3, [r9, #4]
  40470e:	f77f ae1c 	ble.w	40434a <_svfprintf_r+0xb2e>
  404712:	e70f      	b.n	404534 <_svfprintf_r+0xd18>
  404714:	aa23      	add	r2, sp, #140	; 0x8c
  404716:	9909      	ldr	r1, [sp, #36]	; 0x24
  404718:	980a      	ldr	r0, [sp, #40]	; 0x28
  40471a:	f003 fe7f 	bl	40841c <__ssprint_r>
  40471e:	2800      	cmp	r0, #0
  404720:	f47f a975 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404724:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404726:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404728:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40472c:	e5e7      	b.n	4042fe <_svfprintf_r+0xae2>
  40472e:	bf00      	nop
  404730:	00409618 	.word	0x00409618
  404734:	aa23      	add	r2, sp, #140	; 0x8c
  404736:	9909      	ldr	r1, [sp, #36]	; 0x24
  404738:	980a      	ldr	r0, [sp, #40]	; 0x28
  40473a:	f003 fe6f 	bl	40841c <__ssprint_r>
  40473e:	2800      	cmp	r0, #0
  404740:	f47f a965 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404744:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404746:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404748:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40474c:	e5e6      	b.n	40431c <_svfprintf_r+0xb00>
  40474e:	aa23      	add	r2, sp, #140	; 0x8c
  404750:	9909      	ldr	r1, [sp, #36]	; 0x24
  404752:	980a      	ldr	r0, [sp, #40]	; 0x28
  404754:	f003 fe62 	bl	40841c <__ssprint_r>
  404758:	2800      	cmp	r0, #0
  40475a:	f47f a958 	bne.w	403a0e <_svfprintf_r+0x1f2>
  40475e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404760:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404764:	f7ff ba98 	b.w	403c98 <_svfprintf_r+0x47c>
  404768:	9907      	ldr	r1, [sp, #28]
  40476a:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  40476e:	f43f af19 	beq.w	4045a4 <_svfprintf_r+0xd88>
  404772:	980e      	ldr	r0, [sp, #56]	; 0x38
  404774:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404778:	f1bb 0f00 	cmp.w	fp, #0
  40477c:	8804      	ldrh	r4, [r0, #0]
  40477e:	f100 0704 	add.w	r7, r0, #4
  404782:	f04f 0500 	mov.w	r5, #0
  404786:	f2c0 81b9 	blt.w	404afc <_svfprintf_r+0x12e0>
  40478a:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  40478e:	9307      	str	r3, [sp, #28]
  404790:	ea54 0305 	orrs.w	r3, r4, r5
  404794:	970e      	str	r7, [sp, #56]	; 0x38
  404796:	4617      	mov	r7, r2
  404798:	f47f a9e2 	bne.w	403b60 <_svfprintf_r+0x344>
  40479c:	f7ff bbbb 	b.w	403f16 <_svfprintf_r+0x6fa>
  4047a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4047a2:	4622      	mov	r2, r4
  4047a4:	4620      	mov	r0, r4
  4047a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4047a8:	4623      	mov	r3, r4
  4047aa:	4621      	mov	r1, r4
  4047ac:	f004 fcd4 	bl	409158 <__aeabi_dcmpun>
  4047b0:	2800      	cmp	r0, #0
  4047b2:	f040 8317 	bne.w	404de4 <_svfprintf_r+0x15c8>
  4047b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4047b8:	f1bb 3fff 	cmp.w	fp, #4294967295
  4047bc:	f023 0320 	bic.w	r3, r3, #32
  4047c0:	930d      	str	r3, [sp, #52]	; 0x34
  4047c2:	f000 8270 	beq.w	404ca6 <_svfprintf_r+0x148a>
  4047c6:	2b47      	cmp	r3, #71	; 0x47
  4047c8:	f000 8192 	beq.w	404af0 <_svfprintf_r+0x12d4>
  4047cc:	9b07      	ldr	r3, [sp, #28]
  4047ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4047d2:	9310      	str	r3, [sp, #64]	; 0x40
  4047d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4047d6:	1e1f      	subs	r7, r3, #0
  4047d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4047da:	9308      	str	r3, [sp, #32]
  4047dc:	bfbb      	ittet	lt
  4047de:	463b      	movlt	r3, r7
  4047e0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4047e4:	2300      	movge	r3, #0
  4047e6:	232d      	movlt	r3, #45	; 0x2d
  4047e8:	930f      	str	r3, [sp, #60]	; 0x3c
  4047ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4047ec:	2b66      	cmp	r3, #102	; 0x66
  4047ee:	f000 825d 	beq.w	404cac <_svfprintf_r+0x1490>
  4047f2:	2b46      	cmp	r3, #70	; 0x46
  4047f4:	f000 8151 	beq.w	404a9a <_svfprintf_r+0x127e>
  4047f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4047fa:	9a08      	ldr	r2, [sp, #32]
  4047fc:	2b45      	cmp	r3, #69	; 0x45
  4047fe:	a821      	add	r0, sp, #132	; 0x84
  404800:	a91e      	add	r1, sp, #120	; 0x78
  404802:	bf0c      	ite	eq
  404804:	f10b 0501 	addeq.w	r5, fp, #1
  404808:	465d      	movne	r5, fp
  40480a:	9004      	str	r0, [sp, #16]
  40480c:	9103      	str	r1, [sp, #12]
  40480e:	a81d      	add	r0, sp, #116	; 0x74
  404810:	2102      	movs	r1, #2
  404812:	463b      	mov	r3, r7
  404814:	9002      	str	r0, [sp, #8]
  404816:	9501      	str	r5, [sp, #4]
  404818:	9100      	str	r1, [sp, #0]
  40481a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40481c:	f001 fbc4 	bl	405fa8 <_dtoa_r>
  404820:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404822:	2b67      	cmp	r3, #103	; 0x67
  404824:	4606      	mov	r6, r0
  404826:	f040 8290 	bne.w	404d4a <_svfprintf_r+0x152e>
  40482a:	9b07      	ldr	r3, [sp, #28]
  40482c:	07da      	lsls	r2, r3, #31
  40482e:	f140 82af 	bpl.w	404d90 <_svfprintf_r+0x1574>
  404832:	1974      	adds	r4, r6, r5
  404834:	9808      	ldr	r0, [sp, #32]
  404836:	4639      	mov	r1, r7
  404838:	2200      	movs	r2, #0
  40483a:	2300      	movs	r3, #0
  40483c:	f004 fc5a 	bl	4090f4 <__aeabi_dcmpeq>
  404840:	2800      	cmp	r0, #0
  404842:	f040 8190 	bne.w	404b66 <_svfprintf_r+0x134a>
  404846:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404848:	429c      	cmp	r4, r3
  40484a:	d906      	bls.n	40485a <_svfprintf_r+0x103e>
  40484c:	2130      	movs	r1, #48	; 0x30
  40484e:	1c5a      	adds	r2, r3, #1
  404850:	9221      	str	r2, [sp, #132]	; 0x84
  404852:	7019      	strb	r1, [r3, #0]
  404854:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404856:	429c      	cmp	r4, r3
  404858:	d8f9      	bhi.n	40484e <_svfprintf_r+0x1032>
  40485a:	1b9b      	subs	r3, r3, r6
  40485c:	9312      	str	r3, [sp, #72]	; 0x48
  40485e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404860:	2b47      	cmp	r3, #71	; 0x47
  404862:	f000 8179 	beq.w	404b58 <_svfprintf_r+0x133c>
  404866:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404868:	2b65      	cmp	r3, #101	; 0x65
  40486a:	f340 827d 	ble.w	404d68 <_svfprintf_r+0x154c>
  40486e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404870:	2b66      	cmp	r3, #102	; 0x66
  404872:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404874:	9313      	str	r3, [sp, #76]	; 0x4c
  404876:	f000 825b 	beq.w	404d30 <_svfprintf_r+0x1514>
  40487a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40487c:	9912      	ldr	r1, [sp, #72]	; 0x48
  40487e:	428a      	cmp	r2, r1
  404880:	f2c0 8230 	blt.w	404ce4 <_svfprintf_r+0x14c8>
  404884:	9b07      	ldr	r3, [sp, #28]
  404886:	07d9      	lsls	r1, r3, #31
  404888:	f100 8284 	bmi.w	404d94 <_svfprintf_r+0x1578>
  40488c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404890:	920d      	str	r2, [sp, #52]	; 0x34
  404892:	2267      	movs	r2, #103	; 0x67
  404894:	9211      	str	r2, [sp, #68]	; 0x44
  404896:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404898:	2a00      	cmp	r2, #0
  40489a:	f040 8153 	bne.w	404b44 <_svfprintf_r+0x1328>
  40489e:	9308      	str	r3, [sp, #32]
  4048a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4048a2:	9307      	str	r3, [sp, #28]
  4048a4:	4693      	mov	fp, r2
  4048a6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4048aa:	f7ff b97d 	b.w	403ba8 <_svfprintf_r+0x38c>
  4048ae:	9907      	ldr	r1, [sp, #28]
  4048b0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  4048b4:	d015      	beq.n	4048e2 <_svfprintf_r+0x10c6>
  4048b6:	980e      	ldr	r0, [sp, #56]	; 0x38
  4048b8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4048bc:	f1bb 0f00 	cmp.w	fp, #0
  4048c0:	8804      	ldrh	r4, [r0, #0]
  4048c2:	f100 0704 	add.w	r7, r0, #4
  4048c6:	f04f 0500 	mov.w	r5, #0
  4048ca:	db16      	blt.n	4048fa <_svfprintf_r+0x10de>
  4048cc:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  4048d0:	9307      	str	r3, [sp, #28]
  4048d2:	ea54 0305 	orrs.w	r3, r4, r5
  4048d6:	970e      	str	r7, [sp, #56]	; 0x38
  4048d8:	f43f ac3a 	beq.w	404150 <_svfprintf_r+0x934>
  4048dc:	4617      	mov	r7, r2
  4048de:	f7ff b8c2 	b.w	403a66 <_svfprintf_r+0x24a>
  4048e2:	990e      	ldr	r1, [sp, #56]	; 0x38
  4048e4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4048e8:	f1bb 0f00 	cmp.w	fp, #0
  4048ec:	680c      	ldr	r4, [r1, #0]
  4048ee:	f101 0704 	add.w	r7, r1, #4
  4048f2:	f04f 0500 	mov.w	r5, #0
  4048f6:	f280 80a5 	bge.w	404a44 <_svfprintf_r+0x1228>
  4048fa:	970e      	str	r7, [sp, #56]	; 0x38
  4048fc:	2700      	movs	r7, #0
  4048fe:	f7ff b8b2 	b.w	403a66 <_svfprintf_r+0x24a>
  404902:	9b07      	ldr	r3, [sp, #28]
  404904:	06df      	lsls	r7, r3, #27
  404906:	d40b      	bmi.n	404920 <_svfprintf_r+0x1104>
  404908:	9b07      	ldr	r3, [sp, #28]
  40490a:	065e      	lsls	r6, r3, #25
  40490c:	d508      	bpl.n	404920 <_svfprintf_r+0x1104>
  40490e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404910:	6813      	ldr	r3, [r2, #0]
  404912:	3204      	adds	r2, #4
  404914:	920e      	str	r2, [sp, #56]	; 0x38
  404916:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  40491a:	801a      	strh	r2, [r3, #0]
  40491c:	f7fe bfa4 	b.w	403868 <_svfprintf_r+0x4c>
  404920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404922:	6813      	ldr	r3, [r2, #0]
  404924:	3204      	adds	r2, #4
  404926:	920e      	str	r2, [sp, #56]	; 0x38
  404928:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40492a:	601a      	str	r2, [r3, #0]
  40492c:	f7fe bf9c 	b.w	403868 <_svfprintf_r+0x4c>
  404930:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404932:	9b07      	ldr	r3, [sp, #28]
  404934:	f013 0f40 	tst.w	r3, #64	; 0x40
  404938:	4613      	mov	r3, r2
  40493a:	f103 0304 	add.w	r3, r3, #4
  40493e:	bf0c      	ite	eq
  404940:	6814      	ldreq	r4, [r2, #0]
  404942:	8814      	ldrhne	r4, [r2, #0]
  404944:	930e      	str	r3, [sp, #56]	; 0x38
  404946:	2500      	movs	r5, #0
  404948:	f7ff bb02 	b.w	403f50 <_svfprintf_r+0x734>
  40494c:	2700      	movs	r7, #0
  40494e:	45bb      	cmp	fp, r7
  404950:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404954:	f6ff ac0e 	blt.w	404174 <_svfprintf_r+0x958>
  404958:	9b07      	ldr	r3, [sp, #28]
  40495a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40495e:	9307      	str	r3, [sp, #28]
  404960:	f7ff bbd6 	b.w	404110 <_svfprintf_r+0x8f4>
  404964:	4614      	mov	r4, r2
  404966:	3301      	adds	r3, #1
  404968:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40496a:	9324      	str	r3, [sp, #144]	; 0x90
  40496c:	442c      	add	r4, r5
  40496e:	2b07      	cmp	r3, #7
  404970:	9425      	str	r4, [sp, #148]	; 0x94
  404972:	e889 0024 	stmia.w	r9, {r2, r5}
  404976:	f73f ae51 	bgt.w	40461c <_svfprintf_r+0xe00>
  40497a:	f109 0908 	add.w	r9, r9, #8
  40497e:	e658      	b.n	404632 <_svfprintf_r+0xe16>
  404980:	aa23      	add	r2, sp, #140	; 0x8c
  404982:	9909      	ldr	r1, [sp, #36]	; 0x24
  404984:	980a      	ldr	r0, [sp, #40]	; 0x28
  404986:	f003 fd49 	bl	40841c <__ssprint_r>
  40498a:	2800      	cmp	r0, #0
  40498c:	f47f a83f 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404990:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404992:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404996:	e40f      	b.n	4041b8 <_svfprintf_r+0x99c>
  404998:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40499a:	f7ff bbe4 	b.w	404166 <_svfprintf_r+0x94a>
  40499e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4049a0:	4ab5      	ldr	r2, [pc, #724]	; (404c78 <_svfprintf_r+0x145c>)
  4049a2:	f8c9 2000 	str.w	r2, [r9]
  4049a6:	3301      	adds	r3, #1
  4049a8:	3401      	adds	r4, #1
  4049aa:	2201      	movs	r2, #1
  4049ac:	2b07      	cmp	r3, #7
  4049ae:	9425      	str	r4, [sp, #148]	; 0x94
  4049b0:	9324      	str	r3, [sp, #144]	; 0x90
  4049b2:	f8c9 2004 	str.w	r2, [r9, #4]
  4049b6:	f300 808e 	bgt.w	404ad6 <_svfprintf_r+0x12ba>
  4049ba:	f109 0908 	add.w	r9, r9, #8
  4049be:	b92d      	cbnz	r5, 4049cc <_svfprintf_r+0x11b0>
  4049c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4049c2:	b91b      	cbnz	r3, 4049cc <_svfprintf_r+0x11b0>
  4049c4:	9b07      	ldr	r3, [sp, #28]
  4049c6:	07df      	lsls	r7, r3, #31
  4049c8:	f57f a9b8 	bpl.w	403d3c <_svfprintf_r+0x520>
  4049cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4049ce:	9916      	ldr	r1, [sp, #88]	; 0x58
  4049d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  4049d2:	f8c9 2000 	str.w	r2, [r9]
  4049d6:	3301      	adds	r3, #1
  4049d8:	440c      	add	r4, r1
  4049da:	2b07      	cmp	r3, #7
  4049dc:	9425      	str	r4, [sp, #148]	; 0x94
  4049de:	f8c9 1004 	str.w	r1, [r9, #4]
  4049e2:	9324      	str	r3, [sp, #144]	; 0x90
  4049e4:	f300 81c2 	bgt.w	404d6c <_svfprintf_r+0x1550>
  4049e8:	f109 0908 	add.w	r9, r9, #8
  4049ec:	426d      	negs	r5, r5
  4049ee:	2d00      	cmp	r5, #0
  4049f0:	f340 809b 	ble.w	404b2a <_svfprintf_r+0x130e>
  4049f4:	4aa1      	ldr	r2, [pc, #644]	; (404c7c <_svfprintf_r+0x1460>)
  4049f6:	920f      	str	r2, [sp, #60]	; 0x3c
  4049f8:	2d10      	cmp	r5, #16
  4049fa:	f340 80c3 	ble.w	404b84 <_svfprintf_r+0x1368>
  4049fe:	4622      	mov	r2, r4
  404a00:	2710      	movs	r7, #16
  404a02:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404a06:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404a08:	e005      	b.n	404a16 <_svfprintf_r+0x11fa>
  404a0a:	f109 0908 	add.w	r9, r9, #8
  404a0e:	3d10      	subs	r5, #16
  404a10:	2d10      	cmp	r5, #16
  404a12:	f340 80b6 	ble.w	404b82 <_svfprintf_r+0x1366>
  404a16:	3301      	adds	r3, #1
  404a18:	3210      	adds	r2, #16
  404a1a:	2b07      	cmp	r3, #7
  404a1c:	9225      	str	r2, [sp, #148]	; 0x94
  404a1e:	9324      	str	r3, [sp, #144]	; 0x90
  404a20:	f8c9 a000 	str.w	sl, [r9]
  404a24:	f8c9 7004 	str.w	r7, [r9, #4]
  404a28:	ddef      	ble.n	404a0a <_svfprintf_r+0x11ee>
  404a2a:	aa23      	add	r2, sp, #140	; 0x8c
  404a2c:	4621      	mov	r1, r4
  404a2e:	4658      	mov	r0, fp
  404a30:	f003 fcf4 	bl	40841c <__ssprint_r>
  404a34:	2800      	cmp	r0, #0
  404a36:	f47e afea 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404a3a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404a3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a3e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404a42:	e7e4      	b.n	404a0e <_svfprintf_r+0x11f2>
  404a44:	9a07      	ldr	r2, [sp, #28]
  404a46:	f7ff ba38 	b.w	403eba <_svfprintf_r+0x69e>
  404a4a:	9a07      	ldr	r2, [sp, #28]
  404a4c:	e590      	b.n	404570 <_svfprintf_r+0xd54>
  404a4e:	9b07      	ldr	r3, [sp, #28]
  404a50:	f043 0320 	orr.w	r3, r3, #32
  404a54:	9307      	str	r3, [sp, #28]
  404a56:	f108 0801 	add.w	r8, r8, #1
  404a5a:	f898 3000 	ldrb.w	r3, [r8]
  404a5e:	f7fe bf36 	b.w	4038ce <_svfprintf_r+0xb2>
  404a62:	aa23      	add	r2, sp, #140	; 0x8c
  404a64:	9909      	ldr	r1, [sp, #36]	; 0x24
  404a66:	980a      	ldr	r0, [sp, #40]	; 0x28
  404a68:	f003 fcd8 	bl	40841c <__ssprint_r>
  404a6c:	2800      	cmp	r0, #0
  404a6e:	f47e afce 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404a72:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404a74:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404a78:	f7ff bbb6 	b.w	4041e8 <_svfprintf_r+0x9cc>
  404a7c:	2140      	movs	r1, #64	; 0x40
  404a7e:	980a      	ldr	r0, [sp, #40]	; 0x28
  404a80:	f7fe f958 	bl	402d34 <_malloc_r>
  404a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404a86:	6010      	str	r0, [r2, #0]
  404a88:	6110      	str	r0, [r2, #16]
  404a8a:	2800      	cmp	r0, #0
  404a8c:	f000 81e5 	beq.w	404e5a <_svfprintf_r+0x163e>
  404a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404a92:	2340      	movs	r3, #64	; 0x40
  404a94:	6153      	str	r3, [r2, #20]
  404a96:	f7fe bed8 	b.w	40384a <_svfprintf_r+0x2e>
  404a9a:	a821      	add	r0, sp, #132	; 0x84
  404a9c:	a91e      	add	r1, sp, #120	; 0x78
  404a9e:	9004      	str	r0, [sp, #16]
  404aa0:	9103      	str	r1, [sp, #12]
  404aa2:	a81d      	add	r0, sp, #116	; 0x74
  404aa4:	2103      	movs	r1, #3
  404aa6:	9002      	str	r0, [sp, #8]
  404aa8:	9a08      	ldr	r2, [sp, #32]
  404aaa:	f8cd b004 	str.w	fp, [sp, #4]
  404aae:	463b      	mov	r3, r7
  404ab0:	9100      	str	r1, [sp, #0]
  404ab2:	980a      	ldr	r0, [sp, #40]	; 0x28
  404ab4:	f001 fa78 	bl	405fa8 <_dtoa_r>
  404ab8:	465d      	mov	r5, fp
  404aba:	4606      	mov	r6, r0
  404abc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404abe:	2b46      	cmp	r3, #70	; 0x46
  404ac0:	eb06 0405 	add.w	r4, r6, r5
  404ac4:	f47f aeb6 	bne.w	404834 <_svfprintf_r+0x1018>
  404ac8:	7833      	ldrb	r3, [r6, #0]
  404aca:	2b30      	cmp	r3, #48	; 0x30
  404acc:	f000 817c 	beq.w	404dc8 <_svfprintf_r+0x15ac>
  404ad0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404ad2:	442c      	add	r4, r5
  404ad4:	e6ae      	b.n	404834 <_svfprintf_r+0x1018>
  404ad6:	aa23      	add	r2, sp, #140	; 0x8c
  404ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
  404ada:	980a      	ldr	r0, [sp, #40]	; 0x28
  404adc:	f003 fc9e 	bl	40841c <__ssprint_r>
  404ae0:	2800      	cmp	r0, #0
  404ae2:	f47e af94 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404ae6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404ae8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404aea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404aee:	e766      	b.n	4049be <_svfprintf_r+0x11a2>
  404af0:	f1bb 0f00 	cmp.w	fp, #0
  404af4:	bf08      	it	eq
  404af6:	f04f 0b01 	moveq.w	fp, #1
  404afa:	e667      	b.n	4047cc <_svfprintf_r+0xfb0>
  404afc:	970e      	str	r7, [sp, #56]	; 0x38
  404afe:	4617      	mov	r7, r2
  404b00:	e55e      	b.n	4045c0 <_svfprintf_r+0xda4>
  404b02:	4630      	mov	r0, r6
  404b04:	f7fe fe1c 	bl	403740 <strlen>
  404b08:	46a3      	mov	fp, r4
  404b0a:	4603      	mov	r3, r0
  404b0c:	900d      	str	r0, [sp, #52]	; 0x34
  404b0e:	f7ff baf4 	b.w	4040fa <_svfprintf_r+0x8de>
  404b12:	aa23      	add	r2, sp, #140	; 0x8c
  404b14:	9909      	ldr	r1, [sp, #36]	; 0x24
  404b16:	980a      	ldr	r0, [sp, #40]	; 0x28
  404b18:	f003 fc80 	bl	40841c <__ssprint_r>
  404b1c:	2800      	cmp	r0, #0
  404b1e:	f47e af76 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404b22:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b24:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404b26:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404b2a:	9912      	ldr	r1, [sp, #72]	; 0x48
  404b2c:	f8c9 6000 	str.w	r6, [r9]
  404b30:	3301      	adds	r3, #1
  404b32:	440c      	add	r4, r1
  404b34:	2b07      	cmp	r3, #7
  404b36:	9425      	str	r4, [sp, #148]	; 0x94
  404b38:	9324      	str	r3, [sp, #144]	; 0x90
  404b3a:	f8c9 1004 	str.w	r1, [r9, #4]
  404b3e:	f77f a8fb 	ble.w	403d38 <_svfprintf_r+0x51c>
  404b42:	e411      	b.n	404368 <_svfprintf_r+0xb4c>
  404b44:	272d      	movs	r7, #45	; 0x2d
  404b46:	9308      	str	r3, [sp, #32]
  404b48:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404b4a:	9307      	str	r3, [sp, #28]
  404b4c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404b50:	f04f 0b00 	mov.w	fp, #0
  404b54:	f7ff b829 	b.w	403baa <_svfprintf_r+0x38e>
  404b58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404b5a:	1cdd      	adds	r5, r3, #3
  404b5c:	db1e      	blt.n	404b9c <_svfprintf_r+0x1380>
  404b5e:	459b      	cmp	fp, r3
  404b60:	db1c      	blt.n	404b9c <_svfprintf_r+0x1380>
  404b62:	9313      	str	r3, [sp, #76]	; 0x4c
  404b64:	e689      	b.n	40487a <_svfprintf_r+0x105e>
  404b66:	4623      	mov	r3, r4
  404b68:	e677      	b.n	40485a <_svfprintf_r+0x103e>
  404b6a:	aa23      	add	r2, sp, #140	; 0x8c
  404b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
  404b6e:	980a      	ldr	r0, [sp, #40]	; 0x28
  404b70:	f003 fc54 	bl	40841c <__ssprint_r>
  404b74:	2800      	cmp	r0, #0
  404b76:	f47e af4a 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404b7a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b7c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404b80:	e459      	b.n	404436 <_svfprintf_r+0xc1a>
  404b82:	4614      	mov	r4, r2
  404b84:	3301      	adds	r3, #1
  404b86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404b88:	9324      	str	r3, [sp, #144]	; 0x90
  404b8a:	442c      	add	r4, r5
  404b8c:	2b07      	cmp	r3, #7
  404b8e:	9425      	str	r4, [sp, #148]	; 0x94
  404b90:	e889 0024 	stmia.w	r9, {r2, r5}
  404b94:	dcbd      	bgt.n	404b12 <_svfprintf_r+0x12f6>
  404b96:	f109 0908 	add.w	r9, r9, #8
  404b9a:	e7c6      	b.n	404b2a <_svfprintf_r+0x130e>
  404b9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b9e:	3a02      	subs	r2, #2
  404ba0:	9211      	str	r2, [sp, #68]	; 0x44
  404ba2:	3b01      	subs	r3, #1
  404ba4:	2b00      	cmp	r3, #0
  404ba6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404baa:	931d      	str	r3, [sp, #116]	; 0x74
  404bac:	bfb8      	it	lt
  404bae:	425b      	neglt	r3, r3
  404bb0:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  404bb4:	bfb4      	ite	lt
  404bb6:	222d      	movlt	r2, #45	; 0x2d
  404bb8:	222b      	movge	r2, #43	; 0x2b
  404bba:	2b09      	cmp	r3, #9
  404bbc:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  404bc0:	f340 80f1 	ble.w	404da6 <_svfprintf_r+0x158a>
  404bc4:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  404bc8:	4604      	mov	r4, r0
  404bca:	4a2d      	ldr	r2, [pc, #180]	; (404c80 <_svfprintf_r+0x1464>)
  404bcc:	fb82 2103 	smull	r2, r1, r2, r3
  404bd0:	17da      	asrs	r2, r3, #31
  404bd2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  404bd6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  404bda:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  404bde:	f103 0130 	add.w	r1, r3, #48	; 0x30
  404be2:	2a09      	cmp	r2, #9
  404be4:	4613      	mov	r3, r2
  404be6:	f804 1d01 	strb.w	r1, [r4, #-1]!
  404bea:	dcee      	bgt.n	404bca <_svfprintf_r+0x13ae>
  404bec:	4621      	mov	r1, r4
  404bee:	3330      	adds	r3, #48	; 0x30
  404bf0:	b2da      	uxtb	r2, r3
  404bf2:	f801 2d01 	strb.w	r2, [r1, #-1]!
  404bf6:	4288      	cmp	r0, r1
  404bf8:	f240 813a 	bls.w	404e70 <_svfprintf_r+0x1654>
  404bfc:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  404c00:	4623      	mov	r3, r4
  404c02:	e001      	b.n	404c08 <_svfprintf_r+0x13ec>
  404c04:	f813 2b01 	ldrb.w	r2, [r3], #1
  404c08:	f801 2b01 	strb.w	r2, [r1], #1
  404c0c:	4298      	cmp	r0, r3
  404c0e:	d1f9      	bne.n	404c04 <_svfprintf_r+0x13e8>
  404c10:	1c43      	adds	r3, r0, #1
  404c12:	1b1b      	subs	r3, r3, r4
  404c14:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  404c18:	4413      	add	r3, r2
  404c1a:	aa1f      	add	r2, sp, #124	; 0x7c
  404c1c:	1a9b      	subs	r3, r3, r2
  404c1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404c20:	9319      	str	r3, [sp, #100]	; 0x64
  404c22:	2a01      	cmp	r2, #1
  404c24:	4413      	add	r3, r2
  404c26:	930d      	str	r3, [sp, #52]	; 0x34
  404c28:	f340 80ea 	ble.w	404e00 <_svfprintf_r+0x15e4>
  404c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404c2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404c30:	4413      	add	r3, r2
  404c32:	2200      	movs	r2, #0
  404c34:	930d      	str	r3, [sp, #52]	; 0x34
  404c36:	9213      	str	r2, [sp, #76]	; 0x4c
  404c38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404c3c:	e62b      	b.n	404896 <_svfprintf_r+0x107a>
  404c3e:	aa23      	add	r2, sp, #140	; 0x8c
  404c40:	9909      	ldr	r1, [sp, #36]	; 0x24
  404c42:	980a      	ldr	r0, [sp, #40]	; 0x28
  404c44:	f003 fbea 	bl	40841c <__ssprint_r>
  404c48:	2800      	cmp	r0, #0
  404c4a:	f47e aee0 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404c4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404c50:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404c52:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404c56:	e4f6      	b.n	404646 <_svfprintf_r+0xe2a>
  404c58:	2d06      	cmp	r5, #6
  404c5a:	462b      	mov	r3, r5
  404c5c:	bf28      	it	cs
  404c5e:	2306      	movcs	r3, #6
  404c60:	930d      	str	r3, [sp, #52]	; 0x34
  404c62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404c66:	46b3      	mov	fp, r6
  404c68:	970e      	str	r7, [sp, #56]	; 0x38
  404c6a:	9613      	str	r6, [sp, #76]	; 0x4c
  404c6c:	4637      	mov	r7, r6
  404c6e:	9308      	str	r3, [sp, #32]
  404c70:	4e04      	ldr	r6, [pc, #16]	; (404c84 <_svfprintf_r+0x1468>)
  404c72:	f7fe bf99 	b.w	403ba8 <_svfprintf_r+0x38c>
  404c76:	bf00      	nop
  404c78:	00409668 	.word	0x00409668
  404c7c:	00409618 	.word	0x00409618
  404c80:	66666667 	.word	0x66666667
  404c84:	00409660 	.word	0x00409660
  404c88:	aa23      	add	r2, sp, #140	; 0x8c
  404c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
  404c8c:	980a      	ldr	r0, [sp, #40]	; 0x28
  404c8e:	f003 fbc5 	bl	40841c <__ssprint_r>
  404c92:	2800      	cmp	r0, #0
  404c94:	f47e aebb 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404c98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404c9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404c9c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404c9e:	1ad3      	subs	r3, r2, r3
  404ca0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404ca4:	e4e7      	b.n	404676 <_svfprintf_r+0xe5a>
  404ca6:	f04f 0b06 	mov.w	fp, #6
  404caa:	e58f      	b.n	4047cc <_svfprintf_r+0xfb0>
  404cac:	a821      	add	r0, sp, #132	; 0x84
  404cae:	a91e      	add	r1, sp, #120	; 0x78
  404cb0:	9004      	str	r0, [sp, #16]
  404cb2:	9103      	str	r1, [sp, #12]
  404cb4:	a81d      	add	r0, sp, #116	; 0x74
  404cb6:	2103      	movs	r1, #3
  404cb8:	9002      	str	r0, [sp, #8]
  404cba:	9a08      	ldr	r2, [sp, #32]
  404cbc:	f8cd b004 	str.w	fp, [sp, #4]
  404cc0:	463b      	mov	r3, r7
  404cc2:	9100      	str	r1, [sp, #0]
  404cc4:	980a      	ldr	r0, [sp, #40]	; 0x28
  404cc6:	f001 f96f 	bl	405fa8 <_dtoa_r>
  404cca:	465d      	mov	r5, fp
  404ccc:	4606      	mov	r6, r0
  404cce:	eb00 040b 	add.w	r4, r0, fp
  404cd2:	e6f9      	b.n	404ac8 <_svfprintf_r+0x12ac>
  404cd4:	9307      	str	r3, [sp, #28]
  404cd6:	f7ff b959 	b.w	403f8c <_svfprintf_r+0x770>
  404cda:	272d      	movs	r7, #45	; 0x2d
  404cdc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404ce0:	f7ff b8b2 	b.w	403e48 <_svfprintf_r+0x62c>
  404ce4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404ce6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404ce8:	4413      	add	r3, r2
  404cea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404cec:	930d      	str	r3, [sp, #52]	; 0x34
  404cee:	2a00      	cmp	r2, #0
  404cf0:	dd7e      	ble.n	404df0 <_svfprintf_r+0x15d4>
  404cf2:	2267      	movs	r2, #103	; 0x67
  404cf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404cf8:	9211      	str	r2, [sp, #68]	; 0x44
  404cfa:	e5cc      	b.n	404896 <_svfprintf_r+0x107a>
  404cfc:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  404d00:	970e      	str	r7, [sp, #56]	; 0x38
  404d02:	9308      	str	r3, [sp, #32]
  404d04:	950d      	str	r5, [sp, #52]	; 0x34
  404d06:	4683      	mov	fp, r0
  404d08:	9013      	str	r0, [sp, #76]	; 0x4c
  404d0a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404d0e:	f7fe bf4b 	b.w	403ba8 <_svfprintf_r+0x38c>
  404d12:	9b07      	ldr	r3, [sp, #28]
  404d14:	07db      	lsls	r3, r3, #31
  404d16:	465f      	mov	r7, fp
  404d18:	d505      	bpl.n	404d26 <_svfprintf_r+0x150a>
  404d1a:	ae40      	add	r6, sp, #256	; 0x100
  404d1c:	2330      	movs	r3, #48	; 0x30
  404d1e:	f806 3d41 	strb.w	r3, [r6, #-65]!
  404d22:	f7fe bf37 	b.w	403b94 <_svfprintf_r+0x378>
  404d26:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  404d2a:	ae30      	add	r6, sp, #192	; 0xc0
  404d2c:	f7fe bf35 	b.w	403b9a <_svfprintf_r+0x37e>
  404d30:	2b00      	cmp	r3, #0
  404d32:	dd7d      	ble.n	404e30 <_svfprintf_r+0x1614>
  404d34:	f1bb 0f00 	cmp.w	fp, #0
  404d38:	d13d      	bne.n	404db6 <_svfprintf_r+0x159a>
  404d3a:	9a07      	ldr	r2, [sp, #28]
  404d3c:	07d4      	lsls	r4, r2, #31
  404d3e:	d43a      	bmi.n	404db6 <_svfprintf_r+0x159a>
  404d40:	461a      	mov	r2, r3
  404d42:	920d      	str	r2, [sp, #52]	; 0x34
  404d44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404d48:	e5a5      	b.n	404896 <_svfprintf_r+0x107a>
  404d4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d4c:	2b47      	cmp	r3, #71	; 0x47
  404d4e:	f47f ad70 	bne.w	404832 <_svfprintf_r+0x1016>
  404d52:	9b07      	ldr	r3, [sp, #28]
  404d54:	07db      	lsls	r3, r3, #31
  404d56:	f53f aeb1 	bmi.w	404abc <_svfprintf_r+0x12a0>
  404d5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404d5c:	1b9b      	subs	r3, r3, r6
  404d5e:	9312      	str	r3, [sp, #72]	; 0x48
  404d60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404d62:	2b47      	cmp	r3, #71	; 0x47
  404d64:	f43f aef8 	beq.w	404b58 <_svfprintf_r+0x133c>
  404d68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404d6a:	e71a      	b.n	404ba2 <_svfprintf_r+0x1386>
  404d6c:	aa23      	add	r2, sp, #140	; 0x8c
  404d6e:	9909      	ldr	r1, [sp, #36]	; 0x24
  404d70:	980a      	ldr	r0, [sp, #40]	; 0x28
  404d72:	f003 fb53 	bl	40841c <__ssprint_r>
  404d76:	2800      	cmp	r0, #0
  404d78:	f47e ae49 	bne.w	403a0e <_svfprintf_r+0x1f2>
  404d7c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404d7e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404d80:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d82:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404d86:	e631      	b.n	4049ec <_svfprintf_r+0x11d0>
  404d88:	46a0      	mov	r8, r4
  404d8a:	2500      	movs	r5, #0
  404d8c:	f7fe bda1 	b.w	4038d2 <_svfprintf_r+0xb6>
  404d90:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404d92:	e562      	b.n	40485a <_svfprintf_r+0x103e>
  404d94:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404d96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404d98:	4413      	add	r3, r2
  404d9a:	2267      	movs	r2, #103	; 0x67
  404d9c:	930d      	str	r3, [sp, #52]	; 0x34
  404d9e:	9211      	str	r2, [sp, #68]	; 0x44
  404da0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404da4:	e577      	b.n	404896 <_svfprintf_r+0x107a>
  404da6:	3330      	adds	r3, #48	; 0x30
  404da8:	2230      	movs	r2, #48	; 0x30
  404daa:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  404dae:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  404db2:	ab20      	add	r3, sp, #128	; 0x80
  404db4:	e731      	b.n	404c1a <_svfprintf_r+0x13fe>
  404db6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404db8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404dba:	189d      	adds	r5, r3, r2
  404dbc:	eb05 030b 	add.w	r3, r5, fp
  404dc0:	930d      	str	r3, [sp, #52]	; 0x34
  404dc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404dc6:	e566      	b.n	404896 <_svfprintf_r+0x107a>
  404dc8:	9808      	ldr	r0, [sp, #32]
  404dca:	4639      	mov	r1, r7
  404dcc:	2200      	movs	r2, #0
  404dce:	2300      	movs	r3, #0
  404dd0:	f004 f990 	bl	4090f4 <__aeabi_dcmpeq>
  404dd4:	2800      	cmp	r0, #0
  404dd6:	f47f ae7b 	bne.w	404ad0 <_svfprintf_r+0x12b4>
  404dda:	f1c5 0501 	rsb	r5, r5, #1
  404dde:	951d      	str	r5, [sp, #116]	; 0x74
  404de0:	442c      	add	r4, r5
  404de2:	e527      	b.n	404834 <_svfprintf_r+0x1018>
  404de4:	4e32      	ldr	r6, [pc, #200]	; (404eb0 <_svfprintf_r+0x1694>)
  404de6:	4b33      	ldr	r3, [pc, #204]	; (404eb4 <_svfprintf_r+0x1698>)
  404de8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404dec:	f7ff b82e 	b.w	403e4c <_svfprintf_r+0x630>
  404df0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404df2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404df4:	f1c3 0301 	rsb	r3, r3, #1
  404df8:	441a      	add	r2, r3
  404dfa:	4613      	mov	r3, r2
  404dfc:	920d      	str	r2, [sp, #52]	; 0x34
  404dfe:	e778      	b.n	404cf2 <_svfprintf_r+0x14d6>
  404e00:	9b07      	ldr	r3, [sp, #28]
  404e02:	f013 0301 	ands.w	r3, r3, #1
  404e06:	f47f af11 	bne.w	404c2c <_svfprintf_r+0x1410>
  404e0a:	9313      	str	r3, [sp, #76]	; 0x4c
  404e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404e0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404e12:	e540      	b.n	404896 <_svfprintf_r+0x107a>
  404e14:	980e      	ldr	r0, [sp, #56]	; 0x38
  404e16:	f898 3001 	ldrb.w	r3, [r8, #1]
  404e1a:	6805      	ldr	r5, [r0, #0]
  404e1c:	3004      	adds	r0, #4
  404e1e:	2d00      	cmp	r5, #0
  404e20:	900e      	str	r0, [sp, #56]	; 0x38
  404e22:	46a0      	mov	r8, r4
  404e24:	f6be ad53 	bge.w	4038ce <_svfprintf_r+0xb2>
  404e28:	f04f 35ff 	mov.w	r5, #4294967295
  404e2c:	f7fe bd4f 	b.w	4038ce <_svfprintf_r+0xb2>
  404e30:	f1bb 0f00 	cmp.w	fp, #0
  404e34:	d102      	bne.n	404e3c <_svfprintf_r+0x1620>
  404e36:	9b07      	ldr	r3, [sp, #28]
  404e38:	07d8      	lsls	r0, r3, #31
  404e3a:	d507      	bpl.n	404e4c <_svfprintf_r+0x1630>
  404e3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  404e3e:	1c5d      	adds	r5, r3, #1
  404e40:	eb05 030b 	add.w	r3, r5, fp
  404e44:	930d      	str	r3, [sp, #52]	; 0x34
  404e46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404e4a:	e524      	b.n	404896 <_svfprintf_r+0x107a>
  404e4c:	2301      	movs	r3, #1
  404e4e:	930d      	str	r3, [sp, #52]	; 0x34
  404e50:	e521      	b.n	404896 <_svfprintf_r+0x107a>
  404e52:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404e56:	f7ff b921 	b.w	40409c <_svfprintf_r+0x880>
  404e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404e5c:	230c      	movs	r3, #12
  404e5e:	6013      	str	r3, [r2, #0]
  404e60:	f04f 30ff 	mov.w	r0, #4294967295
  404e64:	f7fe bddc 	b.w	403a20 <_svfprintf_r+0x204>
  404e68:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404e6c:	f7ff b8f9 	b.w	404062 <_svfprintf_r+0x846>
  404e70:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  404e74:	e6d1      	b.n	404c1a <_svfprintf_r+0x13fe>
  404e76:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404e7a:	f7fe bdd9 	b.w	403a30 <_svfprintf_r+0x214>
  404e7e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404e82:	f7ff b857 	b.w	403f34 <_svfprintf_r+0x718>
  404e86:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404e8a:	f7ff b825 	b.w	403ed8 <_svfprintf_r+0x6bc>
  404e8e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404e92:	f7ff b94c 	b.w	40412e <_svfprintf_r+0x912>
  404e96:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404e9a:	f7fe bff3 	b.w	403e84 <_svfprintf_r+0x668>
  404e9e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404ea2:	f7fe bfa3 	b.w	403dec <_svfprintf_r+0x5d0>
  404ea6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404eaa:	f7fe be33 	b.w	403b14 <_svfprintf_r+0x2f8>
  404eae:	bf00      	nop
  404eb0:	00409634 	.word	0x00409634
  404eb4:	00409630 	.word	0x00409630

00404eb8 <__sprint_r.part.0>:
  404eb8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404eba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404ebe:	049c      	lsls	r4, r3, #18
  404ec0:	4692      	mov	sl, r2
  404ec2:	d52c      	bpl.n	404f1e <__sprint_r.part.0+0x66>
  404ec4:	6893      	ldr	r3, [r2, #8]
  404ec6:	6812      	ldr	r2, [r2, #0]
  404ec8:	b33b      	cbz	r3, 404f1a <__sprint_r.part.0+0x62>
  404eca:	460f      	mov	r7, r1
  404ecc:	4680      	mov	r8, r0
  404ece:	f102 0908 	add.w	r9, r2, #8
  404ed2:	e919 0060 	ldmdb	r9, {r5, r6}
  404ed6:	08b6      	lsrs	r6, r6, #2
  404ed8:	d017      	beq.n	404f0a <__sprint_r.part.0+0x52>
  404eda:	3d04      	subs	r5, #4
  404edc:	2400      	movs	r4, #0
  404ede:	e001      	b.n	404ee4 <__sprint_r.part.0+0x2c>
  404ee0:	42a6      	cmp	r6, r4
  404ee2:	d010      	beq.n	404f06 <__sprint_r.part.0+0x4e>
  404ee4:	463a      	mov	r2, r7
  404ee6:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404eea:	4640      	mov	r0, r8
  404eec:	f002 f92a 	bl	407144 <_fputwc_r>
  404ef0:	1c43      	adds	r3, r0, #1
  404ef2:	f104 0401 	add.w	r4, r4, #1
  404ef6:	d1f3      	bne.n	404ee0 <__sprint_r.part.0+0x28>
  404ef8:	2300      	movs	r3, #0
  404efa:	f8ca 3008 	str.w	r3, [sl, #8]
  404efe:	f8ca 3004 	str.w	r3, [sl, #4]
  404f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404f06:	f8da 3008 	ldr.w	r3, [sl, #8]
  404f0a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  404f0e:	f8ca 3008 	str.w	r3, [sl, #8]
  404f12:	f109 0908 	add.w	r9, r9, #8
  404f16:	2b00      	cmp	r3, #0
  404f18:	d1db      	bne.n	404ed2 <__sprint_r.part.0+0x1a>
  404f1a:	2000      	movs	r0, #0
  404f1c:	e7ec      	b.n	404ef8 <__sprint_r.part.0+0x40>
  404f1e:	f002 fa59 	bl	4073d4 <__sfvwrite_r>
  404f22:	2300      	movs	r3, #0
  404f24:	f8ca 3008 	str.w	r3, [sl, #8]
  404f28:	f8ca 3004 	str.w	r3, [sl, #4]
  404f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404f30 <_vfiprintf_r>:
  404f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f34:	b0ab      	sub	sp, #172	; 0xac
  404f36:	461c      	mov	r4, r3
  404f38:	9100      	str	r1, [sp, #0]
  404f3a:	4690      	mov	r8, r2
  404f3c:	9304      	str	r3, [sp, #16]
  404f3e:	9005      	str	r0, [sp, #20]
  404f40:	b118      	cbz	r0, 404f4a <_vfiprintf_r+0x1a>
  404f42:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404f44:	2b00      	cmp	r3, #0
  404f46:	f000 80de 	beq.w	405106 <_vfiprintf_r+0x1d6>
  404f4a:	9800      	ldr	r0, [sp, #0]
  404f4c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  404f50:	b28a      	uxth	r2, r1
  404f52:	0495      	lsls	r5, r2, #18
  404f54:	d407      	bmi.n	404f66 <_vfiprintf_r+0x36>
  404f56:	6e43      	ldr	r3, [r0, #100]	; 0x64
  404f58:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  404f5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404f60:	8182      	strh	r2, [r0, #12]
  404f62:	6643      	str	r3, [r0, #100]	; 0x64
  404f64:	b292      	uxth	r2, r2
  404f66:	0711      	lsls	r1, r2, #28
  404f68:	f140 80b1 	bpl.w	4050ce <_vfiprintf_r+0x19e>
  404f6c:	9b00      	ldr	r3, [sp, #0]
  404f6e:	691b      	ldr	r3, [r3, #16]
  404f70:	2b00      	cmp	r3, #0
  404f72:	f000 80ac 	beq.w	4050ce <_vfiprintf_r+0x19e>
  404f76:	f002 021a 	and.w	r2, r2, #26
  404f7a:	2a0a      	cmp	r2, #10
  404f7c:	f000 80b5 	beq.w	4050ea <_vfiprintf_r+0x1ba>
  404f80:	2300      	movs	r3, #0
  404f82:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  404f86:	9302      	str	r3, [sp, #8]
  404f88:	930f      	str	r3, [sp, #60]	; 0x3c
  404f8a:	930e      	str	r3, [sp, #56]	; 0x38
  404f8c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  404f90:	46da      	mov	sl, fp
  404f92:	f898 3000 	ldrb.w	r3, [r8]
  404f96:	4644      	mov	r4, r8
  404f98:	b1fb      	cbz	r3, 404fda <_vfiprintf_r+0xaa>
  404f9a:	2b25      	cmp	r3, #37	; 0x25
  404f9c:	d102      	bne.n	404fa4 <_vfiprintf_r+0x74>
  404f9e:	e01c      	b.n	404fda <_vfiprintf_r+0xaa>
  404fa0:	2b25      	cmp	r3, #37	; 0x25
  404fa2:	d003      	beq.n	404fac <_vfiprintf_r+0x7c>
  404fa4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404fa8:	2b00      	cmp	r3, #0
  404faa:	d1f9      	bne.n	404fa0 <_vfiprintf_r+0x70>
  404fac:	ebc8 0504 	rsb	r5, r8, r4
  404fb0:	b19d      	cbz	r5, 404fda <_vfiprintf_r+0xaa>
  404fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404fb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404fb6:	f8ca 8000 	str.w	r8, [sl]
  404fba:	3301      	adds	r3, #1
  404fbc:	442a      	add	r2, r5
  404fbe:	2b07      	cmp	r3, #7
  404fc0:	f8ca 5004 	str.w	r5, [sl, #4]
  404fc4:	920f      	str	r2, [sp, #60]	; 0x3c
  404fc6:	930e      	str	r3, [sp, #56]	; 0x38
  404fc8:	dd7b      	ble.n	4050c2 <_vfiprintf_r+0x192>
  404fca:	2a00      	cmp	r2, #0
  404fcc:	f040 8528 	bne.w	405a20 <_vfiprintf_r+0xaf0>
  404fd0:	9b02      	ldr	r3, [sp, #8]
  404fd2:	920e      	str	r2, [sp, #56]	; 0x38
  404fd4:	442b      	add	r3, r5
  404fd6:	46da      	mov	sl, fp
  404fd8:	9302      	str	r3, [sp, #8]
  404fda:	7823      	ldrb	r3, [r4, #0]
  404fdc:	2b00      	cmp	r3, #0
  404fde:	f000 843e 	beq.w	40585e <_vfiprintf_r+0x92e>
  404fe2:	2100      	movs	r1, #0
  404fe4:	f04f 0300 	mov.w	r3, #0
  404fe8:	f04f 32ff 	mov.w	r2, #4294967295
  404fec:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404ff0:	f104 0801 	add.w	r8, r4, #1
  404ff4:	7863      	ldrb	r3, [r4, #1]
  404ff6:	9201      	str	r2, [sp, #4]
  404ff8:	4608      	mov	r0, r1
  404ffa:	460e      	mov	r6, r1
  404ffc:	460c      	mov	r4, r1
  404ffe:	f108 0801 	add.w	r8, r8, #1
  405002:	f1a3 0220 	sub.w	r2, r3, #32
  405006:	2a58      	cmp	r2, #88	; 0x58
  405008:	f200 8393 	bhi.w	405732 <_vfiprintf_r+0x802>
  40500c:	e8df f012 	tbh	[pc, r2, lsl #1]
  405010:	03910346 	.word	0x03910346
  405014:	034e0391 	.word	0x034e0391
  405018:	03910391 	.word	0x03910391
  40501c:	03910391 	.word	0x03910391
  405020:	03910391 	.word	0x03910391
  405024:	02670289 	.word	0x02670289
  405028:	00800391 	.word	0x00800391
  40502c:	0391026c 	.word	0x0391026c
  405030:	025901c6 	.word	0x025901c6
  405034:	02590259 	.word	0x02590259
  405038:	02590259 	.word	0x02590259
  40503c:	02590259 	.word	0x02590259
  405040:	02590259 	.word	0x02590259
  405044:	03910391 	.word	0x03910391
  405048:	03910391 	.word	0x03910391
  40504c:	03910391 	.word	0x03910391
  405050:	03910391 	.word	0x03910391
  405054:	03910391 	.word	0x03910391
  405058:	039101cb 	.word	0x039101cb
  40505c:	03910391 	.word	0x03910391
  405060:	03910391 	.word	0x03910391
  405064:	03910391 	.word	0x03910391
  405068:	03910391 	.word	0x03910391
  40506c:	02140391 	.word	0x02140391
  405070:	03910391 	.word	0x03910391
  405074:	03910391 	.word	0x03910391
  405078:	02ee0391 	.word	0x02ee0391
  40507c:	03910391 	.word	0x03910391
  405080:	03910311 	.word	0x03910311
  405084:	03910391 	.word	0x03910391
  405088:	03910391 	.word	0x03910391
  40508c:	03910391 	.word	0x03910391
  405090:	03910391 	.word	0x03910391
  405094:	03340391 	.word	0x03340391
  405098:	0391038a 	.word	0x0391038a
  40509c:	03910391 	.word	0x03910391
  4050a0:	038a0367 	.word	0x038a0367
  4050a4:	03910391 	.word	0x03910391
  4050a8:	0391036c 	.word	0x0391036c
  4050ac:	02950379 	.word	0x02950379
  4050b0:	02e90085 	.word	0x02e90085
  4050b4:	029b0391 	.word	0x029b0391
  4050b8:	02ba0391 	.word	0x02ba0391
  4050bc:	03910391 	.word	0x03910391
  4050c0:	0353      	.short	0x0353
  4050c2:	f10a 0a08 	add.w	sl, sl, #8
  4050c6:	9b02      	ldr	r3, [sp, #8]
  4050c8:	442b      	add	r3, r5
  4050ca:	9302      	str	r3, [sp, #8]
  4050cc:	e785      	b.n	404fda <_vfiprintf_r+0xaa>
  4050ce:	9900      	ldr	r1, [sp, #0]
  4050d0:	9805      	ldr	r0, [sp, #20]
  4050d2:	f000 fe61 	bl	405d98 <__swsetup_r>
  4050d6:	2800      	cmp	r0, #0
  4050d8:	f040 8558 	bne.w	405b8c <_vfiprintf_r+0xc5c>
  4050dc:	9b00      	ldr	r3, [sp, #0]
  4050de:	899a      	ldrh	r2, [r3, #12]
  4050e0:	f002 021a 	and.w	r2, r2, #26
  4050e4:	2a0a      	cmp	r2, #10
  4050e6:	f47f af4b 	bne.w	404f80 <_vfiprintf_r+0x50>
  4050ea:	9900      	ldr	r1, [sp, #0]
  4050ec:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  4050f0:	2b00      	cmp	r3, #0
  4050f2:	f6ff af45 	blt.w	404f80 <_vfiprintf_r+0x50>
  4050f6:	4623      	mov	r3, r4
  4050f8:	4642      	mov	r2, r8
  4050fa:	9805      	ldr	r0, [sp, #20]
  4050fc:	f000 fe16 	bl	405d2c <__sbprintf>
  405100:	b02b      	add	sp, #172	; 0xac
  405102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405106:	f001 ffb3 	bl	407070 <__sinit>
  40510a:	e71e      	b.n	404f4a <_vfiprintf_r+0x1a>
  40510c:	4264      	negs	r4, r4
  40510e:	9304      	str	r3, [sp, #16]
  405110:	f046 0604 	orr.w	r6, r6, #4
  405114:	f898 3000 	ldrb.w	r3, [r8]
  405118:	e771      	b.n	404ffe <_vfiprintf_r+0xce>
  40511a:	2130      	movs	r1, #48	; 0x30
  40511c:	9804      	ldr	r0, [sp, #16]
  40511e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  405122:	9901      	ldr	r1, [sp, #4]
  405124:	9406      	str	r4, [sp, #24]
  405126:	f04f 0300 	mov.w	r3, #0
  40512a:	2278      	movs	r2, #120	; 0x78
  40512c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405130:	2900      	cmp	r1, #0
  405132:	4603      	mov	r3, r0
  405134:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  405138:	6804      	ldr	r4, [r0, #0]
  40513a:	f103 0304 	add.w	r3, r3, #4
  40513e:	f04f 0500 	mov.w	r5, #0
  405142:	f046 0202 	orr.w	r2, r6, #2
  405146:	f2c0 8525 	blt.w	405b94 <_vfiprintf_r+0xc64>
  40514a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40514e:	ea54 0205 	orrs.w	r2, r4, r5
  405152:	f046 0602 	orr.w	r6, r6, #2
  405156:	9304      	str	r3, [sp, #16]
  405158:	f040 84bf 	bne.w	405ada <_vfiprintf_r+0xbaa>
  40515c:	48b3      	ldr	r0, [pc, #716]	; (40542c <_vfiprintf_r+0x4fc>)
  40515e:	9b01      	ldr	r3, [sp, #4]
  405160:	2b00      	cmp	r3, #0
  405162:	f040 841c 	bne.w	40599e <_vfiprintf_r+0xa6e>
  405166:	4699      	mov	r9, r3
  405168:	2300      	movs	r3, #0
  40516a:	9301      	str	r3, [sp, #4]
  40516c:	9303      	str	r3, [sp, #12]
  40516e:	465f      	mov	r7, fp
  405170:	9b01      	ldr	r3, [sp, #4]
  405172:	9a03      	ldr	r2, [sp, #12]
  405174:	4293      	cmp	r3, r2
  405176:	bfb8      	it	lt
  405178:	4613      	movlt	r3, r2
  40517a:	461d      	mov	r5, r3
  40517c:	f1b9 0f00 	cmp.w	r9, #0
  405180:	d000      	beq.n	405184 <_vfiprintf_r+0x254>
  405182:	3501      	adds	r5, #1
  405184:	f016 0302 	ands.w	r3, r6, #2
  405188:	9307      	str	r3, [sp, #28]
  40518a:	bf18      	it	ne
  40518c:	3502      	addne	r5, #2
  40518e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  405192:	9308      	str	r3, [sp, #32]
  405194:	f040 82f1 	bne.w	40577a <_vfiprintf_r+0x84a>
  405198:	9b06      	ldr	r3, [sp, #24]
  40519a:	1b5c      	subs	r4, r3, r5
  40519c:	2c00      	cmp	r4, #0
  40519e:	f340 82ec 	ble.w	40577a <_vfiprintf_r+0x84a>
  4051a2:	2c10      	cmp	r4, #16
  4051a4:	f340 8556 	ble.w	405c54 <_vfiprintf_r+0xd24>
  4051a8:	f8df 9284 	ldr.w	r9, [pc, #644]	; 405430 <_vfiprintf_r+0x500>
  4051ac:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  4051b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4051b2:	46d4      	mov	ip, sl
  4051b4:	2310      	movs	r3, #16
  4051b6:	46c2      	mov	sl, r8
  4051b8:	4670      	mov	r0, lr
  4051ba:	46a8      	mov	r8, r5
  4051bc:	464d      	mov	r5, r9
  4051be:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4051c2:	e007      	b.n	4051d4 <_vfiprintf_r+0x2a4>
  4051c4:	f100 0e02 	add.w	lr, r0, #2
  4051c8:	f10c 0c08 	add.w	ip, ip, #8
  4051cc:	4608      	mov	r0, r1
  4051ce:	3c10      	subs	r4, #16
  4051d0:	2c10      	cmp	r4, #16
  4051d2:	dd13      	ble.n	4051fc <_vfiprintf_r+0x2cc>
  4051d4:	1c41      	adds	r1, r0, #1
  4051d6:	3210      	adds	r2, #16
  4051d8:	2907      	cmp	r1, #7
  4051da:	920f      	str	r2, [sp, #60]	; 0x3c
  4051dc:	f8cc 5000 	str.w	r5, [ip]
  4051e0:	f8cc 3004 	str.w	r3, [ip, #4]
  4051e4:	910e      	str	r1, [sp, #56]	; 0x38
  4051e6:	dded      	ble.n	4051c4 <_vfiprintf_r+0x294>
  4051e8:	2a00      	cmp	r2, #0
  4051ea:	f040 82b7 	bne.w	40575c <_vfiprintf_r+0x82c>
  4051ee:	3c10      	subs	r4, #16
  4051f0:	2c10      	cmp	r4, #16
  4051f2:	4610      	mov	r0, r2
  4051f4:	f04f 0e01 	mov.w	lr, #1
  4051f8:	46dc      	mov	ip, fp
  4051fa:	dceb      	bgt.n	4051d4 <_vfiprintf_r+0x2a4>
  4051fc:	46a9      	mov	r9, r5
  4051fe:	4670      	mov	r0, lr
  405200:	4645      	mov	r5, r8
  405202:	46d0      	mov	r8, sl
  405204:	46e2      	mov	sl, ip
  405206:	4422      	add	r2, r4
  405208:	2807      	cmp	r0, #7
  40520a:	920f      	str	r2, [sp, #60]	; 0x3c
  40520c:	f8ca 9000 	str.w	r9, [sl]
  405210:	f8ca 4004 	str.w	r4, [sl, #4]
  405214:	900e      	str	r0, [sp, #56]	; 0x38
  405216:	f300 8375 	bgt.w	405904 <_vfiprintf_r+0x9d4>
  40521a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40521e:	f10a 0a08 	add.w	sl, sl, #8
  405222:	f100 0e01 	add.w	lr, r0, #1
  405226:	2b00      	cmp	r3, #0
  405228:	f040 82b0 	bne.w	40578c <_vfiprintf_r+0x85c>
  40522c:	9b07      	ldr	r3, [sp, #28]
  40522e:	2b00      	cmp	r3, #0
  405230:	f000 82c3 	beq.w	4057ba <_vfiprintf_r+0x88a>
  405234:	3202      	adds	r2, #2
  405236:	a90c      	add	r1, sp, #48	; 0x30
  405238:	2302      	movs	r3, #2
  40523a:	f1be 0f07 	cmp.w	lr, #7
  40523e:	920f      	str	r2, [sp, #60]	; 0x3c
  405240:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  405244:	e88a 000a 	stmia.w	sl, {r1, r3}
  405248:	f340 8378 	ble.w	40593c <_vfiprintf_r+0xa0c>
  40524c:	2a00      	cmp	r2, #0
  40524e:	f040 840a 	bne.w	405a66 <_vfiprintf_r+0xb36>
  405252:	9b08      	ldr	r3, [sp, #32]
  405254:	2b80      	cmp	r3, #128	; 0x80
  405256:	f04f 0e01 	mov.w	lr, #1
  40525a:	4610      	mov	r0, r2
  40525c:	46da      	mov	sl, fp
  40525e:	f040 82b0 	bne.w	4057c2 <_vfiprintf_r+0x892>
  405262:	9b06      	ldr	r3, [sp, #24]
  405264:	1b5c      	subs	r4, r3, r5
  405266:	2c00      	cmp	r4, #0
  405268:	f340 82ab 	ble.w	4057c2 <_vfiprintf_r+0x892>
  40526c:	2c10      	cmp	r4, #16
  40526e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 405434 <_vfiprintf_r+0x504>
  405272:	f340 850b 	ble.w	405c8c <_vfiprintf_r+0xd5c>
  405276:	46d6      	mov	lr, sl
  405278:	2310      	movs	r3, #16
  40527a:	46c2      	mov	sl, r8
  40527c:	46a8      	mov	r8, r5
  40527e:	464d      	mov	r5, r9
  405280:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405284:	e007      	b.n	405296 <_vfiprintf_r+0x366>
  405286:	f100 0c02 	add.w	ip, r0, #2
  40528a:	f10e 0e08 	add.w	lr, lr, #8
  40528e:	4608      	mov	r0, r1
  405290:	3c10      	subs	r4, #16
  405292:	2c10      	cmp	r4, #16
  405294:	dd13      	ble.n	4052be <_vfiprintf_r+0x38e>
  405296:	1c41      	adds	r1, r0, #1
  405298:	3210      	adds	r2, #16
  40529a:	2907      	cmp	r1, #7
  40529c:	920f      	str	r2, [sp, #60]	; 0x3c
  40529e:	f8ce 5000 	str.w	r5, [lr]
  4052a2:	f8ce 3004 	str.w	r3, [lr, #4]
  4052a6:	910e      	str	r1, [sp, #56]	; 0x38
  4052a8:	dded      	ble.n	405286 <_vfiprintf_r+0x356>
  4052aa:	2a00      	cmp	r2, #0
  4052ac:	f040 8315 	bne.w	4058da <_vfiprintf_r+0x9aa>
  4052b0:	3c10      	subs	r4, #16
  4052b2:	2c10      	cmp	r4, #16
  4052b4:	f04f 0c01 	mov.w	ip, #1
  4052b8:	4610      	mov	r0, r2
  4052ba:	46de      	mov	lr, fp
  4052bc:	dceb      	bgt.n	405296 <_vfiprintf_r+0x366>
  4052be:	46a9      	mov	r9, r5
  4052c0:	4645      	mov	r5, r8
  4052c2:	46d0      	mov	r8, sl
  4052c4:	46f2      	mov	sl, lr
  4052c6:	4422      	add	r2, r4
  4052c8:	f1bc 0f07 	cmp.w	ip, #7
  4052cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4052ce:	f8ca 9000 	str.w	r9, [sl]
  4052d2:	f8ca 4004 	str.w	r4, [sl, #4]
  4052d6:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  4052da:	f300 83d2 	bgt.w	405a82 <_vfiprintf_r+0xb52>
  4052de:	9b01      	ldr	r3, [sp, #4]
  4052e0:	9903      	ldr	r1, [sp, #12]
  4052e2:	1a5c      	subs	r4, r3, r1
  4052e4:	2c00      	cmp	r4, #0
  4052e6:	f10a 0a08 	add.w	sl, sl, #8
  4052ea:	f10c 0e01 	add.w	lr, ip, #1
  4052ee:	4660      	mov	r0, ip
  4052f0:	f300 826d 	bgt.w	4057ce <_vfiprintf_r+0x89e>
  4052f4:	9903      	ldr	r1, [sp, #12]
  4052f6:	f8ca 7000 	str.w	r7, [sl]
  4052fa:	440a      	add	r2, r1
  4052fc:	f1be 0f07 	cmp.w	lr, #7
  405300:	920f      	str	r2, [sp, #60]	; 0x3c
  405302:	f8ca 1004 	str.w	r1, [sl, #4]
  405306:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40530a:	f340 82ce 	ble.w	4058aa <_vfiprintf_r+0x97a>
  40530e:	2a00      	cmp	r2, #0
  405310:	f040 833a 	bne.w	405988 <_vfiprintf_r+0xa58>
  405314:	0770      	lsls	r0, r6, #29
  405316:	920e      	str	r2, [sp, #56]	; 0x38
  405318:	d538      	bpl.n	40538c <_vfiprintf_r+0x45c>
  40531a:	9b06      	ldr	r3, [sp, #24]
  40531c:	1b5c      	subs	r4, r3, r5
  40531e:	2c00      	cmp	r4, #0
  405320:	dd34      	ble.n	40538c <_vfiprintf_r+0x45c>
  405322:	46da      	mov	sl, fp
  405324:	2c10      	cmp	r4, #16
  405326:	f340 84ab 	ble.w	405c80 <_vfiprintf_r+0xd50>
  40532a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 405430 <_vfiprintf_r+0x500>
  40532e:	990e      	ldr	r1, [sp, #56]	; 0x38
  405330:	464f      	mov	r7, r9
  405332:	2610      	movs	r6, #16
  405334:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405338:	e006      	b.n	405348 <_vfiprintf_r+0x418>
  40533a:	1c88      	adds	r0, r1, #2
  40533c:	f10a 0a08 	add.w	sl, sl, #8
  405340:	4619      	mov	r1, r3
  405342:	3c10      	subs	r4, #16
  405344:	2c10      	cmp	r4, #16
  405346:	dd13      	ble.n	405370 <_vfiprintf_r+0x440>
  405348:	1c4b      	adds	r3, r1, #1
  40534a:	3210      	adds	r2, #16
  40534c:	2b07      	cmp	r3, #7
  40534e:	920f      	str	r2, [sp, #60]	; 0x3c
  405350:	f8ca 7000 	str.w	r7, [sl]
  405354:	f8ca 6004 	str.w	r6, [sl, #4]
  405358:	930e      	str	r3, [sp, #56]	; 0x38
  40535a:	ddee      	ble.n	40533a <_vfiprintf_r+0x40a>
  40535c:	2a00      	cmp	r2, #0
  40535e:	f040 828e 	bne.w	40587e <_vfiprintf_r+0x94e>
  405362:	3c10      	subs	r4, #16
  405364:	2c10      	cmp	r4, #16
  405366:	f04f 0001 	mov.w	r0, #1
  40536a:	4611      	mov	r1, r2
  40536c:	46da      	mov	sl, fp
  40536e:	dceb      	bgt.n	405348 <_vfiprintf_r+0x418>
  405370:	46b9      	mov	r9, r7
  405372:	4422      	add	r2, r4
  405374:	2807      	cmp	r0, #7
  405376:	920f      	str	r2, [sp, #60]	; 0x3c
  405378:	f8ca 9000 	str.w	r9, [sl]
  40537c:	f8ca 4004 	str.w	r4, [sl, #4]
  405380:	900e      	str	r0, [sp, #56]	; 0x38
  405382:	f340 829b 	ble.w	4058bc <_vfiprintf_r+0x98c>
  405386:	2a00      	cmp	r2, #0
  405388:	f040 8425 	bne.w	405bd6 <_vfiprintf_r+0xca6>
  40538c:	9b02      	ldr	r3, [sp, #8]
  40538e:	9a06      	ldr	r2, [sp, #24]
  405390:	42aa      	cmp	r2, r5
  405392:	bfac      	ite	ge
  405394:	189b      	addge	r3, r3, r2
  405396:	195b      	addlt	r3, r3, r5
  405398:	9302      	str	r3, [sp, #8]
  40539a:	e299      	b.n	4058d0 <_vfiprintf_r+0x9a0>
  40539c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4053a0:	f898 3000 	ldrb.w	r3, [r8]
  4053a4:	e62b      	b.n	404ffe <_vfiprintf_r+0xce>
  4053a6:	9406      	str	r4, [sp, #24]
  4053a8:	2900      	cmp	r1, #0
  4053aa:	f040 84af 	bne.w	405d0c <_vfiprintf_r+0xddc>
  4053ae:	f046 0610 	orr.w	r6, r6, #16
  4053b2:	06b3      	lsls	r3, r6, #26
  4053b4:	f140 8312 	bpl.w	4059dc <_vfiprintf_r+0xaac>
  4053b8:	9904      	ldr	r1, [sp, #16]
  4053ba:	3107      	adds	r1, #7
  4053bc:	f021 0107 	bic.w	r1, r1, #7
  4053c0:	e9d1 2300 	ldrd	r2, r3, [r1]
  4053c4:	3108      	adds	r1, #8
  4053c6:	9104      	str	r1, [sp, #16]
  4053c8:	4614      	mov	r4, r2
  4053ca:	461d      	mov	r5, r3
  4053cc:	2a00      	cmp	r2, #0
  4053ce:	f173 0300 	sbcs.w	r3, r3, #0
  4053d2:	f2c0 8386 	blt.w	405ae2 <_vfiprintf_r+0xbb2>
  4053d6:	9b01      	ldr	r3, [sp, #4]
  4053d8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4053dc:	2b00      	cmp	r3, #0
  4053de:	f2c0 831a 	blt.w	405a16 <_vfiprintf_r+0xae6>
  4053e2:	ea54 0305 	orrs.w	r3, r4, r5
  4053e6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4053ea:	f000 80ed 	beq.w	4055c8 <_vfiprintf_r+0x698>
  4053ee:	2d00      	cmp	r5, #0
  4053f0:	bf08      	it	eq
  4053f2:	2c0a      	cmpeq	r4, #10
  4053f4:	f0c0 80ed 	bcc.w	4055d2 <_vfiprintf_r+0x6a2>
  4053f8:	465f      	mov	r7, fp
  4053fa:	4620      	mov	r0, r4
  4053fc:	4629      	mov	r1, r5
  4053fe:	220a      	movs	r2, #10
  405400:	2300      	movs	r3, #0
  405402:	f003 fee7 	bl	4091d4 <__aeabi_uldivmod>
  405406:	3230      	adds	r2, #48	; 0x30
  405408:	f807 2d01 	strb.w	r2, [r7, #-1]!
  40540c:	4620      	mov	r0, r4
  40540e:	4629      	mov	r1, r5
  405410:	2300      	movs	r3, #0
  405412:	220a      	movs	r2, #10
  405414:	f003 fede 	bl	4091d4 <__aeabi_uldivmod>
  405418:	4604      	mov	r4, r0
  40541a:	460d      	mov	r5, r1
  40541c:	ea54 0305 	orrs.w	r3, r4, r5
  405420:	d1eb      	bne.n	4053fa <_vfiprintf_r+0x4ca>
  405422:	ebc7 030b 	rsb	r3, r7, fp
  405426:	9303      	str	r3, [sp, #12]
  405428:	e6a2      	b.n	405170 <_vfiprintf_r+0x240>
  40542a:	bf00      	nop
  40542c:	0040964c 	.word	0x0040964c
  405430:	0040968c 	.word	0x0040968c
  405434:	0040967c 	.word	0x0040967c
  405438:	9406      	str	r4, [sp, #24]
  40543a:	2900      	cmp	r1, #0
  40543c:	f040 8462 	bne.w	405d04 <_vfiprintf_r+0xdd4>
  405440:	f046 0610 	orr.w	r6, r6, #16
  405444:	f016 0320 	ands.w	r3, r6, #32
  405448:	f000 82ae 	beq.w	4059a8 <_vfiprintf_r+0xa78>
  40544c:	9b04      	ldr	r3, [sp, #16]
  40544e:	3307      	adds	r3, #7
  405450:	f023 0307 	bic.w	r3, r3, #7
  405454:	f04f 0200 	mov.w	r2, #0
  405458:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40545c:	e9d3 4500 	ldrd	r4, r5, [r3]
  405460:	f103 0208 	add.w	r2, r3, #8
  405464:	9b01      	ldr	r3, [sp, #4]
  405466:	9204      	str	r2, [sp, #16]
  405468:	2b00      	cmp	r3, #0
  40546a:	f2c0 8174 	blt.w	405756 <_vfiprintf_r+0x826>
  40546e:	ea54 0305 	orrs.w	r3, r4, r5
  405472:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405476:	f040 816e 	bne.w	405756 <_vfiprintf_r+0x826>
  40547a:	9b01      	ldr	r3, [sp, #4]
  40547c:	2b00      	cmp	r3, #0
  40547e:	f000 8430 	beq.w	405ce2 <_vfiprintf_r+0xdb2>
  405482:	f04f 0900 	mov.w	r9, #0
  405486:	2400      	movs	r4, #0
  405488:	2500      	movs	r5, #0
  40548a:	465f      	mov	r7, fp
  40548c:	08e2      	lsrs	r2, r4, #3
  40548e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405492:	08e9      	lsrs	r1, r5, #3
  405494:	f004 0307 	and.w	r3, r4, #7
  405498:	460d      	mov	r5, r1
  40549a:	4614      	mov	r4, r2
  40549c:	3330      	adds	r3, #48	; 0x30
  40549e:	ea54 0205 	orrs.w	r2, r4, r5
  4054a2:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4054a6:	d1f1      	bne.n	40548c <_vfiprintf_r+0x55c>
  4054a8:	07f4      	lsls	r4, r6, #31
  4054aa:	d5ba      	bpl.n	405422 <_vfiprintf_r+0x4f2>
  4054ac:	2b30      	cmp	r3, #48	; 0x30
  4054ae:	d0b8      	beq.n	405422 <_vfiprintf_r+0x4f2>
  4054b0:	2230      	movs	r2, #48	; 0x30
  4054b2:	1e7b      	subs	r3, r7, #1
  4054b4:	f807 2c01 	strb.w	r2, [r7, #-1]
  4054b8:	ebc3 020b 	rsb	r2, r3, fp
  4054bc:	9203      	str	r2, [sp, #12]
  4054be:	461f      	mov	r7, r3
  4054c0:	e656      	b.n	405170 <_vfiprintf_r+0x240>
  4054c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4054c6:	2400      	movs	r4, #0
  4054c8:	f818 3b01 	ldrb.w	r3, [r8], #1
  4054cc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4054d0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  4054d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4054d8:	2a09      	cmp	r2, #9
  4054da:	d9f5      	bls.n	4054c8 <_vfiprintf_r+0x598>
  4054dc:	e591      	b.n	405002 <_vfiprintf_r+0xd2>
  4054de:	f898 3000 	ldrb.w	r3, [r8]
  4054e2:	2101      	movs	r1, #1
  4054e4:	202b      	movs	r0, #43	; 0x2b
  4054e6:	e58a      	b.n	404ffe <_vfiprintf_r+0xce>
  4054e8:	f898 3000 	ldrb.w	r3, [r8]
  4054ec:	2b2a      	cmp	r3, #42	; 0x2a
  4054ee:	f108 0501 	add.w	r5, r8, #1
  4054f2:	f000 83dd 	beq.w	405cb0 <_vfiprintf_r+0xd80>
  4054f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4054fa:	2a09      	cmp	r2, #9
  4054fc:	46a8      	mov	r8, r5
  4054fe:	bf98      	it	ls
  405500:	2500      	movls	r5, #0
  405502:	f200 83ce 	bhi.w	405ca2 <_vfiprintf_r+0xd72>
  405506:	f818 3b01 	ldrb.w	r3, [r8], #1
  40550a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40550e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  405512:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405516:	2a09      	cmp	r2, #9
  405518:	d9f5      	bls.n	405506 <_vfiprintf_r+0x5d6>
  40551a:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  40551e:	9201      	str	r2, [sp, #4]
  405520:	e56f      	b.n	405002 <_vfiprintf_r+0xd2>
  405522:	9a04      	ldr	r2, [sp, #16]
  405524:	6814      	ldr	r4, [r2, #0]
  405526:	4613      	mov	r3, r2
  405528:	2c00      	cmp	r4, #0
  40552a:	f103 0304 	add.w	r3, r3, #4
  40552e:	f6ff aded 	blt.w	40510c <_vfiprintf_r+0x1dc>
  405532:	9304      	str	r3, [sp, #16]
  405534:	f898 3000 	ldrb.w	r3, [r8]
  405538:	e561      	b.n	404ffe <_vfiprintf_r+0xce>
  40553a:	9406      	str	r4, [sp, #24]
  40553c:	2900      	cmp	r1, #0
  40553e:	d081      	beq.n	405444 <_vfiprintf_r+0x514>
  405540:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405544:	e77e      	b.n	405444 <_vfiprintf_r+0x514>
  405546:	9a04      	ldr	r2, [sp, #16]
  405548:	9406      	str	r4, [sp, #24]
  40554a:	6817      	ldr	r7, [r2, #0]
  40554c:	f04f 0300 	mov.w	r3, #0
  405550:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405554:	1d14      	adds	r4, r2, #4
  405556:	9b01      	ldr	r3, [sp, #4]
  405558:	2f00      	cmp	r7, #0
  40555a:	f000 8386 	beq.w	405c6a <_vfiprintf_r+0xd3a>
  40555e:	2b00      	cmp	r3, #0
  405560:	f2c0 835f 	blt.w	405c22 <_vfiprintf_r+0xcf2>
  405564:	461a      	mov	r2, r3
  405566:	2100      	movs	r1, #0
  405568:	4638      	mov	r0, r7
  40556a:	f002 f961 	bl	407830 <memchr>
  40556e:	2800      	cmp	r0, #0
  405570:	f000 838f 	beq.w	405c92 <_vfiprintf_r+0xd62>
  405574:	1bc3      	subs	r3, r0, r7
  405576:	9303      	str	r3, [sp, #12]
  405578:	2300      	movs	r3, #0
  40557a:	9404      	str	r4, [sp, #16]
  40557c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  405580:	9301      	str	r3, [sp, #4]
  405582:	e5f5      	b.n	405170 <_vfiprintf_r+0x240>
  405584:	9406      	str	r4, [sp, #24]
  405586:	2900      	cmp	r1, #0
  405588:	f040 83b9 	bne.w	405cfe <_vfiprintf_r+0xdce>
  40558c:	f016 0920 	ands.w	r9, r6, #32
  405590:	d135      	bne.n	4055fe <_vfiprintf_r+0x6ce>
  405592:	f016 0310 	ands.w	r3, r6, #16
  405596:	d103      	bne.n	4055a0 <_vfiprintf_r+0x670>
  405598:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40559c:	f040 832a 	bne.w	405bf4 <_vfiprintf_r+0xcc4>
  4055a0:	9a04      	ldr	r2, [sp, #16]
  4055a2:	4613      	mov	r3, r2
  4055a4:	6814      	ldr	r4, [r2, #0]
  4055a6:	9a01      	ldr	r2, [sp, #4]
  4055a8:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4055ac:	2a00      	cmp	r2, #0
  4055ae:	f103 0304 	add.w	r3, r3, #4
  4055b2:	f04f 0500 	mov.w	r5, #0
  4055b6:	f2c0 8332 	blt.w	405c1e <_vfiprintf_r+0xcee>
  4055ba:	ea54 0205 	orrs.w	r2, r4, r5
  4055be:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4055c2:	9304      	str	r3, [sp, #16]
  4055c4:	f47f af13 	bne.w	4053ee <_vfiprintf_r+0x4be>
  4055c8:	9b01      	ldr	r3, [sp, #4]
  4055ca:	2b00      	cmp	r3, #0
  4055cc:	f43f adcc 	beq.w	405168 <_vfiprintf_r+0x238>
  4055d0:	2400      	movs	r4, #0
  4055d2:	af2a      	add	r7, sp, #168	; 0xa8
  4055d4:	3430      	adds	r4, #48	; 0x30
  4055d6:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4055da:	ebc7 030b 	rsb	r3, r7, fp
  4055de:	9303      	str	r3, [sp, #12]
  4055e0:	e5c6      	b.n	405170 <_vfiprintf_r+0x240>
  4055e2:	f046 0620 	orr.w	r6, r6, #32
  4055e6:	f898 3000 	ldrb.w	r3, [r8]
  4055ea:	e508      	b.n	404ffe <_vfiprintf_r+0xce>
  4055ec:	9406      	str	r4, [sp, #24]
  4055ee:	2900      	cmp	r1, #0
  4055f0:	f040 836e 	bne.w	405cd0 <_vfiprintf_r+0xda0>
  4055f4:	f046 0610 	orr.w	r6, r6, #16
  4055f8:	f016 0920 	ands.w	r9, r6, #32
  4055fc:	d0c9      	beq.n	405592 <_vfiprintf_r+0x662>
  4055fe:	9b04      	ldr	r3, [sp, #16]
  405600:	3307      	adds	r3, #7
  405602:	f023 0307 	bic.w	r3, r3, #7
  405606:	f04f 0200 	mov.w	r2, #0
  40560a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40560e:	e9d3 4500 	ldrd	r4, r5, [r3]
  405612:	f103 0208 	add.w	r2, r3, #8
  405616:	9b01      	ldr	r3, [sp, #4]
  405618:	9204      	str	r2, [sp, #16]
  40561a:	2b00      	cmp	r3, #0
  40561c:	f2c0 81f9 	blt.w	405a12 <_vfiprintf_r+0xae2>
  405620:	ea54 0305 	orrs.w	r3, r4, r5
  405624:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405628:	f04f 0900 	mov.w	r9, #0
  40562c:	f47f aedf 	bne.w	4053ee <_vfiprintf_r+0x4be>
  405630:	e7ca      	b.n	4055c8 <_vfiprintf_r+0x698>
  405632:	9406      	str	r4, [sp, #24]
  405634:	2900      	cmp	r1, #0
  405636:	f040 8351 	bne.w	405cdc <_vfiprintf_r+0xdac>
  40563a:	06b2      	lsls	r2, r6, #26
  40563c:	48ae      	ldr	r0, [pc, #696]	; (4058f8 <_vfiprintf_r+0x9c8>)
  40563e:	d541      	bpl.n	4056c4 <_vfiprintf_r+0x794>
  405640:	9a04      	ldr	r2, [sp, #16]
  405642:	3207      	adds	r2, #7
  405644:	f022 0207 	bic.w	r2, r2, #7
  405648:	e9d2 4500 	ldrd	r4, r5, [r2]
  40564c:	f102 0108 	add.w	r1, r2, #8
  405650:	9104      	str	r1, [sp, #16]
  405652:	f016 0901 	ands.w	r9, r6, #1
  405656:	f000 8177 	beq.w	405948 <_vfiprintf_r+0xa18>
  40565a:	ea54 0205 	orrs.w	r2, r4, r5
  40565e:	f040 8226 	bne.w	405aae <_vfiprintf_r+0xb7e>
  405662:	f04f 0300 	mov.w	r3, #0
  405666:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40566a:	9b01      	ldr	r3, [sp, #4]
  40566c:	2b00      	cmp	r3, #0
  40566e:	f2c0 8196 	blt.w	40599e <_vfiprintf_r+0xa6e>
  405672:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405676:	e572      	b.n	40515e <_vfiprintf_r+0x22e>
  405678:	9a04      	ldr	r2, [sp, #16]
  40567a:	9406      	str	r4, [sp, #24]
  40567c:	6813      	ldr	r3, [r2, #0]
  40567e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  405682:	4613      	mov	r3, r2
  405684:	f04f 0100 	mov.w	r1, #0
  405688:	2501      	movs	r5, #1
  40568a:	3304      	adds	r3, #4
  40568c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  405690:	9304      	str	r3, [sp, #16]
  405692:	9503      	str	r5, [sp, #12]
  405694:	af10      	add	r7, sp, #64	; 0x40
  405696:	2300      	movs	r3, #0
  405698:	9301      	str	r3, [sp, #4]
  40569a:	e573      	b.n	405184 <_vfiprintf_r+0x254>
  40569c:	f898 3000 	ldrb.w	r3, [r8]
  4056a0:	2800      	cmp	r0, #0
  4056a2:	f47f acac 	bne.w	404ffe <_vfiprintf_r+0xce>
  4056a6:	2101      	movs	r1, #1
  4056a8:	2020      	movs	r0, #32
  4056aa:	e4a8      	b.n	404ffe <_vfiprintf_r+0xce>
  4056ac:	f046 0601 	orr.w	r6, r6, #1
  4056b0:	f898 3000 	ldrb.w	r3, [r8]
  4056b4:	e4a3      	b.n	404ffe <_vfiprintf_r+0xce>
  4056b6:	9406      	str	r4, [sp, #24]
  4056b8:	2900      	cmp	r1, #0
  4056ba:	f040 830c 	bne.w	405cd6 <_vfiprintf_r+0xda6>
  4056be:	06b2      	lsls	r2, r6, #26
  4056c0:	488e      	ldr	r0, [pc, #568]	; (4058fc <_vfiprintf_r+0x9cc>)
  4056c2:	d4bd      	bmi.n	405640 <_vfiprintf_r+0x710>
  4056c4:	9904      	ldr	r1, [sp, #16]
  4056c6:	06f7      	lsls	r7, r6, #27
  4056c8:	460a      	mov	r2, r1
  4056ca:	f100 819d 	bmi.w	405a08 <_vfiprintf_r+0xad8>
  4056ce:	0675      	lsls	r5, r6, #25
  4056d0:	f140 819a 	bpl.w	405a08 <_vfiprintf_r+0xad8>
  4056d4:	3204      	adds	r2, #4
  4056d6:	880c      	ldrh	r4, [r1, #0]
  4056d8:	9204      	str	r2, [sp, #16]
  4056da:	2500      	movs	r5, #0
  4056dc:	e7b9      	b.n	405652 <_vfiprintf_r+0x722>
  4056de:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4056e2:	f898 3000 	ldrb.w	r3, [r8]
  4056e6:	e48a      	b.n	404ffe <_vfiprintf_r+0xce>
  4056e8:	f898 3000 	ldrb.w	r3, [r8]
  4056ec:	2b6c      	cmp	r3, #108	; 0x6c
  4056ee:	bf03      	ittte	eq
  4056f0:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  4056f4:	f046 0620 	orreq.w	r6, r6, #32
  4056f8:	f108 0801 	addeq.w	r8, r8, #1
  4056fc:	f046 0610 	orrne.w	r6, r6, #16
  405700:	e47d      	b.n	404ffe <_vfiprintf_r+0xce>
  405702:	2900      	cmp	r1, #0
  405704:	f040 8309 	bne.w	405d1a <_vfiprintf_r+0xdea>
  405708:	06b4      	lsls	r4, r6, #26
  40570a:	f140 821c 	bpl.w	405b46 <_vfiprintf_r+0xc16>
  40570e:	9a04      	ldr	r2, [sp, #16]
  405710:	9902      	ldr	r1, [sp, #8]
  405712:	6813      	ldr	r3, [r2, #0]
  405714:	17cd      	asrs	r5, r1, #31
  405716:	4608      	mov	r0, r1
  405718:	3204      	adds	r2, #4
  40571a:	4629      	mov	r1, r5
  40571c:	9204      	str	r2, [sp, #16]
  40571e:	e9c3 0100 	strd	r0, r1, [r3]
  405722:	e436      	b.n	404f92 <_vfiprintf_r+0x62>
  405724:	9406      	str	r4, [sp, #24]
  405726:	2900      	cmp	r1, #0
  405728:	f43f ae43 	beq.w	4053b2 <_vfiprintf_r+0x482>
  40572c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405730:	e63f      	b.n	4053b2 <_vfiprintf_r+0x482>
  405732:	9406      	str	r4, [sp, #24]
  405734:	2900      	cmp	r1, #0
  405736:	f040 82ed 	bne.w	405d14 <_vfiprintf_r+0xde4>
  40573a:	2b00      	cmp	r3, #0
  40573c:	f000 808f 	beq.w	40585e <_vfiprintf_r+0x92e>
  405740:	2501      	movs	r5, #1
  405742:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  405746:	f04f 0300 	mov.w	r3, #0
  40574a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40574e:	9503      	str	r5, [sp, #12]
  405750:	af10      	add	r7, sp, #64	; 0x40
  405752:	e7a0      	b.n	405696 <_vfiprintf_r+0x766>
  405754:	9304      	str	r3, [sp, #16]
  405756:	f04f 0900 	mov.w	r9, #0
  40575a:	e696      	b.n	40548a <_vfiprintf_r+0x55a>
  40575c:	aa0d      	add	r2, sp, #52	; 0x34
  40575e:	9900      	ldr	r1, [sp, #0]
  405760:	9309      	str	r3, [sp, #36]	; 0x24
  405762:	4648      	mov	r0, r9
  405764:	f7ff fba8 	bl	404eb8 <__sprint_r.part.0>
  405768:	2800      	cmp	r0, #0
  40576a:	d17f      	bne.n	40586c <_vfiprintf_r+0x93c>
  40576c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40576e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405770:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405772:	f100 0e01 	add.w	lr, r0, #1
  405776:	46dc      	mov	ip, fp
  405778:	e529      	b.n	4051ce <_vfiprintf_r+0x29e>
  40577a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40577c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40577e:	f100 0e01 	add.w	lr, r0, #1
  405782:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  405786:	2b00      	cmp	r3, #0
  405788:	f43f ad50 	beq.w	40522c <_vfiprintf_r+0x2fc>
  40578c:	3201      	adds	r2, #1
  40578e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  405792:	2301      	movs	r3, #1
  405794:	f1be 0f07 	cmp.w	lr, #7
  405798:	920f      	str	r2, [sp, #60]	; 0x3c
  40579a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40579e:	e88a 000a 	stmia.w	sl, {r1, r3}
  4057a2:	f340 80bf 	ble.w	405924 <_vfiprintf_r+0x9f4>
  4057a6:	2a00      	cmp	r2, #0
  4057a8:	f040 814e 	bne.w	405a48 <_vfiprintf_r+0xb18>
  4057ac:	9907      	ldr	r1, [sp, #28]
  4057ae:	2900      	cmp	r1, #0
  4057b0:	f040 80be 	bne.w	405930 <_vfiprintf_r+0xa00>
  4057b4:	469e      	mov	lr, r3
  4057b6:	4610      	mov	r0, r2
  4057b8:	46da      	mov	sl, fp
  4057ba:	9b08      	ldr	r3, [sp, #32]
  4057bc:	2b80      	cmp	r3, #128	; 0x80
  4057be:	f43f ad50 	beq.w	405262 <_vfiprintf_r+0x332>
  4057c2:	9b01      	ldr	r3, [sp, #4]
  4057c4:	9903      	ldr	r1, [sp, #12]
  4057c6:	1a5c      	subs	r4, r3, r1
  4057c8:	2c00      	cmp	r4, #0
  4057ca:	f77f ad93 	ble.w	4052f4 <_vfiprintf_r+0x3c4>
  4057ce:	2c10      	cmp	r4, #16
  4057d0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 405900 <_vfiprintf_r+0x9d0>
  4057d4:	dd25      	ble.n	405822 <_vfiprintf_r+0x8f2>
  4057d6:	46d4      	mov	ip, sl
  4057d8:	2310      	movs	r3, #16
  4057da:	46c2      	mov	sl, r8
  4057dc:	46a8      	mov	r8, r5
  4057de:	464d      	mov	r5, r9
  4057e0:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4057e4:	e007      	b.n	4057f6 <_vfiprintf_r+0x8c6>
  4057e6:	f100 0e02 	add.w	lr, r0, #2
  4057ea:	f10c 0c08 	add.w	ip, ip, #8
  4057ee:	4608      	mov	r0, r1
  4057f0:	3c10      	subs	r4, #16
  4057f2:	2c10      	cmp	r4, #16
  4057f4:	dd11      	ble.n	40581a <_vfiprintf_r+0x8ea>
  4057f6:	1c41      	adds	r1, r0, #1
  4057f8:	3210      	adds	r2, #16
  4057fa:	2907      	cmp	r1, #7
  4057fc:	920f      	str	r2, [sp, #60]	; 0x3c
  4057fe:	f8cc 5000 	str.w	r5, [ip]
  405802:	f8cc 3004 	str.w	r3, [ip, #4]
  405806:	910e      	str	r1, [sp, #56]	; 0x38
  405808:	dded      	ble.n	4057e6 <_vfiprintf_r+0x8b6>
  40580a:	b9d2      	cbnz	r2, 405842 <_vfiprintf_r+0x912>
  40580c:	3c10      	subs	r4, #16
  40580e:	2c10      	cmp	r4, #16
  405810:	f04f 0e01 	mov.w	lr, #1
  405814:	4610      	mov	r0, r2
  405816:	46dc      	mov	ip, fp
  405818:	dced      	bgt.n	4057f6 <_vfiprintf_r+0x8c6>
  40581a:	46a9      	mov	r9, r5
  40581c:	4645      	mov	r5, r8
  40581e:	46d0      	mov	r8, sl
  405820:	46e2      	mov	sl, ip
  405822:	4422      	add	r2, r4
  405824:	f1be 0f07 	cmp.w	lr, #7
  405828:	920f      	str	r2, [sp, #60]	; 0x3c
  40582a:	f8ca 9000 	str.w	r9, [sl]
  40582e:	f8ca 4004 	str.w	r4, [sl, #4]
  405832:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  405836:	dc2e      	bgt.n	405896 <_vfiprintf_r+0x966>
  405838:	f10a 0a08 	add.w	sl, sl, #8
  40583c:	f10e 0e01 	add.w	lr, lr, #1
  405840:	e558      	b.n	4052f4 <_vfiprintf_r+0x3c4>
  405842:	aa0d      	add	r2, sp, #52	; 0x34
  405844:	9900      	ldr	r1, [sp, #0]
  405846:	9301      	str	r3, [sp, #4]
  405848:	4648      	mov	r0, r9
  40584a:	f7ff fb35 	bl	404eb8 <__sprint_r.part.0>
  40584e:	b968      	cbnz	r0, 40586c <_vfiprintf_r+0x93c>
  405850:	980e      	ldr	r0, [sp, #56]	; 0x38
  405852:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405854:	9b01      	ldr	r3, [sp, #4]
  405856:	f100 0e01 	add.w	lr, r0, #1
  40585a:	46dc      	mov	ip, fp
  40585c:	e7c8      	b.n	4057f0 <_vfiprintf_r+0x8c0>
  40585e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405860:	b123      	cbz	r3, 40586c <_vfiprintf_r+0x93c>
  405862:	9805      	ldr	r0, [sp, #20]
  405864:	9900      	ldr	r1, [sp, #0]
  405866:	aa0d      	add	r2, sp, #52	; 0x34
  405868:	f7ff fb26 	bl	404eb8 <__sprint_r.part.0>
  40586c:	9b00      	ldr	r3, [sp, #0]
  40586e:	899b      	ldrh	r3, [r3, #12]
  405870:	065a      	lsls	r2, r3, #25
  405872:	f100 818b 	bmi.w	405b8c <_vfiprintf_r+0xc5c>
  405876:	9802      	ldr	r0, [sp, #8]
  405878:	b02b      	add	sp, #172	; 0xac
  40587a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40587e:	aa0d      	add	r2, sp, #52	; 0x34
  405880:	9900      	ldr	r1, [sp, #0]
  405882:	4648      	mov	r0, r9
  405884:	f7ff fb18 	bl	404eb8 <__sprint_r.part.0>
  405888:	2800      	cmp	r0, #0
  40588a:	d1ef      	bne.n	40586c <_vfiprintf_r+0x93c>
  40588c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40588e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405890:	1c48      	adds	r0, r1, #1
  405892:	46da      	mov	sl, fp
  405894:	e555      	b.n	405342 <_vfiprintf_r+0x412>
  405896:	2a00      	cmp	r2, #0
  405898:	f040 80fb 	bne.w	405a92 <_vfiprintf_r+0xb62>
  40589c:	9a03      	ldr	r2, [sp, #12]
  40589e:	921b      	str	r2, [sp, #108]	; 0x6c
  4058a0:	2301      	movs	r3, #1
  4058a2:	920f      	str	r2, [sp, #60]	; 0x3c
  4058a4:	971a      	str	r7, [sp, #104]	; 0x68
  4058a6:	930e      	str	r3, [sp, #56]	; 0x38
  4058a8:	46da      	mov	sl, fp
  4058aa:	f10a 0a08 	add.w	sl, sl, #8
  4058ae:	0771      	lsls	r1, r6, #29
  4058b0:	d504      	bpl.n	4058bc <_vfiprintf_r+0x98c>
  4058b2:	9b06      	ldr	r3, [sp, #24]
  4058b4:	1b5c      	subs	r4, r3, r5
  4058b6:	2c00      	cmp	r4, #0
  4058b8:	f73f ad34 	bgt.w	405324 <_vfiprintf_r+0x3f4>
  4058bc:	9b02      	ldr	r3, [sp, #8]
  4058be:	9906      	ldr	r1, [sp, #24]
  4058c0:	42a9      	cmp	r1, r5
  4058c2:	bfac      	ite	ge
  4058c4:	185b      	addge	r3, r3, r1
  4058c6:	195b      	addlt	r3, r3, r5
  4058c8:	9302      	str	r3, [sp, #8]
  4058ca:	2a00      	cmp	r2, #0
  4058cc:	f040 80b3 	bne.w	405a36 <_vfiprintf_r+0xb06>
  4058d0:	2300      	movs	r3, #0
  4058d2:	930e      	str	r3, [sp, #56]	; 0x38
  4058d4:	46da      	mov	sl, fp
  4058d6:	f7ff bb5c 	b.w	404f92 <_vfiprintf_r+0x62>
  4058da:	aa0d      	add	r2, sp, #52	; 0x34
  4058dc:	9900      	ldr	r1, [sp, #0]
  4058de:	9307      	str	r3, [sp, #28]
  4058e0:	4648      	mov	r0, r9
  4058e2:	f7ff fae9 	bl	404eb8 <__sprint_r.part.0>
  4058e6:	2800      	cmp	r0, #0
  4058e8:	d1c0      	bne.n	40586c <_vfiprintf_r+0x93c>
  4058ea:	980e      	ldr	r0, [sp, #56]	; 0x38
  4058ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4058ee:	9b07      	ldr	r3, [sp, #28]
  4058f0:	f100 0c01 	add.w	ip, r0, #1
  4058f4:	46de      	mov	lr, fp
  4058f6:	e4cb      	b.n	405290 <_vfiprintf_r+0x360>
  4058f8:	00409638 	.word	0x00409638
  4058fc:	0040964c 	.word	0x0040964c
  405900:	0040967c 	.word	0x0040967c
  405904:	2a00      	cmp	r2, #0
  405906:	f040 8133 	bne.w	405b70 <_vfiprintf_r+0xc40>
  40590a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40590e:	2b00      	cmp	r3, #0
  405910:	f000 80f5 	beq.w	405afe <_vfiprintf_r+0xbce>
  405914:	2301      	movs	r3, #1
  405916:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40591a:	461a      	mov	r2, r3
  40591c:	931b      	str	r3, [sp, #108]	; 0x6c
  40591e:	469e      	mov	lr, r3
  405920:	911a      	str	r1, [sp, #104]	; 0x68
  405922:	46da      	mov	sl, fp
  405924:	4670      	mov	r0, lr
  405926:	f10a 0a08 	add.w	sl, sl, #8
  40592a:	f10e 0e01 	add.w	lr, lr, #1
  40592e:	e47d      	b.n	40522c <_vfiprintf_r+0x2fc>
  405930:	a90c      	add	r1, sp, #48	; 0x30
  405932:	2202      	movs	r2, #2
  405934:	469e      	mov	lr, r3
  405936:	911a      	str	r1, [sp, #104]	; 0x68
  405938:	921b      	str	r2, [sp, #108]	; 0x6c
  40593a:	46da      	mov	sl, fp
  40593c:	4670      	mov	r0, lr
  40593e:	f10a 0a08 	add.w	sl, sl, #8
  405942:	f10e 0e01 	add.w	lr, lr, #1
  405946:	e738      	b.n	4057ba <_vfiprintf_r+0x88a>
  405948:	9b01      	ldr	r3, [sp, #4]
  40594a:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40594e:	2b00      	cmp	r3, #0
  405950:	f2c0 812a 	blt.w	405ba8 <_vfiprintf_r+0xc78>
  405954:	ea54 0305 	orrs.w	r3, r4, r5
  405958:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40595c:	f43f abff 	beq.w	40515e <_vfiprintf_r+0x22e>
  405960:	465f      	mov	r7, fp
  405962:	0923      	lsrs	r3, r4, #4
  405964:	f004 010f 	and.w	r1, r4, #15
  405968:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40596c:	092a      	lsrs	r2, r5, #4
  40596e:	461c      	mov	r4, r3
  405970:	4615      	mov	r5, r2
  405972:	5c43      	ldrb	r3, [r0, r1]
  405974:	f807 3d01 	strb.w	r3, [r7, #-1]!
  405978:	ea54 0305 	orrs.w	r3, r4, r5
  40597c:	d1f1      	bne.n	405962 <_vfiprintf_r+0xa32>
  40597e:	ebc7 030b 	rsb	r3, r7, fp
  405982:	9303      	str	r3, [sp, #12]
  405984:	f7ff bbf4 	b.w	405170 <_vfiprintf_r+0x240>
  405988:	aa0d      	add	r2, sp, #52	; 0x34
  40598a:	9900      	ldr	r1, [sp, #0]
  40598c:	9805      	ldr	r0, [sp, #20]
  40598e:	f7ff fa93 	bl	404eb8 <__sprint_r.part.0>
  405992:	2800      	cmp	r0, #0
  405994:	f47f af6a 	bne.w	40586c <_vfiprintf_r+0x93c>
  405998:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40599a:	46da      	mov	sl, fp
  40599c:	e787      	b.n	4058ae <_vfiprintf_r+0x97e>
  40599e:	f04f 0900 	mov.w	r9, #0
  4059a2:	2400      	movs	r4, #0
  4059a4:	2500      	movs	r5, #0
  4059a6:	e7db      	b.n	405960 <_vfiprintf_r+0xa30>
  4059a8:	f016 0210 	ands.w	r2, r6, #16
  4059ac:	f000 80b2 	beq.w	405b14 <_vfiprintf_r+0xbe4>
  4059b0:	9904      	ldr	r1, [sp, #16]
  4059b2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4059b6:	460a      	mov	r2, r1
  4059b8:	680c      	ldr	r4, [r1, #0]
  4059ba:	9901      	ldr	r1, [sp, #4]
  4059bc:	2900      	cmp	r1, #0
  4059be:	f102 0204 	add.w	r2, r2, #4
  4059c2:	f04f 0500 	mov.w	r5, #0
  4059c6:	f2c0 8159 	blt.w	405c7c <_vfiprintf_r+0xd4c>
  4059ca:	ea54 0105 	orrs.w	r1, r4, r5
  4059ce:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4059d2:	9204      	str	r2, [sp, #16]
  4059d4:	f43f ad51 	beq.w	40547a <_vfiprintf_r+0x54a>
  4059d8:	4699      	mov	r9, r3
  4059da:	e556      	b.n	40548a <_vfiprintf_r+0x55a>
  4059dc:	06f7      	lsls	r7, r6, #27
  4059de:	d40a      	bmi.n	4059f6 <_vfiprintf_r+0xac6>
  4059e0:	0675      	lsls	r5, r6, #25
  4059e2:	d508      	bpl.n	4059f6 <_vfiprintf_r+0xac6>
  4059e4:	9904      	ldr	r1, [sp, #16]
  4059e6:	f9b1 4000 	ldrsh.w	r4, [r1]
  4059ea:	3104      	adds	r1, #4
  4059ec:	17e5      	asrs	r5, r4, #31
  4059ee:	4622      	mov	r2, r4
  4059f0:	462b      	mov	r3, r5
  4059f2:	9104      	str	r1, [sp, #16]
  4059f4:	e4ea      	b.n	4053cc <_vfiprintf_r+0x49c>
  4059f6:	9a04      	ldr	r2, [sp, #16]
  4059f8:	6814      	ldr	r4, [r2, #0]
  4059fa:	4613      	mov	r3, r2
  4059fc:	3304      	adds	r3, #4
  4059fe:	17e5      	asrs	r5, r4, #31
  405a00:	9304      	str	r3, [sp, #16]
  405a02:	4622      	mov	r2, r4
  405a04:	462b      	mov	r3, r5
  405a06:	e4e1      	b.n	4053cc <_vfiprintf_r+0x49c>
  405a08:	6814      	ldr	r4, [r2, #0]
  405a0a:	3204      	adds	r2, #4
  405a0c:	9204      	str	r2, [sp, #16]
  405a0e:	2500      	movs	r5, #0
  405a10:	e61f      	b.n	405652 <_vfiprintf_r+0x722>
  405a12:	f04f 0900 	mov.w	r9, #0
  405a16:	ea54 0305 	orrs.w	r3, r4, r5
  405a1a:	f47f ace8 	bne.w	4053ee <_vfiprintf_r+0x4be>
  405a1e:	e5d8      	b.n	4055d2 <_vfiprintf_r+0x6a2>
  405a20:	aa0d      	add	r2, sp, #52	; 0x34
  405a22:	9900      	ldr	r1, [sp, #0]
  405a24:	9805      	ldr	r0, [sp, #20]
  405a26:	f7ff fa47 	bl	404eb8 <__sprint_r.part.0>
  405a2a:	2800      	cmp	r0, #0
  405a2c:	f47f af1e 	bne.w	40586c <_vfiprintf_r+0x93c>
  405a30:	46da      	mov	sl, fp
  405a32:	f7ff bb48 	b.w	4050c6 <_vfiprintf_r+0x196>
  405a36:	aa0d      	add	r2, sp, #52	; 0x34
  405a38:	9900      	ldr	r1, [sp, #0]
  405a3a:	9805      	ldr	r0, [sp, #20]
  405a3c:	f7ff fa3c 	bl	404eb8 <__sprint_r.part.0>
  405a40:	2800      	cmp	r0, #0
  405a42:	f43f af45 	beq.w	4058d0 <_vfiprintf_r+0x9a0>
  405a46:	e711      	b.n	40586c <_vfiprintf_r+0x93c>
  405a48:	aa0d      	add	r2, sp, #52	; 0x34
  405a4a:	9900      	ldr	r1, [sp, #0]
  405a4c:	9805      	ldr	r0, [sp, #20]
  405a4e:	f7ff fa33 	bl	404eb8 <__sprint_r.part.0>
  405a52:	2800      	cmp	r0, #0
  405a54:	f47f af0a 	bne.w	40586c <_vfiprintf_r+0x93c>
  405a58:	980e      	ldr	r0, [sp, #56]	; 0x38
  405a5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405a5c:	f100 0e01 	add.w	lr, r0, #1
  405a60:	46da      	mov	sl, fp
  405a62:	f7ff bbe3 	b.w	40522c <_vfiprintf_r+0x2fc>
  405a66:	aa0d      	add	r2, sp, #52	; 0x34
  405a68:	9900      	ldr	r1, [sp, #0]
  405a6a:	9805      	ldr	r0, [sp, #20]
  405a6c:	f7ff fa24 	bl	404eb8 <__sprint_r.part.0>
  405a70:	2800      	cmp	r0, #0
  405a72:	f47f aefb 	bne.w	40586c <_vfiprintf_r+0x93c>
  405a76:	980e      	ldr	r0, [sp, #56]	; 0x38
  405a78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405a7a:	f100 0e01 	add.w	lr, r0, #1
  405a7e:	46da      	mov	sl, fp
  405a80:	e69b      	b.n	4057ba <_vfiprintf_r+0x88a>
  405a82:	2a00      	cmp	r2, #0
  405a84:	f040 80d8 	bne.w	405c38 <_vfiprintf_r+0xd08>
  405a88:	f04f 0e01 	mov.w	lr, #1
  405a8c:	4610      	mov	r0, r2
  405a8e:	46da      	mov	sl, fp
  405a90:	e697      	b.n	4057c2 <_vfiprintf_r+0x892>
  405a92:	aa0d      	add	r2, sp, #52	; 0x34
  405a94:	9900      	ldr	r1, [sp, #0]
  405a96:	9805      	ldr	r0, [sp, #20]
  405a98:	f7ff fa0e 	bl	404eb8 <__sprint_r.part.0>
  405a9c:	2800      	cmp	r0, #0
  405a9e:	f47f aee5 	bne.w	40586c <_vfiprintf_r+0x93c>
  405aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405aa4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405aa6:	f103 0e01 	add.w	lr, r3, #1
  405aaa:	46da      	mov	sl, fp
  405aac:	e422      	b.n	4052f4 <_vfiprintf_r+0x3c4>
  405aae:	2230      	movs	r2, #48	; 0x30
  405ab0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  405ab4:	9a01      	ldr	r2, [sp, #4]
  405ab6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  405aba:	2a00      	cmp	r2, #0
  405abc:	f04f 0300 	mov.w	r3, #0
  405ac0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405ac4:	f046 0302 	orr.w	r3, r6, #2
  405ac8:	f2c0 80cb 	blt.w	405c62 <_vfiprintf_r+0xd32>
  405acc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405ad0:	f046 0602 	orr.w	r6, r6, #2
  405ad4:	f04f 0900 	mov.w	r9, #0
  405ad8:	e742      	b.n	405960 <_vfiprintf_r+0xa30>
  405ada:	f04f 0900 	mov.w	r9, #0
  405ade:	4890      	ldr	r0, [pc, #576]	; (405d20 <_vfiprintf_r+0xdf0>)
  405ae0:	e73e      	b.n	405960 <_vfiprintf_r+0xa30>
  405ae2:	9b01      	ldr	r3, [sp, #4]
  405ae4:	4264      	negs	r4, r4
  405ae6:	f04f 092d 	mov.w	r9, #45	; 0x2d
  405aea:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405aee:	2b00      	cmp	r3, #0
  405af0:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  405af4:	f6ff ac7b 	blt.w	4053ee <_vfiprintf_r+0x4be>
  405af8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405afc:	e477      	b.n	4053ee <_vfiprintf_r+0x4be>
  405afe:	9b07      	ldr	r3, [sp, #28]
  405b00:	2b00      	cmp	r3, #0
  405b02:	d072      	beq.n	405bea <_vfiprintf_r+0xcba>
  405b04:	ab0c      	add	r3, sp, #48	; 0x30
  405b06:	2202      	movs	r2, #2
  405b08:	931a      	str	r3, [sp, #104]	; 0x68
  405b0a:	921b      	str	r2, [sp, #108]	; 0x6c
  405b0c:	f04f 0e01 	mov.w	lr, #1
  405b10:	46da      	mov	sl, fp
  405b12:	e713      	b.n	40593c <_vfiprintf_r+0xa0c>
  405b14:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  405b18:	d048      	beq.n	405bac <_vfiprintf_r+0xc7c>
  405b1a:	9904      	ldr	r1, [sp, #16]
  405b1c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  405b20:	460b      	mov	r3, r1
  405b22:	880c      	ldrh	r4, [r1, #0]
  405b24:	9901      	ldr	r1, [sp, #4]
  405b26:	2900      	cmp	r1, #0
  405b28:	f103 0304 	add.w	r3, r3, #4
  405b2c:	f04f 0500 	mov.w	r5, #0
  405b30:	f6ff ae10 	blt.w	405754 <_vfiprintf_r+0x824>
  405b34:	ea54 0105 	orrs.w	r1, r4, r5
  405b38:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405b3c:	9304      	str	r3, [sp, #16]
  405b3e:	f43f ac9c 	beq.w	40547a <_vfiprintf_r+0x54a>
  405b42:	4691      	mov	r9, r2
  405b44:	e4a1      	b.n	40548a <_vfiprintf_r+0x55a>
  405b46:	06f0      	lsls	r0, r6, #27
  405b48:	d40a      	bmi.n	405b60 <_vfiprintf_r+0xc30>
  405b4a:	0671      	lsls	r1, r6, #25
  405b4c:	d508      	bpl.n	405b60 <_vfiprintf_r+0xc30>
  405b4e:	9a04      	ldr	r2, [sp, #16]
  405b50:	6813      	ldr	r3, [r2, #0]
  405b52:	3204      	adds	r2, #4
  405b54:	9204      	str	r2, [sp, #16]
  405b56:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  405b5a:	801a      	strh	r2, [r3, #0]
  405b5c:	f7ff ba19 	b.w	404f92 <_vfiprintf_r+0x62>
  405b60:	9a04      	ldr	r2, [sp, #16]
  405b62:	6813      	ldr	r3, [r2, #0]
  405b64:	3204      	adds	r2, #4
  405b66:	9204      	str	r2, [sp, #16]
  405b68:	9a02      	ldr	r2, [sp, #8]
  405b6a:	601a      	str	r2, [r3, #0]
  405b6c:	f7ff ba11 	b.w	404f92 <_vfiprintf_r+0x62>
  405b70:	aa0d      	add	r2, sp, #52	; 0x34
  405b72:	9900      	ldr	r1, [sp, #0]
  405b74:	9805      	ldr	r0, [sp, #20]
  405b76:	f7ff f99f 	bl	404eb8 <__sprint_r.part.0>
  405b7a:	2800      	cmp	r0, #0
  405b7c:	f47f ae76 	bne.w	40586c <_vfiprintf_r+0x93c>
  405b80:	980e      	ldr	r0, [sp, #56]	; 0x38
  405b82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405b84:	f100 0e01 	add.w	lr, r0, #1
  405b88:	46da      	mov	sl, fp
  405b8a:	e5fa      	b.n	405782 <_vfiprintf_r+0x852>
  405b8c:	f04f 30ff 	mov.w	r0, #4294967295
  405b90:	f7ff bab6 	b.w	405100 <_vfiprintf_r+0x1d0>
  405b94:	4862      	ldr	r0, [pc, #392]	; (405d20 <_vfiprintf_r+0xdf0>)
  405b96:	4616      	mov	r6, r2
  405b98:	ea54 0205 	orrs.w	r2, r4, r5
  405b9c:	9304      	str	r3, [sp, #16]
  405b9e:	f04f 0900 	mov.w	r9, #0
  405ba2:	f47f aedd 	bne.w	405960 <_vfiprintf_r+0xa30>
  405ba6:	e6fc      	b.n	4059a2 <_vfiprintf_r+0xa72>
  405ba8:	9b04      	ldr	r3, [sp, #16]
  405baa:	e7f5      	b.n	405b98 <_vfiprintf_r+0xc68>
  405bac:	9a04      	ldr	r2, [sp, #16]
  405bae:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  405bb2:	4613      	mov	r3, r2
  405bb4:	6814      	ldr	r4, [r2, #0]
  405bb6:	9a01      	ldr	r2, [sp, #4]
  405bb8:	2a00      	cmp	r2, #0
  405bba:	f103 0304 	add.w	r3, r3, #4
  405bbe:	f04f 0500 	mov.w	r5, #0
  405bc2:	f6ff adc7 	blt.w	405754 <_vfiprintf_r+0x824>
  405bc6:	ea54 0205 	orrs.w	r2, r4, r5
  405bca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405bce:	9304      	str	r3, [sp, #16]
  405bd0:	f47f ac5b 	bne.w	40548a <_vfiprintf_r+0x55a>
  405bd4:	e451      	b.n	40547a <_vfiprintf_r+0x54a>
  405bd6:	aa0d      	add	r2, sp, #52	; 0x34
  405bd8:	9900      	ldr	r1, [sp, #0]
  405bda:	9805      	ldr	r0, [sp, #20]
  405bdc:	f7ff f96c 	bl	404eb8 <__sprint_r.part.0>
  405be0:	2800      	cmp	r0, #0
  405be2:	f47f ae43 	bne.w	40586c <_vfiprintf_r+0x93c>
  405be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405be8:	e668      	b.n	4058bc <_vfiprintf_r+0x98c>
  405bea:	4610      	mov	r0, r2
  405bec:	f04f 0e01 	mov.w	lr, #1
  405bf0:	46da      	mov	sl, fp
  405bf2:	e5e6      	b.n	4057c2 <_vfiprintf_r+0x892>
  405bf4:	9904      	ldr	r1, [sp, #16]
  405bf6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405bfa:	460a      	mov	r2, r1
  405bfc:	880c      	ldrh	r4, [r1, #0]
  405bfe:	9901      	ldr	r1, [sp, #4]
  405c00:	2900      	cmp	r1, #0
  405c02:	f102 0204 	add.w	r2, r2, #4
  405c06:	f04f 0500 	mov.w	r5, #0
  405c0a:	db4e      	blt.n	405caa <_vfiprintf_r+0xd7a>
  405c0c:	ea54 0105 	orrs.w	r1, r4, r5
  405c10:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405c14:	9204      	str	r2, [sp, #16]
  405c16:	4699      	mov	r9, r3
  405c18:	f47f abe9 	bne.w	4053ee <_vfiprintf_r+0x4be>
  405c1c:	e4d4      	b.n	4055c8 <_vfiprintf_r+0x698>
  405c1e:	9304      	str	r3, [sp, #16]
  405c20:	e6f9      	b.n	405a16 <_vfiprintf_r+0xae6>
  405c22:	4638      	mov	r0, r7
  405c24:	9404      	str	r4, [sp, #16]
  405c26:	f7fd fd8b 	bl	403740 <strlen>
  405c2a:	2300      	movs	r3, #0
  405c2c:	9003      	str	r0, [sp, #12]
  405c2e:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  405c32:	9301      	str	r3, [sp, #4]
  405c34:	f7ff ba9c 	b.w	405170 <_vfiprintf_r+0x240>
  405c38:	aa0d      	add	r2, sp, #52	; 0x34
  405c3a:	9900      	ldr	r1, [sp, #0]
  405c3c:	9805      	ldr	r0, [sp, #20]
  405c3e:	f7ff f93b 	bl	404eb8 <__sprint_r.part.0>
  405c42:	2800      	cmp	r0, #0
  405c44:	f47f ae12 	bne.w	40586c <_vfiprintf_r+0x93c>
  405c48:	980e      	ldr	r0, [sp, #56]	; 0x38
  405c4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405c4c:	f100 0e01 	add.w	lr, r0, #1
  405c50:	46da      	mov	sl, fp
  405c52:	e5b6      	b.n	4057c2 <_vfiprintf_r+0x892>
  405c54:	980e      	ldr	r0, [sp, #56]	; 0x38
  405c56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405c58:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 405d28 <_vfiprintf_r+0xdf8>
  405c5c:	3001      	adds	r0, #1
  405c5e:	f7ff bad2 	b.w	405206 <_vfiprintf_r+0x2d6>
  405c62:	461e      	mov	r6, r3
  405c64:	f04f 0900 	mov.w	r9, #0
  405c68:	e67a      	b.n	405960 <_vfiprintf_r+0xa30>
  405c6a:	2b06      	cmp	r3, #6
  405c6c:	bf28      	it	cs
  405c6e:	2306      	movcs	r3, #6
  405c70:	9303      	str	r3, [sp, #12]
  405c72:	9404      	str	r4, [sp, #16]
  405c74:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  405c78:	4f2a      	ldr	r7, [pc, #168]	; (405d24 <_vfiprintf_r+0xdf4>)
  405c7a:	e50c      	b.n	405696 <_vfiprintf_r+0x766>
  405c7c:	9204      	str	r2, [sp, #16]
  405c7e:	e56a      	b.n	405756 <_vfiprintf_r+0x826>
  405c80:	980e      	ldr	r0, [sp, #56]	; 0x38
  405c82:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 405d28 <_vfiprintf_r+0xdf8>
  405c86:	3001      	adds	r0, #1
  405c88:	f7ff bb73 	b.w	405372 <_vfiprintf_r+0x442>
  405c8c:	46f4      	mov	ip, lr
  405c8e:	f7ff bb1a 	b.w	4052c6 <_vfiprintf_r+0x396>
  405c92:	9b01      	ldr	r3, [sp, #4]
  405c94:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  405c98:	9303      	str	r3, [sp, #12]
  405c9a:	9404      	str	r4, [sp, #16]
  405c9c:	9001      	str	r0, [sp, #4]
  405c9e:	f7ff ba67 	b.w	405170 <_vfiprintf_r+0x240>
  405ca2:	2200      	movs	r2, #0
  405ca4:	9201      	str	r2, [sp, #4]
  405ca6:	f7ff b9ac 	b.w	405002 <_vfiprintf_r+0xd2>
  405caa:	9204      	str	r2, [sp, #16]
  405cac:	4699      	mov	r9, r3
  405cae:	e6b2      	b.n	405a16 <_vfiprintf_r+0xae6>
  405cb0:	9a04      	ldr	r2, [sp, #16]
  405cb2:	6813      	ldr	r3, [r2, #0]
  405cb4:	9301      	str	r3, [sp, #4]
  405cb6:	3204      	adds	r2, #4
  405cb8:	2b00      	cmp	r3, #0
  405cba:	9204      	str	r2, [sp, #16]
  405cbc:	f898 3001 	ldrb.w	r3, [r8, #1]
  405cc0:	46a8      	mov	r8, r5
  405cc2:	f6bf a99c 	bge.w	404ffe <_vfiprintf_r+0xce>
  405cc6:	f04f 32ff 	mov.w	r2, #4294967295
  405cca:	9201      	str	r2, [sp, #4]
  405ccc:	f7ff b997 	b.w	404ffe <_vfiprintf_r+0xce>
  405cd0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405cd4:	e48e      	b.n	4055f4 <_vfiprintf_r+0x6c4>
  405cd6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405cda:	e4f0      	b.n	4056be <_vfiprintf_r+0x78e>
  405cdc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405ce0:	e4ab      	b.n	40563a <_vfiprintf_r+0x70a>
  405ce2:	4699      	mov	r9, r3
  405ce4:	07f3      	lsls	r3, r6, #31
  405ce6:	d505      	bpl.n	405cf4 <_vfiprintf_r+0xdc4>
  405ce8:	af2a      	add	r7, sp, #168	; 0xa8
  405cea:	2330      	movs	r3, #48	; 0x30
  405cec:	f807 3d41 	strb.w	r3, [r7, #-65]!
  405cf0:	f7ff bb97 	b.w	405422 <_vfiprintf_r+0x4f2>
  405cf4:	9b01      	ldr	r3, [sp, #4]
  405cf6:	9303      	str	r3, [sp, #12]
  405cf8:	465f      	mov	r7, fp
  405cfa:	f7ff ba39 	b.w	405170 <_vfiprintf_r+0x240>
  405cfe:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405d02:	e443      	b.n	40558c <_vfiprintf_r+0x65c>
  405d04:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405d08:	f7ff bb9a 	b.w	405440 <_vfiprintf_r+0x510>
  405d0c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405d10:	f7ff bb4d 	b.w	4053ae <_vfiprintf_r+0x47e>
  405d14:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405d18:	e50f      	b.n	40573a <_vfiprintf_r+0x80a>
  405d1a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405d1e:	e4f3      	b.n	405708 <_vfiprintf_r+0x7d8>
  405d20:	0040964c 	.word	0x0040964c
  405d24:	00409660 	.word	0x00409660
  405d28:	0040968c 	.word	0x0040968c

00405d2c <__sbprintf>:
  405d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  405d2e:	460c      	mov	r4, r1
  405d30:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  405d34:	8989      	ldrh	r1, [r1, #12]
  405d36:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405d38:	89e5      	ldrh	r5, [r4, #14]
  405d3a:	9619      	str	r6, [sp, #100]	; 0x64
  405d3c:	f021 0102 	bic.w	r1, r1, #2
  405d40:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405d42:	f8ad 500e 	strh.w	r5, [sp, #14]
  405d46:	2500      	movs	r5, #0
  405d48:	69e7      	ldr	r7, [r4, #28]
  405d4a:	f8ad 100c 	strh.w	r1, [sp, #12]
  405d4e:	9609      	str	r6, [sp, #36]	; 0x24
  405d50:	9506      	str	r5, [sp, #24]
  405d52:	ae1a      	add	r6, sp, #104	; 0x68
  405d54:	f44f 6580 	mov.w	r5, #1024	; 0x400
  405d58:	4669      	mov	r1, sp
  405d5a:	9600      	str	r6, [sp, #0]
  405d5c:	9604      	str	r6, [sp, #16]
  405d5e:	9502      	str	r5, [sp, #8]
  405d60:	9505      	str	r5, [sp, #20]
  405d62:	9707      	str	r7, [sp, #28]
  405d64:	4606      	mov	r6, r0
  405d66:	f7ff f8e3 	bl	404f30 <_vfiprintf_r>
  405d6a:	1e05      	subs	r5, r0, #0
  405d6c:	db07      	blt.n	405d7e <__sbprintf+0x52>
  405d6e:	4630      	mov	r0, r6
  405d70:	4669      	mov	r1, sp
  405d72:	f001 f8e9 	bl	406f48 <_fflush_r>
  405d76:	2800      	cmp	r0, #0
  405d78:	bf18      	it	ne
  405d7a:	f04f 35ff 	movne.w	r5, #4294967295
  405d7e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405d82:	065b      	lsls	r3, r3, #25
  405d84:	d503      	bpl.n	405d8e <__sbprintf+0x62>
  405d86:	89a3      	ldrh	r3, [r4, #12]
  405d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405d8c:	81a3      	strh	r3, [r4, #12]
  405d8e:	4628      	mov	r0, r5
  405d90:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  405d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d96:	bf00      	nop

00405d98 <__swsetup_r>:
  405d98:	b538      	push	{r3, r4, r5, lr}
  405d9a:	4b30      	ldr	r3, [pc, #192]	; (405e5c <__swsetup_r+0xc4>)
  405d9c:	681b      	ldr	r3, [r3, #0]
  405d9e:	4605      	mov	r5, r0
  405da0:	460c      	mov	r4, r1
  405da2:	b113      	cbz	r3, 405daa <__swsetup_r+0x12>
  405da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405da6:	2a00      	cmp	r2, #0
  405da8:	d038      	beq.n	405e1c <__swsetup_r+0x84>
  405daa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405dae:	b293      	uxth	r3, r2
  405db0:	0718      	lsls	r0, r3, #28
  405db2:	d50c      	bpl.n	405dce <__swsetup_r+0x36>
  405db4:	6920      	ldr	r0, [r4, #16]
  405db6:	b1a8      	cbz	r0, 405de4 <__swsetup_r+0x4c>
  405db8:	f013 0201 	ands.w	r2, r3, #1
  405dbc:	d01e      	beq.n	405dfc <__swsetup_r+0x64>
  405dbe:	6963      	ldr	r3, [r4, #20]
  405dc0:	2200      	movs	r2, #0
  405dc2:	425b      	negs	r3, r3
  405dc4:	61a3      	str	r3, [r4, #24]
  405dc6:	60a2      	str	r2, [r4, #8]
  405dc8:	b1f0      	cbz	r0, 405e08 <__swsetup_r+0x70>
  405dca:	2000      	movs	r0, #0
  405dcc:	bd38      	pop	{r3, r4, r5, pc}
  405dce:	06d9      	lsls	r1, r3, #27
  405dd0:	d53c      	bpl.n	405e4c <__swsetup_r+0xb4>
  405dd2:	0758      	lsls	r0, r3, #29
  405dd4:	d426      	bmi.n	405e24 <__swsetup_r+0x8c>
  405dd6:	6920      	ldr	r0, [r4, #16]
  405dd8:	f042 0308 	orr.w	r3, r2, #8
  405ddc:	81a3      	strh	r3, [r4, #12]
  405dde:	b29b      	uxth	r3, r3
  405de0:	2800      	cmp	r0, #0
  405de2:	d1e9      	bne.n	405db8 <__swsetup_r+0x20>
  405de4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405de8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405dec:	d0e4      	beq.n	405db8 <__swsetup_r+0x20>
  405dee:	4628      	mov	r0, r5
  405df0:	4621      	mov	r1, r4
  405df2:	f001 fcd9 	bl	4077a8 <__smakebuf_r>
  405df6:	89a3      	ldrh	r3, [r4, #12]
  405df8:	6920      	ldr	r0, [r4, #16]
  405dfa:	e7dd      	b.n	405db8 <__swsetup_r+0x20>
  405dfc:	0799      	lsls	r1, r3, #30
  405dfe:	bf58      	it	pl
  405e00:	6962      	ldrpl	r2, [r4, #20]
  405e02:	60a2      	str	r2, [r4, #8]
  405e04:	2800      	cmp	r0, #0
  405e06:	d1e0      	bne.n	405dca <__swsetup_r+0x32>
  405e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e0c:	061a      	lsls	r2, r3, #24
  405e0e:	d5dd      	bpl.n	405dcc <__swsetup_r+0x34>
  405e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405e14:	81a3      	strh	r3, [r4, #12]
  405e16:	f04f 30ff 	mov.w	r0, #4294967295
  405e1a:	bd38      	pop	{r3, r4, r5, pc}
  405e1c:	4618      	mov	r0, r3
  405e1e:	f001 f927 	bl	407070 <__sinit>
  405e22:	e7c2      	b.n	405daa <__swsetup_r+0x12>
  405e24:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405e26:	b151      	cbz	r1, 405e3e <__swsetup_r+0xa6>
  405e28:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405e2c:	4299      	cmp	r1, r3
  405e2e:	d004      	beq.n	405e3a <__swsetup_r+0xa2>
  405e30:	4628      	mov	r0, r5
  405e32:	f001 f9e7 	bl	407204 <_free_r>
  405e36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405e3a:	2300      	movs	r3, #0
  405e3c:	6323      	str	r3, [r4, #48]	; 0x30
  405e3e:	2300      	movs	r3, #0
  405e40:	6920      	ldr	r0, [r4, #16]
  405e42:	6063      	str	r3, [r4, #4]
  405e44:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405e48:	6020      	str	r0, [r4, #0]
  405e4a:	e7c5      	b.n	405dd8 <__swsetup_r+0x40>
  405e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405e50:	2309      	movs	r3, #9
  405e52:	602b      	str	r3, [r5, #0]
  405e54:	f04f 30ff 	mov.w	r0, #4294967295
  405e58:	81a2      	strh	r2, [r4, #12]
  405e5a:	bd38      	pop	{r3, r4, r5, pc}
  405e5c:	20400438 	.word	0x20400438

00405e60 <register_fini>:
  405e60:	4b02      	ldr	r3, [pc, #8]	; (405e6c <register_fini+0xc>)
  405e62:	b113      	cbz	r3, 405e6a <register_fini+0xa>
  405e64:	4802      	ldr	r0, [pc, #8]	; (405e70 <register_fini+0x10>)
  405e66:	f000 b805 	b.w	405e74 <atexit>
  405e6a:	4770      	bx	lr
  405e6c:	00000000 	.word	0x00000000
  405e70:	00407085 	.word	0x00407085

00405e74 <atexit>:
  405e74:	2300      	movs	r3, #0
  405e76:	4601      	mov	r1, r0
  405e78:	461a      	mov	r2, r3
  405e7a:	4618      	mov	r0, r3
  405e7c:	f002 bbf2 	b.w	408664 <__register_exitproc>

00405e80 <quorem>:
  405e80:	6902      	ldr	r2, [r0, #16]
  405e82:	690b      	ldr	r3, [r1, #16]
  405e84:	4293      	cmp	r3, r2
  405e86:	f300 808d 	bgt.w	405fa4 <quorem+0x124>
  405e8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e8e:	f103 38ff 	add.w	r8, r3, #4294967295
  405e92:	f101 0714 	add.w	r7, r1, #20
  405e96:	f100 0b14 	add.w	fp, r0, #20
  405e9a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405e9e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405ea2:	ea4f 0488 	mov.w	r4, r8, lsl #2
  405ea6:	b083      	sub	sp, #12
  405ea8:	3201      	adds	r2, #1
  405eaa:	fbb3 f9f2 	udiv	r9, r3, r2
  405eae:	eb0b 0304 	add.w	r3, fp, r4
  405eb2:	9400      	str	r4, [sp, #0]
  405eb4:	eb07 0a04 	add.w	sl, r7, r4
  405eb8:	9301      	str	r3, [sp, #4]
  405eba:	f1b9 0f00 	cmp.w	r9, #0
  405ebe:	d039      	beq.n	405f34 <quorem+0xb4>
  405ec0:	2500      	movs	r5, #0
  405ec2:	46bc      	mov	ip, r7
  405ec4:	46de      	mov	lr, fp
  405ec6:	462b      	mov	r3, r5
  405ec8:	f85c 6b04 	ldr.w	r6, [ip], #4
  405ecc:	f8de 2000 	ldr.w	r2, [lr]
  405ed0:	b2b4      	uxth	r4, r6
  405ed2:	fb09 5504 	mla	r5, r9, r4, r5
  405ed6:	0c36      	lsrs	r6, r6, #16
  405ed8:	0c2c      	lsrs	r4, r5, #16
  405eda:	fb09 4406 	mla	r4, r9, r6, r4
  405ede:	b2ad      	uxth	r5, r5
  405ee0:	1b5b      	subs	r3, r3, r5
  405ee2:	b2a6      	uxth	r6, r4
  405ee4:	fa13 f382 	uxtah	r3, r3, r2
  405ee8:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  405eec:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405ef0:	b29b      	uxth	r3, r3
  405ef2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405ef6:	45e2      	cmp	sl, ip
  405ef8:	f84e 3b04 	str.w	r3, [lr], #4
  405efc:	ea4f 4514 	mov.w	r5, r4, lsr #16
  405f00:	ea4f 4326 	mov.w	r3, r6, asr #16
  405f04:	d2e0      	bcs.n	405ec8 <quorem+0x48>
  405f06:	9b00      	ldr	r3, [sp, #0]
  405f08:	f85b 3003 	ldr.w	r3, [fp, r3]
  405f0c:	b993      	cbnz	r3, 405f34 <quorem+0xb4>
  405f0e:	9c01      	ldr	r4, [sp, #4]
  405f10:	1f23      	subs	r3, r4, #4
  405f12:	459b      	cmp	fp, r3
  405f14:	d20c      	bcs.n	405f30 <quorem+0xb0>
  405f16:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405f1a:	b94b      	cbnz	r3, 405f30 <quorem+0xb0>
  405f1c:	f1a4 0308 	sub.w	r3, r4, #8
  405f20:	e002      	b.n	405f28 <quorem+0xa8>
  405f22:	681a      	ldr	r2, [r3, #0]
  405f24:	3b04      	subs	r3, #4
  405f26:	b91a      	cbnz	r2, 405f30 <quorem+0xb0>
  405f28:	459b      	cmp	fp, r3
  405f2a:	f108 38ff 	add.w	r8, r8, #4294967295
  405f2e:	d3f8      	bcc.n	405f22 <quorem+0xa2>
  405f30:	f8c0 8010 	str.w	r8, [r0, #16]
  405f34:	4604      	mov	r4, r0
  405f36:	f001 ff37 	bl	407da8 <__mcmp>
  405f3a:	2800      	cmp	r0, #0
  405f3c:	db2e      	blt.n	405f9c <quorem+0x11c>
  405f3e:	f109 0901 	add.w	r9, r9, #1
  405f42:	465d      	mov	r5, fp
  405f44:	2300      	movs	r3, #0
  405f46:	f857 1b04 	ldr.w	r1, [r7], #4
  405f4a:	6828      	ldr	r0, [r5, #0]
  405f4c:	b28a      	uxth	r2, r1
  405f4e:	1a9a      	subs	r2, r3, r2
  405f50:	0c09      	lsrs	r1, r1, #16
  405f52:	fa12 f280 	uxtah	r2, r2, r0
  405f56:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  405f5a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405f5e:	b291      	uxth	r1, r2
  405f60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  405f64:	45ba      	cmp	sl, r7
  405f66:	f845 1b04 	str.w	r1, [r5], #4
  405f6a:	ea4f 4323 	mov.w	r3, r3, asr #16
  405f6e:	d2ea      	bcs.n	405f46 <quorem+0xc6>
  405f70:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405f74:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405f78:	b982      	cbnz	r2, 405f9c <quorem+0x11c>
  405f7a:	1f1a      	subs	r2, r3, #4
  405f7c:	4593      	cmp	fp, r2
  405f7e:	d20b      	bcs.n	405f98 <quorem+0x118>
  405f80:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405f84:	b942      	cbnz	r2, 405f98 <quorem+0x118>
  405f86:	3b08      	subs	r3, #8
  405f88:	e002      	b.n	405f90 <quorem+0x110>
  405f8a:	681a      	ldr	r2, [r3, #0]
  405f8c:	3b04      	subs	r3, #4
  405f8e:	b91a      	cbnz	r2, 405f98 <quorem+0x118>
  405f90:	459b      	cmp	fp, r3
  405f92:	f108 38ff 	add.w	r8, r8, #4294967295
  405f96:	d3f8      	bcc.n	405f8a <quorem+0x10a>
  405f98:	f8c4 8010 	str.w	r8, [r4, #16]
  405f9c:	4648      	mov	r0, r9
  405f9e:	b003      	add	sp, #12
  405fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405fa4:	2000      	movs	r0, #0
  405fa6:	4770      	bx	lr

00405fa8 <_dtoa_r>:
  405fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405fac:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405fae:	b097      	sub	sp, #92	; 0x5c
  405fb0:	4681      	mov	r9, r0
  405fb2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  405fb4:	4692      	mov	sl, r2
  405fb6:	469b      	mov	fp, r3
  405fb8:	b149      	cbz	r1, 405fce <_dtoa_r+0x26>
  405fba:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405fbc:	604a      	str	r2, [r1, #4]
  405fbe:	2301      	movs	r3, #1
  405fc0:	4093      	lsls	r3, r2
  405fc2:	608b      	str	r3, [r1, #8]
  405fc4:	f001 fd0e 	bl	4079e4 <_Bfree>
  405fc8:	2300      	movs	r3, #0
  405fca:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  405fce:	f1bb 0f00 	cmp.w	fp, #0
  405fd2:	46d8      	mov	r8, fp
  405fd4:	db33      	blt.n	40603e <_dtoa_r+0x96>
  405fd6:	2300      	movs	r3, #0
  405fd8:	6023      	str	r3, [r4, #0]
  405fda:	4ba5      	ldr	r3, [pc, #660]	; (406270 <_dtoa_r+0x2c8>)
  405fdc:	461a      	mov	r2, r3
  405fde:	ea08 0303 	and.w	r3, r8, r3
  405fe2:	4293      	cmp	r3, r2
  405fe4:	d014      	beq.n	406010 <_dtoa_r+0x68>
  405fe6:	4650      	mov	r0, sl
  405fe8:	4659      	mov	r1, fp
  405fea:	2200      	movs	r2, #0
  405fec:	2300      	movs	r3, #0
  405fee:	f003 f881 	bl	4090f4 <__aeabi_dcmpeq>
  405ff2:	4605      	mov	r5, r0
  405ff4:	b348      	cbz	r0, 40604a <_dtoa_r+0xa2>
  405ff6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  405ff8:	2301      	movs	r3, #1
  405ffa:	6013      	str	r3, [r2, #0]
  405ffc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405ffe:	2b00      	cmp	r3, #0
  406000:	f000 80c5 	beq.w	40618e <_dtoa_r+0x1e6>
  406004:	489b      	ldr	r0, [pc, #620]	; (406274 <_dtoa_r+0x2cc>)
  406006:	6018      	str	r0, [r3, #0]
  406008:	3801      	subs	r0, #1
  40600a:	b017      	add	sp, #92	; 0x5c
  40600c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406010:	9a22      	ldr	r2, [sp, #136]	; 0x88
  406012:	f242 730f 	movw	r3, #9999	; 0x270f
  406016:	6013      	str	r3, [r2, #0]
  406018:	f1ba 0f00 	cmp.w	sl, #0
  40601c:	f000 80a2 	beq.w	406164 <_dtoa_r+0x1bc>
  406020:	4895      	ldr	r0, [pc, #596]	; (406278 <_dtoa_r+0x2d0>)
  406022:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406024:	2b00      	cmp	r3, #0
  406026:	d0f0      	beq.n	40600a <_dtoa_r+0x62>
  406028:	78c3      	ldrb	r3, [r0, #3]
  40602a:	2b00      	cmp	r3, #0
  40602c:	f000 80b1 	beq.w	406192 <_dtoa_r+0x1ea>
  406030:	f100 0308 	add.w	r3, r0, #8
  406034:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406036:	6013      	str	r3, [r2, #0]
  406038:	b017      	add	sp, #92	; 0x5c
  40603a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40603e:	2301      	movs	r3, #1
  406040:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  406044:	6023      	str	r3, [r4, #0]
  406046:	46c3      	mov	fp, r8
  406048:	e7c7      	b.n	405fda <_dtoa_r+0x32>
  40604a:	aa14      	add	r2, sp, #80	; 0x50
  40604c:	ab15      	add	r3, sp, #84	; 0x54
  40604e:	9201      	str	r2, [sp, #4]
  406050:	9300      	str	r3, [sp, #0]
  406052:	4652      	mov	r2, sl
  406054:	465b      	mov	r3, fp
  406056:	4648      	mov	r0, r9
  406058:	f001 ff50 	bl	407efc <__d2b>
  40605c:	ea5f 5418 	movs.w	r4, r8, lsr #20
  406060:	9008      	str	r0, [sp, #32]
  406062:	f040 8088 	bne.w	406176 <_dtoa_r+0x1ce>
  406066:	9d14      	ldr	r5, [sp, #80]	; 0x50
  406068:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40606a:	442c      	add	r4, r5
  40606c:	f204 4332 	addw	r3, r4, #1074	; 0x432
  406070:	2b20      	cmp	r3, #32
  406072:	f340 8291 	ble.w	406598 <_dtoa_r+0x5f0>
  406076:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40607a:	f204 4012 	addw	r0, r4, #1042	; 0x412
  40607e:	fa08 f803 	lsl.w	r8, r8, r3
  406082:	fa2a f000 	lsr.w	r0, sl, r0
  406086:	ea40 0008 	orr.w	r0, r0, r8
  40608a:	f002 fd55 	bl	408b38 <__aeabi_ui2d>
  40608e:	2301      	movs	r3, #1
  406090:	3c01      	subs	r4, #1
  406092:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  406096:	9310      	str	r3, [sp, #64]	; 0x40
  406098:	2200      	movs	r2, #0
  40609a:	4b78      	ldr	r3, [pc, #480]	; (40627c <_dtoa_r+0x2d4>)
  40609c:	f002 fc0e 	bl	4088bc <__aeabi_dsub>
  4060a0:	a36d      	add	r3, pc, #436	; (adr r3, 406258 <_dtoa_r+0x2b0>)
  4060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4060a6:	f002 fdbd 	bl	408c24 <__aeabi_dmul>
  4060aa:	a36d      	add	r3, pc, #436	; (adr r3, 406260 <_dtoa_r+0x2b8>)
  4060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4060b0:	f002 fc06 	bl	4088c0 <__adddf3>
  4060b4:	4606      	mov	r6, r0
  4060b6:	4620      	mov	r0, r4
  4060b8:	460f      	mov	r7, r1
  4060ba:	f002 fd4d 	bl	408b58 <__aeabi_i2d>
  4060be:	a36a      	add	r3, pc, #424	; (adr r3, 406268 <_dtoa_r+0x2c0>)
  4060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4060c4:	f002 fdae 	bl	408c24 <__aeabi_dmul>
  4060c8:	4602      	mov	r2, r0
  4060ca:	460b      	mov	r3, r1
  4060cc:	4630      	mov	r0, r6
  4060ce:	4639      	mov	r1, r7
  4060d0:	f002 fbf6 	bl	4088c0 <__adddf3>
  4060d4:	4606      	mov	r6, r0
  4060d6:	460f      	mov	r7, r1
  4060d8:	f003 f854 	bl	409184 <__aeabi_d2iz>
  4060dc:	2200      	movs	r2, #0
  4060de:	9004      	str	r0, [sp, #16]
  4060e0:	2300      	movs	r3, #0
  4060e2:	4630      	mov	r0, r6
  4060e4:	4639      	mov	r1, r7
  4060e6:	f003 f80f 	bl	409108 <__aeabi_dcmplt>
  4060ea:	2800      	cmp	r0, #0
  4060ec:	f040 8230 	bne.w	406550 <_dtoa_r+0x5a8>
  4060f0:	9e04      	ldr	r6, [sp, #16]
  4060f2:	2e16      	cmp	r6, #22
  4060f4:	f200 8229 	bhi.w	40654a <_dtoa_r+0x5a2>
  4060f8:	4b61      	ldr	r3, [pc, #388]	; (406280 <_dtoa_r+0x2d8>)
  4060fa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4060fe:	e9d3 0100 	ldrd	r0, r1, [r3]
  406102:	4652      	mov	r2, sl
  406104:	465b      	mov	r3, fp
  406106:	f003 f81d 	bl	409144 <__aeabi_dcmpgt>
  40610a:	2800      	cmp	r0, #0
  40610c:	f000 8249 	beq.w	4065a2 <_dtoa_r+0x5fa>
  406110:	1e73      	subs	r3, r6, #1
  406112:	9304      	str	r3, [sp, #16]
  406114:	2300      	movs	r3, #0
  406116:	930c      	str	r3, [sp, #48]	; 0x30
  406118:	1b2c      	subs	r4, r5, r4
  40611a:	1e63      	subs	r3, r4, #1
  40611c:	9302      	str	r3, [sp, #8]
  40611e:	f100 8232 	bmi.w	406586 <_dtoa_r+0x5de>
  406122:	2300      	movs	r3, #0
  406124:	9305      	str	r3, [sp, #20]
  406126:	9b04      	ldr	r3, [sp, #16]
  406128:	2b00      	cmp	r3, #0
  40612a:	f2c0 8223 	blt.w	406574 <_dtoa_r+0x5cc>
  40612e:	9a02      	ldr	r2, [sp, #8]
  406130:	930b      	str	r3, [sp, #44]	; 0x2c
  406132:	4611      	mov	r1, r2
  406134:	4419      	add	r1, r3
  406136:	2300      	movs	r3, #0
  406138:	9102      	str	r1, [sp, #8]
  40613a:	930a      	str	r3, [sp, #40]	; 0x28
  40613c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40613e:	2b09      	cmp	r3, #9
  406140:	d829      	bhi.n	406196 <_dtoa_r+0x1ee>
  406142:	2b05      	cmp	r3, #5
  406144:	f340 8658 	ble.w	406df8 <_dtoa_r+0xe50>
  406148:	3b04      	subs	r3, #4
  40614a:	9320      	str	r3, [sp, #128]	; 0x80
  40614c:	2500      	movs	r5, #0
  40614e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  406150:	3b02      	subs	r3, #2
  406152:	2b03      	cmp	r3, #3
  406154:	f200 8635 	bhi.w	406dc2 <_dtoa_r+0xe1a>
  406158:	e8df f013 	tbh	[pc, r3, lsl #1]
  40615c:	0228032c 	.word	0x0228032c
  406160:	04590337 	.word	0x04590337
  406164:	4b44      	ldr	r3, [pc, #272]	; (406278 <_dtoa_r+0x2d0>)
  406166:	4a47      	ldr	r2, [pc, #284]	; (406284 <_dtoa_r+0x2dc>)
  406168:	f3c8 0013 	ubfx	r0, r8, #0, #20
  40616c:	2800      	cmp	r0, #0
  40616e:	bf14      	ite	ne
  406170:	4618      	movne	r0, r3
  406172:	4610      	moveq	r0, r2
  406174:	e755      	b.n	406022 <_dtoa_r+0x7a>
  406176:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40617a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40617e:	9510      	str	r5, [sp, #64]	; 0x40
  406180:	4650      	mov	r0, sl
  406182:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  406186:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40618a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40618c:	e784      	b.n	406098 <_dtoa_r+0xf0>
  40618e:	483e      	ldr	r0, [pc, #248]	; (406288 <_dtoa_r+0x2e0>)
  406190:	e73b      	b.n	40600a <_dtoa_r+0x62>
  406192:	1cc3      	adds	r3, r0, #3
  406194:	e74e      	b.n	406034 <_dtoa_r+0x8c>
  406196:	2100      	movs	r1, #0
  406198:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40619c:	4648      	mov	r0, r9
  40619e:	9120      	str	r1, [sp, #128]	; 0x80
  4061a0:	f001 fbfa 	bl	407998 <_Balloc>
  4061a4:	f04f 33ff 	mov.w	r3, #4294967295
  4061a8:	9306      	str	r3, [sp, #24]
  4061aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4061ac:	930d      	str	r3, [sp, #52]	; 0x34
  4061ae:	2301      	movs	r3, #1
  4061b0:	9007      	str	r0, [sp, #28]
  4061b2:	9221      	str	r2, [sp, #132]	; 0x84
  4061b4:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4061b8:	9309      	str	r3, [sp, #36]	; 0x24
  4061ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4061bc:	2b00      	cmp	r3, #0
  4061be:	f2c0 80d1 	blt.w	406364 <_dtoa_r+0x3bc>
  4061c2:	9a04      	ldr	r2, [sp, #16]
  4061c4:	2a0e      	cmp	r2, #14
  4061c6:	f300 80cd 	bgt.w	406364 <_dtoa_r+0x3bc>
  4061ca:	4b2d      	ldr	r3, [pc, #180]	; (406280 <_dtoa_r+0x2d8>)
  4061cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4061d0:	e9d3 3400 	ldrd	r3, r4, [r3]
  4061d4:	e9cd 3402 	strd	r3, r4, [sp, #8]
  4061d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4061da:	2b00      	cmp	r3, #0
  4061dc:	f2c0 8300 	blt.w	4067e0 <_dtoa_r+0x838>
  4061e0:	4656      	mov	r6, sl
  4061e2:	465f      	mov	r7, fp
  4061e4:	4650      	mov	r0, sl
  4061e6:	4659      	mov	r1, fp
  4061e8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  4061ec:	4652      	mov	r2, sl
  4061ee:	465b      	mov	r3, fp
  4061f0:	f002 fe42 	bl	408e78 <__aeabi_ddiv>
  4061f4:	f002 ffc6 	bl	409184 <__aeabi_d2iz>
  4061f8:	4604      	mov	r4, r0
  4061fa:	f002 fcad 	bl	408b58 <__aeabi_i2d>
  4061fe:	4652      	mov	r2, sl
  406200:	465b      	mov	r3, fp
  406202:	f002 fd0f 	bl	408c24 <__aeabi_dmul>
  406206:	460b      	mov	r3, r1
  406208:	4602      	mov	r2, r0
  40620a:	4639      	mov	r1, r7
  40620c:	4630      	mov	r0, r6
  40620e:	f002 fb55 	bl	4088bc <__aeabi_dsub>
  406212:	9d07      	ldr	r5, [sp, #28]
  406214:	f104 0330 	add.w	r3, r4, #48	; 0x30
  406218:	702b      	strb	r3, [r5, #0]
  40621a:	9b06      	ldr	r3, [sp, #24]
  40621c:	2b01      	cmp	r3, #1
  40621e:	4606      	mov	r6, r0
  406220:	460f      	mov	r7, r1
  406222:	f105 0501 	add.w	r5, r5, #1
  406226:	d062      	beq.n	4062ee <_dtoa_r+0x346>
  406228:	2200      	movs	r2, #0
  40622a:	4b18      	ldr	r3, [pc, #96]	; (40628c <_dtoa_r+0x2e4>)
  40622c:	f002 fcfa 	bl	408c24 <__aeabi_dmul>
  406230:	2200      	movs	r2, #0
  406232:	2300      	movs	r3, #0
  406234:	4606      	mov	r6, r0
  406236:	460f      	mov	r7, r1
  406238:	f002 ff5c 	bl	4090f4 <__aeabi_dcmpeq>
  40623c:	2800      	cmp	r0, #0
  40623e:	d17e      	bne.n	40633e <_dtoa_r+0x396>
  406240:	f8cd 9014 	str.w	r9, [sp, #20]
  406244:	f8dd a018 	ldr.w	sl, [sp, #24]
  406248:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40624c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  406250:	e029      	b.n	4062a6 <_dtoa_r+0x2fe>
  406252:	bf00      	nop
  406254:	f3af 8000 	nop.w
  406258:	636f4361 	.word	0x636f4361
  40625c:	3fd287a7 	.word	0x3fd287a7
  406260:	8b60c8b3 	.word	0x8b60c8b3
  406264:	3fc68a28 	.word	0x3fc68a28
  406268:	509f79fb 	.word	0x509f79fb
  40626c:	3fd34413 	.word	0x3fd34413
  406270:	7ff00000 	.word	0x7ff00000
  406274:	00409669 	.word	0x00409669
  406278:	004096a8 	.word	0x004096a8
  40627c:	3ff80000 	.word	0x3ff80000
  406280:	004096b8 	.word	0x004096b8
  406284:	0040969c 	.word	0x0040969c
  406288:	00409668 	.word	0x00409668
  40628c:	40240000 	.word	0x40240000
  406290:	f002 fcc8 	bl	408c24 <__aeabi_dmul>
  406294:	2200      	movs	r2, #0
  406296:	2300      	movs	r3, #0
  406298:	4606      	mov	r6, r0
  40629a:	460f      	mov	r7, r1
  40629c:	f002 ff2a 	bl	4090f4 <__aeabi_dcmpeq>
  4062a0:	2800      	cmp	r0, #0
  4062a2:	f040 83b7 	bne.w	406a14 <_dtoa_r+0xa6c>
  4062a6:	4642      	mov	r2, r8
  4062a8:	464b      	mov	r3, r9
  4062aa:	4630      	mov	r0, r6
  4062ac:	4639      	mov	r1, r7
  4062ae:	f002 fde3 	bl	408e78 <__aeabi_ddiv>
  4062b2:	f002 ff67 	bl	409184 <__aeabi_d2iz>
  4062b6:	4604      	mov	r4, r0
  4062b8:	f002 fc4e 	bl	408b58 <__aeabi_i2d>
  4062bc:	4642      	mov	r2, r8
  4062be:	464b      	mov	r3, r9
  4062c0:	f002 fcb0 	bl	408c24 <__aeabi_dmul>
  4062c4:	4602      	mov	r2, r0
  4062c6:	460b      	mov	r3, r1
  4062c8:	4630      	mov	r0, r6
  4062ca:	4639      	mov	r1, r7
  4062cc:	f002 faf6 	bl	4088bc <__aeabi_dsub>
  4062d0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4062d4:	f805 eb01 	strb.w	lr, [r5], #1
  4062d8:	ebcb 0e05 	rsb	lr, fp, r5
  4062dc:	45d6      	cmp	lr, sl
  4062de:	4606      	mov	r6, r0
  4062e0:	460f      	mov	r7, r1
  4062e2:	f04f 0200 	mov.w	r2, #0
  4062e6:	4bb0      	ldr	r3, [pc, #704]	; (4065a8 <_dtoa_r+0x600>)
  4062e8:	d1d2      	bne.n	406290 <_dtoa_r+0x2e8>
  4062ea:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4062ee:	4632      	mov	r2, r6
  4062f0:	463b      	mov	r3, r7
  4062f2:	4630      	mov	r0, r6
  4062f4:	4639      	mov	r1, r7
  4062f6:	f002 fae3 	bl	4088c0 <__adddf3>
  4062fa:	4606      	mov	r6, r0
  4062fc:	460f      	mov	r7, r1
  4062fe:	4602      	mov	r2, r0
  406300:	460b      	mov	r3, r1
  406302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406306:	f002 feff 	bl	409108 <__aeabi_dcmplt>
  40630a:	b940      	cbnz	r0, 40631e <_dtoa_r+0x376>
  40630c:	4632      	mov	r2, r6
  40630e:	463b      	mov	r3, r7
  406310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406314:	f002 feee 	bl	4090f4 <__aeabi_dcmpeq>
  406318:	b188      	cbz	r0, 40633e <_dtoa_r+0x396>
  40631a:	07e3      	lsls	r3, r4, #31
  40631c:	d50f      	bpl.n	40633e <_dtoa_r+0x396>
  40631e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  406322:	9a07      	ldr	r2, [sp, #28]
  406324:	1e6b      	subs	r3, r5, #1
  406326:	e004      	b.n	406332 <_dtoa_r+0x38a>
  406328:	429a      	cmp	r2, r3
  40632a:	f000 842c 	beq.w	406b86 <_dtoa_r+0xbde>
  40632e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406332:	2c39      	cmp	r4, #57	; 0x39
  406334:	f103 0501 	add.w	r5, r3, #1
  406338:	d0f6      	beq.n	406328 <_dtoa_r+0x380>
  40633a:	3401      	adds	r4, #1
  40633c:	701c      	strb	r4, [r3, #0]
  40633e:	9908      	ldr	r1, [sp, #32]
  406340:	4648      	mov	r0, r9
  406342:	f001 fb4f 	bl	4079e4 <_Bfree>
  406346:	2200      	movs	r2, #0
  406348:	9b04      	ldr	r3, [sp, #16]
  40634a:	702a      	strb	r2, [r5, #0]
  40634c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40634e:	3301      	adds	r3, #1
  406350:	6013      	str	r3, [r2, #0]
  406352:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406354:	2b00      	cmp	r3, #0
  406356:	f000 83a7 	beq.w	406aa8 <_dtoa_r+0xb00>
  40635a:	9807      	ldr	r0, [sp, #28]
  40635c:	601d      	str	r5, [r3, #0]
  40635e:	b017      	add	sp, #92	; 0x5c
  406360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406364:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406366:	2a00      	cmp	r2, #0
  406368:	f000 8112 	beq.w	406590 <_dtoa_r+0x5e8>
  40636c:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40636e:	2a01      	cmp	r2, #1
  406370:	f340 8258 	ble.w	406824 <_dtoa_r+0x87c>
  406374:	9b06      	ldr	r3, [sp, #24]
  406376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406378:	1e5f      	subs	r7, r3, #1
  40637a:	42ba      	cmp	r2, r7
  40637c:	f2c0 8397 	blt.w	406aae <_dtoa_r+0xb06>
  406380:	1bd7      	subs	r7, r2, r7
  406382:	9b06      	ldr	r3, [sp, #24]
  406384:	2b00      	cmp	r3, #0
  406386:	f2c0 848a 	blt.w	406c9e <_dtoa_r+0xcf6>
  40638a:	9d05      	ldr	r5, [sp, #20]
  40638c:	9b06      	ldr	r3, [sp, #24]
  40638e:	9a05      	ldr	r2, [sp, #20]
  406390:	441a      	add	r2, r3
  406392:	9205      	str	r2, [sp, #20]
  406394:	9a02      	ldr	r2, [sp, #8]
  406396:	2101      	movs	r1, #1
  406398:	441a      	add	r2, r3
  40639a:	4648      	mov	r0, r9
  40639c:	9202      	str	r2, [sp, #8]
  40639e:	f001 fbb9 	bl	407b14 <__i2b>
  4063a2:	4606      	mov	r6, r0
  4063a4:	b165      	cbz	r5, 4063c0 <_dtoa_r+0x418>
  4063a6:	9902      	ldr	r1, [sp, #8]
  4063a8:	2900      	cmp	r1, #0
  4063aa:	460b      	mov	r3, r1
  4063ac:	dd08      	ble.n	4063c0 <_dtoa_r+0x418>
  4063ae:	42a9      	cmp	r1, r5
  4063b0:	9a05      	ldr	r2, [sp, #20]
  4063b2:	bfa8      	it	ge
  4063b4:	462b      	movge	r3, r5
  4063b6:	1ad2      	subs	r2, r2, r3
  4063b8:	1aed      	subs	r5, r5, r3
  4063ba:	1acb      	subs	r3, r1, r3
  4063bc:	9205      	str	r2, [sp, #20]
  4063be:	9302      	str	r3, [sp, #8]
  4063c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4063c2:	2b00      	cmp	r3, #0
  4063c4:	f340 82fc 	ble.w	4069c0 <_dtoa_r+0xa18>
  4063c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4063ca:	2a00      	cmp	r2, #0
  4063cc:	f000 8201 	beq.w	4067d2 <_dtoa_r+0x82a>
  4063d0:	2f00      	cmp	r7, #0
  4063d2:	f000 81fe 	beq.w	4067d2 <_dtoa_r+0x82a>
  4063d6:	4631      	mov	r1, r6
  4063d8:	463a      	mov	r2, r7
  4063da:	4648      	mov	r0, r9
  4063dc:	f001 fc3c 	bl	407c58 <__pow5mult>
  4063e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4063e4:	4601      	mov	r1, r0
  4063e6:	4642      	mov	r2, r8
  4063e8:	4606      	mov	r6, r0
  4063ea:	4648      	mov	r0, r9
  4063ec:	f001 fb9c 	bl	407b28 <__multiply>
  4063f0:	4641      	mov	r1, r8
  4063f2:	4604      	mov	r4, r0
  4063f4:	4648      	mov	r0, r9
  4063f6:	f001 faf5 	bl	4079e4 <_Bfree>
  4063fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4063fc:	1bdb      	subs	r3, r3, r7
  4063fe:	930a      	str	r3, [sp, #40]	; 0x28
  406400:	f040 81e6 	bne.w	4067d0 <_dtoa_r+0x828>
  406404:	2101      	movs	r1, #1
  406406:	4648      	mov	r0, r9
  406408:	f001 fb84 	bl	407b14 <__i2b>
  40640c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40640e:	4680      	mov	r8, r0
  406410:	2b00      	cmp	r3, #0
  406412:	f000 8219 	beq.w	406848 <_dtoa_r+0x8a0>
  406416:	4601      	mov	r1, r0
  406418:	461a      	mov	r2, r3
  40641a:	4648      	mov	r0, r9
  40641c:	f001 fc1c 	bl	407c58 <__pow5mult>
  406420:	9b20      	ldr	r3, [sp, #128]	; 0x80
  406422:	2b01      	cmp	r3, #1
  406424:	4680      	mov	r8, r0
  406426:	f340 82f8 	ble.w	406a1a <_dtoa_r+0xa72>
  40642a:	2700      	movs	r7, #0
  40642c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406430:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  406434:	6918      	ldr	r0, [r3, #16]
  406436:	f001 fb1f 	bl	407a78 <__hi0bits>
  40643a:	f1c0 0020 	rsb	r0, r0, #32
  40643e:	9a02      	ldr	r2, [sp, #8]
  406440:	4410      	add	r0, r2
  406442:	f010 001f 	ands.w	r0, r0, #31
  406446:	f000 81f6 	beq.w	406836 <_dtoa_r+0x88e>
  40644a:	f1c0 0320 	rsb	r3, r0, #32
  40644e:	2b04      	cmp	r3, #4
  406450:	f340 84ca 	ble.w	406de8 <_dtoa_r+0xe40>
  406454:	9b05      	ldr	r3, [sp, #20]
  406456:	f1c0 001c 	rsb	r0, r0, #28
  40645a:	4403      	add	r3, r0
  40645c:	9305      	str	r3, [sp, #20]
  40645e:	4613      	mov	r3, r2
  406460:	4403      	add	r3, r0
  406462:	4405      	add	r5, r0
  406464:	9302      	str	r3, [sp, #8]
  406466:	9b05      	ldr	r3, [sp, #20]
  406468:	2b00      	cmp	r3, #0
  40646a:	dd05      	ble.n	406478 <_dtoa_r+0x4d0>
  40646c:	4621      	mov	r1, r4
  40646e:	461a      	mov	r2, r3
  406470:	4648      	mov	r0, r9
  406472:	f001 fc41 	bl	407cf8 <__lshift>
  406476:	4604      	mov	r4, r0
  406478:	9b02      	ldr	r3, [sp, #8]
  40647a:	2b00      	cmp	r3, #0
  40647c:	dd05      	ble.n	40648a <_dtoa_r+0x4e2>
  40647e:	4641      	mov	r1, r8
  406480:	461a      	mov	r2, r3
  406482:	4648      	mov	r0, r9
  406484:	f001 fc38 	bl	407cf8 <__lshift>
  406488:	4680      	mov	r8, r0
  40648a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40648c:	2b00      	cmp	r3, #0
  40648e:	f040 827c 	bne.w	40698a <_dtoa_r+0x9e2>
  406492:	9b06      	ldr	r3, [sp, #24]
  406494:	2b00      	cmp	r3, #0
  406496:	f340 8295 	ble.w	4069c4 <_dtoa_r+0xa1c>
  40649a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40649c:	2b00      	cmp	r3, #0
  40649e:	f040 81f5 	bne.w	40688c <_dtoa_r+0x8e4>
  4064a2:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4064a6:	9f06      	ldr	r7, [sp, #24]
  4064a8:	465d      	mov	r5, fp
  4064aa:	e002      	b.n	4064b2 <_dtoa_r+0x50a>
  4064ac:	f001 faa4 	bl	4079f8 <__multadd>
  4064b0:	4604      	mov	r4, r0
  4064b2:	4641      	mov	r1, r8
  4064b4:	4620      	mov	r0, r4
  4064b6:	f7ff fce3 	bl	405e80 <quorem>
  4064ba:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4064be:	f805 ab01 	strb.w	sl, [r5], #1
  4064c2:	ebcb 0305 	rsb	r3, fp, r5
  4064c6:	42bb      	cmp	r3, r7
  4064c8:	f04f 020a 	mov.w	r2, #10
  4064cc:	f04f 0300 	mov.w	r3, #0
  4064d0:	4621      	mov	r1, r4
  4064d2:	4648      	mov	r0, r9
  4064d4:	dbea      	blt.n	4064ac <_dtoa_r+0x504>
  4064d6:	9b07      	ldr	r3, [sp, #28]
  4064d8:	9a06      	ldr	r2, [sp, #24]
  4064da:	2a01      	cmp	r2, #1
  4064dc:	bfac      	ite	ge
  4064de:	189b      	addge	r3, r3, r2
  4064e0:	3301      	addlt	r3, #1
  4064e2:	461d      	mov	r5, r3
  4064e4:	f04f 0b00 	mov.w	fp, #0
  4064e8:	4621      	mov	r1, r4
  4064ea:	2201      	movs	r2, #1
  4064ec:	4648      	mov	r0, r9
  4064ee:	f001 fc03 	bl	407cf8 <__lshift>
  4064f2:	4641      	mov	r1, r8
  4064f4:	9008      	str	r0, [sp, #32]
  4064f6:	f001 fc57 	bl	407da8 <__mcmp>
  4064fa:	2800      	cmp	r0, #0
  4064fc:	f340 830d 	ble.w	406b1a <_dtoa_r+0xb72>
  406500:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406504:	9907      	ldr	r1, [sp, #28]
  406506:	1e6b      	subs	r3, r5, #1
  406508:	e004      	b.n	406514 <_dtoa_r+0x56c>
  40650a:	428b      	cmp	r3, r1
  40650c:	f000 8278 	beq.w	406a00 <_dtoa_r+0xa58>
  406510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406514:	2a39      	cmp	r2, #57	; 0x39
  406516:	f103 0501 	add.w	r5, r3, #1
  40651a:	d0f6      	beq.n	40650a <_dtoa_r+0x562>
  40651c:	3201      	adds	r2, #1
  40651e:	701a      	strb	r2, [r3, #0]
  406520:	4641      	mov	r1, r8
  406522:	4648      	mov	r0, r9
  406524:	f001 fa5e 	bl	4079e4 <_Bfree>
  406528:	2e00      	cmp	r6, #0
  40652a:	f43f af08 	beq.w	40633e <_dtoa_r+0x396>
  40652e:	f1bb 0f00 	cmp.w	fp, #0
  406532:	d005      	beq.n	406540 <_dtoa_r+0x598>
  406534:	45b3      	cmp	fp, r6
  406536:	d003      	beq.n	406540 <_dtoa_r+0x598>
  406538:	4659      	mov	r1, fp
  40653a:	4648      	mov	r0, r9
  40653c:	f001 fa52 	bl	4079e4 <_Bfree>
  406540:	4631      	mov	r1, r6
  406542:	4648      	mov	r0, r9
  406544:	f001 fa4e 	bl	4079e4 <_Bfree>
  406548:	e6f9      	b.n	40633e <_dtoa_r+0x396>
  40654a:	2301      	movs	r3, #1
  40654c:	930c      	str	r3, [sp, #48]	; 0x30
  40654e:	e5e3      	b.n	406118 <_dtoa_r+0x170>
  406550:	f8dd 8010 	ldr.w	r8, [sp, #16]
  406554:	4640      	mov	r0, r8
  406556:	f002 faff 	bl	408b58 <__aeabi_i2d>
  40655a:	4602      	mov	r2, r0
  40655c:	460b      	mov	r3, r1
  40655e:	4630      	mov	r0, r6
  406560:	4639      	mov	r1, r7
  406562:	f002 fdc7 	bl	4090f4 <__aeabi_dcmpeq>
  406566:	2800      	cmp	r0, #0
  406568:	f47f adc2 	bne.w	4060f0 <_dtoa_r+0x148>
  40656c:	f108 33ff 	add.w	r3, r8, #4294967295
  406570:	9304      	str	r3, [sp, #16]
  406572:	e5bd      	b.n	4060f0 <_dtoa_r+0x148>
  406574:	9a05      	ldr	r2, [sp, #20]
  406576:	9b04      	ldr	r3, [sp, #16]
  406578:	1ad2      	subs	r2, r2, r3
  40657a:	425b      	negs	r3, r3
  40657c:	930a      	str	r3, [sp, #40]	; 0x28
  40657e:	2300      	movs	r3, #0
  406580:	9205      	str	r2, [sp, #20]
  406582:	930b      	str	r3, [sp, #44]	; 0x2c
  406584:	e5da      	b.n	40613c <_dtoa_r+0x194>
  406586:	425b      	negs	r3, r3
  406588:	9305      	str	r3, [sp, #20]
  40658a:	2300      	movs	r3, #0
  40658c:	9302      	str	r3, [sp, #8]
  40658e:	e5ca      	b.n	406126 <_dtoa_r+0x17e>
  406590:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406592:	9d05      	ldr	r5, [sp, #20]
  406594:	9e09      	ldr	r6, [sp, #36]	; 0x24
  406596:	e705      	b.n	4063a4 <_dtoa_r+0x3fc>
  406598:	f1c3 0820 	rsb	r8, r3, #32
  40659c:	fa0a f008 	lsl.w	r0, sl, r8
  4065a0:	e573      	b.n	40608a <_dtoa_r+0xe2>
  4065a2:	900c      	str	r0, [sp, #48]	; 0x30
  4065a4:	e5b8      	b.n	406118 <_dtoa_r+0x170>
  4065a6:	bf00      	nop
  4065a8:	40240000 	.word	0x40240000
  4065ac:	2300      	movs	r3, #0
  4065ae:	9309      	str	r3, [sp, #36]	; 0x24
  4065b0:	9b04      	ldr	r3, [sp, #16]
  4065b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
  4065b4:	4413      	add	r3, r2
  4065b6:	930d      	str	r3, [sp, #52]	; 0x34
  4065b8:	3301      	adds	r3, #1
  4065ba:	2b00      	cmp	r3, #0
  4065bc:	9306      	str	r3, [sp, #24]
  4065be:	f340 8283 	ble.w	406ac8 <_dtoa_r+0xb20>
  4065c2:	9c06      	ldr	r4, [sp, #24]
  4065c4:	4626      	mov	r6, r4
  4065c6:	2100      	movs	r1, #0
  4065c8:	2e17      	cmp	r6, #23
  4065ca:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4065ce:	d90b      	bls.n	4065e8 <_dtoa_r+0x640>
  4065d0:	2201      	movs	r2, #1
  4065d2:	2304      	movs	r3, #4
  4065d4:	005b      	lsls	r3, r3, #1
  4065d6:	f103 0014 	add.w	r0, r3, #20
  4065da:	42b0      	cmp	r0, r6
  4065dc:	4611      	mov	r1, r2
  4065de:	f102 0201 	add.w	r2, r2, #1
  4065e2:	d9f7      	bls.n	4065d4 <_dtoa_r+0x62c>
  4065e4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4065e8:	4648      	mov	r0, r9
  4065ea:	f001 f9d5 	bl	407998 <_Balloc>
  4065ee:	2c0e      	cmp	r4, #14
  4065f0:	9007      	str	r0, [sp, #28]
  4065f2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4065f6:	f63f ade0 	bhi.w	4061ba <_dtoa_r+0x212>
  4065fa:	2d00      	cmp	r5, #0
  4065fc:	f43f addd 	beq.w	4061ba <_dtoa_r+0x212>
  406600:	9904      	ldr	r1, [sp, #16]
  406602:	4657      	mov	r7, sl
  406604:	46d8      	mov	r8, fp
  406606:	2900      	cmp	r1, #0
  406608:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  40660c:	f340 8292 	ble.w	406b34 <_dtoa_r+0xb8c>
  406610:	4b91      	ldr	r3, [pc, #580]	; (406858 <_dtoa_r+0x8b0>)
  406612:	f001 020f 	and.w	r2, r1, #15
  406616:	110e      	asrs	r6, r1, #4
  406618:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40661c:	06f0      	lsls	r0, r6, #27
  40661e:	e9d3 4500 	ldrd	r4, r5, [r3]
  406622:	f140 824c 	bpl.w	406abe <_dtoa_r+0xb16>
  406626:	4b8d      	ldr	r3, [pc, #564]	; (40685c <_dtoa_r+0x8b4>)
  406628:	4650      	mov	r0, sl
  40662a:	4659      	mov	r1, fp
  40662c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406630:	f002 fc22 	bl	408e78 <__aeabi_ddiv>
  406634:	f006 060f 	and.w	r6, r6, #15
  406638:	4682      	mov	sl, r0
  40663a:	468b      	mov	fp, r1
  40663c:	f04f 0803 	mov.w	r8, #3
  406640:	b186      	cbz	r6, 406664 <_dtoa_r+0x6bc>
  406642:	4f86      	ldr	r7, [pc, #536]	; (40685c <_dtoa_r+0x8b4>)
  406644:	07f1      	lsls	r1, r6, #31
  406646:	d509      	bpl.n	40665c <_dtoa_r+0x6b4>
  406648:	4620      	mov	r0, r4
  40664a:	4629      	mov	r1, r5
  40664c:	e9d7 2300 	ldrd	r2, r3, [r7]
  406650:	f002 fae8 	bl	408c24 <__aeabi_dmul>
  406654:	f108 0801 	add.w	r8, r8, #1
  406658:	4604      	mov	r4, r0
  40665a:	460d      	mov	r5, r1
  40665c:	1076      	asrs	r6, r6, #1
  40665e:	f107 0708 	add.w	r7, r7, #8
  406662:	d1ef      	bne.n	406644 <_dtoa_r+0x69c>
  406664:	4622      	mov	r2, r4
  406666:	462b      	mov	r3, r5
  406668:	4650      	mov	r0, sl
  40666a:	4659      	mov	r1, fp
  40666c:	f002 fc04 	bl	408e78 <__aeabi_ddiv>
  406670:	4606      	mov	r6, r0
  406672:	460f      	mov	r7, r1
  406674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406676:	b143      	cbz	r3, 40668a <_dtoa_r+0x6e2>
  406678:	2200      	movs	r2, #0
  40667a:	4b79      	ldr	r3, [pc, #484]	; (406860 <_dtoa_r+0x8b8>)
  40667c:	4630      	mov	r0, r6
  40667e:	4639      	mov	r1, r7
  406680:	f002 fd42 	bl	409108 <__aeabi_dcmplt>
  406684:	2800      	cmp	r0, #0
  406686:	f040 8320 	bne.w	406cca <_dtoa_r+0xd22>
  40668a:	4640      	mov	r0, r8
  40668c:	f002 fa64 	bl	408b58 <__aeabi_i2d>
  406690:	4632      	mov	r2, r6
  406692:	463b      	mov	r3, r7
  406694:	f002 fac6 	bl	408c24 <__aeabi_dmul>
  406698:	4b72      	ldr	r3, [pc, #456]	; (406864 <_dtoa_r+0x8bc>)
  40669a:	2200      	movs	r2, #0
  40669c:	f002 f910 	bl	4088c0 <__adddf3>
  4066a0:	9b06      	ldr	r3, [sp, #24]
  4066a2:	4604      	mov	r4, r0
  4066a4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  4066a8:	2b00      	cmp	r3, #0
  4066aa:	f000 81df 	beq.w	406a6c <_dtoa_r+0xac4>
  4066ae:	9b04      	ldr	r3, [sp, #16]
  4066b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4066b4:	9311      	str	r3, [sp, #68]	; 0x44
  4066b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4066b8:	2b00      	cmp	r3, #0
  4066ba:	f000 8297 	beq.w	406bec <_dtoa_r+0xc44>
  4066be:	4b66      	ldr	r3, [pc, #408]	; (406858 <_dtoa_r+0x8b0>)
  4066c0:	4969      	ldr	r1, [pc, #420]	; (406868 <_dtoa_r+0x8c0>)
  4066c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4066c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4066ca:	2000      	movs	r0, #0
  4066cc:	f002 fbd4 	bl	408e78 <__aeabi_ddiv>
  4066d0:	4622      	mov	r2, r4
  4066d2:	462b      	mov	r3, r5
  4066d4:	f002 f8f2 	bl	4088bc <__aeabi_dsub>
  4066d8:	4682      	mov	sl, r0
  4066da:	468b      	mov	fp, r1
  4066dc:	4630      	mov	r0, r6
  4066de:	4639      	mov	r1, r7
  4066e0:	f002 fd50 	bl	409184 <__aeabi_d2iz>
  4066e4:	4604      	mov	r4, r0
  4066e6:	f002 fa37 	bl	408b58 <__aeabi_i2d>
  4066ea:	4602      	mov	r2, r0
  4066ec:	460b      	mov	r3, r1
  4066ee:	4630      	mov	r0, r6
  4066f0:	4639      	mov	r1, r7
  4066f2:	f002 f8e3 	bl	4088bc <__aeabi_dsub>
  4066f6:	3430      	adds	r4, #48	; 0x30
  4066f8:	9d07      	ldr	r5, [sp, #28]
  4066fa:	b2e4      	uxtb	r4, r4
  4066fc:	4606      	mov	r6, r0
  4066fe:	460f      	mov	r7, r1
  406700:	702c      	strb	r4, [r5, #0]
  406702:	4602      	mov	r2, r0
  406704:	460b      	mov	r3, r1
  406706:	4650      	mov	r0, sl
  406708:	4659      	mov	r1, fp
  40670a:	3501      	adds	r5, #1
  40670c:	f002 fd1a 	bl	409144 <__aeabi_dcmpgt>
  406710:	2800      	cmp	r0, #0
  406712:	d14c      	bne.n	4067ae <_dtoa_r+0x806>
  406714:	4632      	mov	r2, r6
  406716:	463b      	mov	r3, r7
  406718:	2000      	movs	r0, #0
  40671a:	4951      	ldr	r1, [pc, #324]	; (406860 <_dtoa_r+0x8b8>)
  40671c:	f002 f8ce 	bl	4088bc <__aeabi_dsub>
  406720:	4602      	mov	r2, r0
  406722:	460b      	mov	r3, r1
  406724:	4650      	mov	r0, sl
  406726:	4659      	mov	r1, fp
  406728:	f002 fd0c 	bl	409144 <__aeabi_dcmpgt>
  40672c:	2800      	cmp	r0, #0
  40672e:	f040 830d 	bne.w	406d4c <_dtoa_r+0xda4>
  406732:	f1b8 0f01 	cmp.w	r8, #1
  406736:	f340 81b3 	ble.w	406aa0 <_dtoa_r+0xaf8>
  40673a:	9b07      	ldr	r3, [sp, #28]
  40673c:	4498      	add	r8, r3
  40673e:	e00d      	b.n	40675c <_dtoa_r+0x7b4>
  406740:	2000      	movs	r0, #0
  406742:	4947      	ldr	r1, [pc, #284]	; (406860 <_dtoa_r+0x8b8>)
  406744:	f002 f8ba 	bl	4088bc <__aeabi_dsub>
  406748:	4652      	mov	r2, sl
  40674a:	465b      	mov	r3, fp
  40674c:	f002 fcdc 	bl	409108 <__aeabi_dcmplt>
  406750:	2800      	cmp	r0, #0
  406752:	f040 82fb 	bne.w	406d4c <_dtoa_r+0xda4>
  406756:	4545      	cmp	r5, r8
  406758:	f000 81a2 	beq.w	406aa0 <_dtoa_r+0xaf8>
  40675c:	4650      	mov	r0, sl
  40675e:	4659      	mov	r1, fp
  406760:	2200      	movs	r2, #0
  406762:	4b42      	ldr	r3, [pc, #264]	; (40686c <_dtoa_r+0x8c4>)
  406764:	f002 fa5e 	bl	408c24 <__aeabi_dmul>
  406768:	2200      	movs	r2, #0
  40676a:	4b40      	ldr	r3, [pc, #256]	; (40686c <_dtoa_r+0x8c4>)
  40676c:	4682      	mov	sl, r0
  40676e:	468b      	mov	fp, r1
  406770:	4630      	mov	r0, r6
  406772:	4639      	mov	r1, r7
  406774:	f002 fa56 	bl	408c24 <__aeabi_dmul>
  406778:	460f      	mov	r7, r1
  40677a:	4606      	mov	r6, r0
  40677c:	f002 fd02 	bl	409184 <__aeabi_d2iz>
  406780:	4604      	mov	r4, r0
  406782:	f002 f9e9 	bl	408b58 <__aeabi_i2d>
  406786:	4602      	mov	r2, r0
  406788:	460b      	mov	r3, r1
  40678a:	4630      	mov	r0, r6
  40678c:	4639      	mov	r1, r7
  40678e:	f002 f895 	bl	4088bc <__aeabi_dsub>
  406792:	3430      	adds	r4, #48	; 0x30
  406794:	b2e4      	uxtb	r4, r4
  406796:	4652      	mov	r2, sl
  406798:	465b      	mov	r3, fp
  40679a:	f805 4b01 	strb.w	r4, [r5], #1
  40679e:	4606      	mov	r6, r0
  4067a0:	460f      	mov	r7, r1
  4067a2:	f002 fcb1 	bl	409108 <__aeabi_dcmplt>
  4067a6:	4632      	mov	r2, r6
  4067a8:	463b      	mov	r3, r7
  4067aa:	2800      	cmp	r0, #0
  4067ac:	d0c8      	beq.n	406740 <_dtoa_r+0x798>
  4067ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4067b0:	9304      	str	r3, [sp, #16]
  4067b2:	e5c4      	b.n	40633e <_dtoa_r+0x396>
  4067b4:	2300      	movs	r3, #0
  4067b6:	9309      	str	r3, [sp, #36]	; 0x24
  4067b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4067ba:	2b00      	cmp	r3, #0
  4067bc:	f340 8189 	ble.w	406ad2 <_dtoa_r+0xb2a>
  4067c0:	461e      	mov	r6, r3
  4067c2:	461c      	mov	r4, r3
  4067c4:	930d      	str	r3, [sp, #52]	; 0x34
  4067c6:	9306      	str	r3, [sp, #24]
  4067c8:	e6fd      	b.n	4065c6 <_dtoa_r+0x61e>
  4067ca:	2301      	movs	r3, #1
  4067cc:	9309      	str	r3, [sp, #36]	; 0x24
  4067ce:	e7f3      	b.n	4067b8 <_dtoa_r+0x810>
  4067d0:	9408      	str	r4, [sp, #32]
  4067d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4067d4:	9908      	ldr	r1, [sp, #32]
  4067d6:	4648      	mov	r0, r9
  4067d8:	f001 fa3e 	bl	407c58 <__pow5mult>
  4067dc:	4604      	mov	r4, r0
  4067de:	e611      	b.n	406404 <_dtoa_r+0x45c>
  4067e0:	9b06      	ldr	r3, [sp, #24]
  4067e2:	2b00      	cmp	r3, #0
  4067e4:	f73f acfc 	bgt.w	4061e0 <_dtoa_r+0x238>
  4067e8:	f040 82da 	bne.w	406da0 <_dtoa_r+0xdf8>
  4067ec:	2200      	movs	r2, #0
  4067ee:	4b20      	ldr	r3, [pc, #128]	; (406870 <_dtoa_r+0x8c8>)
  4067f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4067f4:	f002 fa16 	bl	408c24 <__aeabi_dmul>
  4067f8:	4652      	mov	r2, sl
  4067fa:	465b      	mov	r3, fp
  4067fc:	f002 fc98 	bl	409130 <__aeabi_dcmpge>
  406800:	f8dd 8018 	ldr.w	r8, [sp, #24]
  406804:	4646      	mov	r6, r8
  406806:	2800      	cmp	r0, #0
  406808:	f000 80f2 	beq.w	4069f0 <_dtoa_r+0xa48>
  40680c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40680e:	9d07      	ldr	r5, [sp, #28]
  406810:	43db      	mvns	r3, r3
  406812:	9304      	str	r3, [sp, #16]
  406814:	4641      	mov	r1, r8
  406816:	4648      	mov	r0, r9
  406818:	f001 f8e4 	bl	4079e4 <_Bfree>
  40681c:	2e00      	cmp	r6, #0
  40681e:	f43f ad8e 	beq.w	40633e <_dtoa_r+0x396>
  406822:	e68d      	b.n	406540 <_dtoa_r+0x598>
  406824:	9a10      	ldr	r2, [sp, #64]	; 0x40
  406826:	2a00      	cmp	r2, #0
  406828:	f000 8241 	beq.w	406cae <_dtoa_r+0xd06>
  40682c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406830:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406832:	9d05      	ldr	r5, [sp, #20]
  406834:	e5ab      	b.n	40638e <_dtoa_r+0x3e6>
  406836:	201c      	movs	r0, #28
  406838:	9b05      	ldr	r3, [sp, #20]
  40683a:	4403      	add	r3, r0
  40683c:	9305      	str	r3, [sp, #20]
  40683e:	9b02      	ldr	r3, [sp, #8]
  406840:	4403      	add	r3, r0
  406842:	4405      	add	r5, r0
  406844:	9302      	str	r3, [sp, #8]
  406846:	e60e      	b.n	406466 <_dtoa_r+0x4be>
  406848:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40684a:	2b01      	cmp	r3, #1
  40684c:	f340 8282 	ble.w	406d54 <_dtoa_r+0xdac>
  406850:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  406852:	2001      	movs	r0, #1
  406854:	e5f3      	b.n	40643e <_dtoa_r+0x496>
  406856:	bf00      	nop
  406858:	004096b8 	.word	0x004096b8
  40685c:	00409780 	.word	0x00409780
  406860:	3ff00000 	.word	0x3ff00000
  406864:	401c0000 	.word	0x401c0000
  406868:	3fe00000 	.word	0x3fe00000
  40686c:	40240000 	.word	0x40240000
  406870:	40140000 	.word	0x40140000
  406874:	4631      	mov	r1, r6
  406876:	2300      	movs	r3, #0
  406878:	220a      	movs	r2, #10
  40687a:	4648      	mov	r0, r9
  40687c:	f001 f8bc 	bl	4079f8 <__multadd>
  406880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406882:	2b00      	cmp	r3, #0
  406884:	4606      	mov	r6, r0
  406886:	f340 8297 	ble.w	406db8 <_dtoa_r+0xe10>
  40688a:	9306      	str	r3, [sp, #24]
  40688c:	2d00      	cmp	r5, #0
  40688e:	dd05      	ble.n	40689c <_dtoa_r+0x8f4>
  406890:	4631      	mov	r1, r6
  406892:	462a      	mov	r2, r5
  406894:	4648      	mov	r0, r9
  406896:	f001 fa2f 	bl	407cf8 <__lshift>
  40689a:	4606      	mov	r6, r0
  40689c:	2f00      	cmp	r7, #0
  40689e:	f040 817c 	bne.w	406b9a <_dtoa_r+0xbf2>
  4068a2:	9605      	str	r6, [sp, #20]
  4068a4:	9b06      	ldr	r3, [sp, #24]
  4068a6:	9a07      	ldr	r2, [sp, #28]
  4068a8:	f8dd b014 	ldr.w	fp, [sp, #20]
  4068ac:	3b01      	subs	r3, #1
  4068ae:	18d3      	adds	r3, r2, r3
  4068b0:	9308      	str	r3, [sp, #32]
  4068b2:	f00a 0301 	and.w	r3, sl, #1
  4068b6:	9309      	str	r3, [sp, #36]	; 0x24
  4068b8:	4617      	mov	r7, r2
  4068ba:	46c2      	mov	sl, r8
  4068bc:	4651      	mov	r1, sl
  4068be:	4620      	mov	r0, r4
  4068c0:	f7ff fade 	bl	405e80 <quorem>
  4068c4:	4631      	mov	r1, r6
  4068c6:	4605      	mov	r5, r0
  4068c8:	4620      	mov	r0, r4
  4068ca:	f001 fa6d 	bl	407da8 <__mcmp>
  4068ce:	465a      	mov	r2, fp
  4068d0:	9002      	str	r0, [sp, #8]
  4068d2:	4651      	mov	r1, sl
  4068d4:	4648      	mov	r0, r9
  4068d6:	f001 fa87 	bl	407de8 <__mdiff>
  4068da:	68c2      	ldr	r2, [r0, #12]
  4068dc:	4680      	mov	r8, r0
  4068de:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4068e2:	2a00      	cmp	r2, #0
  4068e4:	d149      	bne.n	40697a <_dtoa_r+0x9d2>
  4068e6:	4601      	mov	r1, r0
  4068e8:	4620      	mov	r0, r4
  4068ea:	9306      	str	r3, [sp, #24]
  4068ec:	f001 fa5c 	bl	407da8 <__mcmp>
  4068f0:	4641      	mov	r1, r8
  4068f2:	9005      	str	r0, [sp, #20]
  4068f4:	4648      	mov	r0, r9
  4068f6:	f001 f875 	bl	4079e4 <_Bfree>
  4068fa:	9a05      	ldr	r2, [sp, #20]
  4068fc:	9b06      	ldr	r3, [sp, #24]
  4068fe:	b92a      	cbnz	r2, 40690c <_dtoa_r+0x964>
  406900:	9920      	ldr	r1, [sp, #128]	; 0x80
  406902:	b919      	cbnz	r1, 40690c <_dtoa_r+0x964>
  406904:	9909      	ldr	r1, [sp, #36]	; 0x24
  406906:	2900      	cmp	r1, #0
  406908:	f000 8236 	beq.w	406d78 <_dtoa_r+0xdd0>
  40690c:	9902      	ldr	r1, [sp, #8]
  40690e:	2900      	cmp	r1, #0
  406910:	f2c0 80e4 	blt.w	406adc <_dtoa_r+0xb34>
  406914:	d105      	bne.n	406922 <_dtoa_r+0x97a>
  406916:	9920      	ldr	r1, [sp, #128]	; 0x80
  406918:	b919      	cbnz	r1, 406922 <_dtoa_r+0x97a>
  40691a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40691c:	2900      	cmp	r1, #0
  40691e:	f000 80dd 	beq.w	406adc <_dtoa_r+0xb34>
  406922:	2a00      	cmp	r2, #0
  406924:	f300 814d 	bgt.w	406bc2 <_dtoa_r+0xc1a>
  406928:	9a08      	ldr	r2, [sp, #32]
  40692a:	703b      	strb	r3, [r7, #0]
  40692c:	f107 0801 	add.w	r8, r7, #1
  406930:	4297      	cmp	r7, r2
  406932:	4645      	mov	r5, r8
  406934:	f000 8154 	beq.w	406be0 <_dtoa_r+0xc38>
  406938:	4621      	mov	r1, r4
  40693a:	2300      	movs	r3, #0
  40693c:	220a      	movs	r2, #10
  40693e:	4648      	mov	r0, r9
  406940:	f001 f85a 	bl	4079f8 <__multadd>
  406944:	455e      	cmp	r6, fp
  406946:	4604      	mov	r4, r0
  406948:	4631      	mov	r1, r6
  40694a:	f04f 0300 	mov.w	r3, #0
  40694e:	f04f 020a 	mov.w	r2, #10
  406952:	4648      	mov	r0, r9
  406954:	d00b      	beq.n	40696e <_dtoa_r+0x9c6>
  406956:	f001 f84f 	bl	4079f8 <__multadd>
  40695a:	4659      	mov	r1, fp
  40695c:	4606      	mov	r6, r0
  40695e:	2300      	movs	r3, #0
  406960:	220a      	movs	r2, #10
  406962:	4648      	mov	r0, r9
  406964:	f001 f848 	bl	4079f8 <__multadd>
  406968:	4647      	mov	r7, r8
  40696a:	4683      	mov	fp, r0
  40696c:	e7a6      	b.n	4068bc <_dtoa_r+0x914>
  40696e:	f001 f843 	bl	4079f8 <__multadd>
  406972:	4647      	mov	r7, r8
  406974:	4606      	mov	r6, r0
  406976:	4683      	mov	fp, r0
  406978:	e7a0      	b.n	4068bc <_dtoa_r+0x914>
  40697a:	4601      	mov	r1, r0
  40697c:	4648      	mov	r0, r9
  40697e:	9305      	str	r3, [sp, #20]
  406980:	f001 f830 	bl	4079e4 <_Bfree>
  406984:	2201      	movs	r2, #1
  406986:	9b05      	ldr	r3, [sp, #20]
  406988:	e7c0      	b.n	40690c <_dtoa_r+0x964>
  40698a:	4641      	mov	r1, r8
  40698c:	4620      	mov	r0, r4
  40698e:	f001 fa0b 	bl	407da8 <__mcmp>
  406992:	2800      	cmp	r0, #0
  406994:	f6bf ad7d 	bge.w	406492 <_dtoa_r+0x4ea>
  406998:	4621      	mov	r1, r4
  40699a:	9c04      	ldr	r4, [sp, #16]
  40699c:	2300      	movs	r3, #0
  40699e:	3c01      	subs	r4, #1
  4069a0:	220a      	movs	r2, #10
  4069a2:	4648      	mov	r0, r9
  4069a4:	9404      	str	r4, [sp, #16]
  4069a6:	f001 f827 	bl	4079f8 <__multadd>
  4069aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4069ac:	4604      	mov	r4, r0
  4069ae:	2b00      	cmp	r3, #0
  4069b0:	f47f af60 	bne.w	406874 <_dtoa_r+0x8cc>
  4069b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4069b6:	2b00      	cmp	r3, #0
  4069b8:	f340 81f6 	ble.w	406da8 <_dtoa_r+0xe00>
  4069bc:	9306      	str	r3, [sp, #24]
  4069be:	e570      	b.n	4064a2 <_dtoa_r+0x4fa>
  4069c0:	9c08      	ldr	r4, [sp, #32]
  4069c2:	e51f      	b.n	406404 <_dtoa_r+0x45c>
  4069c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4069c6:	2b02      	cmp	r3, #2
  4069c8:	f77f ad67 	ble.w	40649a <_dtoa_r+0x4f2>
  4069cc:	9b06      	ldr	r3, [sp, #24]
  4069ce:	2b00      	cmp	r3, #0
  4069d0:	f040 8179 	bne.w	406cc6 <_dtoa_r+0xd1e>
  4069d4:	4641      	mov	r1, r8
  4069d6:	2205      	movs	r2, #5
  4069d8:	4648      	mov	r0, r9
  4069da:	f001 f80d 	bl	4079f8 <__multadd>
  4069de:	4601      	mov	r1, r0
  4069e0:	4680      	mov	r8, r0
  4069e2:	4620      	mov	r0, r4
  4069e4:	f001 f9e0 	bl	407da8 <__mcmp>
  4069e8:	2800      	cmp	r0, #0
  4069ea:	9408      	str	r4, [sp, #32]
  4069ec:	f77f af0e 	ble.w	40680c <_dtoa_r+0x864>
  4069f0:	9a04      	ldr	r2, [sp, #16]
  4069f2:	9907      	ldr	r1, [sp, #28]
  4069f4:	2331      	movs	r3, #49	; 0x31
  4069f6:	3201      	adds	r2, #1
  4069f8:	9204      	str	r2, [sp, #16]
  4069fa:	700b      	strb	r3, [r1, #0]
  4069fc:	1c4d      	adds	r5, r1, #1
  4069fe:	e709      	b.n	406814 <_dtoa_r+0x86c>
  406a00:	9a04      	ldr	r2, [sp, #16]
  406a02:	3201      	adds	r2, #1
  406a04:	9204      	str	r2, [sp, #16]
  406a06:	9a07      	ldr	r2, [sp, #28]
  406a08:	2331      	movs	r3, #49	; 0x31
  406a0a:	7013      	strb	r3, [r2, #0]
  406a0c:	e588      	b.n	406520 <_dtoa_r+0x578>
  406a0e:	2301      	movs	r3, #1
  406a10:	9309      	str	r3, [sp, #36]	; 0x24
  406a12:	e5cd      	b.n	4065b0 <_dtoa_r+0x608>
  406a14:	f8dd 9014 	ldr.w	r9, [sp, #20]
  406a18:	e491      	b.n	40633e <_dtoa_r+0x396>
  406a1a:	f1ba 0f00 	cmp.w	sl, #0
  406a1e:	f47f ad04 	bne.w	40642a <_dtoa_r+0x482>
  406a22:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406a26:	2b00      	cmp	r3, #0
  406a28:	f040 813f 	bne.w	406caa <_dtoa_r+0xd02>
  406a2c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406a30:	0d3f      	lsrs	r7, r7, #20
  406a32:	053f      	lsls	r7, r7, #20
  406a34:	b137      	cbz	r7, 406a44 <_dtoa_r+0xa9c>
  406a36:	9b05      	ldr	r3, [sp, #20]
  406a38:	3301      	adds	r3, #1
  406a3a:	9305      	str	r3, [sp, #20]
  406a3c:	9b02      	ldr	r3, [sp, #8]
  406a3e:	3301      	adds	r3, #1
  406a40:	9302      	str	r3, [sp, #8]
  406a42:	2701      	movs	r7, #1
  406a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406a46:	2001      	movs	r0, #1
  406a48:	2b00      	cmp	r3, #0
  406a4a:	f43f acf8 	beq.w	40643e <_dtoa_r+0x496>
  406a4e:	e4ed      	b.n	40642c <_dtoa_r+0x484>
  406a50:	4640      	mov	r0, r8
  406a52:	f002 f881 	bl	408b58 <__aeabi_i2d>
  406a56:	4632      	mov	r2, r6
  406a58:	463b      	mov	r3, r7
  406a5a:	f002 f8e3 	bl	408c24 <__aeabi_dmul>
  406a5e:	2200      	movs	r2, #0
  406a60:	4bbf      	ldr	r3, [pc, #764]	; (406d60 <_dtoa_r+0xdb8>)
  406a62:	f001 ff2d 	bl	4088c0 <__adddf3>
  406a66:	4604      	mov	r4, r0
  406a68:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  406a6c:	4630      	mov	r0, r6
  406a6e:	4639      	mov	r1, r7
  406a70:	2200      	movs	r2, #0
  406a72:	4bbc      	ldr	r3, [pc, #752]	; (406d64 <_dtoa_r+0xdbc>)
  406a74:	f001 ff22 	bl	4088bc <__aeabi_dsub>
  406a78:	4622      	mov	r2, r4
  406a7a:	462b      	mov	r3, r5
  406a7c:	4606      	mov	r6, r0
  406a7e:	460f      	mov	r7, r1
  406a80:	f002 fb60 	bl	409144 <__aeabi_dcmpgt>
  406a84:	4680      	mov	r8, r0
  406a86:	2800      	cmp	r0, #0
  406a88:	f040 8105 	bne.w	406c96 <_dtoa_r+0xcee>
  406a8c:	4622      	mov	r2, r4
  406a8e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  406a92:	4630      	mov	r0, r6
  406a94:	4639      	mov	r1, r7
  406a96:	f002 fb37 	bl	409108 <__aeabi_dcmplt>
  406a9a:	b108      	cbz	r0, 406aa0 <_dtoa_r+0xaf8>
  406a9c:	4646      	mov	r6, r8
  406a9e:	e6b5      	b.n	40680c <_dtoa_r+0x864>
  406aa0:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  406aa4:	f7ff bb89 	b.w	4061ba <_dtoa_r+0x212>
  406aa8:	9807      	ldr	r0, [sp, #28]
  406aaa:	f7ff baae 	b.w	40600a <_dtoa_r+0x62>
  406aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406ab0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406ab2:	970a      	str	r7, [sp, #40]	; 0x28
  406ab4:	1afb      	subs	r3, r7, r3
  406ab6:	441a      	add	r2, r3
  406ab8:	920b      	str	r2, [sp, #44]	; 0x2c
  406aba:	2700      	movs	r7, #0
  406abc:	e461      	b.n	406382 <_dtoa_r+0x3da>
  406abe:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  406ac2:	f04f 0802 	mov.w	r8, #2
  406ac6:	e5bb      	b.n	406640 <_dtoa_r+0x698>
  406ac8:	461c      	mov	r4, r3
  406aca:	2100      	movs	r1, #0
  406acc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  406ad0:	e58a      	b.n	4065e8 <_dtoa_r+0x640>
  406ad2:	2401      	movs	r4, #1
  406ad4:	9421      	str	r4, [sp, #132]	; 0x84
  406ad6:	940d      	str	r4, [sp, #52]	; 0x34
  406ad8:	9406      	str	r4, [sp, #24]
  406ada:	e7f6      	b.n	406aca <_dtoa_r+0xb22>
  406adc:	2a00      	cmp	r2, #0
  406ade:	46d0      	mov	r8, sl
  406ae0:	f8cd b014 	str.w	fp, [sp, #20]
  406ae4:	469a      	mov	sl, r3
  406ae6:	dd11      	ble.n	406b0c <_dtoa_r+0xb64>
  406ae8:	4621      	mov	r1, r4
  406aea:	2201      	movs	r2, #1
  406aec:	4648      	mov	r0, r9
  406aee:	f001 f903 	bl	407cf8 <__lshift>
  406af2:	4641      	mov	r1, r8
  406af4:	4604      	mov	r4, r0
  406af6:	f001 f957 	bl	407da8 <__mcmp>
  406afa:	2800      	cmp	r0, #0
  406afc:	f340 8149 	ble.w	406d92 <_dtoa_r+0xdea>
  406b00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  406b04:	f000 8106 	beq.w	406d14 <_dtoa_r+0xd6c>
  406b08:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406b0c:	46b3      	mov	fp, r6
  406b0e:	f887 a000 	strb.w	sl, [r7]
  406b12:	1c7d      	adds	r5, r7, #1
  406b14:	9e05      	ldr	r6, [sp, #20]
  406b16:	9408      	str	r4, [sp, #32]
  406b18:	e502      	b.n	406520 <_dtoa_r+0x578>
  406b1a:	d104      	bne.n	406b26 <_dtoa_r+0xb7e>
  406b1c:	f01a 0f01 	tst.w	sl, #1
  406b20:	d001      	beq.n	406b26 <_dtoa_r+0xb7e>
  406b22:	e4ed      	b.n	406500 <_dtoa_r+0x558>
  406b24:	4615      	mov	r5, r2
  406b26:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406b2a:	2b30      	cmp	r3, #48	; 0x30
  406b2c:	f105 32ff 	add.w	r2, r5, #4294967295
  406b30:	d0f8      	beq.n	406b24 <_dtoa_r+0xb7c>
  406b32:	e4f5      	b.n	406520 <_dtoa_r+0x578>
  406b34:	9b04      	ldr	r3, [sp, #16]
  406b36:	425c      	negs	r4, r3
  406b38:	2c00      	cmp	r4, #0
  406b3a:	f000 80bf 	beq.w	406cbc <_dtoa_r+0xd14>
  406b3e:	4b8a      	ldr	r3, [pc, #552]	; (406d68 <_dtoa_r+0xdc0>)
  406b40:	f004 020f 	and.w	r2, r4, #15
  406b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406b48:	e9d3 2300 	ldrd	r2, r3, [r3]
  406b4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  406b50:	f002 f868 	bl	408c24 <__aeabi_dmul>
  406b54:	1124      	asrs	r4, r4, #4
  406b56:	4606      	mov	r6, r0
  406b58:	460f      	mov	r7, r1
  406b5a:	f000 812a 	beq.w	406db2 <_dtoa_r+0xe0a>
  406b5e:	4d83      	ldr	r5, [pc, #524]	; (406d6c <_dtoa_r+0xdc4>)
  406b60:	f04f 0802 	mov.w	r8, #2
  406b64:	07e2      	lsls	r2, r4, #31
  406b66:	d509      	bpl.n	406b7c <_dtoa_r+0xbd4>
  406b68:	4630      	mov	r0, r6
  406b6a:	4639      	mov	r1, r7
  406b6c:	e9d5 2300 	ldrd	r2, r3, [r5]
  406b70:	f002 f858 	bl	408c24 <__aeabi_dmul>
  406b74:	f108 0801 	add.w	r8, r8, #1
  406b78:	4606      	mov	r6, r0
  406b7a:	460f      	mov	r7, r1
  406b7c:	1064      	asrs	r4, r4, #1
  406b7e:	f105 0508 	add.w	r5, r5, #8
  406b82:	d1ef      	bne.n	406b64 <_dtoa_r+0xbbc>
  406b84:	e576      	b.n	406674 <_dtoa_r+0x6cc>
  406b86:	9907      	ldr	r1, [sp, #28]
  406b88:	2230      	movs	r2, #48	; 0x30
  406b8a:	700a      	strb	r2, [r1, #0]
  406b8c:	9a04      	ldr	r2, [sp, #16]
  406b8e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  406b92:	3201      	adds	r2, #1
  406b94:	9204      	str	r2, [sp, #16]
  406b96:	f7ff bbd0 	b.w	40633a <_dtoa_r+0x392>
  406b9a:	6871      	ldr	r1, [r6, #4]
  406b9c:	4648      	mov	r0, r9
  406b9e:	f000 fefb 	bl	407998 <_Balloc>
  406ba2:	6933      	ldr	r3, [r6, #16]
  406ba4:	1c9a      	adds	r2, r3, #2
  406ba6:	4605      	mov	r5, r0
  406ba8:	0092      	lsls	r2, r2, #2
  406baa:	f106 010c 	add.w	r1, r6, #12
  406bae:	300c      	adds	r0, #12
  406bb0:	f7fc fb78 	bl	4032a4 <memcpy>
  406bb4:	4629      	mov	r1, r5
  406bb6:	2201      	movs	r2, #1
  406bb8:	4648      	mov	r0, r9
  406bba:	f001 f89d 	bl	407cf8 <__lshift>
  406bbe:	9005      	str	r0, [sp, #20]
  406bc0:	e670      	b.n	4068a4 <_dtoa_r+0x8fc>
  406bc2:	2b39      	cmp	r3, #57	; 0x39
  406bc4:	f8cd b014 	str.w	fp, [sp, #20]
  406bc8:	46d0      	mov	r8, sl
  406bca:	f000 80a3 	beq.w	406d14 <_dtoa_r+0xd6c>
  406bce:	f103 0a01 	add.w	sl, r3, #1
  406bd2:	46b3      	mov	fp, r6
  406bd4:	f887 a000 	strb.w	sl, [r7]
  406bd8:	1c7d      	adds	r5, r7, #1
  406bda:	9e05      	ldr	r6, [sp, #20]
  406bdc:	9408      	str	r4, [sp, #32]
  406bde:	e49f      	b.n	406520 <_dtoa_r+0x578>
  406be0:	465a      	mov	r2, fp
  406be2:	46d0      	mov	r8, sl
  406be4:	46b3      	mov	fp, r6
  406be6:	469a      	mov	sl, r3
  406be8:	4616      	mov	r6, r2
  406bea:	e47d      	b.n	4064e8 <_dtoa_r+0x540>
  406bec:	495e      	ldr	r1, [pc, #376]	; (406d68 <_dtoa_r+0xdc0>)
  406bee:	f108 3aff 	add.w	sl, r8, #4294967295
  406bf2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  406bf6:	4622      	mov	r2, r4
  406bf8:	462b      	mov	r3, r5
  406bfa:	e9d1 0100 	ldrd	r0, r1, [r1]
  406bfe:	f002 f811 	bl	408c24 <__aeabi_dmul>
  406c02:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  406c06:	4639      	mov	r1, r7
  406c08:	4630      	mov	r0, r6
  406c0a:	f002 fabb 	bl	409184 <__aeabi_d2iz>
  406c0e:	4604      	mov	r4, r0
  406c10:	f001 ffa2 	bl	408b58 <__aeabi_i2d>
  406c14:	4602      	mov	r2, r0
  406c16:	460b      	mov	r3, r1
  406c18:	4630      	mov	r0, r6
  406c1a:	4639      	mov	r1, r7
  406c1c:	f001 fe4e 	bl	4088bc <__aeabi_dsub>
  406c20:	9a07      	ldr	r2, [sp, #28]
  406c22:	3430      	adds	r4, #48	; 0x30
  406c24:	f1b8 0f01 	cmp.w	r8, #1
  406c28:	4606      	mov	r6, r0
  406c2a:	460f      	mov	r7, r1
  406c2c:	7014      	strb	r4, [r2, #0]
  406c2e:	f102 0501 	add.w	r5, r2, #1
  406c32:	d01e      	beq.n	406c72 <_dtoa_r+0xcca>
  406c34:	9b07      	ldr	r3, [sp, #28]
  406c36:	eb03 0b08 	add.w	fp, r3, r8
  406c3a:	46a8      	mov	r8, r5
  406c3c:	2200      	movs	r2, #0
  406c3e:	4b4c      	ldr	r3, [pc, #304]	; (406d70 <_dtoa_r+0xdc8>)
  406c40:	4630      	mov	r0, r6
  406c42:	4639      	mov	r1, r7
  406c44:	f001 ffee 	bl	408c24 <__aeabi_dmul>
  406c48:	460f      	mov	r7, r1
  406c4a:	4606      	mov	r6, r0
  406c4c:	f002 fa9a 	bl	409184 <__aeabi_d2iz>
  406c50:	4604      	mov	r4, r0
  406c52:	f001 ff81 	bl	408b58 <__aeabi_i2d>
  406c56:	3430      	adds	r4, #48	; 0x30
  406c58:	4602      	mov	r2, r0
  406c5a:	460b      	mov	r3, r1
  406c5c:	4630      	mov	r0, r6
  406c5e:	4639      	mov	r1, r7
  406c60:	f001 fe2c 	bl	4088bc <__aeabi_dsub>
  406c64:	f808 4b01 	strb.w	r4, [r8], #1
  406c68:	45c3      	cmp	fp, r8
  406c6a:	4606      	mov	r6, r0
  406c6c:	460f      	mov	r7, r1
  406c6e:	d1e5      	bne.n	406c3c <_dtoa_r+0xc94>
  406c70:	4455      	add	r5, sl
  406c72:	2200      	movs	r2, #0
  406c74:	4b3f      	ldr	r3, [pc, #252]	; (406d74 <_dtoa_r+0xdcc>)
  406c76:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406c7a:	f001 fe21 	bl	4088c0 <__adddf3>
  406c7e:	4632      	mov	r2, r6
  406c80:	463b      	mov	r3, r7
  406c82:	f002 fa41 	bl	409108 <__aeabi_dcmplt>
  406c86:	2800      	cmp	r0, #0
  406c88:	d04c      	beq.n	406d24 <_dtoa_r+0xd7c>
  406c8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406c8c:	9304      	str	r3, [sp, #16]
  406c8e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  406c92:	f7ff bb46 	b.w	406322 <_dtoa_r+0x37a>
  406c96:	f04f 0800 	mov.w	r8, #0
  406c9a:	4646      	mov	r6, r8
  406c9c:	e6a8      	b.n	4069f0 <_dtoa_r+0xa48>
  406c9e:	9b05      	ldr	r3, [sp, #20]
  406ca0:	9a06      	ldr	r2, [sp, #24]
  406ca2:	1a9d      	subs	r5, r3, r2
  406ca4:	2300      	movs	r3, #0
  406ca6:	f7ff bb72 	b.w	40638e <_dtoa_r+0x3e6>
  406caa:	2700      	movs	r7, #0
  406cac:	e6ca      	b.n	406a44 <_dtoa_r+0xa9c>
  406cae:	9b14      	ldr	r3, [sp, #80]	; 0x50
  406cb0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406cb2:	9d05      	ldr	r5, [sp, #20]
  406cb4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  406cb8:	f7ff bb69 	b.w	40638e <_dtoa_r+0x3e6>
  406cbc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  406cc0:	f04f 0802 	mov.w	r8, #2
  406cc4:	e4d6      	b.n	406674 <_dtoa_r+0x6cc>
  406cc6:	9408      	str	r4, [sp, #32]
  406cc8:	e5a0      	b.n	40680c <_dtoa_r+0x864>
  406cca:	9b06      	ldr	r3, [sp, #24]
  406ccc:	2b00      	cmp	r3, #0
  406cce:	f43f aebf 	beq.w	406a50 <_dtoa_r+0xaa8>
  406cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406cd4:	2b00      	cmp	r3, #0
  406cd6:	f77f aee3 	ble.w	406aa0 <_dtoa_r+0xaf8>
  406cda:	2200      	movs	r2, #0
  406cdc:	4b24      	ldr	r3, [pc, #144]	; (406d70 <_dtoa_r+0xdc8>)
  406cde:	4630      	mov	r0, r6
  406ce0:	4639      	mov	r1, r7
  406ce2:	f001 ff9f 	bl	408c24 <__aeabi_dmul>
  406ce6:	4606      	mov	r6, r0
  406ce8:	460f      	mov	r7, r1
  406cea:	f108 0001 	add.w	r0, r8, #1
  406cee:	f001 ff33 	bl	408b58 <__aeabi_i2d>
  406cf2:	4632      	mov	r2, r6
  406cf4:	463b      	mov	r3, r7
  406cf6:	f001 ff95 	bl	408c24 <__aeabi_dmul>
  406cfa:	2200      	movs	r2, #0
  406cfc:	4b18      	ldr	r3, [pc, #96]	; (406d60 <_dtoa_r+0xdb8>)
  406cfe:	f001 fddf 	bl	4088c0 <__adddf3>
  406d02:	9a04      	ldr	r2, [sp, #16]
  406d04:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  406d08:	3a01      	subs	r2, #1
  406d0a:	4604      	mov	r4, r0
  406d0c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  406d10:	9211      	str	r2, [sp, #68]	; 0x44
  406d12:	e4d0      	b.n	4066b6 <_dtoa_r+0x70e>
  406d14:	2239      	movs	r2, #57	; 0x39
  406d16:	46b3      	mov	fp, r6
  406d18:	9408      	str	r4, [sp, #32]
  406d1a:	9e05      	ldr	r6, [sp, #20]
  406d1c:	703a      	strb	r2, [r7, #0]
  406d1e:	1c7d      	adds	r5, r7, #1
  406d20:	f7ff bbf0 	b.w	406504 <_dtoa_r+0x55c>
  406d24:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  406d28:	2000      	movs	r0, #0
  406d2a:	4912      	ldr	r1, [pc, #72]	; (406d74 <_dtoa_r+0xdcc>)
  406d2c:	f001 fdc6 	bl	4088bc <__aeabi_dsub>
  406d30:	4632      	mov	r2, r6
  406d32:	463b      	mov	r3, r7
  406d34:	f002 fa06 	bl	409144 <__aeabi_dcmpgt>
  406d38:	b908      	cbnz	r0, 406d3e <_dtoa_r+0xd96>
  406d3a:	e6b1      	b.n	406aa0 <_dtoa_r+0xaf8>
  406d3c:	4615      	mov	r5, r2
  406d3e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406d42:	2b30      	cmp	r3, #48	; 0x30
  406d44:	f105 32ff 	add.w	r2, r5, #4294967295
  406d48:	d0f8      	beq.n	406d3c <_dtoa_r+0xd94>
  406d4a:	e530      	b.n	4067ae <_dtoa_r+0x806>
  406d4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406d4e:	9304      	str	r3, [sp, #16]
  406d50:	f7ff bae7 	b.w	406322 <_dtoa_r+0x37a>
  406d54:	f1ba 0f00 	cmp.w	sl, #0
  406d58:	f47f ad7a 	bne.w	406850 <_dtoa_r+0x8a8>
  406d5c:	e661      	b.n	406a22 <_dtoa_r+0xa7a>
  406d5e:	bf00      	nop
  406d60:	401c0000 	.word	0x401c0000
  406d64:	40140000 	.word	0x40140000
  406d68:	004096b8 	.word	0x004096b8
  406d6c:	00409780 	.word	0x00409780
  406d70:	40240000 	.word	0x40240000
  406d74:	3fe00000 	.word	0x3fe00000
  406d78:	2b39      	cmp	r3, #57	; 0x39
  406d7a:	f8cd b014 	str.w	fp, [sp, #20]
  406d7e:	46d0      	mov	r8, sl
  406d80:	f8dd b008 	ldr.w	fp, [sp, #8]
  406d84:	469a      	mov	sl, r3
  406d86:	d0c5      	beq.n	406d14 <_dtoa_r+0xd6c>
  406d88:	f1bb 0f00 	cmp.w	fp, #0
  406d8c:	f73f aebc 	bgt.w	406b08 <_dtoa_r+0xb60>
  406d90:	e6bc      	b.n	406b0c <_dtoa_r+0xb64>
  406d92:	f47f aebb 	bne.w	406b0c <_dtoa_r+0xb64>
  406d96:	f01a 0f01 	tst.w	sl, #1
  406d9a:	f43f aeb7 	beq.w	406b0c <_dtoa_r+0xb64>
  406d9e:	e6af      	b.n	406b00 <_dtoa_r+0xb58>
  406da0:	f04f 0800 	mov.w	r8, #0
  406da4:	4646      	mov	r6, r8
  406da6:	e531      	b.n	40680c <_dtoa_r+0x864>
  406da8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  406daa:	2b02      	cmp	r3, #2
  406dac:	dc21      	bgt.n	406df2 <_dtoa_r+0xe4a>
  406dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406db0:	e604      	b.n	4069bc <_dtoa_r+0xa14>
  406db2:	f04f 0802 	mov.w	r8, #2
  406db6:	e45d      	b.n	406674 <_dtoa_r+0x6cc>
  406db8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  406dba:	2b02      	cmp	r3, #2
  406dbc:	dc19      	bgt.n	406df2 <_dtoa_r+0xe4a>
  406dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406dc0:	e563      	b.n	40688a <_dtoa_r+0x8e2>
  406dc2:	2400      	movs	r4, #0
  406dc4:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  406dc8:	4621      	mov	r1, r4
  406dca:	4648      	mov	r0, r9
  406dcc:	f000 fde4 	bl	407998 <_Balloc>
  406dd0:	f04f 33ff 	mov.w	r3, #4294967295
  406dd4:	9306      	str	r3, [sp, #24]
  406dd6:	930d      	str	r3, [sp, #52]	; 0x34
  406dd8:	2301      	movs	r3, #1
  406dda:	9007      	str	r0, [sp, #28]
  406ddc:	9421      	str	r4, [sp, #132]	; 0x84
  406dde:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  406de2:	9309      	str	r3, [sp, #36]	; 0x24
  406de4:	f7ff b9e9 	b.w	4061ba <_dtoa_r+0x212>
  406de8:	f43f ab3d 	beq.w	406466 <_dtoa_r+0x4be>
  406dec:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406df0:	e522      	b.n	406838 <_dtoa_r+0x890>
  406df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406df4:	9306      	str	r3, [sp, #24]
  406df6:	e5e9      	b.n	4069cc <_dtoa_r+0xa24>
  406df8:	2501      	movs	r5, #1
  406dfa:	f7ff b9a8 	b.w	40614e <_dtoa_r+0x1a6>
  406dfe:	bf00      	nop

00406e00 <__sflush_r>:
  406e00:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406e04:	b29a      	uxth	r2, r3
  406e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406e0a:	460d      	mov	r5, r1
  406e0c:	0711      	lsls	r1, r2, #28
  406e0e:	4680      	mov	r8, r0
  406e10:	d43c      	bmi.n	406e8c <__sflush_r+0x8c>
  406e12:	686a      	ldr	r2, [r5, #4]
  406e14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406e18:	2a00      	cmp	r2, #0
  406e1a:	81ab      	strh	r3, [r5, #12]
  406e1c:	dd73      	ble.n	406f06 <__sflush_r+0x106>
  406e1e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406e20:	2c00      	cmp	r4, #0
  406e22:	d04b      	beq.n	406ebc <__sflush_r+0xbc>
  406e24:	b29b      	uxth	r3, r3
  406e26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  406e2a:	2100      	movs	r1, #0
  406e2c:	b292      	uxth	r2, r2
  406e2e:	f8d8 6000 	ldr.w	r6, [r8]
  406e32:	f8c8 1000 	str.w	r1, [r8]
  406e36:	2a00      	cmp	r2, #0
  406e38:	d069      	beq.n	406f0e <__sflush_r+0x10e>
  406e3a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406e3c:	075f      	lsls	r7, r3, #29
  406e3e:	d505      	bpl.n	406e4c <__sflush_r+0x4c>
  406e40:	6869      	ldr	r1, [r5, #4]
  406e42:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  406e44:	1a52      	subs	r2, r2, r1
  406e46:	b10b      	cbz	r3, 406e4c <__sflush_r+0x4c>
  406e48:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406e4a:	1ad2      	subs	r2, r2, r3
  406e4c:	2300      	movs	r3, #0
  406e4e:	69e9      	ldr	r1, [r5, #28]
  406e50:	4640      	mov	r0, r8
  406e52:	47a0      	blx	r4
  406e54:	1c44      	adds	r4, r0, #1
  406e56:	d03c      	beq.n	406ed2 <__sflush_r+0xd2>
  406e58:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406e5c:	692a      	ldr	r2, [r5, #16]
  406e5e:	602a      	str	r2, [r5, #0]
  406e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406e64:	2200      	movs	r2, #0
  406e66:	81ab      	strh	r3, [r5, #12]
  406e68:	04db      	lsls	r3, r3, #19
  406e6a:	606a      	str	r2, [r5, #4]
  406e6c:	d449      	bmi.n	406f02 <__sflush_r+0x102>
  406e6e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406e70:	f8c8 6000 	str.w	r6, [r8]
  406e74:	b311      	cbz	r1, 406ebc <__sflush_r+0xbc>
  406e76:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406e7a:	4299      	cmp	r1, r3
  406e7c:	d002      	beq.n	406e84 <__sflush_r+0x84>
  406e7e:	4640      	mov	r0, r8
  406e80:	f000 f9c0 	bl	407204 <_free_r>
  406e84:	2000      	movs	r0, #0
  406e86:	6328      	str	r0, [r5, #48]	; 0x30
  406e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406e8c:	692e      	ldr	r6, [r5, #16]
  406e8e:	b1ae      	cbz	r6, 406ebc <__sflush_r+0xbc>
  406e90:	682c      	ldr	r4, [r5, #0]
  406e92:	602e      	str	r6, [r5, #0]
  406e94:	0790      	lsls	r0, r2, #30
  406e96:	bf0c      	ite	eq
  406e98:	696b      	ldreq	r3, [r5, #20]
  406e9a:	2300      	movne	r3, #0
  406e9c:	1ba4      	subs	r4, r4, r6
  406e9e:	60ab      	str	r3, [r5, #8]
  406ea0:	e00a      	b.n	406eb8 <__sflush_r+0xb8>
  406ea2:	4623      	mov	r3, r4
  406ea4:	4632      	mov	r2, r6
  406ea6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406ea8:	69e9      	ldr	r1, [r5, #28]
  406eaa:	4640      	mov	r0, r8
  406eac:	47b8      	blx	r7
  406eae:	2800      	cmp	r0, #0
  406eb0:	eba4 0400 	sub.w	r4, r4, r0
  406eb4:	4406      	add	r6, r0
  406eb6:	dd04      	ble.n	406ec2 <__sflush_r+0xc2>
  406eb8:	2c00      	cmp	r4, #0
  406eba:	dcf2      	bgt.n	406ea2 <__sflush_r+0xa2>
  406ebc:	2000      	movs	r0, #0
  406ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406ec2:	89ab      	ldrh	r3, [r5, #12]
  406ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406ec8:	81ab      	strh	r3, [r5, #12]
  406eca:	f04f 30ff 	mov.w	r0, #4294967295
  406ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406ed2:	f8d8 2000 	ldr.w	r2, [r8]
  406ed6:	2a1d      	cmp	r2, #29
  406ed8:	d8f3      	bhi.n	406ec2 <__sflush_r+0xc2>
  406eda:	4b1a      	ldr	r3, [pc, #104]	; (406f44 <__sflush_r+0x144>)
  406edc:	40d3      	lsrs	r3, r2
  406ede:	f003 0301 	and.w	r3, r3, #1
  406ee2:	f083 0401 	eor.w	r4, r3, #1
  406ee6:	2b00      	cmp	r3, #0
  406ee8:	d0eb      	beq.n	406ec2 <__sflush_r+0xc2>
  406eea:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406eee:	6929      	ldr	r1, [r5, #16]
  406ef0:	6029      	str	r1, [r5, #0]
  406ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406ef6:	04d9      	lsls	r1, r3, #19
  406ef8:	606c      	str	r4, [r5, #4]
  406efa:	81ab      	strh	r3, [r5, #12]
  406efc:	d5b7      	bpl.n	406e6e <__sflush_r+0x6e>
  406efe:	2a00      	cmp	r2, #0
  406f00:	d1b5      	bne.n	406e6e <__sflush_r+0x6e>
  406f02:	6528      	str	r0, [r5, #80]	; 0x50
  406f04:	e7b3      	b.n	406e6e <__sflush_r+0x6e>
  406f06:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406f08:	2a00      	cmp	r2, #0
  406f0a:	dc88      	bgt.n	406e1e <__sflush_r+0x1e>
  406f0c:	e7d6      	b.n	406ebc <__sflush_r+0xbc>
  406f0e:	2301      	movs	r3, #1
  406f10:	69e9      	ldr	r1, [r5, #28]
  406f12:	4640      	mov	r0, r8
  406f14:	47a0      	blx	r4
  406f16:	1c43      	adds	r3, r0, #1
  406f18:	4602      	mov	r2, r0
  406f1a:	d002      	beq.n	406f22 <__sflush_r+0x122>
  406f1c:	89ab      	ldrh	r3, [r5, #12]
  406f1e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406f20:	e78c      	b.n	406e3c <__sflush_r+0x3c>
  406f22:	f8d8 3000 	ldr.w	r3, [r8]
  406f26:	2b00      	cmp	r3, #0
  406f28:	d0f8      	beq.n	406f1c <__sflush_r+0x11c>
  406f2a:	2b1d      	cmp	r3, #29
  406f2c:	d001      	beq.n	406f32 <__sflush_r+0x132>
  406f2e:	2b16      	cmp	r3, #22
  406f30:	d102      	bne.n	406f38 <__sflush_r+0x138>
  406f32:	f8c8 6000 	str.w	r6, [r8]
  406f36:	e7c1      	b.n	406ebc <__sflush_r+0xbc>
  406f38:	89ab      	ldrh	r3, [r5, #12]
  406f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406f3e:	81ab      	strh	r3, [r5, #12]
  406f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406f44:	20400001 	.word	0x20400001

00406f48 <_fflush_r>:
  406f48:	b510      	push	{r4, lr}
  406f4a:	4604      	mov	r4, r0
  406f4c:	b082      	sub	sp, #8
  406f4e:	b108      	cbz	r0, 406f54 <_fflush_r+0xc>
  406f50:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406f52:	b153      	cbz	r3, 406f6a <_fflush_r+0x22>
  406f54:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  406f58:	b908      	cbnz	r0, 406f5e <_fflush_r+0x16>
  406f5a:	b002      	add	sp, #8
  406f5c:	bd10      	pop	{r4, pc}
  406f5e:	4620      	mov	r0, r4
  406f60:	b002      	add	sp, #8
  406f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406f66:	f7ff bf4b 	b.w	406e00 <__sflush_r>
  406f6a:	9101      	str	r1, [sp, #4]
  406f6c:	f000 f880 	bl	407070 <__sinit>
  406f70:	9901      	ldr	r1, [sp, #4]
  406f72:	e7ef      	b.n	406f54 <_fflush_r+0xc>

00406f74 <_cleanup_r>:
  406f74:	4901      	ldr	r1, [pc, #4]	; (406f7c <_cleanup_r+0x8>)
  406f76:	f000 bbaf 	b.w	4076d8 <_fwalk_reent>
  406f7a:	bf00      	nop
  406f7c:	0040878d 	.word	0x0040878d

00406f80 <__sinit.part.1>:
  406f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f84:	4b35      	ldr	r3, [pc, #212]	; (40705c <__sinit.part.1+0xdc>)
  406f86:	6845      	ldr	r5, [r0, #4]
  406f88:	63c3      	str	r3, [r0, #60]	; 0x3c
  406f8a:	2400      	movs	r4, #0
  406f8c:	4607      	mov	r7, r0
  406f8e:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  406f92:	2304      	movs	r3, #4
  406f94:	2103      	movs	r1, #3
  406f96:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  406f9a:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  406f9e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  406fa2:	b083      	sub	sp, #12
  406fa4:	602c      	str	r4, [r5, #0]
  406fa6:	606c      	str	r4, [r5, #4]
  406fa8:	60ac      	str	r4, [r5, #8]
  406faa:	666c      	str	r4, [r5, #100]	; 0x64
  406fac:	81ec      	strh	r4, [r5, #14]
  406fae:	612c      	str	r4, [r5, #16]
  406fb0:	616c      	str	r4, [r5, #20]
  406fb2:	61ac      	str	r4, [r5, #24]
  406fb4:	81ab      	strh	r3, [r5, #12]
  406fb6:	4621      	mov	r1, r4
  406fb8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  406fbc:	2208      	movs	r2, #8
  406fbe:	f7fc fa0b 	bl	4033d8 <memset>
  406fc2:	68be      	ldr	r6, [r7, #8]
  406fc4:	f8df b098 	ldr.w	fp, [pc, #152]	; 407060 <__sinit.part.1+0xe0>
  406fc8:	f8df a098 	ldr.w	sl, [pc, #152]	; 407064 <__sinit.part.1+0xe4>
  406fcc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 407068 <__sinit.part.1+0xe8>
  406fd0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 40706c <__sinit.part.1+0xec>
  406fd4:	f8c5 b020 	str.w	fp, [r5, #32]
  406fd8:	2301      	movs	r3, #1
  406fda:	2209      	movs	r2, #9
  406fdc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  406fe0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  406fe4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  406fe8:	61ed      	str	r5, [r5, #28]
  406fea:	4621      	mov	r1, r4
  406fec:	81f3      	strh	r3, [r6, #14]
  406fee:	81b2      	strh	r2, [r6, #12]
  406ff0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  406ff4:	6034      	str	r4, [r6, #0]
  406ff6:	6074      	str	r4, [r6, #4]
  406ff8:	60b4      	str	r4, [r6, #8]
  406ffa:	6674      	str	r4, [r6, #100]	; 0x64
  406ffc:	6134      	str	r4, [r6, #16]
  406ffe:	6174      	str	r4, [r6, #20]
  407000:	61b4      	str	r4, [r6, #24]
  407002:	2208      	movs	r2, #8
  407004:	9301      	str	r3, [sp, #4]
  407006:	f7fc f9e7 	bl	4033d8 <memset>
  40700a:	68fd      	ldr	r5, [r7, #12]
  40700c:	61f6      	str	r6, [r6, #28]
  40700e:	2012      	movs	r0, #18
  407010:	2202      	movs	r2, #2
  407012:	f8c6 b020 	str.w	fp, [r6, #32]
  407016:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40701a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40701e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  407022:	4621      	mov	r1, r4
  407024:	81a8      	strh	r0, [r5, #12]
  407026:	81ea      	strh	r2, [r5, #14]
  407028:	602c      	str	r4, [r5, #0]
  40702a:	606c      	str	r4, [r5, #4]
  40702c:	60ac      	str	r4, [r5, #8]
  40702e:	666c      	str	r4, [r5, #100]	; 0x64
  407030:	612c      	str	r4, [r5, #16]
  407032:	616c      	str	r4, [r5, #20]
  407034:	61ac      	str	r4, [r5, #24]
  407036:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40703a:	2208      	movs	r2, #8
  40703c:	f7fc f9cc 	bl	4033d8 <memset>
  407040:	9b01      	ldr	r3, [sp, #4]
  407042:	61ed      	str	r5, [r5, #28]
  407044:	f8c5 b020 	str.w	fp, [r5, #32]
  407048:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40704c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  407050:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  407054:	63bb      	str	r3, [r7, #56]	; 0x38
  407056:	b003      	add	sp, #12
  407058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40705c:	00406f75 	.word	0x00406f75
  407060:	00408395 	.word	0x00408395
  407064:	004083b9 	.word	0x004083b9
  407068:	004083f5 	.word	0x004083f5
  40706c:	00408415 	.word	0x00408415

00407070 <__sinit>:
  407070:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407072:	b103      	cbz	r3, 407076 <__sinit+0x6>
  407074:	4770      	bx	lr
  407076:	f7ff bf83 	b.w	406f80 <__sinit.part.1>
  40707a:	bf00      	nop

0040707c <__sfp_lock_acquire>:
  40707c:	4770      	bx	lr
  40707e:	bf00      	nop

00407080 <__sfp_lock_release>:
  407080:	4770      	bx	lr
  407082:	bf00      	nop

00407084 <__libc_fini_array>:
  407084:	b538      	push	{r3, r4, r5, lr}
  407086:	4d07      	ldr	r5, [pc, #28]	; (4070a4 <__libc_fini_array+0x20>)
  407088:	4c07      	ldr	r4, [pc, #28]	; (4070a8 <__libc_fini_array+0x24>)
  40708a:	1b2c      	subs	r4, r5, r4
  40708c:	10a4      	asrs	r4, r4, #2
  40708e:	d005      	beq.n	40709c <__libc_fini_array+0x18>
  407090:	3c01      	subs	r4, #1
  407092:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  407096:	4798      	blx	r3
  407098:	2c00      	cmp	r4, #0
  40709a:	d1f9      	bne.n	407090 <__libc_fini_array+0xc>
  40709c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4070a0:	f002 bb92 	b.w	4097c8 <_fini>
  4070a4:	004097d8 	.word	0x004097d8
  4070a8:	004097d4 	.word	0x004097d4

004070ac <__fputwc>:
  4070ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4070b0:	b082      	sub	sp, #8
  4070b2:	4680      	mov	r8, r0
  4070b4:	4689      	mov	r9, r1
  4070b6:	4614      	mov	r4, r2
  4070b8:	f000 fb3c 	bl	407734 <__locale_mb_cur_max>
  4070bc:	2801      	cmp	r0, #1
  4070be:	d033      	beq.n	407128 <__fputwc+0x7c>
  4070c0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4070c4:	464a      	mov	r2, r9
  4070c6:	a901      	add	r1, sp, #4
  4070c8:	4640      	mov	r0, r8
  4070ca:	f001 fa7d 	bl	4085c8 <_wcrtomb_r>
  4070ce:	f1b0 3fff 	cmp.w	r0, #4294967295
  4070d2:	4682      	mov	sl, r0
  4070d4:	d021      	beq.n	40711a <__fputwc+0x6e>
  4070d6:	b388      	cbz	r0, 40713c <__fputwc+0x90>
  4070d8:	f89d 6004 	ldrb.w	r6, [sp, #4]
  4070dc:	2500      	movs	r5, #0
  4070de:	e008      	b.n	4070f2 <__fputwc+0x46>
  4070e0:	6823      	ldr	r3, [r4, #0]
  4070e2:	1c5a      	adds	r2, r3, #1
  4070e4:	6022      	str	r2, [r4, #0]
  4070e6:	701e      	strb	r6, [r3, #0]
  4070e8:	3501      	adds	r5, #1
  4070ea:	4555      	cmp	r5, sl
  4070ec:	d226      	bcs.n	40713c <__fputwc+0x90>
  4070ee:	ab01      	add	r3, sp, #4
  4070f0:	5d5e      	ldrb	r6, [r3, r5]
  4070f2:	68a3      	ldr	r3, [r4, #8]
  4070f4:	3b01      	subs	r3, #1
  4070f6:	2b00      	cmp	r3, #0
  4070f8:	60a3      	str	r3, [r4, #8]
  4070fa:	daf1      	bge.n	4070e0 <__fputwc+0x34>
  4070fc:	69a7      	ldr	r7, [r4, #24]
  4070fe:	42bb      	cmp	r3, r7
  407100:	4631      	mov	r1, r6
  407102:	4622      	mov	r2, r4
  407104:	4640      	mov	r0, r8
  407106:	db01      	blt.n	40710c <__fputwc+0x60>
  407108:	2e0a      	cmp	r6, #10
  40710a:	d1e9      	bne.n	4070e0 <__fputwc+0x34>
  40710c:	f001 fa06 	bl	40851c <__swbuf_r>
  407110:	1c43      	adds	r3, r0, #1
  407112:	d1e9      	bne.n	4070e8 <__fputwc+0x3c>
  407114:	b002      	add	sp, #8
  407116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40711a:	89a3      	ldrh	r3, [r4, #12]
  40711c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407120:	81a3      	strh	r3, [r4, #12]
  407122:	b002      	add	sp, #8
  407124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407128:	f109 33ff 	add.w	r3, r9, #4294967295
  40712c:	2bfe      	cmp	r3, #254	; 0xfe
  40712e:	d8c7      	bhi.n	4070c0 <__fputwc+0x14>
  407130:	fa5f f689 	uxtb.w	r6, r9
  407134:	4682      	mov	sl, r0
  407136:	f88d 6004 	strb.w	r6, [sp, #4]
  40713a:	e7cf      	b.n	4070dc <__fputwc+0x30>
  40713c:	4648      	mov	r0, r9
  40713e:	b002      	add	sp, #8
  407140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00407144 <_fputwc_r>:
  407144:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407148:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40714c:	d10a      	bne.n	407164 <_fputwc_r+0x20>
  40714e:	b410      	push	{r4}
  407150:	6e54      	ldr	r4, [r2, #100]	; 0x64
  407152:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407156:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40715a:	6654      	str	r4, [r2, #100]	; 0x64
  40715c:	8193      	strh	r3, [r2, #12]
  40715e:	bc10      	pop	{r4}
  407160:	f7ff bfa4 	b.w	4070ac <__fputwc>
  407164:	f7ff bfa2 	b.w	4070ac <__fputwc>

00407168 <_malloc_trim_r>:
  407168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40716a:	4f23      	ldr	r7, [pc, #140]	; (4071f8 <_malloc_trim_r+0x90>)
  40716c:	460c      	mov	r4, r1
  40716e:	4606      	mov	r6, r0
  407170:	f7fc f980 	bl	403474 <__malloc_lock>
  407174:	68bb      	ldr	r3, [r7, #8]
  407176:	685d      	ldr	r5, [r3, #4]
  407178:	f025 0503 	bic.w	r5, r5, #3
  40717c:	1b29      	subs	r1, r5, r4
  40717e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  407182:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407186:	f021 010f 	bic.w	r1, r1, #15
  40718a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40718e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407192:	db07      	blt.n	4071a4 <_malloc_trim_r+0x3c>
  407194:	2100      	movs	r1, #0
  407196:	4630      	mov	r0, r6
  407198:	f7fc f970 	bl	40347c <_sbrk_r>
  40719c:	68bb      	ldr	r3, [r7, #8]
  40719e:	442b      	add	r3, r5
  4071a0:	4298      	cmp	r0, r3
  4071a2:	d004      	beq.n	4071ae <_malloc_trim_r+0x46>
  4071a4:	4630      	mov	r0, r6
  4071a6:	f7fc f967 	bl	403478 <__malloc_unlock>
  4071aa:	2000      	movs	r0, #0
  4071ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4071ae:	4261      	negs	r1, r4
  4071b0:	4630      	mov	r0, r6
  4071b2:	f7fc f963 	bl	40347c <_sbrk_r>
  4071b6:	3001      	adds	r0, #1
  4071b8:	d00d      	beq.n	4071d6 <_malloc_trim_r+0x6e>
  4071ba:	4b10      	ldr	r3, [pc, #64]	; (4071fc <_malloc_trim_r+0x94>)
  4071bc:	68ba      	ldr	r2, [r7, #8]
  4071be:	6819      	ldr	r1, [r3, #0]
  4071c0:	1b2d      	subs	r5, r5, r4
  4071c2:	f045 0501 	orr.w	r5, r5, #1
  4071c6:	4630      	mov	r0, r6
  4071c8:	1b09      	subs	r1, r1, r4
  4071ca:	6055      	str	r5, [r2, #4]
  4071cc:	6019      	str	r1, [r3, #0]
  4071ce:	f7fc f953 	bl	403478 <__malloc_unlock>
  4071d2:	2001      	movs	r0, #1
  4071d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4071d6:	2100      	movs	r1, #0
  4071d8:	4630      	mov	r0, r6
  4071da:	f7fc f94f 	bl	40347c <_sbrk_r>
  4071de:	68ba      	ldr	r2, [r7, #8]
  4071e0:	1a83      	subs	r3, r0, r2
  4071e2:	2b0f      	cmp	r3, #15
  4071e4:	ddde      	ble.n	4071a4 <_malloc_trim_r+0x3c>
  4071e6:	4c06      	ldr	r4, [pc, #24]	; (407200 <_malloc_trim_r+0x98>)
  4071e8:	4904      	ldr	r1, [pc, #16]	; (4071fc <_malloc_trim_r+0x94>)
  4071ea:	6824      	ldr	r4, [r4, #0]
  4071ec:	f043 0301 	orr.w	r3, r3, #1
  4071f0:	1b00      	subs	r0, r0, r4
  4071f2:	6053      	str	r3, [r2, #4]
  4071f4:	6008      	str	r0, [r1, #0]
  4071f6:	e7d5      	b.n	4071a4 <_malloc_trim_r+0x3c>
  4071f8:	2040043c 	.word	0x2040043c
  4071fc:	20400b8c 	.word	0x20400b8c
  407200:	20400848 	.word	0x20400848

00407204 <_free_r>:
  407204:	2900      	cmp	r1, #0
  407206:	d045      	beq.n	407294 <_free_r+0x90>
  407208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40720c:	460d      	mov	r5, r1
  40720e:	4680      	mov	r8, r0
  407210:	f7fc f930 	bl	403474 <__malloc_lock>
  407214:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407218:	496a      	ldr	r1, [pc, #424]	; (4073c4 <_free_r+0x1c0>)
  40721a:	f027 0301 	bic.w	r3, r7, #1
  40721e:	f1a5 0408 	sub.w	r4, r5, #8
  407222:	18e2      	adds	r2, r4, r3
  407224:	688e      	ldr	r6, [r1, #8]
  407226:	6850      	ldr	r0, [r2, #4]
  407228:	42b2      	cmp	r2, r6
  40722a:	f020 0003 	bic.w	r0, r0, #3
  40722e:	d062      	beq.n	4072f6 <_free_r+0xf2>
  407230:	07fe      	lsls	r6, r7, #31
  407232:	6050      	str	r0, [r2, #4]
  407234:	d40b      	bmi.n	40724e <_free_r+0x4a>
  407236:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40723a:	1be4      	subs	r4, r4, r7
  40723c:	f101 0e08 	add.w	lr, r1, #8
  407240:	68a5      	ldr	r5, [r4, #8]
  407242:	4575      	cmp	r5, lr
  407244:	443b      	add	r3, r7
  407246:	d06f      	beq.n	407328 <_free_r+0x124>
  407248:	68e7      	ldr	r7, [r4, #12]
  40724a:	60ef      	str	r7, [r5, #12]
  40724c:	60bd      	str	r5, [r7, #8]
  40724e:	1815      	adds	r5, r2, r0
  407250:	686d      	ldr	r5, [r5, #4]
  407252:	07ed      	lsls	r5, r5, #31
  407254:	d542      	bpl.n	4072dc <_free_r+0xd8>
  407256:	f043 0201 	orr.w	r2, r3, #1
  40725a:	6062      	str	r2, [r4, #4]
  40725c:	50e3      	str	r3, [r4, r3]
  40725e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407262:	d218      	bcs.n	407296 <_free_r+0x92>
  407264:	08db      	lsrs	r3, r3, #3
  407266:	1c5a      	adds	r2, r3, #1
  407268:	684d      	ldr	r5, [r1, #4]
  40726a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  40726e:	60a7      	str	r7, [r4, #8]
  407270:	2001      	movs	r0, #1
  407272:	109b      	asrs	r3, r3, #2
  407274:	fa00 f303 	lsl.w	r3, r0, r3
  407278:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  40727c:	431d      	orrs	r5, r3
  40727e:	3808      	subs	r0, #8
  407280:	60e0      	str	r0, [r4, #12]
  407282:	604d      	str	r5, [r1, #4]
  407284:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  407288:	60fc      	str	r4, [r7, #12]
  40728a:	4640      	mov	r0, r8
  40728c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407290:	f7fc b8f2 	b.w	403478 <__malloc_unlock>
  407294:	4770      	bx	lr
  407296:	0a5a      	lsrs	r2, r3, #9
  407298:	2a04      	cmp	r2, #4
  40729a:	d853      	bhi.n	407344 <_free_r+0x140>
  40729c:	099a      	lsrs	r2, r3, #6
  40729e:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4072a2:	007f      	lsls	r7, r7, #1
  4072a4:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4072a8:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  4072ac:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  4072b0:	4944      	ldr	r1, [pc, #272]	; (4073c4 <_free_r+0x1c0>)
  4072b2:	3808      	subs	r0, #8
  4072b4:	4290      	cmp	r0, r2
  4072b6:	d04d      	beq.n	407354 <_free_r+0x150>
  4072b8:	6851      	ldr	r1, [r2, #4]
  4072ba:	f021 0103 	bic.w	r1, r1, #3
  4072be:	428b      	cmp	r3, r1
  4072c0:	d202      	bcs.n	4072c8 <_free_r+0xc4>
  4072c2:	6892      	ldr	r2, [r2, #8]
  4072c4:	4290      	cmp	r0, r2
  4072c6:	d1f7      	bne.n	4072b8 <_free_r+0xb4>
  4072c8:	68d0      	ldr	r0, [r2, #12]
  4072ca:	60e0      	str	r0, [r4, #12]
  4072cc:	60a2      	str	r2, [r4, #8]
  4072ce:	6084      	str	r4, [r0, #8]
  4072d0:	60d4      	str	r4, [r2, #12]
  4072d2:	4640      	mov	r0, r8
  4072d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4072d8:	f7fc b8ce 	b.w	403478 <__malloc_unlock>
  4072dc:	6895      	ldr	r5, [r2, #8]
  4072de:	4f3a      	ldr	r7, [pc, #232]	; (4073c8 <_free_r+0x1c4>)
  4072e0:	42bd      	cmp	r5, r7
  4072e2:	4403      	add	r3, r0
  4072e4:	d03f      	beq.n	407366 <_free_r+0x162>
  4072e6:	68d0      	ldr	r0, [r2, #12]
  4072e8:	60e8      	str	r0, [r5, #12]
  4072ea:	f043 0201 	orr.w	r2, r3, #1
  4072ee:	6085      	str	r5, [r0, #8]
  4072f0:	6062      	str	r2, [r4, #4]
  4072f2:	50e3      	str	r3, [r4, r3]
  4072f4:	e7b3      	b.n	40725e <_free_r+0x5a>
  4072f6:	07ff      	lsls	r7, r7, #31
  4072f8:	4403      	add	r3, r0
  4072fa:	d407      	bmi.n	40730c <_free_r+0x108>
  4072fc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407300:	1aa4      	subs	r4, r4, r2
  407302:	4413      	add	r3, r2
  407304:	68a0      	ldr	r0, [r4, #8]
  407306:	68e2      	ldr	r2, [r4, #12]
  407308:	60c2      	str	r2, [r0, #12]
  40730a:	6090      	str	r0, [r2, #8]
  40730c:	4a2f      	ldr	r2, [pc, #188]	; (4073cc <_free_r+0x1c8>)
  40730e:	6812      	ldr	r2, [r2, #0]
  407310:	f043 0001 	orr.w	r0, r3, #1
  407314:	4293      	cmp	r3, r2
  407316:	6060      	str	r0, [r4, #4]
  407318:	608c      	str	r4, [r1, #8]
  40731a:	d3b6      	bcc.n	40728a <_free_r+0x86>
  40731c:	4b2c      	ldr	r3, [pc, #176]	; (4073d0 <_free_r+0x1cc>)
  40731e:	4640      	mov	r0, r8
  407320:	6819      	ldr	r1, [r3, #0]
  407322:	f7ff ff21 	bl	407168 <_malloc_trim_r>
  407326:	e7b0      	b.n	40728a <_free_r+0x86>
  407328:	1811      	adds	r1, r2, r0
  40732a:	6849      	ldr	r1, [r1, #4]
  40732c:	07c9      	lsls	r1, r1, #31
  40732e:	d444      	bmi.n	4073ba <_free_r+0x1b6>
  407330:	6891      	ldr	r1, [r2, #8]
  407332:	68d2      	ldr	r2, [r2, #12]
  407334:	60ca      	str	r2, [r1, #12]
  407336:	4403      	add	r3, r0
  407338:	f043 0001 	orr.w	r0, r3, #1
  40733c:	6091      	str	r1, [r2, #8]
  40733e:	6060      	str	r0, [r4, #4]
  407340:	50e3      	str	r3, [r4, r3]
  407342:	e7a2      	b.n	40728a <_free_r+0x86>
  407344:	2a14      	cmp	r2, #20
  407346:	d817      	bhi.n	407378 <_free_r+0x174>
  407348:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40734c:	007f      	lsls	r7, r7, #1
  40734e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407352:	e7a9      	b.n	4072a8 <_free_r+0xa4>
  407354:	10aa      	asrs	r2, r5, #2
  407356:	684b      	ldr	r3, [r1, #4]
  407358:	2501      	movs	r5, #1
  40735a:	fa05 f202 	lsl.w	r2, r5, r2
  40735e:	4313      	orrs	r3, r2
  407360:	604b      	str	r3, [r1, #4]
  407362:	4602      	mov	r2, r0
  407364:	e7b1      	b.n	4072ca <_free_r+0xc6>
  407366:	f043 0201 	orr.w	r2, r3, #1
  40736a:	614c      	str	r4, [r1, #20]
  40736c:	610c      	str	r4, [r1, #16]
  40736e:	60e5      	str	r5, [r4, #12]
  407370:	60a5      	str	r5, [r4, #8]
  407372:	6062      	str	r2, [r4, #4]
  407374:	50e3      	str	r3, [r4, r3]
  407376:	e788      	b.n	40728a <_free_r+0x86>
  407378:	2a54      	cmp	r2, #84	; 0x54
  40737a:	d806      	bhi.n	40738a <_free_r+0x186>
  40737c:	0b1a      	lsrs	r2, r3, #12
  40737e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407382:	007f      	lsls	r7, r7, #1
  407384:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407388:	e78e      	b.n	4072a8 <_free_r+0xa4>
  40738a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40738e:	d806      	bhi.n	40739e <_free_r+0x19a>
  407390:	0bda      	lsrs	r2, r3, #15
  407392:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407396:	007f      	lsls	r7, r7, #1
  407398:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40739c:	e784      	b.n	4072a8 <_free_r+0xa4>
  40739e:	f240 5054 	movw	r0, #1364	; 0x554
  4073a2:	4282      	cmp	r2, r0
  4073a4:	d806      	bhi.n	4073b4 <_free_r+0x1b0>
  4073a6:	0c9a      	lsrs	r2, r3, #18
  4073a8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4073ac:	007f      	lsls	r7, r7, #1
  4073ae:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4073b2:	e779      	b.n	4072a8 <_free_r+0xa4>
  4073b4:	27fe      	movs	r7, #254	; 0xfe
  4073b6:	257e      	movs	r5, #126	; 0x7e
  4073b8:	e776      	b.n	4072a8 <_free_r+0xa4>
  4073ba:	f043 0201 	orr.w	r2, r3, #1
  4073be:	6062      	str	r2, [r4, #4]
  4073c0:	50e3      	str	r3, [r4, r3]
  4073c2:	e762      	b.n	40728a <_free_r+0x86>
  4073c4:	2040043c 	.word	0x2040043c
  4073c8:	20400444 	.word	0x20400444
  4073cc:	20400844 	.word	0x20400844
  4073d0:	20400b88 	.word	0x20400b88

004073d4 <__sfvwrite_r>:
  4073d4:	6893      	ldr	r3, [r2, #8]
  4073d6:	2b00      	cmp	r3, #0
  4073d8:	d076      	beq.n	4074c8 <__sfvwrite_r+0xf4>
  4073da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4073de:	898b      	ldrh	r3, [r1, #12]
  4073e0:	b085      	sub	sp, #20
  4073e2:	460c      	mov	r4, r1
  4073e4:	0719      	lsls	r1, r3, #28
  4073e6:	9001      	str	r0, [sp, #4]
  4073e8:	4616      	mov	r6, r2
  4073ea:	d529      	bpl.n	407440 <__sfvwrite_r+0x6c>
  4073ec:	6922      	ldr	r2, [r4, #16]
  4073ee:	b33a      	cbz	r2, 407440 <__sfvwrite_r+0x6c>
  4073f0:	f003 0802 	and.w	r8, r3, #2
  4073f4:	fa1f f088 	uxth.w	r0, r8
  4073f8:	6835      	ldr	r5, [r6, #0]
  4073fa:	2800      	cmp	r0, #0
  4073fc:	d02f      	beq.n	40745e <__sfvwrite_r+0x8a>
  4073fe:	f04f 0900 	mov.w	r9, #0
  407402:	4fb4      	ldr	r7, [pc, #720]	; (4076d4 <__sfvwrite_r+0x300>)
  407404:	46c8      	mov	r8, r9
  407406:	46b2      	mov	sl, r6
  407408:	45b8      	cmp	r8, r7
  40740a:	4643      	mov	r3, r8
  40740c:	464a      	mov	r2, r9
  40740e:	bf28      	it	cs
  407410:	463b      	movcs	r3, r7
  407412:	9801      	ldr	r0, [sp, #4]
  407414:	f1b8 0f00 	cmp.w	r8, #0
  407418:	d050      	beq.n	4074bc <__sfvwrite_r+0xe8>
  40741a:	69e1      	ldr	r1, [r4, #28]
  40741c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40741e:	47b0      	blx	r6
  407420:	2800      	cmp	r0, #0
  407422:	dd71      	ble.n	407508 <__sfvwrite_r+0x134>
  407424:	f8da 3008 	ldr.w	r3, [sl, #8]
  407428:	1a1b      	subs	r3, r3, r0
  40742a:	4481      	add	r9, r0
  40742c:	ebc0 0808 	rsb	r8, r0, r8
  407430:	f8ca 3008 	str.w	r3, [sl, #8]
  407434:	2b00      	cmp	r3, #0
  407436:	d1e7      	bne.n	407408 <__sfvwrite_r+0x34>
  407438:	2000      	movs	r0, #0
  40743a:	b005      	add	sp, #20
  40743c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407440:	4621      	mov	r1, r4
  407442:	9801      	ldr	r0, [sp, #4]
  407444:	f7fe fca8 	bl	405d98 <__swsetup_r>
  407448:	2800      	cmp	r0, #0
  40744a:	f040 813a 	bne.w	4076c2 <__sfvwrite_r+0x2ee>
  40744e:	89a3      	ldrh	r3, [r4, #12]
  407450:	6835      	ldr	r5, [r6, #0]
  407452:	f003 0802 	and.w	r8, r3, #2
  407456:	fa1f f088 	uxth.w	r0, r8
  40745a:	2800      	cmp	r0, #0
  40745c:	d1cf      	bne.n	4073fe <__sfvwrite_r+0x2a>
  40745e:	f013 0901 	ands.w	r9, r3, #1
  407462:	d15b      	bne.n	40751c <__sfvwrite_r+0x148>
  407464:	464f      	mov	r7, r9
  407466:	9602      	str	r6, [sp, #8]
  407468:	b31f      	cbz	r7, 4074b2 <__sfvwrite_r+0xde>
  40746a:	059a      	lsls	r2, r3, #22
  40746c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  407470:	d52c      	bpl.n	4074cc <__sfvwrite_r+0xf8>
  407472:	4547      	cmp	r7, r8
  407474:	46c2      	mov	sl, r8
  407476:	f0c0 80a4 	bcc.w	4075c2 <__sfvwrite_r+0x1ee>
  40747a:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40747e:	f040 80b1 	bne.w	4075e4 <__sfvwrite_r+0x210>
  407482:	6820      	ldr	r0, [r4, #0]
  407484:	4652      	mov	r2, sl
  407486:	4649      	mov	r1, r9
  407488:	f000 fa22 	bl	4078d0 <memmove>
  40748c:	68a0      	ldr	r0, [r4, #8]
  40748e:	6823      	ldr	r3, [r4, #0]
  407490:	ebc8 0000 	rsb	r0, r8, r0
  407494:	4453      	add	r3, sl
  407496:	60a0      	str	r0, [r4, #8]
  407498:	6023      	str	r3, [r4, #0]
  40749a:	4638      	mov	r0, r7
  40749c:	9a02      	ldr	r2, [sp, #8]
  40749e:	6893      	ldr	r3, [r2, #8]
  4074a0:	1a1b      	subs	r3, r3, r0
  4074a2:	4481      	add	r9, r0
  4074a4:	1a3f      	subs	r7, r7, r0
  4074a6:	6093      	str	r3, [r2, #8]
  4074a8:	2b00      	cmp	r3, #0
  4074aa:	d0c5      	beq.n	407438 <__sfvwrite_r+0x64>
  4074ac:	89a3      	ldrh	r3, [r4, #12]
  4074ae:	2f00      	cmp	r7, #0
  4074b0:	d1db      	bne.n	40746a <__sfvwrite_r+0x96>
  4074b2:	f8d5 9000 	ldr.w	r9, [r5]
  4074b6:	686f      	ldr	r7, [r5, #4]
  4074b8:	3508      	adds	r5, #8
  4074ba:	e7d5      	b.n	407468 <__sfvwrite_r+0x94>
  4074bc:	f8d5 9000 	ldr.w	r9, [r5]
  4074c0:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4074c4:	3508      	adds	r5, #8
  4074c6:	e79f      	b.n	407408 <__sfvwrite_r+0x34>
  4074c8:	2000      	movs	r0, #0
  4074ca:	4770      	bx	lr
  4074cc:	6820      	ldr	r0, [r4, #0]
  4074ce:	6923      	ldr	r3, [r4, #16]
  4074d0:	4298      	cmp	r0, r3
  4074d2:	d803      	bhi.n	4074dc <__sfvwrite_r+0x108>
  4074d4:	6961      	ldr	r1, [r4, #20]
  4074d6:	428f      	cmp	r7, r1
  4074d8:	f080 80b7 	bcs.w	40764a <__sfvwrite_r+0x276>
  4074dc:	45b8      	cmp	r8, r7
  4074de:	bf28      	it	cs
  4074e0:	46b8      	movcs	r8, r7
  4074e2:	4642      	mov	r2, r8
  4074e4:	4649      	mov	r1, r9
  4074e6:	f000 f9f3 	bl	4078d0 <memmove>
  4074ea:	68a3      	ldr	r3, [r4, #8]
  4074ec:	6822      	ldr	r2, [r4, #0]
  4074ee:	ebc8 0303 	rsb	r3, r8, r3
  4074f2:	4442      	add	r2, r8
  4074f4:	60a3      	str	r3, [r4, #8]
  4074f6:	6022      	str	r2, [r4, #0]
  4074f8:	2b00      	cmp	r3, #0
  4074fa:	d149      	bne.n	407590 <__sfvwrite_r+0x1bc>
  4074fc:	4621      	mov	r1, r4
  4074fe:	9801      	ldr	r0, [sp, #4]
  407500:	f7ff fd22 	bl	406f48 <_fflush_r>
  407504:	2800      	cmp	r0, #0
  407506:	d043      	beq.n	407590 <__sfvwrite_r+0x1bc>
  407508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40750c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407510:	f04f 30ff 	mov.w	r0, #4294967295
  407514:	81a3      	strh	r3, [r4, #12]
  407516:	b005      	add	sp, #20
  407518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40751c:	4680      	mov	r8, r0
  40751e:	9002      	str	r0, [sp, #8]
  407520:	4682      	mov	sl, r0
  407522:	4681      	mov	r9, r0
  407524:	f1b9 0f00 	cmp.w	r9, #0
  407528:	d02a      	beq.n	407580 <__sfvwrite_r+0x1ac>
  40752a:	9b02      	ldr	r3, [sp, #8]
  40752c:	2b00      	cmp	r3, #0
  40752e:	d04c      	beq.n	4075ca <__sfvwrite_r+0x1f6>
  407530:	6820      	ldr	r0, [r4, #0]
  407532:	6923      	ldr	r3, [r4, #16]
  407534:	6962      	ldr	r2, [r4, #20]
  407536:	45c8      	cmp	r8, r9
  407538:	46c3      	mov	fp, r8
  40753a:	bf28      	it	cs
  40753c:	46cb      	movcs	fp, r9
  40753e:	4298      	cmp	r0, r3
  407540:	465f      	mov	r7, fp
  407542:	d904      	bls.n	40754e <__sfvwrite_r+0x17a>
  407544:	68a3      	ldr	r3, [r4, #8]
  407546:	4413      	add	r3, r2
  407548:	459b      	cmp	fp, r3
  40754a:	f300 8090 	bgt.w	40766e <__sfvwrite_r+0x29a>
  40754e:	4593      	cmp	fp, r2
  407550:	db20      	blt.n	407594 <__sfvwrite_r+0x1c0>
  407552:	4613      	mov	r3, r2
  407554:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407556:	69e1      	ldr	r1, [r4, #28]
  407558:	9801      	ldr	r0, [sp, #4]
  40755a:	4652      	mov	r2, sl
  40755c:	47b8      	blx	r7
  40755e:	1e07      	subs	r7, r0, #0
  407560:	ddd2      	ble.n	407508 <__sfvwrite_r+0x134>
  407562:	ebb8 0807 	subs.w	r8, r8, r7
  407566:	d023      	beq.n	4075b0 <__sfvwrite_r+0x1dc>
  407568:	68b3      	ldr	r3, [r6, #8]
  40756a:	1bdb      	subs	r3, r3, r7
  40756c:	44ba      	add	sl, r7
  40756e:	ebc7 0909 	rsb	r9, r7, r9
  407572:	60b3      	str	r3, [r6, #8]
  407574:	2b00      	cmp	r3, #0
  407576:	f43f af5f 	beq.w	407438 <__sfvwrite_r+0x64>
  40757a:	f1b9 0f00 	cmp.w	r9, #0
  40757e:	d1d4      	bne.n	40752a <__sfvwrite_r+0x156>
  407580:	2300      	movs	r3, #0
  407582:	f8d5 a000 	ldr.w	sl, [r5]
  407586:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40758a:	9302      	str	r3, [sp, #8]
  40758c:	3508      	adds	r5, #8
  40758e:	e7c9      	b.n	407524 <__sfvwrite_r+0x150>
  407590:	4640      	mov	r0, r8
  407592:	e783      	b.n	40749c <__sfvwrite_r+0xc8>
  407594:	465a      	mov	r2, fp
  407596:	4651      	mov	r1, sl
  407598:	f000 f99a 	bl	4078d0 <memmove>
  40759c:	68a2      	ldr	r2, [r4, #8]
  40759e:	6823      	ldr	r3, [r4, #0]
  4075a0:	ebcb 0202 	rsb	r2, fp, r2
  4075a4:	445b      	add	r3, fp
  4075a6:	ebb8 0807 	subs.w	r8, r8, r7
  4075aa:	60a2      	str	r2, [r4, #8]
  4075ac:	6023      	str	r3, [r4, #0]
  4075ae:	d1db      	bne.n	407568 <__sfvwrite_r+0x194>
  4075b0:	4621      	mov	r1, r4
  4075b2:	9801      	ldr	r0, [sp, #4]
  4075b4:	f7ff fcc8 	bl	406f48 <_fflush_r>
  4075b8:	2800      	cmp	r0, #0
  4075ba:	d1a5      	bne.n	407508 <__sfvwrite_r+0x134>
  4075bc:	f8cd 8008 	str.w	r8, [sp, #8]
  4075c0:	e7d2      	b.n	407568 <__sfvwrite_r+0x194>
  4075c2:	6820      	ldr	r0, [r4, #0]
  4075c4:	46b8      	mov	r8, r7
  4075c6:	46ba      	mov	sl, r7
  4075c8:	e75c      	b.n	407484 <__sfvwrite_r+0xb0>
  4075ca:	464a      	mov	r2, r9
  4075cc:	210a      	movs	r1, #10
  4075ce:	4650      	mov	r0, sl
  4075d0:	f000 f92e 	bl	407830 <memchr>
  4075d4:	2800      	cmp	r0, #0
  4075d6:	d06f      	beq.n	4076b8 <__sfvwrite_r+0x2e4>
  4075d8:	3001      	adds	r0, #1
  4075da:	2301      	movs	r3, #1
  4075dc:	ebca 0800 	rsb	r8, sl, r0
  4075e0:	9302      	str	r3, [sp, #8]
  4075e2:	e7a5      	b.n	407530 <__sfvwrite_r+0x15c>
  4075e4:	6962      	ldr	r2, [r4, #20]
  4075e6:	6820      	ldr	r0, [r4, #0]
  4075e8:	6921      	ldr	r1, [r4, #16]
  4075ea:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4075ee:	ebc1 0a00 	rsb	sl, r1, r0
  4075f2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4075f6:	f10a 0001 	add.w	r0, sl, #1
  4075fa:	ea4f 0868 	mov.w	r8, r8, asr #1
  4075fe:	4438      	add	r0, r7
  407600:	4540      	cmp	r0, r8
  407602:	4642      	mov	r2, r8
  407604:	bf84      	itt	hi
  407606:	4680      	movhi	r8, r0
  407608:	4642      	movhi	r2, r8
  40760a:	055b      	lsls	r3, r3, #21
  40760c:	d542      	bpl.n	407694 <__sfvwrite_r+0x2c0>
  40760e:	4611      	mov	r1, r2
  407610:	9801      	ldr	r0, [sp, #4]
  407612:	f7fb fb8f 	bl	402d34 <_malloc_r>
  407616:	4683      	mov	fp, r0
  407618:	2800      	cmp	r0, #0
  40761a:	d055      	beq.n	4076c8 <__sfvwrite_r+0x2f4>
  40761c:	4652      	mov	r2, sl
  40761e:	6921      	ldr	r1, [r4, #16]
  407620:	f7fb fe40 	bl	4032a4 <memcpy>
  407624:	89a3      	ldrh	r3, [r4, #12]
  407626:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40762a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40762e:	81a3      	strh	r3, [r4, #12]
  407630:	ebca 0308 	rsb	r3, sl, r8
  407634:	eb0b 000a 	add.w	r0, fp, sl
  407638:	f8c4 8014 	str.w	r8, [r4, #20]
  40763c:	f8c4 b010 	str.w	fp, [r4, #16]
  407640:	6020      	str	r0, [r4, #0]
  407642:	60a3      	str	r3, [r4, #8]
  407644:	46b8      	mov	r8, r7
  407646:	46ba      	mov	sl, r7
  407648:	e71c      	b.n	407484 <__sfvwrite_r+0xb0>
  40764a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40764e:	42bb      	cmp	r3, r7
  407650:	bf28      	it	cs
  407652:	463b      	movcs	r3, r7
  407654:	464a      	mov	r2, r9
  407656:	fb93 f3f1 	sdiv	r3, r3, r1
  40765a:	9801      	ldr	r0, [sp, #4]
  40765c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40765e:	fb01 f303 	mul.w	r3, r1, r3
  407662:	69e1      	ldr	r1, [r4, #28]
  407664:	47b0      	blx	r6
  407666:	2800      	cmp	r0, #0
  407668:	f73f af18 	bgt.w	40749c <__sfvwrite_r+0xc8>
  40766c:	e74c      	b.n	407508 <__sfvwrite_r+0x134>
  40766e:	461a      	mov	r2, r3
  407670:	4651      	mov	r1, sl
  407672:	9303      	str	r3, [sp, #12]
  407674:	f000 f92c 	bl	4078d0 <memmove>
  407678:	6822      	ldr	r2, [r4, #0]
  40767a:	9b03      	ldr	r3, [sp, #12]
  40767c:	9801      	ldr	r0, [sp, #4]
  40767e:	441a      	add	r2, r3
  407680:	6022      	str	r2, [r4, #0]
  407682:	4621      	mov	r1, r4
  407684:	f7ff fc60 	bl	406f48 <_fflush_r>
  407688:	9b03      	ldr	r3, [sp, #12]
  40768a:	2800      	cmp	r0, #0
  40768c:	f47f af3c 	bne.w	407508 <__sfvwrite_r+0x134>
  407690:	461f      	mov	r7, r3
  407692:	e766      	b.n	407562 <__sfvwrite_r+0x18e>
  407694:	9801      	ldr	r0, [sp, #4]
  407696:	f000 fc8d 	bl	407fb4 <_realloc_r>
  40769a:	4683      	mov	fp, r0
  40769c:	2800      	cmp	r0, #0
  40769e:	d1c7      	bne.n	407630 <__sfvwrite_r+0x25c>
  4076a0:	9d01      	ldr	r5, [sp, #4]
  4076a2:	6921      	ldr	r1, [r4, #16]
  4076a4:	4628      	mov	r0, r5
  4076a6:	f7ff fdad 	bl	407204 <_free_r>
  4076aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4076ae:	220c      	movs	r2, #12
  4076b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4076b4:	602a      	str	r2, [r5, #0]
  4076b6:	e729      	b.n	40750c <__sfvwrite_r+0x138>
  4076b8:	2301      	movs	r3, #1
  4076ba:	f109 0801 	add.w	r8, r9, #1
  4076be:	9302      	str	r3, [sp, #8]
  4076c0:	e736      	b.n	407530 <__sfvwrite_r+0x15c>
  4076c2:	f04f 30ff 	mov.w	r0, #4294967295
  4076c6:	e6b8      	b.n	40743a <__sfvwrite_r+0x66>
  4076c8:	9a01      	ldr	r2, [sp, #4]
  4076ca:	230c      	movs	r3, #12
  4076cc:	6013      	str	r3, [r2, #0]
  4076ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4076d2:	e71b      	b.n	40750c <__sfvwrite_r+0x138>
  4076d4:	7ffffc00 	.word	0x7ffffc00

004076d8 <_fwalk_reent>:
  4076d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4076dc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4076e0:	d01f      	beq.n	407722 <_fwalk_reent+0x4a>
  4076e2:	4688      	mov	r8, r1
  4076e4:	4606      	mov	r6, r0
  4076e6:	f04f 0900 	mov.w	r9, #0
  4076ea:	687d      	ldr	r5, [r7, #4]
  4076ec:	68bc      	ldr	r4, [r7, #8]
  4076ee:	3d01      	subs	r5, #1
  4076f0:	d411      	bmi.n	407716 <_fwalk_reent+0x3e>
  4076f2:	89a3      	ldrh	r3, [r4, #12]
  4076f4:	2b01      	cmp	r3, #1
  4076f6:	f105 35ff 	add.w	r5, r5, #4294967295
  4076fa:	d908      	bls.n	40770e <_fwalk_reent+0x36>
  4076fc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407700:	3301      	adds	r3, #1
  407702:	4621      	mov	r1, r4
  407704:	4630      	mov	r0, r6
  407706:	d002      	beq.n	40770e <_fwalk_reent+0x36>
  407708:	47c0      	blx	r8
  40770a:	ea49 0900 	orr.w	r9, r9, r0
  40770e:	1c6b      	adds	r3, r5, #1
  407710:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407714:	d1ed      	bne.n	4076f2 <_fwalk_reent+0x1a>
  407716:	683f      	ldr	r7, [r7, #0]
  407718:	2f00      	cmp	r7, #0
  40771a:	d1e6      	bne.n	4076ea <_fwalk_reent+0x12>
  40771c:	4648      	mov	r0, r9
  40771e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407722:	46b9      	mov	r9, r7
  407724:	4648      	mov	r0, r9
  407726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40772a:	bf00      	nop

0040772c <__locale_charset>:
  40772c:	4800      	ldr	r0, [pc, #0]	; (407730 <__locale_charset+0x4>)
  40772e:	4770      	bx	lr
  407730:	20400884 	.word	0x20400884

00407734 <__locale_mb_cur_max>:
  407734:	4b01      	ldr	r3, [pc, #4]	; (40773c <__locale_mb_cur_max+0x8>)
  407736:	6818      	ldr	r0, [r3, #0]
  407738:	4770      	bx	lr
  40773a:	bf00      	nop
  40773c:	204008a4 	.word	0x204008a4

00407740 <_localeconv_r>:
  407740:	4800      	ldr	r0, [pc, #0]	; (407744 <_localeconv_r+0x4>)
  407742:	4770      	bx	lr
  407744:	2040084c 	.word	0x2040084c

00407748 <__swhatbuf_r>:
  407748:	b570      	push	{r4, r5, r6, lr}
  40774a:	460d      	mov	r5, r1
  40774c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407750:	2900      	cmp	r1, #0
  407752:	b090      	sub	sp, #64	; 0x40
  407754:	4614      	mov	r4, r2
  407756:	461e      	mov	r6, r3
  407758:	db14      	blt.n	407784 <__swhatbuf_r+0x3c>
  40775a:	aa01      	add	r2, sp, #4
  40775c:	f001 f858 	bl	408810 <_fstat_r>
  407760:	2800      	cmp	r0, #0
  407762:	db0f      	blt.n	407784 <__swhatbuf_r+0x3c>
  407764:	9a02      	ldr	r2, [sp, #8]
  407766:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40776a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40776e:	fab2 f282 	clz	r2, r2
  407772:	0952      	lsrs	r2, r2, #5
  407774:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407778:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40777c:	6032      	str	r2, [r6, #0]
  40777e:	6023      	str	r3, [r4, #0]
  407780:	b010      	add	sp, #64	; 0x40
  407782:	bd70      	pop	{r4, r5, r6, pc}
  407784:	89a8      	ldrh	r0, [r5, #12]
  407786:	f000 0080 	and.w	r0, r0, #128	; 0x80
  40778a:	b282      	uxth	r2, r0
  40778c:	2000      	movs	r0, #0
  40778e:	6030      	str	r0, [r6, #0]
  407790:	b11a      	cbz	r2, 40779a <__swhatbuf_r+0x52>
  407792:	2340      	movs	r3, #64	; 0x40
  407794:	6023      	str	r3, [r4, #0]
  407796:	b010      	add	sp, #64	; 0x40
  407798:	bd70      	pop	{r4, r5, r6, pc}
  40779a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40779e:	4610      	mov	r0, r2
  4077a0:	6023      	str	r3, [r4, #0]
  4077a2:	b010      	add	sp, #64	; 0x40
  4077a4:	bd70      	pop	{r4, r5, r6, pc}
  4077a6:	bf00      	nop

004077a8 <__smakebuf_r>:
  4077a8:	898a      	ldrh	r2, [r1, #12]
  4077aa:	0792      	lsls	r2, r2, #30
  4077ac:	460b      	mov	r3, r1
  4077ae:	d506      	bpl.n	4077be <__smakebuf_r+0x16>
  4077b0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4077b4:	2101      	movs	r1, #1
  4077b6:	601a      	str	r2, [r3, #0]
  4077b8:	611a      	str	r2, [r3, #16]
  4077ba:	6159      	str	r1, [r3, #20]
  4077bc:	4770      	bx	lr
  4077be:	b5f0      	push	{r4, r5, r6, r7, lr}
  4077c0:	b083      	sub	sp, #12
  4077c2:	ab01      	add	r3, sp, #4
  4077c4:	466a      	mov	r2, sp
  4077c6:	460c      	mov	r4, r1
  4077c8:	4605      	mov	r5, r0
  4077ca:	f7ff ffbd 	bl	407748 <__swhatbuf_r>
  4077ce:	9900      	ldr	r1, [sp, #0]
  4077d0:	4606      	mov	r6, r0
  4077d2:	4628      	mov	r0, r5
  4077d4:	f7fb faae 	bl	402d34 <_malloc_r>
  4077d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4077dc:	b1d0      	cbz	r0, 407814 <__smakebuf_r+0x6c>
  4077de:	9a01      	ldr	r2, [sp, #4]
  4077e0:	4f12      	ldr	r7, [pc, #72]	; (40782c <__smakebuf_r+0x84>)
  4077e2:	9900      	ldr	r1, [sp, #0]
  4077e4:	63ef      	str	r7, [r5, #60]	; 0x3c
  4077e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4077ea:	81a3      	strh	r3, [r4, #12]
  4077ec:	6020      	str	r0, [r4, #0]
  4077ee:	6120      	str	r0, [r4, #16]
  4077f0:	6161      	str	r1, [r4, #20]
  4077f2:	b91a      	cbnz	r2, 4077fc <__smakebuf_r+0x54>
  4077f4:	4333      	orrs	r3, r6
  4077f6:	81a3      	strh	r3, [r4, #12]
  4077f8:	b003      	add	sp, #12
  4077fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4077fc:	4628      	mov	r0, r5
  4077fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407802:	f001 f819 	bl	408838 <_isatty_r>
  407806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40780a:	2800      	cmp	r0, #0
  40780c:	d0f2      	beq.n	4077f4 <__smakebuf_r+0x4c>
  40780e:	f043 0301 	orr.w	r3, r3, #1
  407812:	e7ef      	b.n	4077f4 <__smakebuf_r+0x4c>
  407814:	059a      	lsls	r2, r3, #22
  407816:	d4ef      	bmi.n	4077f8 <__smakebuf_r+0x50>
  407818:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40781c:	f043 0302 	orr.w	r3, r3, #2
  407820:	2101      	movs	r1, #1
  407822:	81a3      	strh	r3, [r4, #12]
  407824:	6022      	str	r2, [r4, #0]
  407826:	6122      	str	r2, [r4, #16]
  407828:	6161      	str	r1, [r4, #20]
  40782a:	e7e5      	b.n	4077f8 <__smakebuf_r+0x50>
  40782c:	00406f75 	.word	0x00406f75

00407830 <memchr>:
  407830:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407834:	2a10      	cmp	r2, #16
  407836:	db2b      	blt.n	407890 <memchr+0x60>
  407838:	f010 0f07 	tst.w	r0, #7
  40783c:	d008      	beq.n	407850 <memchr+0x20>
  40783e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407842:	3a01      	subs	r2, #1
  407844:	428b      	cmp	r3, r1
  407846:	d02d      	beq.n	4078a4 <memchr+0x74>
  407848:	f010 0f07 	tst.w	r0, #7
  40784c:	b342      	cbz	r2, 4078a0 <memchr+0x70>
  40784e:	d1f6      	bne.n	40783e <memchr+0xe>
  407850:	b4f0      	push	{r4, r5, r6, r7}
  407852:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407856:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40785a:	f022 0407 	bic.w	r4, r2, #7
  40785e:	f07f 0700 	mvns.w	r7, #0
  407862:	2300      	movs	r3, #0
  407864:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407868:	3c08      	subs	r4, #8
  40786a:	ea85 0501 	eor.w	r5, r5, r1
  40786e:	ea86 0601 	eor.w	r6, r6, r1
  407872:	fa85 f547 	uadd8	r5, r5, r7
  407876:	faa3 f587 	sel	r5, r3, r7
  40787a:	fa86 f647 	uadd8	r6, r6, r7
  40787e:	faa5 f687 	sel	r6, r5, r7
  407882:	b98e      	cbnz	r6, 4078a8 <memchr+0x78>
  407884:	d1ee      	bne.n	407864 <memchr+0x34>
  407886:	bcf0      	pop	{r4, r5, r6, r7}
  407888:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40788c:	f002 0207 	and.w	r2, r2, #7
  407890:	b132      	cbz	r2, 4078a0 <memchr+0x70>
  407892:	f810 3b01 	ldrb.w	r3, [r0], #1
  407896:	3a01      	subs	r2, #1
  407898:	ea83 0301 	eor.w	r3, r3, r1
  40789c:	b113      	cbz	r3, 4078a4 <memchr+0x74>
  40789e:	d1f8      	bne.n	407892 <memchr+0x62>
  4078a0:	2000      	movs	r0, #0
  4078a2:	4770      	bx	lr
  4078a4:	3801      	subs	r0, #1
  4078a6:	4770      	bx	lr
  4078a8:	2d00      	cmp	r5, #0
  4078aa:	bf06      	itte	eq
  4078ac:	4635      	moveq	r5, r6
  4078ae:	3803      	subeq	r0, #3
  4078b0:	3807      	subne	r0, #7
  4078b2:	f015 0f01 	tst.w	r5, #1
  4078b6:	d107      	bne.n	4078c8 <memchr+0x98>
  4078b8:	3001      	adds	r0, #1
  4078ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4078be:	bf02      	ittt	eq
  4078c0:	3001      	addeq	r0, #1
  4078c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4078c6:	3001      	addeq	r0, #1
  4078c8:	bcf0      	pop	{r4, r5, r6, r7}
  4078ca:	3801      	subs	r0, #1
  4078cc:	4770      	bx	lr
  4078ce:	bf00      	nop

004078d0 <memmove>:
  4078d0:	4288      	cmp	r0, r1
  4078d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4078d4:	d90d      	bls.n	4078f2 <memmove+0x22>
  4078d6:	188b      	adds	r3, r1, r2
  4078d8:	4298      	cmp	r0, r3
  4078da:	d20a      	bcs.n	4078f2 <memmove+0x22>
  4078dc:	1881      	adds	r1, r0, r2
  4078de:	2a00      	cmp	r2, #0
  4078e0:	d051      	beq.n	407986 <memmove+0xb6>
  4078e2:	1a9a      	subs	r2, r3, r2
  4078e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4078e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4078ec:	4293      	cmp	r3, r2
  4078ee:	d1f9      	bne.n	4078e4 <memmove+0x14>
  4078f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4078f2:	2a0f      	cmp	r2, #15
  4078f4:	d948      	bls.n	407988 <memmove+0xb8>
  4078f6:	ea41 0300 	orr.w	r3, r1, r0
  4078fa:	079b      	lsls	r3, r3, #30
  4078fc:	d146      	bne.n	40798c <memmove+0xbc>
  4078fe:	f100 0410 	add.w	r4, r0, #16
  407902:	f101 0310 	add.w	r3, r1, #16
  407906:	4615      	mov	r5, r2
  407908:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40790c:	f844 6c10 	str.w	r6, [r4, #-16]
  407910:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407914:	f844 6c0c 	str.w	r6, [r4, #-12]
  407918:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40791c:	f844 6c08 	str.w	r6, [r4, #-8]
  407920:	3d10      	subs	r5, #16
  407922:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407926:	f844 6c04 	str.w	r6, [r4, #-4]
  40792a:	2d0f      	cmp	r5, #15
  40792c:	f103 0310 	add.w	r3, r3, #16
  407930:	f104 0410 	add.w	r4, r4, #16
  407934:	d8e8      	bhi.n	407908 <memmove+0x38>
  407936:	f1a2 0310 	sub.w	r3, r2, #16
  40793a:	f023 030f 	bic.w	r3, r3, #15
  40793e:	f002 0e0f 	and.w	lr, r2, #15
  407942:	3310      	adds	r3, #16
  407944:	f1be 0f03 	cmp.w	lr, #3
  407948:	4419      	add	r1, r3
  40794a:	4403      	add	r3, r0
  40794c:	d921      	bls.n	407992 <memmove+0xc2>
  40794e:	1f1e      	subs	r6, r3, #4
  407950:	460d      	mov	r5, r1
  407952:	4674      	mov	r4, lr
  407954:	3c04      	subs	r4, #4
  407956:	f855 7b04 	ldr.w	r7, [r5], #4
  40795a:	f846 7f04 	str.w	r7, [r6, #4]!
  40795e:	2c03      	cmp	r4, #3
  407960:	d8f8      	bhi.n	407954 <memmove+0x84>
  407962:	f1ae 0404 	sub.w	r4, lr, #4
  407966:	f024 0403 	bic.w	r4, r4, #3
  40796a:	3404      	adds	r4, #4
  40796c:	4423      	add	r3, r4
  40796e:	4421      	add	r1, r4
  407970:	f002 0203 	and.w	r2, r2, #3
  407974:	b162      	cbz	r2, 407990 <memmove+0xc0>
  407976:	3b01      	subs	r3, #1
  407978:	440a      	add	r2, r1
  40797a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40797e:	f803 4f01 	strb.w	r4, [r3, #1]!
  407982:	428a      	cmp	r2, r1
  407984:	d1f9      	bne.n	40797a <memmove+0xaa>
  407986:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407988:	4603      	mov	r3, r0
  40798a:	e7f3      	b.n	407974 <memmove+0xa4>
  40798c:	4603      	mov	r3, r0
  40798e:	e7f2      	b.n	407976 <memmove+0xa6>
  407990:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407992:	4672      	mov	r2, lr
  407994:	e7ee      	b.n	407974 <memmove+0xa4>
  407996:	bf00      	nop

00407998 <_Balloc>:
  407998:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40799a:	b570      	push	{r4, r5, r6, lr}
  40799c:	4605      	mov	r5, r0
  40799e:	460c      	mov	r4, r1
  4079a0:	b14b      	cbz	r3, 4079b6 <_Balloc+0x1e>
  4079a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4079a6:	b180      	cbz	r0, 4079ca <_Balloc+0x32>
  4079a8:	6802      	ldr	r2, [r0, #0]
  4079aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4079ae:	2300      	movs	r3, #0
  4079b0:	6103      	str	r3, [r0, #16]
  4079b2:	60c3      	str	r3, [r0, #12]
  4079b4:	bd70      	pop	{r4, r5, r6, pc}
  4079b6:	2221      	movs	r2, #33	; 0x21
  4079b8:	2104      	movs	r1, #4
  4079ba:	f000 fea5 	bl	408708 <_calloc_r>
  4079be:	64e8      	str	r0, [r5, #76]	; 0x4c
  4079c0:	4603      	mov	r3, r0
  4079c2:	2800      	cmp	r0, #0
  4079c4:	d1ed      	bne.n	4079a2 <_Balloc+0xa>
  4079c6:	2000      	movs	r0, #0
  4079c8:	bd70      	pop	{r4, r5, r6, pc}
  4079ca:	2101      	movs	r1, #1
  4079cc:	fa01 f604 	lsl.w	r6, r1, r4
  4079d0:	1d72      	adds	r2, r6, #5
  4079d2:	4628      	mov	r0, r5
  4079d4:	0092      	lsls	r2, r2, #2
  4079d6:	f000 fe97 	bl	408708 <_calloc_r>
  4079da:	2800      	cmp	r0, #0
  4079dc:	d0f3      	beq.n	4079c6 <_Balloc+0x2e>
  4079de:	6044      	str	r4, [r0, #4]
  4079e0:	6086      	str	r6, [r0, #8]
  4079e2:	e7e4      	b.n	4079ae <_Balloc+0x16>

004079e4 <_Bfree>:
  4079e4:	b131      	cbz	r1, 4079f4 <_Bfree+0x10>
  4079e6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4079e8:	684a      	ldr	r2, [r1, #4]
  4079ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4079ee:	6008      	str	r0, [r1, #0]
  4079f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4079f4:	4770      	bx	lr
  4079f6:	bf00      	nop

004079f8 <__multadd>:
  4079f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4079fa:	690c      	ldr	r4, [r1, #16]
  4079fc:	b083      	sub	sp, #12
  4079fe:	460d      	mov	r5, r1
  407a00:	4606      	mov	r6, r0
  407a02:	f101 0e14 	add.w	lr, r1, #20
  407a06:	2700      	movs	r7, #0
  407a08:	f8de 0000 	ldr.w	r0, [lr]
  407a0c:	b281      	uxth	r1, r0
  407a0e:	fb02 3101 	mla	r1, r2, r1, r3
  407a12:	0c0b      	lsrs	r3, r1, #16
  407a14:	0c00      	lsrs	r0, r0, #16
  407a16:	fb02 3300 	mla	r3, r2, r0, r3
  407a1a:	b289      	uxth	r1, r1
  407a1c:	3701      	adds	r7, #1
  407a1e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  407a22:	42bc      	cmp	r4, r7
  407a24:	f84e 1b04 	str.w	r1, [lr], #4
  407a28:	ea4f 4313 	mov.w	r3, r3, lsr #16
  407a2c:	dcec      	bgt.n	407a08 <__multadd+0x10>
  407a2e:	b13b      	cbz	r3, 407a40 <__multadd+0x48>
  407a30:	68aa      	ldr	r2, [r5, #8]
  407a32:	4294      	cmp	r4, r2
  407a34:	da07      	bge.n	407a46 <__multadd+0x4e>
  407a36:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  407a3a:	3401      	adds	r4, #1
  407a3c:	6153      	str	r3, [r2, #20]
  407a3e:	612c      	str	r4, [r5, #16]
  407a40:	4628      	mov	r0, r5
  407a42:	b003      	add	sp, #12
  407a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407a46:	6869      	ldr	r1, [r5, #4]
  407a48:	9301      	str	r3, [sp, #4]
  407a4a:	3101      	adds	r1, #1
  407a4c:	4630      	mov	r0, r6
  407a4e:	f7ff ffa3 	bl	407998 <_Balloc>
  407a52:	692a      	ldr	r2, [r5, #16]
  407a54:	3202      	adds	r2, #2
  407a56:	f105 010c 	add.w	r1, r5, #12
  407a5a:	4607      	mov	r7, r0
  407a5c:	0092      	lsls	r2, r2, #2
  407a5e:	300c      	adds	r0, #12
  407a60:	f7fb fc20 	bl	4032a4 <memcpy>
  407a64:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407a66:	6869      	ldr	r1, [r5, #4]
  407a68:	9b01      	ldr	r3, [sp, #4]
  407a6a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407a6e:	6028      	str	r0, [r5, #0]
  407a70:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407a74:	463d      	mov	r5, r7
  407a76:	e7de      	b.n	407a36 <__multadd+0x3e>

00407a78 <__hi0bits>:
  407a78:	0c03      	lsrs	r3, r0, #16
  407a7a:	041b      	lsls	r3, r3, #16
  407a7c:	b9b3      	cbnz	r3, 407aac <__hi0bits+0x34>
  407a7e:	0400      	lsls	r0, r0, #16
  407a80:	2310      	movs	r3, #16
  407a82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  407a86:	bf04      	itt	eq
  407a88:	0200      	lsleq	r0, r0, #8
  407a8a:	3308      	addeq	r3, #8
  407a8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  407a90:	bf04      	itt	eq
  407a92:	0100      	lsleq	r0, r0, #4
  407a94:	3304      	addeq	r3, #4
  407a96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  407a9a:	bf04      	itt	eq
  407a9c:	0080      	lsleq	r0, r0, #2
  407a9e:	3302      	addeq	r3, #2
  407aa0:	2800      	cmp	r0, #0
  407aa2:	db07      	blt.n	407ab4 <__hi0bits+0x3c>
  407aa4:	0042      	lsls	r2, r0, #1
  407aa6:	d403      	bmi.n	407ab0 <__hi0bits+0x38>
  407aa8:	2020      	movs	r0, #32
  407aaa:	4770      	bx	lr
  407aac:	2300      	movs	r3, #0
  407aae:	e7e8      	b.n	407a82 <__hi0bits+0xa>
  407ab0:	1c58      	adds	r0, r3, #1
  407ab2:	4770      	bx	lr
  407ab4:	4618      	mov	r0, r3
  407ab6:	4770      	bx	lr

00407ab8 <__lo0bits>:
  407ab8:	6803      	ldr	r3, [r0, #0]
  407aba:	f013 0207 	ands.w	r2, r3, #7
  407abe:	d007      	beq.n	407ad0 <__lo0bits+0x18>
  407ac0:	07d9      	lsls	r1, r3, #31
  407ac2:	d420      	bmi.n	407b06 <__lo0bits+0x4e>
  407ac4:	079a      	lsls	r2, r3, #30
  407ac6:	d420      	bmi.n	407b0a <__lo0bits+0x52>
  407ac8:	089b      	lsrs	r3, r3, #2
  407aca:	6003      	str	r3, [r0, #0]
  407acc:	2002      	movs	r0, #2
  407ace:	4770      	bx	lr
  407ad0:	b299      	uxth	r1, r3
  407ad2:	b909      	cbnz	r1, 407ad8 <__lo0bits+0x20>
  407ad4:	0c1b      	lsrs	r3, r3, #16
  407ad6:	2210      	movs	r2, #16
  407ad8:	f013 0fff 	tst.w	r3, #255	; 0xff
  407adc:	bf04      	itt	eq
  407ade:	0a1b      	lsreq	r3, r3, #8
  407ae0:	3208      	addeq	r2, #8
  407ae2:	0719      	lsls	r1, r3, #28
  407ae4:	bf04      	itt	eq
  407ae6:	091b      	lsreq	r3, r3, #4
  407ae8:	3204      	addeq	r2, #4
  407aea:	0799      	lsls	r1, r3, #30
  407aec:	bf04      	itt	eq
  407aee:	089b      	lsreq	r3, r3, #2
  407af0:	3202      	addeq	r2, #2
  407af2:	07d9      	lsls	r1, r3, #31
  407af4:	d404      	bmi.n	407b00 <__lo0bits+0x48>
  407af6:	085b      	lsrs	r3, r3, #1
  407af8:	d101      	bne.n	407afe <__lo0bits+0x46>
  407afa:	2020      	movs	r0, #32
  407afc:	4770      	bx	lr
  407afe:	3201      	adds	r2, #1
  407b00:	6003      	str	r3, [r0, #0]
  407b02:	4610      	mov	r0, r2
  407b04:	4770      	bx	lr
  407b06:	2000      	movs	r0, #0
  407b08:	4770      	bx	lr
  407b0a:	085b      	lsrs	r3, r3, #1
  407b0c:	6003      	str	r3, [r0, #0]
  407b0e:	2001      	movs	r0, #1
  407b10:	4770      	bx	lr
  407b12:	bf00      	nop

00407b14 <__i2b>:
  407b14:	b510      	push	{r4, lr}
  407b16:	460c      	mov	r4, r1
  407b18:	2101      	movs	r1, #1
  407b1a:	f7ff ff3d 	bl	407998 <_Balloc>
  407b1e:	2201      	movs	r2, #1
  407b20:	6144      	str	r4, [r0, #20]
  407b22:	6102      	str	r2, [r0, #16]
  407b24:	bd10      	pop	{r4, pc}
  407b26:	bf00      	nop

00407b28 <__multiply>:
  407b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b2c:	690d      	ldr	r5, [r1, #16]
  407b2e:	6917      	ldr	r7, [r2, #16]
  407b30:	42bd      	cmp	r5, r7
  407b32:	b083      	sub	sp, #12
  407b34:	460c      	mov	r4, r1
  407b36:	4616      	mov	r6, r2
  407b38:	da04      	bge.n	407b44 <__multiply+0x1c>
  407b3a:	462a      	mov	r2, r5
  407b3c:	4634      	mov	r4, r6
  407b3e:	463d      	mov	r5, r7
  407b40:	460e      	mov	r6, r1
  407b42:	4617      	mov	r7, r2
  407b44:	68a3      	ldr	r3, [r4, #8]
  407b46:	6861      	ldr	r1, [r4, #4]
  407b48:	eb05 0807 	add.w	r8, r5, r7
  407b4c:	4598      	cmp	r8, r3
  407b4e:	bfc8      	it	gt
  407b50:	3101      	addgt	r1, #1
  407b52:	f7ff ff21 	bl	407998 <_Balloc>
  407b56:	f100 0c14 	add.w	ip, r0, #20
  407b5a:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  407b5e:	45cc      	cmp	ip, r9
  407b60:	9000      	str	r0, [sp, #0]
  407b62:	d205      	bcs.n	407b70 <__multiply+0x48>
  407b64:	4663      	mov	r3, ip
  407b66:	2100      	movs	r1, #0
  407b68:	f843 1b04 	str.w	r1, [r3], #4
  407b6c:	4599      	cmp	r9, r3
  407b6e:	d8fb      	bhi.n	407b68 <__multiply+0x40>
  407b70:	f106 0214 	add.w	r2, r6, #20
  407b74:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  407b78:	f104 0314 	add.w	r3, r4, #20
  407b7c:	4552      	cmp	r2, sl
  407b7e:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  407b82:	d254      	bcs.n	407c2e <__multiply+0x106>
  407b84:	f8cd 9004 	str.w	r9, [sp, #4]
  407b88:	4699      	mov	r9, r3
  407b8a:	f852 3b04 	ldr.w	r3, [r2], #4
  407b8e:	fa1f fb83 	uxth.w	fp, r3
  407b92:	f1bb 0f00 	cmp.w	fp, #0
  407b96:	d020      	beq.n	407bda <__multiply+0xb2>
  407b98:	2000      	movs	r0, #0
  407b9a:	464f      	mov	r7, r9
  407b9c:	4666      	mov	r6, ip
  407b9e:	4605      	mov	r5, r0
  407ba0:	e000      	b.n	407ba4 <__multiply+0x7c>
  407ba2:	461e      	mov	r6, r3
  407ba4:	f857 4b04 	ldr.w	r4, [r7], #4
  407ba8:	6830      	ldr	r0, [r6, #0]
  407baa:	b2a1      	uxth	r1, r4
  407bac:	b283      	uxth	r3, r0
  407bae:	fb0b 3101 	mla	r1, fp, r1, r3
  407bb2:	0c24      	lsrs	r4, r4, #16
  407bb4:	0c00      	lsrs	r0, r0, #16
  407bb6:	194b      	adds	r3, r1, r5
  407bb8:	fb0b 0004 	mla	r0, fp, r4, r0
  407bbc:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  407bc0:	b299      	uxth	r1, r3
  407bc2:	4633      	mov	r3, r6
  407bc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  407bc8:	45be      	cmp	lr, r7
  407bca:	ea4f 4510 	mov.w	r5, r0, lsr #16
  407bce:	f843 1b04 	str.w	r1, [r3], #4
  407bd2:	d8e6      	bhi.n	407ba2 <__multiply+0x7a>
  407bd4:	6075      	str	r5, [r6, #4]
  407bd6:	f852 3c04 	ldr.w	r3, [r2, #-4]
  407bda:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  407bde:	d020      	beq.n	407c22 <__multiply+0xfa>
  407be0:	f8dc 3000 	ldr.w	r3, [ip]
  407be4:	4667      	mov	r7, ip
  407be6:	4618      	mov	r0, r3
  407be8:	464d      	mov	r5, r9
  407bea:	2100      	movs	r1, #0
  407bec:	e000      	b.n	407bf0 <__multiply+0xc8>
  407bee:	4637      	mov	r7, r6
  407bf0:	882c      	ldrh	r4, [r5, #0]
  407bf2:	0c00      	lsrs	r0, r0, #16
  407bf4:	fb0b 0004 	mla	r0, fp, r4, r0
  407bf8:	4401      	add	r1, r0
  407bfa:	b29c      	uxth	r4, r3
  407bfc:	463e      	mov	r6, r7
  407bfe:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  407c02:	f846 3b04 	str.w	r3, [r6], #4
  407c06:	6878      	ldr	r0, [r7, #4]
  407c08:	f855 4b04 	ldr.w	r4, [r5], #4
  407c0c:	b283      	uxth	r3, r0
  407c0e:	0c24      	lsrs	r4, r4, #16
  407c10:	fb0b 3404 	mla	r4, fp, r4, r3
  407c14:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  407c18:	45ae      	cmp	lr, r5
  407c1a:	ea4f 4113 	mov.w	r1, r3, lsr #16
  407c1e:	d8e6      	bhi.n	407bee <__multiply+0xc6>
  407c20:	607b      	str	r3, [r7, #4]
  407c22:	4592      	cmp	sl, r2
  407c24:	f10c 0c04 	add.w	ip, ip, #4
  407c28:	d8af      	bhi.n	407b8a <__multiply+0x62>
  407c2a:	f8dd 9004 	ldr.w	r9, [sp, #4]
  407c2e:	f1b8 0f00 	cmp.w	r8, #0
  407c32:	dd0b      	ble.n	407c4c <__multiply+0x124>
  407c34:	f859 3c04 	ldr.w	r3, [r9, #-4]
  407c38:	f1a9 0904 	sub.w	r9, r9, #4
  407c3c:	b11b      	cbz	r3, 407c46 <__multiply+0x11e>
  407c3e:	e005      	b.n	407c4c <__multiply+0x124>
  407c40:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  407c44:	b913      	cbnz	r3, 407c4c <__multiply+0x124>
  407c46:	f1b8 0801 	subs.w	r8, r8, #1
  407c4a:	d1f9      	bne.n	407c40 <__multiply+0x118>
  407c4c:	9800      	ldr	r0, [sp, #0]
  407c4e:	f8c0 8010 	str.w	r8, [r0, #16]
  407c52:	b003      	add	sp, #12
  407c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407c58 <__pow5mult>:
  407c58:	f012 0303 	ands.w	r3, r2, #3
  407c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407c60:	4614      	mov	r4, r2
  407c62:	4607      	mov	r7, r0
  407c64:	d12e      	bne.n	407cc4 <__pow5mult+0x6c>
  407c66:	460e      	mov	r6, r1
  407c68:	10a4      	asrs	r4, r4, #2
  407c6a:	d01c      	beq.n	407ca6 <__pow5mult+0x4e>
  407c6c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  407c6e:	b395      	cbz	r5, 407cd6 <__pow5mult+0x7e>
  407c70:	07e3      	lsls	r3, r4, #31
  407c72:	f04f 0800 	mov.w	r8, #0
  407c76:	d406      	bmi.n	407c86 <__pow5mult+0x2e>
  407c78:	1064      	asrs	r4, r4, #1
  407c7a:	d014      	beq.n	407ca6 <__pow5mult+0x4e>
  407c7c:	6828      	ldr	r0, [r5, #0]
  407c7e:	b1a8      	cbz	r0, 407cac <__pow5mult+0x54>
  407c80:	4605      	mov	r5, r0
  407c82:	07e3      	lsls	r3, r4, #31
  407c84:	d5f8      	bpl.n	407c78 <__pow5mult+0x20>
  407c86:	462a      	mov	r2, r5
  407c88:	4631      	mov	r1, r6
  407c8a:	4638      	mov	r0, r7
  407c8c:	f7ff ff4c 	bl	407b28 <__multiply>
  407c90:	b1b6      	cbz	r6, 407cc0 <__pow5mult+0x68>
  407c92:	6872      	ldr	r2, [r6, #4]
  407c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407c96:	1064      	asrs	r4, r4, #1
  407c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407c9c:	6031      	str	r1, [r6, #0]
  407c9e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407ca2:	4606      	mov	r6, r0
  407ca4:	d1ea      	bne.n	407c7c <__pow5mult+0x24>
  407ca6:	4630      	mov	r0, r6
  407ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407cac:	462a      	mov	r2, r5
  407cae:	4629      	mov	r1, r5
  407cb0:	4638      	mov	r0, r7
  407cb2:	f7ff ff39 	bl	407b28 <__multiply>
  407cb6:	6028      	str	r0, [r5, #0]
  407cb8:	f8c0 8000 	str.w	r8, [r0]
  407cbc:	4605      	mov	r5, r0
  407cbe:	e7e0      	b.n	407c82 <__pow5mult+0x2a>
  407cc0:	4606      	mov	r6, r0
  407cc2:	e7d9      	b.n	407c78 <__pow5mult+0x20>
  407cc4:	1e5a      	subs	r2, r3, #1
  407cc6:	4d0b      	ldr	r5, [pc, #44]	; (407cf4 <__pow5mult+0x9c>)
  407cc8:	2300      	movs	r3, #0
  407cca:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  407cce:	f7ff fe93 	bl	4079f8 <__multadd>
  407cd2:	4606      	mov	r6, r0
  407cd4:	e7c8      	b.n	407c68 <__pow5mult+0x10>
  407cd6:	2101      	movs	r1, #1
  407cd8:	4638      	mov	r0, r7
  407cda:	f7ff fe5d 	bl	407998 <_Balloc>
  407cde:	f240 2171 	movw	r1, #625	; 0x271
  407ce2:	2201      	movs	r2, #1
  407ce4:	2300      	movs	r3, #0
  407ce6:	6141      	str	r1, [r0, #20]
  407ce8:	6102      	str	r2, [r0, #16]
  407cea:	4605      	mov	r5, r0
  407cec:	64b8      	str	r0, [r7, #72]	; 0x48
  407cee:	6003      	str	r3, [r0, #0]
  407cf0:	e7be      	b.n	407c70 <__pow5mult+0x18>
  407cf2:	bf00      	nop
  407cf4:	004097a8 	.word	0x004097a8

00407cf8 <__lshift>:
  407cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407cfc:	4691      	mov	r9, r2
  407cfe:	690a      	ldr	r2, [r1, #16]
  407d00:	688b      	ldr	r3, [r1, #8]
  407d02:	ea4f 1469 	mov.w	r4, r9, asr #5
  407d06:	eb04 0802 	add.w	r8, r4, r2
  407d0a:	f108 0501 	add.w	r5, r8, #1
  407d0e:	429d      	cmp	r5, r3
  407d10:	460e      	mov	r6, r1
  407d12:	4682      	mov	sl, r0
  407d14:	6849      	ldr	r1, [r1, #4]
  407d16:	dd04      	ble.n	407d22 <__lshift+0x2a>
  407d18:	005b      	lsls	r3, r3, #1
  407d1a:	429d      	cmp	r5, r3
  407d1c:	f101 0101 	add.w	r1, r1, #1
  407d20:	dcfa      	bgt.n	407d18 <__lshift+0x20>
  407d22:	4650      	mov	r0, sl
  407d24:	f7ff fe38 	bl	407998 <_Balloc>
  407d28:	2c00      	cmp	r4, #0
  407d2a:	f100 0214 	add.w	r2, r0, #20
  407d2e:	dd38      	ble.n	407da2 <__lshift+0xaa>
  407d30:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  407d34:	2100      	movs	r1, #0
  407d36:	f842 1b04 	str.w	r1, [r2], #4
  407d3a:	4293      	cmp	r3, r2
  407d3c:	d1fb      	bne.n	407d36 <__lshift+0x3e>
  407d3e:	6934      	ldr	r4, [r6, #16]
  407d40:	f106 0114 	add.w	r1, r6, #20
  407d44:	f019 091f 	ands.w	r9, r9, #31
  407d48:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407d4c:	d021      	beq.n	407d92 <__lshift+0x9a>
  407d4e:	f1c9 0220 	rsb	r2, r9, #32
  407d52:	2400      	movs	r4, #0
  407d54:	680f      	ldr	r7, [r1, #0]
  407d56:	fa07 fc09 	lsl.w	ip, r7, r9
  407d5a:	ea4c 0404 	orr.w	r4, ip, r4
  407d5e:	469c      	mov	ip, r3
  407d60:	f843 4b04 	str.w	r4, [r3], #4
  407d64:	f851 4b04 	ldr.w	r4, [r1], #4
  407d68:	458e      	cmp	lr, r1
  407d6a:	fa24 f402 	lsr.w	r4, r4, r2
  407d6e:	d8f1      	bhi.n	407d54 <__lshift+0x5c>
  407d70:	f8cc 4004 	str.w	r4, [ip, #4]
  407d74:	b10c      	cbz	r4, 407d7a <__lshift+0x82>
  407d76:	f108 0502 	add.w	r5, r8, #2
  407d7a:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  407d7e:	6872      	ldr	r2, [r6, #4]
  407d80:	3d01      	subs	r5, #1
  407d82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407d86:	6105      	str	r5, [r0, #16]
  407d88:	6031      	str	r1, [r6, #0]
  407d8a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407d92:	3b04      	subs	r3, #4
  407d94:	f851 2b04 	ldr.w	r2, [r1], #4
  407d98:	f843 2f04 	str.w	r2, [r3, #4]!
  407d9c:	458e      	cmp	lr, r1
  407d9e:	d8f9      	bhi.n	407d94 <__lshift+0x9c>
  407da0:	e7eb      	b.n	407d7a <__lshift+0x82>
  407da2:	4613      	mov	r3, r2
  407da4:	e7cb      	b.n	407d3e <__lshift+0x46>
  407da6:	bf00      	nop

00407da8 <__mcmp>:
  407da8:	6902      	ldr	r2, [r0, #16]
  407daa:	690b      	ldr	r3, [r1, #16]
  407dac:	1ad2      	subs	r2, r2, r3
  407dae:	d112      	bne.n	407dd6 <__mcmp+0x2e>
  407db0:	009b      	lsls	r3, r3, #2
  407db2:	3014      	adds	r0, #20
  407db4:	3114      	adds	r1, #20
  407db6:	4419      	add	r1, r3
  407db8:	b410      	push	{r4}
  407dba:	4403      	add	r3, r0
  407dbc:	e001      	b.n	407dc2 <__mcmp+0x1a>
  407dbe:	4298      	cmp	r0, r3
  407dc0:	d20b      	bcs.n	407dda <__mcmp+0x32>
  407dc2:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407dc6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407dca:	4294      	cmp	r4, r2
  407dcc:	d0f7      	beq.n	407dbe <__mcmp+0x16>
  407dce:	d307      	bcc.n	407de0 <__mcmp+0x38>
  407dd0:	2001      	movs	r0, #1
  407dd2:	bc10      	pop	{r4}
  407dd4:	4770      	bx	lr
  407dd6:	4610      	mov	r0, r2
  407dd8:	4770      	bx	lr
  407dda:	2000      	movs	r0, #0
  407ddc:	bc10      	pop	{r4}
  407dde:	4770      	bx	lr
  407de0:	f04f 30ff 	mov.w	r0, #4294967295
  407de4:	e7f5      	b.n	407dd2 <__mcmp+0x2a>
  407de6:	bf00      	nop

00407de8 <__mdiff>:
  407de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407dec:	690b      	ldr	r3, [r1, #16]
  407dee:	460f      	mov	r7, r1
  407df0:	6911      	ldr	r1, [r2, #16]
  407df2:	1a5b      	subs	r3, r3, r1
  407df4:	2b00      	cmp	r3, #0
  407df6:	4690      	mov	r8, r2
  407df8:	d117      	bne.n	407e2a <__mdiff+0x42>
  407dfa:	0089      	lsls	r1, r1, #2
  407dfc:	f107 0214 	add.w	r2, r7, #20
  407e00:	f108 0514 	add.w	r5, r8, #20
  407e04:	1853      	adds	r3, r2, r1
  407e06:	4429      	add	r1, r5
  407e08:	e001      	b.n	407e0e <__mdiff+0x26>
  407e0a:	429a      	cmp	r2, r3
  407e0c:	d25e      	bcs.n	407ecc <__mdiff+0xe4>
  407e0e:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  407e12:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  407e16:	42a6      	cmp	r6, r4
  407e18:	d0f7      	beq.n	407e0a <__mdiff+0x22>
  407e1a:	d260      	bcs.n	407ede <__mdiff+0xf6>
  407e1c:	463b      	mov	r3, r7
  407e1e:	4614      	mov	r4, r2
  407e20:	4647      	mov	r7, r8
  407e22:	f04f 0901 	mov.w	r9, #1
  407e26:	4698      	mov	r8, r3
  407e28:	e006      	b.n	407e38 <__mdiff+0x50>
  407e2a:	db5d      	blt.n	407ee8 <__mdiff+0x100>
  407e2c:	f107 0514 	add.w	r5, r7, #20
  407e30:	f102 0414 	add.w	r4, r2, #20
  407e34:	f04f 0900 	mov.w	r9, #0
  407e38:	6879      	ldr	r1, [r7, #4]
  407e3a:	f7ff fdad 	bl	407998 <_Balloc>
  407e3e:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407e42:	693e      	ldr	r6, [r7, #16]
  407e44:	f8c0 900c 	str.w	r9, [r0, #12]
  407e48:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  407e4c:	46a6      	mov	lr, r4
  407e4e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  407e52:	f100 0414 	add.w	r4, r0, #20
  407e56:	2300      	movs	r3, #0
  407e58:	f85e 1b04 	ldr.w	r1, [lr], #4
  407e5c:	f855 8b04 	ldr.w	r8, [r5], #4
  407e60:	b28a      	uxth	r2, r1
  407e62:	fa13 f388 	uxtah	r3, r3, r8
  407e66:	0c09      	lsrs	r1, r1, #16
  407e68:	1a9a      	subs	r2, r3, r2
  407e6a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  407e6e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407e72:	b292      	uxth	r2, r2
  407e74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407e78:	45f4      	cmp	ip, lr
  407e7a:	f844 2b04 	str.w	r2, [r4], #4
  407e7e:	ea4f 4323 	mov.w	r3, r3, asr #16
  407e82:	d8e9      	bhi.n	407e58 <__mdiff+0x70>
  407e84:	42af      	cmp	r7, r5
  407e86:	d917      	bls.n	407eb8 <__mdiff+0xd0>
  407e88:	46a4      	mov	ip, r4
  407e8a:	4629      	mov	r1, r5
  407e8c:	f851 eb04 	ldr.w	lr, [r1], #4
  407e90:	fa13 f28e 	uxtah	r2, r3, lr
  407e94:	1413      	asrs	r3, r2, #16
  407e96:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  407e9a:	b292      	uxth	r2, r2
  407e9c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407ea0:	428f      	cmp	r7, r1
  407ea2:	f84c 2b04 	str.w	r2, [ip], #4
  407ea6:	ea4f 4323 	mov.w	r3, r3, asr #16
  407eaa:	d8ef      	bhi.n	407e8c <__mdiff+0xa4>
  407eac:	43ed      	mvns	r5, r5
  407eae:	443d      	add	r5, r7
  407eb0:	f025 0503 	bic.w	r5, r5, #3
  407eb4:	3504      	adds	r5, #4
  407eb6:	442c      	add	r4, r5
  407eb8:	3c04      	subs	r4, #4
  407eba:	b922      	cbnz	r2, 407ec6 <__mdiff+0xde>
  407ebc:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407ec0:	3e01      	subs	r6, #1
  407ec2:	2b00      	cmp	r3, #0
  407ec4:	d0fa      	beq.n	407ebc <__mdiff+0xd4>
  407ec6:	6106      	str	r6, [r0, #16]
  407ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407ecc:	2100      	movs	r1, #0
  407ece:	f7ff fd63 	bl	407998 <_Balloc>
  407ed2:	2201      	movs	r2, #1
  407ed4:	2300      	movs	r3, #0
  407ed6:	6102      	str	r2, [r0, #16]
  407ed8:	6143      	str	r3, [r0, #20]
  407eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407ede:	462c      	mov	r4, r5
  407ee0:	f04f 0900 	mov.w	r9, #0
  407ee4:	4615      	mov	r5, r2
  407ee6:	e7a7      	b.n	407e38 <__mdiff+0x50>
  407ee8:	463b      	mov	r3, r7
  407eea:	f107 0414 	add.w	r4, r7, #20
  407eee:	f108 0514 	add.w	r5, r8, #20
  407ef2:	4647      	mov	r7, r8
  407ef4:	f04f 0901 	mov.w	r9, #1
  407ef8:	4698      	mov	r8, r3
  407efa:	e79d      	b.n	407e38 <__mdiff+0x50>

00407efc <__d2b>:
  407efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407f00:	b082      	sub	sp, #8
  407f02:	2101      	movs	r1, #1
  407f04:	461c      	mov	r4, r3
  407f06:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407f0a:	4615      	mov	r5, r2
  407f0c:	9e08      	ldr	r6, [sp, #32]
  407f0e:	f7ff fd43 	bl	407998 <_Balloc>
  407f12:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407f16:	4680      	mov	r8, r0
  407f18:	b10f      	cbz	r7, 407f1e <__d2b+0x22>
  407f1a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407f1e:	9401      	str	r4, [sp, #4]
  407f20:	b31d      	cbz	r5, 407f6a <__d2b+0x6e>
  407f22:	a802      	add	r0, sp, #8
  407f24:	f840 5d08 	str.w	r5, [r0, #-8]!
  407f28:	f7ff fdc6 	bl	407ab8 <__lo0bits>
  407f2c:	2800      	cmp	r0, #0
  407f2e:	d134      	bne.n	407f9a <__d2b+0x9e>
  407f30:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407f34:	f8c8 2014 	str.w	r2, [r8, #20]
  407f38:	2b00      	cmp	r3, #0
  407f3a:	bf0c      	ite	eq
  407f3c:	2101      	moveq	r1, #1
  407f3e:	2102      	movne	r1, #2
  407f40:	f8c8 3018 	str.w	r3, [r8, #24]
  407f44:	f8c8 1010 	str.w	r1, [r8, #16]
  407f48:	b9df      	cbnz	r7, 407f82 <__d2b+0x86>
  407f4a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  407f4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407f52:	6030      	str	r0, [r6, #0]
  407f54:	6918      	ldr	r0, [r3, #16]
  407f56:	f7ff fd8f 	bl	407a78 <__hi0bits>
  407f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407f5c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407f60:	6018      	str	r0, [r3, #0]
  407f62:	4640      	mov	r0, r8
  407f64:	b002      	add	sp, #8
  407f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407f6a:	a801      	add	r0, sp, #4
  407f6c:	f7ff fda4 	bl	407ab8 <__lo0bits>
  407f70:	9b01      	ldr	r3, [sp, #4]
  407f72:	f8c8 3014 	str.w	r3, [r8, #20]
  407f76:	2101      	movs	r1, #1
  407f78:	3020      	adds	r0, #32
  407f7a:	f8c8 1010 	str.w	r1, [r8, #16]
  407f7e:	2f00      	cmp	r7, #0
  407f80:	d0e3      	beq.n	407f4a <__d2b+0x4e>
  407f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407f84:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  407f88:	4407      	add	r7, r0
  407f8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  407f8e:	6037      	str	r7, [r6, #0]
  407f90:	6018      	str	r0, [r3, #0]
  407f92:	4640      	mov	r0, r8
  407f94:	b002      	add	sp, #8
  407f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407f9a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407f9e:	f1c0 0120 	rsb	r1, r0, #32
  407fa2:	fa03 f101 	lsl.w	r1, r3, r1
  407fa6:	430a      	orrs	r2, r1
  407fa8:	40c3      	lsrs	r3, r0
  407faa:	9301      	str	r3, [sp, #4]
  407fac:	f8c8 2014 	str.w	r2, [r8, #20]
  407fb0:	e7c2      	b.n	407f38 <__d2b+0x3c>
  407fb2:	bf00      	nop

00407fb4 <_realloc_r>:
  407fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407fb8:	4617      	mov	r7, r2
  407fba:	b083      	sub	sp, #12
  407fbc:	2900      	cmp	r1, #0
  407fbe:	f000 80c1 	beq.w	408144 <_realloc_r+0x190>
  407fc2:	460e      	mov	r6, r1
  407fc4:	4681      	mov	r9, r0
  407fc6:	f107 050b 	add.w	r5, r7, #11
  407fca:	f7fb fa53 	bl	403474 <__malloc_lock>
  407fce:	f856 ec04 	ldr.w	lr, [r6, #-4]
  407fd2:	2d16      	cmp	r5, #22
  407fd4:	f02e 0403 	bic.w	r4, lr, #3
  407fd8:	f1a6 0808 	sub.w	r8, r6, #8
  407fdc:	d840      	bhi.n	408060 <_realloc_r+0xac>
  407fde:	2210      	movs	r2, #16
  407fe0:	4615      	mov	r5, r2
  407fe2:	42af      	cmp	r7, r5
  407fe4:	d841      	bhi.n	40806a <_realloc_r+0xb6>
  407fe6:	4294      	cmp	r4, r2
  407fe8:	da75      	bge.n	4080d6 <_realloc_r+0x122>
  407fea:	4bc9      	ldr	r3, [pc, #804]	; (408310 <_realloc_r+0x35c>)
  407fec:	6899      	ldr	r1, [r3, #8]
  407fee:	eb08 0004 	add.w	r0, r8, r4
  407ff2:	4288      	cmp	r0, r1
  407ff4:	6841      	ldr	r1, [r0, #4]
  407ff6:	f000 80d9 	beq.w	4081ac <_realloc_r+0x1f8>
  407ffa:	f021 0301 	bic.w	r3, r1, #1
  407ffe:	4403      	add	r3, r0
  408000:	685b      	ldr	r3, [r3, #4]
  408002:	07db      	lsls	r3, r3, #31
  408004:	d57d      	bpl.n	408102 <_realloc_r+0x14e>
  408006:	f01e 0f01 	tst.w	lr, #1
  40800a:	d035      	beq.n	408078 <_realloc_r+0xc4>
  40800c:	4639      	mov	r1, r7
  40800e:	4648      	mov	r0, r9
  408010:	f7fa fe90 	bl	402d34 <_malloc_r>
  408014:	4607      	mov	r7, r0
  408016:	b1e0      	cbz	r0, 408052 <_realloc_r+0x9e>
  408018:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40801c:	f023 0301 	bic.w	r3, r3, #1
  408020:	4443      	add	r3, r8
  408022:	f1a0 0208 	sub.w	r2, r0, #8
  408026:	429a      	cmp	r2, r3
  408028:	f000 8144 	beq.w	4082b4 <_realloc_r+0x300>
  40802c:	1f22      	subs	r2, r4, #4
  40802e:	2a24      	cmp	r2, #36	; 0x24
  408030:	f200 8131 	bhi.w	408296 <_realloc_r+0x2e2>
  408034:	2a13      	cmp	r2, #19
  408036:	f200 8104 	bhi.w	408242 <_realloc_r+0x28e>
  40803a:	4603      	mov	r3, r0
  40803c:	4632      	mov	r2, r6
  40803e:	6811      	ldr	r1, [r2, #0]
  408040:	6019      	str	r1, [r3, #0]
  408042:	6851      	ldr	r1, [r2, #4]
  408044:	6059      	str	r1, [r3, #4]
  408046:	6892      	ldr	r2, [r2, #8]
  408048:	609a      	str	r2, [r3, #8]
  40804a:	4631      	mov	r1, r6
  40804c:	4648      	mov	r0, r9
  40804e:	f7ff f8d9 	bl	407204 <_free_r>
  408052:	4648      	mov	r0, r9
  408054:	f7fb fa10 	bl	403478 <__malloc_unlock>
  408058:	4638      	mov	r0, r7
  40805a:	b003      	add	sp, #12
  40805c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408060:	f025 0507 	bic.w	r5, r5, #7
  408064:	2d00      	cmp	r5, #0
  408066:	462a      	mov	r2, r5
  408068:	dabb      	bge.n	407fe2 <_realloc_r+0x2e>
  40806a:	230c      	movs	r3, #12
  40806c:	2000      	movs	r0, #0
  40806e:	f8c9 3000 	str.w	r3, [r9]
  408072:	b003      	add	sp, #12
  408074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408078:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40807c:	ebc3 0a08 	rsb	sl, r3, r8
  408080:	f8da 3004 	ldr.w	r3, [sl, #4]
  408084:	f023 0c03 	bic.w	ip, r3, #3
  408088:	eb04 030c 	add.w	r3, r4, ip
  40808c:	4293      	cmp	r3, r2
  40808e:	dbbd      	blt.n	40800c <_realloc_r+0x58>
  408090:	4657      	mov	r7, sl
  408092:	f8da 100c 	ldr.w	r1, [sl, #12]
  408096:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40809a:	1f22      	subs	r2, r4, #4
  40809c:	2a24      	cmp	r2, #36	; 0x24
  40809e:	60c1      	str	r1, [r0, #12]
  4080a0:	6088      	str	r0, [r1, #8]
  4080a2:	f200 8117 	bhi.w	4082d4 <_realloc_r+0x320>
  4080a6:	2a13      	cmp	r2, #19
  4080a8:	f240 8112 	bls.w	4082d0 <_realloc_r+0x31c>
  4080ac:	6831      	ldr	r1, [r6, #0]
  4080ae:	f8ca 1008 	str.w	r1, [sl, #8]
  4080b2:	6871      	ldr	r1, [r6, #4]
  4080b4:	f8ca 100c 	str.w	r1, [sl, #12]
  4080b8:	2a1b      	cmp	r2, #27
  4080ba:	f200 812b 	bhi.w	408314 <_realloc_r+0x360>
  4080be:	3608      	adds	r6, #8
  4080c0:	f10a 0210 	add.w	r2, sl, #16
  4080c4:	6831      	ldr	r1, [r6, #0]
  4080c6:	6011      	str	r1, [r2, #0]
  4080c8:	6871      	ldr	r1, [r6, #4]
  4080ca:	6051      	str	r1, [r2, #4]
  4080cc:	68b1      	ldr	r1, [r6, #8]
  4080ce:	6091      	str	r1, [r2, #8]
  4080d0:	463e      	mov	r6, r7
  4080d2:	461c      	mov	r4, r3
  4080d4:	46d0      	mov	r8, sl
  4080d6:	1b63      	subs	r3, r4, r5
  4080d8:	2b0f      	cmp	r3, #15
  4080da:	d81d      	bhi.n	408118 <_realloc_r+0x164>
  4080dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4080e0:	f003 0301 	and.w	r3, r3, #1
  4080e4:	4323      	orrs	r3, r4
  4080e6:	4444      	add	r4, r8
  4080e8:	f8c8 3004 	str.w	r3, [r8, #4]
  4080ec:	6863      	ldr	r3, [r4, #4]
  4080ee:	f043 0301 	orr.w	r3, r3, #1
  4080f2:	6063      	str	r3, [r4, #4]
  4080f4:	4648      	mov	r0, r9
  4080f6:	f7fb f9bf 	bl	403478 <__malloc_unlock>
  4080fa:	4630      	mov	r0, r6
  4080fc:	b003      	add	sp, #12
  4080fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408102:	f021 0103 	bic.w	r1, r1, #3
  408106:	4421      	add	r1, r4
  408108:	4291      	cmp	r1, r2
  40810a:	db21      	blt.n	408150 <_realloc_r+0x19c>
  40810c:	68c3      	ldr	r3, [r0, #12]
  40810e:	6882      	ldr	r2, [r0, #8]
  408110:	460c      	mov	r4, r1
  408112:	60d3      	str	r3, [r2, #12]
  408114:	609a      	str	r2, [r3, #8]
  408116:	e7de      	b.n	4080d6 <_realloc_r+0x122>
  408118:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40811c:	eb08 0105 	add.w	r1, r8, r5
  408120:	f002 0201 	and.w	r2, r2, #1
  408124:	4315      	orrs	r5, r2
  408126:	f043 0201 	orr.w	r2, r3, #1
  40812a:	440b      	add	r3, r1
  40812c:	f8c8 5004 	str.w	r5, [r8, #4]
  408130:	604a      	str	r2, [r1, #4]
  408132:	685a      	ldr	r2, [r3, #4]
  408134:	f042 0201 	orr.w	r2, r2, #1
  408138:	3108      	adds	r1, #8
  40813a:	605a      	str	r2, [r3, #4]
  40813c:	4648      	mov	r0, r9
  40813e:	f7ff f861 	bl	407204 <_free_r>
  408142:	e7d7      	b.n	4080f4 <_realloc_r+0x140>
  408144:	4611      	mov	r1, r2
  408146:	b003      	add	sp, #12
  408148:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40814c:	f7fa bdf2 	b.w	402d34 <_malloc_r>
  408150:	f01e 0f01 	tst.w	lr, #1
  408154:	f47f af5a 	bne.w	40800c <_realloc_r+0x58>
  408158:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40815c:	ebc3 0a08 	rsb	sl, r3, r8
  408160:	f8da 3004 	ldr.w	r3, [sl, #4]
  408164:	f023 0c03 	bic.w	ip, r3, #3
  408168:	eb01 0e0c 	add.w	lr, r1, ip
  40816c:	4596      	cmp	lr, r2
  40816e:	db8b      	blt.n	408088 <_realloc_r+0xd4>
  408170:	68c3      	ldr	r3, [r0, #12]
  408172:	6882      	ldr	r2, [r0, #8]
  408174:	4657      	mov	r7, sl
  408176:	60d3      	str	r3, [r2, #12]
  408178:	609a      	str	r2, [r3, #8]
  40817a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40817e:	f8da 300c 	ldr.w	r3, [sl, #12]
  408182:	60cb      	str	r3, [r1, #12]
  408184:	1f22      	subs	r2, r4, #4
  408186:	2a24      	cmp	r2, #36	; 0x24
  408188:	6099      	str	r1, [r3, #8]
  40818a:	f200 8099 	bhi.w	4082c0 <_realloc_r+0x30c>
  40818e:	2a13      	cmp	r2, #19
  408190:	d962      	bls.n	408258 <_realloc_r+0x2a4>
  408192:	6833      	ldr	r3, [r6, #0]
  408194:	f8ca 3008 	str.w	r3, [sl, #8]
  408198:	6873      	ldr	r3, [r6, #4]
  40819a:	f8ca 300c 	str.w	r3, [sl, #12]
  40819e:	2a1b      	cmp	r2, #27
  4081a0:	f200 80a0 	bhi.w	4082e4 <_realloc_r+0x330>
  4081a4:	3608      	adds	r6, #8
  4081a6:	f10a 0310 	add.w	r3, sl, #16
  4081aa:	e056      	b.n	40825a <_realloc_r+0x2a6>
  4081ac:	f021 0b03 	bic.w	fp, r1, #3
  4081b0:	44a3      	add	fp, r4
  4081b2:	f105 0010 	add.w	r0, r5, #16
  4081b6:	4583      	cmp	fp, r0
  4081b8:	da59      	bge.n	40826e <_realloc_r+0x2ba>
  4081ba:	f01e 0f01 	tst.w	lr, #1
  4081be:	f47f af25 	bne.w	40800c <_realloc_r+0x58>
  4081c2:	f856 1c08 	ldr.w	r1, [r6, #-8]
  4081c6:	ebc1 0a08 	rsb	sl, r1, r8
  4081ca:	f8da 1004 	ldr.w	r1, [sl, #4]
  4081ce:	f021 0c03 	bic.w	ip, r1, #3
  4081d2:	44e3      	add	fp, ip
  4081d4:	4558      	cmp	r0, fp
  4081d6:	f73f af57 	bgt.w	408088 <_realloc_r+0xd4>
  4081da:	4657      	mov	r7, sl
  4081dc:	f8da 100c 	ldr.w	r1, [sl, #12]
  4081e0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4081e4:	1f22      	subs	r2, r4, #4
  4081e6:	2a24      	cmp	r2, #36	; 0x24
  4081e8:	60c1      	str	r1, [r0, #12]
  4081ea:	6088      	str	r0, [r1, #8]
  4081ec:	f200 80b4 	bhi.w	408358 <_realloc_r+0x3a4>
  4081f0:	2a13      	cmp	r2, #19
  4081f2:	f240 80a5 	bls.w	408340 <_realloc_r+0x38c>
  4081f6:	6831      	ldr	r1, [r6, #0]
  4081f8:	f8ca 1008 	str.w	r1, [sl, #8]
  4081fc:	6871      	ldr	r1, [r6, #4]
  4081fe:	f8ca 100c 	str.w	r1, [sl, #12]
  408202:	2a1b      	cmp	r2, #27
  408204:	f200 80af 	bhi.w	408366 <_realloc_r+0x3b2>
  408208:	3608      	adds	r6, #8
  40820a:	f10a 0210 	add.w	r2, sl, #16
  40820e:	6831      	ldr	r1, [r6, #0]
  408210:	6011      	str	r1, [r2, #0]
  408212:	6871      	ldr	r1, [r6, #4]
  408214:	6051      	str	r1, [r2, #4]
  408216:	68b1      	ldr	r1, [r6, #8]
  408218:	6091      	str	r1, [r2, #8]
  40821a:	eb0a 0105 	add.w	r1, sl, r5
  40821e:	ebc5 020b 	rsb	r2, r5, fp
  408222:	f042 0201 	orr.w	r2, r2, #1
  408226:	6099      	str	r1, [r3, #8]
  408228:	604a      	str	r2, [r1, #4]
  40822a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40822e:	f003 0301 	and.w	r3, r3, #1
  408232:	431d      	orrs	r5, r3
  408234:	4648      	mov	r0, r9
  408236:	f8ca 5004 	str.w	r5, [sl, #4]
  40823a:	f7fb f91d 	bl	403478 <__malloc_unlock>
  40823e:	4638      	mov	r0, r7
  408240:	e75c      	b.n	4080fc <_realloc_r+0x148>
  408242:	6833      	ldr	r3, [r6, #0]
  408244:	6003      	str	r3, [r0, #0]
  408246:	6873      	ldr	r3, [r6, #4]
  408248:	6043      	str	r3, [r0, #4]
  40824a:	2a1b      	cmp	r2, #27
  40824c:	d827      	bhi.n	40829e <_realloc_r+0x2ea>
  40824e:	f100 0308 	add.w	r3, r0, #8
  408252:	f106 0208 	add.w	r2, r6, #8
  408256:	e6f2      	b.n	40803e <_realloc_r+0x8a>
  408258:	463b      	mov	r3, r7
  40825a:	6832      	ldr	r2, [r6, #0]
  40825c:	601a      	str	r2, [r3, #0]
  40825e:	6872      	ldr	r2, [r6, #4]
  408260:	605a      	str	r2, [r3, #4]
  408262:	68b2      	ldr	r2, [r6, #8]
  408264:	609a      	str	r2, [r3, #8]
  408266:	463e      	mov	r6, r7
  408268:	4674      	mov	r4, lr
  40826a:	46d0      	mov	r8, sl
  40826c:	e733      	b.n	4080d6 <_realloc_r+0x122>
  40826e:	eb08 0105 	add.w	r1, r8, r5
  408272:	ebc5 0b0b 	rsb	fp, r5, fp
  408276:	f04b 0201 	orr.w	r2, fp, #1
  40827a:	6099      	str	r1, [r3, #8]
  40827c:	604a      	str	r2, [r1, #4]
  40827e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  408282:	f003 0301 	and.w	r3, r3, #1
  408286:	431d      	orrs	r5, r3
  408288:	4648      	mov	r0, r9
  40828a:	f846 5c04 	str.w	r5, [r6, #-4]
  40828e:	f7fb f8f3 	bl	403478 <__malloc_unlock>
  408292:	4630      	mov	r0, r6
  408294:	e732      	b.n	4080fc <_realloc_r+0x148>
  408296:	4631      	mov	r1, r6
  408298:	f7ff fb1a 	bl	4078d0 <memmove>
  40829c:	e6d5      	b.n	40804a <_realloc_r+0x96>
  40829e:	68b3      	ldr	r3, [r6, #8]
  4082a0:	6083      	str	r3, [r0, #8]
  4082a2:	68f3      	ldr	r3, [r6, #12]
  4082a4:	60c3      	str	r3, [r0, #12]
  4082a6:	2a24      	cmp	r2, #36	; 0x24
  4082a8:	d028      	beq.n	4082fc <_realloc_r+0x348>
  4082aa:	f100 0310 	add.w	r3, r0, #16
  4082ae:	f106 0210 	add.w	r2, r6, #16
  4082b2:	e6c4      	b.n	40803e <_realloc_r+0x8a>
  4082b4:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4082b8:	f023 0303 	bic.w	r3, r3, #3
  4082bc:	441c      	add	r4, r3
  4082be:	e70a      	b.n	4080d6 <_realloc_r+0x122>
  4082c0:	4631      	mov	r1, r6
  4082c2:	4638      	mov	r0, r7
  4082c4:	4674      	mov	r4, lr
  4082c6:	46d0      	mov	r8, sl
  4082c8:	f7ff fb02 	bl	4078d0 <memmove>
  4082cc:	463e      	mov	r6, r7
  4082ce:	e702      	b.n	4080d6 <_realloc_r+0x122>
  4082d0:	463a      	mov	r2, r7
  4082d2:	e6f7      	b.n	4080c4 <_realloc_r+0x110>
  4082d4:	4631      	mov	r1, r6
  4082d6:	4638      	mov	r0, r7
  4082d8:	461c      	mov	r4, r3
  4082da:	46d0      	mov	r8, sl
  4082dc:	f7ff faf8 	bl	4078d0 <memmove>
  4082e0:	463e      	mov	r6, r7
  4082e2:	e6f8      	b.n	4080d6 <_realloc_r+0x122>
  4082e4:	68b3      	ldr	r3, [r6, #8]
  4082e6:	f8ca 3010 	str.w	r3, [sl, #16]
  4082ea:	68f3      	ldr	r3, [r6, #12]
  4082ec:	f8ca 3014 	str.w	r3, [sl, #20]
  4082f0:	2a24      	cmp	r2, #36	; 0x24
  4082f2:	d01b      	beq.n	40832c <_realloc_r+0x378>
  4082f4:	3610      	adds	r6, #16
  4082f6:	f10a 0318 	add.w	r3, sl, #24
  4082fa:	e7ae      	b.n	40825a <_realloc_r+0x2a6>
  4082fc:	6933      	ldr	r3, [r6, #16]
  4082fe:	6103      	str	r3, [r0, #16]
  408300:	6973      	ldr	r3, [r6, #20]
  408302:	6143      	str	r3, [r0, #20]
  408304:	f106 0218 	add.w	r2, r6, #24
  408308:	f100 0318 	add.w	r3, r0, #24
  40830c:	e697      	b.n	40803e <_realloc_r+0x8a>
  40830e:	bf00      	nop
  408310:	2040043c 	.word	0x2040043c
  408314:	68b1      	ldr	r1, [r6, #8]
  408316:	f8ca 1010 	str.w	r1, [sl, #16]
  40831a:	68f1      	ldr	r1, [r6, #12]
  40831c:	f8ca 1014 	str.w	r1, [sl, #20]
  408320:	2a24      	cmp	r2, #36	; 0x24
  408322:	d00f      	beq.n	408344 <_realloc_r+0x390>
  408324:	3610      	adds	r6, #16
  408326:	f10a 0218 	add.w	r2, sl, #24
  40832a:	e6cb      	b.n	4080c4 <_realloc_r+0x110>
  40832c:	6933      	ldr	r3, [r6, #16]
  40832e:	f8ca 3018 	str.w	r3, [sl, #24]
  408332:	6973      	ldr	r3, [r6, #20]
  408334:	f8ca 301c 	str.w	r3, [sl, #28]
  408338:	3618      	adds	r6, #24
  40833a:	f10a 0320 	add.w	r3, sl, #32
  40833e:	e78c      	b.n	40825a <_realloc_r+0x2a6>
  408340:	463a      	mov	r2, r7
  408342:	e764      	b.n	40820e <_realloc_r+0x25a>
  408344:	6932      	ldr	r2, [r6, #16]
  408346:	f8ca 2018 	str.w	r2, [sl, #24]
  40834a:	6972      	ldr	r2, [r6, #20]
  40834c:	f8ca 201c 	str.w	r2, [sl, #28]
  408350:	3618      	adds	r6, #24
  408352:	f10a 0220 	add.w	r2, sl, #32
  408356:	e6b5      	b.n	4080c4 <_realloc_r+0x110>
  408358:	4631      	mov	r1, r6
  40835a:	4638      	mov	r0, r7
  40835c:	9301      	str	r3, [sp, #4]
  40835e:	f7ff fab7 	bl	4078d0 <memmove>
  408362:	9b01      	ldr	r3, [sp, #4]
  408364:	e759      	b.n	40821a <_realloc_r+0x266>
  408366:	68b1      	ldr	r1, [r6, #8]
  408368:	f8ca 1010 	str.w	r1, [sl, #16]
  40836c:	68f1      	ldr	r1, [r6, #12]
  40836e:	f8ca 1014 	str.w	r1, [sl, #20]
  408372:	2a24      	cmp	r2, #36	; 0x24
  408374:	d003      	beq.n	40837e <_realloc_r+0x3ca>
  408376:	3610      	adds	r6, #16
  408378:	f10a 0218 	add.w	r2, sl, #24
  40837c:	e747      	b.n	40820e <_realloc_r+0x25a>
  40837e:	6932      	ldr	r2, [r6, #16]
  408380:	f8ca 2018 	str.w	r2, [sl, #24]
  408384:	6972      	ldr	r2, [r6, #20]
  408386:	f8ca 201c 	str.w	r2, [sl, #28]
  40838a:	3618      	adds	r6, #24
  40838c:	f10a 0220 	add.w	r2, sl, #32
  408390:	e73d      	b.n	40820e <_realloc_r+0x25a>
  408392:	bf00      	nop

00408394 <__sread>:
  408394:	b510      	push	{r4, lr}
  408396:	460c      	mov	r4, r1
  408398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40839c:	f000 fa74 	bl	408888 <_read_r>
  4083a0:	2800      	cmp	r0, #0
  4083a2:	db03      	blt.n	4083ac <__sread+0x18>
  4083a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4083a6:	4403      	add	r3, r0
  4083a8:	6523      	str	r3, [r4, #80]	; 0x50
  4083aa:	bd10      	pop	{r4, pc}
  4083ac:	89a3      	ldrh	r3, [r4, #12]
  4083ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4083b2:	81a3      	strh	r3, [r4, #12]
  4083b4:	bd10      	pop	{r4, pc}
  4083b6:	bf00      	nop

004083b8 <__swrite>:
  4083b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4083bc:	4616      	mov	r6, r2
  4083be:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4083c2:	461f      	mov	r7, r3
  4083c4:	05d3      	lsls	r3, r2, #23
  4083c6:	460c      	mov	r4, r1
  4083c8:	4605      	mov	r5, r0
  4083ca:	d507      	bpl.n	4083dc <__swrite+0x24>
  4083cc:	2200      	movs	r2, #0
  4083ce:	2302      	movs	r3, #2
  4083d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4083d4:	f000 fa42 	bl	40885c <_lseek_r>
  4083d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4083dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4083e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4083e4:	81a2      	strh	r2, [r4, #12]
  4083e6:	463b      	mov	r3, r7
  4083e8:	4632      	mov	r2, r6
  4083ea:	4628      	mov	r0, r5
  4083ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4083f0:	f000 b922 	b.w	408638 <_write_r>

004083f4 <__sseek>:
  4083f4:	b510      	push	{r4, lr}
  4083f6:	460c      	mov	r4, r1
  4083f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4083fc:	f000 fa2e 	bl	40885c <_lseek_r>
  408400:	89a3      	ldrh	r3, [r4, #12]
  408402:	1c42      	adds	r2, r0, #1
  408404:	bf0e      	itee	eq
  408406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40840a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40840e:	6520      	strne	r0, [r4, #80]	; 0x50
  408410:	81a3      	strh	r3, [r4, #12]
  408412:	bd10      	pop	{r4, pc}

00408414 <__sclose>:
  408414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408418:	f000 b9a6 	b.w	408768 <_close_r>

0040841c <__ssprint_r>:
  40841c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408420:	6893      	ldr	r3, [r2, #8]
  408422:	b083      	sub	sp, #12
  408424:	4690      	mov	r8, r2
  408426:	2b00      	cmp	r3, #0
  408428:	d072      	beq.n	408510 <__ssprint_r+0xf4>
  40842a:	4683      	mov	fp, r0
  40842c:	f04f 0900 	mov.w	r9, #0
  408430:	6816      	ldr	r6, [r2, #0]
  408432:	6808      	ldr	r0, [r1, #0]
  408434:	688b      	ldr	r3, [r1, #8]
  408436:	460d      	mov	r5, r1
  408438:	464c      	mov	r4, r9
  40843a:	2c00      	cmp	r4, #0
  40843c:	d045      	beq.n	4084ca <__ssprint_r+0xae>
  40843e:	429c      	cmp	r4, r3
  408440:	461f      	mov	r7, r3
  408442:	469a      	mov	sl, r3
  408444:	d346      	bcc.n	4084d4 <__ssprint_r+0xb8>
  408446:	89ab      	ldrh	r3, [r5, #12]
  408448:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40844c:	d02d      	beq.n	4084aa <__ssprint_r+0x8e>
  40844e:	696f      	ldr	r7, [r5, #20]
  408450:	6929      	ldr	r1, [r5, #16]
  408452:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  408456:	ebc1 0a00 	rsb	sl, r1, r0
  40845a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40845e:	1c60      	adds	r0, r4, #1
  408460:	107f      	asrs	r7, r7, #1
  408462:	4450      	add	r0, sl
  408464:	42b8      	cmp	r0, r7
  408466:	463a      	mov	r2, r7
  408468:	bf84      	itt	hi
  40846a:	4607      	movhi	r7, r0
  40846c:	463a      	movhi	r2, r7
  40846e:	055b      	lsls	r3, r3, #21
  408470:	d533      	bpl.n	4084da <__ssprint_r+0xbe>
  408472:	4611      	mov	r1, r2
  408474:	4658      	mov	r0, fp
  408476:	f7fa fc5d 	bl	402d34 <_malloc_r>
  40847a:	2800      	cmp	r0, #0
  40847c:	d037      	beq.n	4084ee <__ssprint_r+0xd2>
  40847e:	4652      	mov	r2, sl
  408480:	6929      	ldr	r1, [r5, #16]
  408482:	9001      	str	r0, [sp, #4]
  408484:	f7fa ff0e 	bl	4032a4 <memcpy>
  408488:	89aa      	ldrh	r2, [r5, #12]
  40848a:	9b01      	ldr	r3, [sp, #4]
  40848c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  408490:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  408494:	81aa      	strh	r2, [r5, #12]
  408496:	ebca 0207 	rsb	r2, sl, r7
  40849a:	eb03 000a 	add.w	r0, r3, sl
  40849e:	616f      	str	r7, [r5, #20]
  4084a0:	612b      	str	r3, [r5, #16]
  4084a2:	6028      	str	r0, [r5, #0]
  4084a4:	60aa      	str	r2, [r5, #8]
  4084a6:	4627      	mov	r7, r4
  4084a8:	46a2      	mov	sl, r4
  4084aa:	4652      	mov	r2, sl
  4084ac:	4649      	mov	r1, r9
  4084ae:	f7ff fa0f 	bl	4078d0 <memmove>
  4084b2:	f8d8 2008 	ldr.w	r2, [r8, #8]
  4084b6:	68ab      	ldr	r3, [r5, #8]
  4084b8:	6828      	ldr	r0, [r5, #0]
  4084ba:	1bdb      	subs	r3, r3, r7
  4084bc:	4450      	add	r0, sl
  4084be:	1b14      	subs	r4, r2, r4
  4084c0:	60ab      	str	r3, [r5, #8]
  4084c2:	6028      	str	r0, [r5, #0]
  4084c4:	f8c8 4008 	str.w	r4, [r8, #8]
  4084c8:	b314      	cbz	r4, 408510 <__ssprint_r+0xf4>
  4084ca:	f8d6 9000 	ldr.w	r9, [r6]
  4084ce:	6874      	ldr	r4, [r6, #4]
  4084d0:	3608      	adds	r6, #8
  4084d2:	e7b2      	b.n	40843a <__ssprint_r+0x1e>
  4084d4:	4627      	mov	r7, r4
  4084d6:	46a2      	mov	sl, r4
  4084d8:	e7e7      	b.n	4084aa <__ssprint_r+0x8e>
  4084da:	4658      	mov	r0, fp
  4084dc:	f7ff fd6a 	bl	407fb4 <_realloc_r>
  4084e0:	4603      	mov	r3, r0
  4084e2:	2800      	cmp	r0, #0
  4084e4:	d1d7      	bne.n	408496 <__ssprint_r+0x7a>
  4084e6:	6929      	ldr	r1, [r5, #16]
  4084e8:	4658      	mov	r0, fp
  4084ea:	f7fe fe8b 	bl	407204 <_free_r>
  4084ee:	230c      	movs	r3, #12
  4084f0:	f8cb 3000 	str.w	r3, [fp]
  4084f4:	89ab      	ldrh	r3, [r5, #12]
  4084f6:	2200      	movs	r2, #0
  4084f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4084fc:	f04f 30ff 	mov.w	r0, #4294967295
  408500:	81ab      	strh	r3, [r5, #12]
  408502:	f8c8 2008 	str.w	r2, [r8, #8]
  408506:	f8c8 2004 	str.w	r2, [r8, #4]
  40850a:	b003      	add	sp, #12
  40850c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408510:	2000      	movs	r0, #0
  408512:	f8c8 0004 	str.w	r0, [r8, #4]
  408516:	b003      	add	sp, #12
  408518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040851c <__swbuf_r>:
  40851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40851e:	460e      	mov	r6, r1
  408520:	4614      	mov	r4, r2
  408522:	4607      	mov	r7, r0
  408524:	b110      	cbz	r0, 40852c <__swbuf_r+0x10>
  408526:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408528:	2b00      	cmp	r3, #0
  40852a:	d04a      	beq.n	4085c2 <__swbuf_r+0xa6>
  40852c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408530:	69a3      	ldr	r3, [r4, #24]
  408532:	60a3      	str	r3, [r4, #8]
  408534:	b291      	uxth	r1, r2
  408536:	0708      	lsls	r0, r1, #28
  408538:	d538      	bpl.n	4085ac <__swbuf_r+0x90>
  40853a:	6923      	ldr	r3, [r4, #16]
  40853c:	2b00      	cmp	r3, #0
  40853e:	d035      	beq.n	4085ac <__swbuf_r+0x90>
  408540:	0489      	lsls	r1, r1, #18
  408542:	b2f5      	uxtb	r5, r6
  408544:	d515      	bpl.n	408572 <__swbuf_r+0x56>
  408546:	6822      	ldr	r2, [r4, #0]
  408548:	6961      	ldr	r1, [r4, #20]
  40854a:	1ad3      	subs	r3, r2, r3
  40854c:	428b      	cmp	r3, r1
  40854e:	da1c      	bge.n	40858a <__swbuf_r+0x6e>
  408550:	3301      	adds	r3, #1
  408552:	68a1      	ldr	r1, [r4, #8]
  408554:	1c50      	adds	r0, r2, #1
  408556:	3901      	subs	r1, #1
  408558:	60a1      	str	r1, [r4, #8]
  40855a:	6020      	str	r0, [r4, #0]
  40855c:	7016      	strb	r6, [r2, #0]
  40855e:	6962      	ldr	r2, [r4, #20]
  408560:	429a      	cmp	r2, r3
  408562:	d01a      	beq.n	40859a <__swbuf_r+0x7e>
  408564:	89a3      	ldrh	r3, [r4, #12]
  408566:	07db      	lsls	r3, r3, #31
  408568:	d501      	bpl.n	40856e <__swbuf_r+0x52>
  40856a:	2d0a      	cmp	r5, #10
  40856c:	d015      	beq.n	40859a <__swbuf_r+0x7e>
  40856e:	4628      	mov	r0, r5
  408570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408572:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408578:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40857c:	81a2      	strh	r2, [r4, #12]
  40857e:	6822      	ldr	r2, [r4, #0]
  408580:	6661      	str	r1, [r4, #100]	; 0x64
  408582:	6961      	ldr	r1, [r4, #20]
  408584:	1ad3      	subs	r3, r2, r3
  408586:	428b      	cmp	r3, r1
  408588:	dbe2      	blt.n	408550 <__swbuf_r+0x34>
  40858a:	4621      	mov	r1, r4
  40858c:	4638      	mov	r0, r7
  40858e:	f7fe fcdb 	bl	406f48 <_fflush_r>
  408592:	b940      	cbnz	r0, 4085a6 <__swbuf_r+0x8a>
  408594:	6822      	ldr	r2, [r4, #0]
  408596:	2301      	movs	r3, #1
  408598:	e7db      	b.n	408552 <__swbuf_r+0x36>
  40859a:	4621      	mov	r1, r4
  40859c:	4638      	mov	r0, r7
  40859e:	f7fe fcd3 	bl	406f48 <_fflush_r>
  4085a2:	2800      	cmp	r0, #0
  4085a4:	d0e3      	beq.n	40856e <__swbuf_r+0x52>
  4085a6:	f04f 30ff 	mov.w	r0, #4294967295
  4085aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4085ac:	4621      	mov	r1, r4
  4085ae:	4638      	mov	r0, r7
  4085b0:	f7fd fbf2 	bl	405d98 <__swsetup_r>
  4085b4:	2800      	cmp	r0, #0
  4085b6:	d1f6      	bne.n	4085a6 <__swbuf_r+0x8a>
  4085b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4085bc:	6923      	ldr	r3, [r4, #16]
  4085be:	b291      	uxth	r1, r2
  4085c0:	e7be      	b.n	408540 <__swbuf_r+0x24>
  4085c2:	f7fe fd55 	bl	407070 <__sinit>
  4085c6:	e7b1      	b.n	40852c <__swbuf_r+0x10>

004085c8 <_wcrtomb_r>:
  4085c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4085cc:	4605      	mov	r5, r0
  4085ce:	b086      	sub	sp, #24
  4085d0:	461e      	mov	r6, r3
  4085d2:	460c      	mov	r4, r1
  4085d4:	b1a1      	cbz	r1, 408600 <_wcrtomb_r+0x38>
  4085d6:	4b10      	ldr	r3, [pc, #64]	; (408618 <_wcrtomb_r+0x50>)
  4085d8:	4617      	mov	r7, r2
  4085da:	f8d3 8000 	ldr.w	r8, [r3]
  4085de:	f7ff f8a5 	bl	40772c <__locale_charset>
  4085e2:	9600      	str	r6, [sp, #0]
  4085e4:	4603      	mov	r3, r0
  4085e6:	463a      	mov	r2, r7
  4085e8:	4621      	mov	r1, r4
  4085ea:	4628      	mov	r0, r5
  4085ec:	47c0      	blx	r8
  4085ee:	1c43      	adds	r3, r0, #1
  4085f0:	d103      	bne.n	4085fa <_wcrtomb_r+0x32>
  4085f2:	2200      	movs	r2, #0
  4085f4:	238a      	movs	r3, #138	; 0x8a
  4085f6:	6032      	str	r2, [r6, #0]
  4085f8:	602b      	str	r3, [r5, #0]
  4085fa:	b006      	add	sp, #24
  4085fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408600:	4b05      	ldr	r3, [pc, #20]	; (408618 <_wcrtomb_r+0x50>)
  408602:	681f      	ldr	r7, [r3, #0]
  408604:	f7ff f892 	bl	40772c <__locale_charset>
  408608:	9600      	str	r6, [sp, #0]
  40860a:	4603      	mov	r3, r0
  40860c:	4622      	mov	r2, r4
  40860e:	a903      	add	r1, sp, #12
  408610:	4628      	mov	r0, r5
  408612:	47b8      	blx	r7
  408614:	e7eb      	b.n	4085ee <_wcrtomb_r+0x26>
  408616:	bf00      	nop
  408618:	204008a8 	.word	0x204008a8

0040861c <__ascii_wctomb>:
  40861c:	b121      	cbz	r1, 408628 <__ascii_wctomb+0xc>
  40861e:	2aff      	cmp	r2, #255	; 0xff
  408620:	d804      	bhi.n	40862c <__ascii_wctomb+0x10>
  408622:	700a      	strb	r2, [r1, #0]
  408624:	2001      	movs	r0, #1
  408626:	4770      	bx	lr
  408628:	4608      	mov	r0, r1
  40862a:	4770      	bx	lr
  40862c:	238a      	movs	r3, #138	; 0x8a
  40862e:	6003      	str	r3, [r0, #0]
  408630:	f04f 30ff 	mov.w	r0, #4294967295
  408634:	4770      	bx	lr
  408636:	bf00      	nop

00408638 <_write_r>:
  408638:	b570      	push	{r4, r5, r6, lr}
  40863a:	460d      	mov	r5, r1
  40863c:	4c08      	ldr	r4, [pc, #32]	; (408660 <_write_r+0x28>)
  40863e:	4611      	mov	r1, r2
  408640:	4606      	mov	r6, r0
  408642:	461a      	mov	r2, r3
  408644:	4628      	mov	r0, r5
  408646:	2300      	movs	r3, #0
  408648:	6023      	str	r3, [r4, #0]
  40864a:	f7f7 fdfd 	bl	400248 <_write>
  40864e:	1c43      	adds	r3, r0, #1
  408650:	d000      	beq.n	408654 <_write_r+0x1c>
  408652:	bd70      	pop	{r4, r5, r6, pc}
  408654:	6823      	ldr	r3, [r4, #0]
  408656:	2b00      	cmp	r3, #0
  408658:	d0fb      	beq.n	408652 <_write_r+0x1a>
  40865a:	6033      	str	r3, [r6, #0]
  40865c:	bd70      	pop	{r4, r5, r6, pc}
  40865e:	bf00      	nop
  408660:	20400c00 	.word	0x20400c00

00408664 <__register_exitproc>:
  408664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408668:	4c25      	ldr	r4, [pc, #148]	; (408700 <__register_exitproc+0x9c>)
  40866a:	6825      	ldr	r5, [r4, #0]
  40866c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  408670:	4606      	mov	r6, r0
  408672:	4688      	mov	r8, r1
  408674:	4692      	mov	sl, r2
  408676:	4699      	mov	r9, r3
  408678:	b3c4      	cbz	r4, 4086ec <__register_exitproc+0x88>
  40867a:	6860      	ldr	r0, [r4, #4]
  40867c:	281f      	cmp	r0, #31
  40867e:	dc17      	bgt.n	4086b0 <__register_exitproc+0x4c>
  408680:	1c43      	adds	r3, r0, #1
  408682:	b176      	cbz	r6, 4086a2 <__register_exitproc+0x3e>
  408684:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  408688:	2201      	movs	r2, #1
  40868a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40868e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  408692:	4082      	lsls	r2, r0
  408694:	4311      	orrs	r1, r2
  408696:	2e02      	cmp	r6, #2
  408698:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40869c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4086a0:	d01e      	beq.n	4086e0 <__register_exitproc+0x7c>
  4086a2:	3002      	adds	r0, #2
  4086a4:	6063      	str	r3, [r4, #4]
  4086a6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4086aa:	2000      	movs	r0, #0
  4086ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4086b0:	4b14      	ldr	r3, [pc, #80]	; (408704 <__register_exitproc+0xa0>)
  4086b2:	b303      	cbz	r3, 4086f6 <__register_exitproc+0x92>
  4086b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4086b8:	f7fa fb2c 	bl	402d14 <malloc>
  4086bc:	4604      	mov	r4, r0
  4086be:	b1d0      	cbz	r0, 4086f6 <__register_exitproc+0x92>
  4086c0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4086c4:	2700      	movs	r7, #0
  4086c6:	e880 0088 	stmia.w	r0, {r3, r7}
  4086ca:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4086ce:	4638      	mov	r0, r7
  4086d0:	2301      	movs	r3, #1
  4086d2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4086d6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4086da:	2e00      	cmp	r6, #0
  4086dc:	d0e1      	beq.n	4086a2 <__register_exitproc+0x3e>
  4086de:	e7d1      	b.n	408684 <__register_exitproc+0x20>
  4086e0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4086e4:	430a      	orrs	r2, r1
  4086e6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4086ea:	e7da      	b.n	4086a2 <__register_exitproc+0x3e>
  4086ec:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4086f0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4086f4:	e7c1      	b.n	40867a <__register_exitproc+0x16>
  4086f6:	f04f 30ff 	mov.w	r0, #4294967295
  4086fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4086fe:	bf00      	nop
  408700:	00409614 	.word	0x00409614
  408704:	00402d15 	.word	0x00402d15

00408708 <_calloc_r>:
  408708:	b510      	push	{r4, lr}
  40870a:	fb02 f101 	mul.w	r1, r2, r1
  40870e:	f7fa fb11 	bl	402d34 <_malloc_r>
  408712:	4604      	mov	r4, r0
  408714:	b1d8      	cbz	r0, 40874e <_calloc_r+0x46>
  408716:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40871a:	f022 0203 	bic.w	r2, r2, #3
  40871e:	3a04      	subs	r2, #4
  408720:	2a24      	cmp	r2, #36	; 0x24
  408722:	d818      	bhi.n	408756 <_calloc_r+0x4e>
  408724:	2a13      	cmp	r2, #19
  408726:	d914      	bls.n	408752 <_calloc_r+0x4a>
  408728:	2300      	movs	r3, #0
  40872a:	2a1b      	cmp	r2, #27
  40872c:	6003      	str	r3, [r0, #0]
  40872e:	6043      	str	r3, [r0, #4]
  408730:	d916      	bls.n	408760 <_calloc_r+0x58>
  408732:	2a24      	cmp	r2, #36	; 0x24
  408734:	6083      	str	r3, [r0, #8]
  408736:	60c3      	str	r3, [r0, #12]
  408738:	bf11      	iteee	ne
  40873a:	f100 0210 	addne.w	r2, r0, #16
  40873e:	6103      	streq	r3, [r0, #16]
  408740:	6143      	streq	r3, [r0, #20]
  408742:	f100 0218 	addeq.w	r2, r0, #24
  408746:	2300      	movs	r3, #0
  408748:	6013      	str	r3, [r2, #0]
  40874a:	6053      	str	r3, [r2, #4]
  40874c:	6093      	str	r3, [r2, #8]
  40874e:	4620      	mov	r0, r4
  408750:	bd10      	pop	{r4, pc}
  408752:	4602      	mov	r2, r0
  408754:	e7f7      	b.n	408746 <_calloc_r+0x3e>
  408756:	2100      	movs	r1, #0
  408758:	f7fa fe3e 	bl	4033d8 <memset>
  40875c:	4620      	mov	r0, r4
  40875e:	bd10      	pop	{r4, pc}
  408760:	f100 0208 	add.w	r2, r0, #8
  408764:	e7ef      	b.n	408746 <_calloc_r+0x3e>
  408766:	bf00      	nop

00408768 <_close_r>:
  408768:	b538      	push	{r3, r4, r5, lr}
  40876a:	4c07      	ldr	r4, [pc, #28]	; (408788 <_close_r+0x20>)
  40876c:	2300      	movs	r3, #0
  40876e:	4605      	mov	r5, r0
  408770:	4608      	mov	r0, r1
  408772:	6023      	str	r3, [r4, #0]
  408774:	f7f8 f966 	bl	400a44 <_close>
  408778:	1c43      	adds	r3, r0, #1
  40877a:	d000      	beq.n	40877e <_close_r+0x16>
  40877c:	bd38      	pop	{r3, r4, r5, pc}
  40877e:	6823      	ldr	r3, [r4, #0]
  408780:	2b00      	cmp	r3, #0
  408782:	d0fb      	beq.n	40877c <_close_r+0x14>
  408784:	602b      	str	r3, [r5, #0]
  408786:	bd38      	pop	{r3, r4, r5, pc}
  408788:	20400c00 	.word	0x20400c00

0040878c <_fclose_r>:
  40878c:	2900      	cmp	r1, #0
  40878e:	d03d      	beq.n	40880c <_fclose_r+0x80>
  408790:	b570      	push	{r4, r5, r6, lr}
  408792:	4605      	mov	r5, r0
  408794:	460c      	mov	r4, r1
  408796:	b108      	cbz	r0, 40879c <_fclose_r+0x10>
  408798:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40879a:	b37b      	cbz	r3, 4087fc <_fclose_r+0x70>
  40879c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4087a0:	b90b      	cbnz	r3, 4087a6 <_fclose_r+0x1a>
  4087a2:	2000      	movs	r0, #0
  4087a4:	bd70      	pop	{r4, r5, r6, pc}
  4087a6:	4621      	mov	r1, r4
  4087a8:	4628      	mov	r0, r5
  4087aa:	f7fe fb29 	bl	406e00 <__sflush_r>
  4087ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4087b0:	4606      	mov	r6, r0
  4087b2:	b133      	cbz	r3, 4087c2 <_fclose_r+0x36>
  4087b4:	69e1      	ldr	r1, [r4, #28]
  4087b6:	4628      	mov	r0, r5
  4087b8:	4798      	blx	r3
  4087ba:	2800      	cmp	r0, #0
  4087bc:	bfb8      	it	lt
  4087be:	f04f 36ff 	movlt.w	r6, #4294967295
  4087c2:	89a3      	ldrh	r3, [r4, #12]
  4087c4:	061b      	lsls	r3, r3, #24
  4087c6:	d41c      	bmi.n	408802 <_fclose_r+0x76>
  4087c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4087ca:	b141      	cbz	r1, 4087de <_fclose_r+0x52>
  4087cc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4087d0:	4299      	cmp	r1, r3
  4087d2:	d002      	beq.n	4087da <_fclose_r+0x4e>
  4087d4:	4628      	mov	r0, r5
  4087d6:	f7fe fd15 	bl	407204 <_free_r>
  4087da:	2300      	movs	r3, #0
  4087dc:	6323      	str	r3, [r4, #48]	; 0x30
  4087de:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4087e0:	b121      	cbz	r1, 4087ec <_fclose_r+0x60>
  4087e2:	4628      	mov	r0, r5
  4087e4:	f7fe fd0e 	bl	407204 <_free_r>
  4087e8:	2300      	movs	r3, #0
  4087ea:	6463      	str	r3, [r4, #68]	; 0x44
  4087ec:	f7fe fc46 	bl	40707c <__sfp_lock_acquire>
  4087f0:	2300      	movs	r3, #0
  4087f2:	81a3      	strh	r3, [r4, #12]
  4087f4:	f7fe fc44 	bl	407080 <__sfp_lock_release>
  4087f8:	4630      	mov	r0, r6
  4087fa:	bd70      	pop	{r4, r5, r6, pc}
  4087fc:	f7fe fc38 	bl	407070 <__sinit>
  408800:	e7cc      	b.n	40879c <_fclose_r+0x10>
  408802:	6921      	ldr	r1, [r4, #16]
  408804:	4628      	mov	r0, r5
  408806:	f7fe fcfd 	bl	407204 <_free_r>
  40880a:	e7dd      	b.n	4087c8 <_fclose_r+0x3c>
  40880c:	2000      	movs	r0, #0
  40880e:	4770      	bx	lr

00408810 <_fstat_r>:
  408810:	b538      	push	{r3, r4, r5, lr}
  408812:	460b      	mov	r3, r1
  408814:	4c07      	ldr	r4, [pc, #28]	; (408834 <_fstat_r+0x24>)
  408816:	4605      	mov	r5, r0
  408818:	4611      	mov	r1, r2
  40881a:	4618      	mov	r0, r3
  40881c:	2300      	movs	r3, #0
  40881e:	6023      	str	r3, [r4, #0]
  408820:	f7f8 f914 	bl	400a4c <_fstat>
  408824:	1c43      	adds	r3, r0, #1
  408826:	d000      	beq.n	40882a <_fstat_r+0x1a>
  408828:	bd38      	pop	{r3, r4, r5, pc}
  40882a:	6823      	ldr	r3, [r4, #0]
  40882c:	2b00      	cmp	r3, #0
  40882e:	d0fb      	beq.n	408828 <_fstat_r+0x18>
  408830:	602b      	str	r3, [r5, #0]
  408832:	bd38      	pop	{r3, r4, r5, pc}
  408834:	20400c00 	.word	0x20400c00

00408838 <_isatty_r>:
  408838:	b538      	push	{r3, r4, r5, lr}
  40883a:	4c07      	ldr	r4, [pc, #28]	; (408858 <_isatty_r+0x20>)
  40883c:	2300      	movs	r3, #0
  40883e:	4605      	mov	r5, r0
  408840:	4608      	mov	r0, r1
  408842:	6023      	str	r3, [r4, #0]
  408844:	f7f8 f908 	bl	400a58 <_isatty>
  408848:	1c43      	adds	r3, r0, #1
  40884a:	d000      	beq.n	40884e <_isatty_r+0x16>
  40884c:	bd38      	pop	{r3, r4, r5, pc}
  40884e:	6823      	ldr	r3, [r4, #0]
  408850:	2b00      	cmp	r3, #0
  408852:	d0fb      	beq.n	40884c <_isatty_r+0x14>
  408854:	602b      	str	r3, [r5, #0]
  408856:	bd38      	pop	{r3, r4, r5, pc}
  408858:	20400c00 	.word	0x20400c00

0040885c <_lseek_r>:
  40885c:	b570      	push	{r4, r5, r6, lr}
  40885e:	460d      	mov	r5, r1
  408860:	4c08      	ldr	r4, [pc, #32]	; (408884 <_lseek_r+0x28>)
  408862:	4611      	mov	r1, r2
  408864:	4606      	mov	r6, r0
  408866:	461a      	mov	r2, r3
  408868:	4628      	mov	r0, r5
  40886a:	2300      	movs	r3, #0
  40886c:	6023      	str	r3, [r4, #0]
  40886e:	f7f8 f8f5 	bl	400a5c <_lseek>
  408872:	1c43      	adds	r3, r0, #1
  408874:	d000      	beq.n	408878 <_lseek_r+0x1c>
  408876:	bd70      	pop	{r4, r5, r6, pc}
  408878:	6823      	ldr	r3, [r4, #0]
  40887a:	2b00      	cmp	r3, #0
  40887c:	d0fb      	beq.n	408876 <_lseek_r+0x1a>
  40887e:	6033      	str	r3, [r6, #0]
  408880:	bd70      	pop	{r4, r5, r6, pc}
  408882:	bf00      	nop
  408884:	20400c00 	.word	0x20400c00

00408888 <_read_r>:
  408888:	b570      	push	{r4, r5, r6, lr}
  40888a:	460d      	mov	r5, r1
  40888c:	4c08      	ldr	r4, [pc, #32]	; (4088b0 <_read_r+0x28>)
  40888e:	4611      	mov	r1, r2
  408890:	4606      	mov	r6, r0
  408892:	461a      	mov	r2, r3
  408894:	4628      	mov	r0, r5
  408896:	2300      	movs	r3, #0
  408898:	6023      	str	r3, [r4, #0]
  40889a:	f7f7 fcb7 	bl	40020c <_read>
  40889e:	1c43      	adds	r3, r0, #1
  4088a0:	d000      	beq.n	4088a4 <_read_r+0x1c>
  4088a2:	bd70      	pop	{r4, r5, r6, pc}
  4088a4:	6823      	ldr	r3, [r4, #0]
  4088a6:	2b00      	cmp	r3, #0
  4088a8:	d0fb      	beq.n	4088a2 <_read_r+0x1a>
  4088aa:	6033      	str	r3, [r6, #0]
  4088ac:	bd70      	pop	{r4, r5, r6, pc}
  4088ae:	bf00      	nop
  4088b0:	20400c00 	.word	0x20400c00

004088b4 <__aeabi_drsub>:
  4088b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4088b8:	e002      	b.n	4088c0 <__adddf3>
  4088ba:	bf00      	nop

004088bc <__aeabi_dsub>:
  4088bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004088c0 <__adddf3>:
  4088c0:	b530      	push	{r4, r5, lr}
  4088c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4088c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4088ca:	ea94 0f05 	teq	r4, r5
  4088ce:	bf08      	it	eq
  4088d0:	ea90 0f02 	teqeq	r0, r2
  4088d4:	bf1f      	itttt	ne
  4088d6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4088da:	ea55 0c02 	orrsne.w	ip, r5, r2
  4088de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4088e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4088e6:	f000 80e2 	beq.w	408aae <__adddf3+0x1ee>
  4088ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4088ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4088f2:	bfb8      	it	lt
  4088f4:	426d      	neglt	r5, r5
  4088f6:	dd0c      	ble.n	408912 <__adddf3+0x52>
  4088f8:	442c      	add	r4, r5
  4088fa:	ea80 0202 	eor.w	r2, r0, r2
  4088fe:	ea81 0303 	eor.w	r3, r1, r3
  408902:	ea82 0000 	eor.w	r0, r2, r0
  408906:	ea83 0101 	eor.w	r1, r3, r1
  40890a:	ea80 0202 	eor.w	r2, r0, r2
  40890e:	ea81 0303 	eor.w	r3, r1, r3
  408912:	2d36      	cmp	r5, #54	; 0x36
  408914:	bf88      	it	hi
  408916:	bd30      	pophi	{r4, r5, pc}
  408918:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40891c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408920:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  408924:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  408928:	d002      	beq.n	408930 <__adddf3+0x70>
  40892a:	4240      	negs	r0, r0
  40892c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408930:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  408934:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408938:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40893c:	d002      	beq.n	408944 <__adddf3+0x84>
  40893e:	4252      	negs	r2, r2
  408940:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408944:	ea94 0f05 	teq	r4, r5
  408948:	f000 80a7 	beq.w	408a9a <__adddf3+0x1da>
  40894c:	f1a4 0401 	sub.w	r4, r4, #1
  408950:	f1d5 0e20 	rsbs	lr, r5, #32
  408954:	db0d      	blt.n	408972 <__adddf3+0xb2>
  408956:	fa02 fc0e 	lsl.w	ip, r2, lr
  40895a:	fa22 f205 	lsr.w	r2, r2, r5
  40895e:	1880      	adds	r0, r0, r2
  408960:	f141 0100 	adc.w	r1, r1, #0
  408964:	fa03 f20e 	lsl.w	r2, r3, lr
  408968:	1880      	adds	r0, r0, r2
  40896a:	fa43 f305 	asr.w	r3, r3, r5
  40896e:	4159      	adcs	r1, r3
  408970:	e00e      	b.n	408990 <__adddf3+0xd0>
  408972:	f1a5 0520 	sub.w	r5, r5, #32
  408976:	f10e 0e20 	add.w	lr, lr, #32
  40897a:	2a01      	cmp	r2, #1
  40897c:	fa03 fc0e 	lsl.w	ip, r3, lr
  408980:	bf28      	it	cs
  408982:	f04c 0c02 	orrcs.w	ip, ip, #2
  408986:	fa43 f305 	asr.w	r3, r3, r5
  40898a:	18c0      	adds	r0, r0, r3
  40898c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  408990:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408994:	d507      	bpl.n	4089a6 <__adddf3+0xe6>
  408996:	f04f 0e00 	mov.w	lr, #0
  40899a:	f1dc 0c00 	rsbs	ip, ip, #0
  40899e:	eb7e 0000 	sbcs.w	r0, lr, r0
  4089a2:	eb6e 0101 	sbc.w	r1, lr, r1
  4089a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4089aa:	d31b      	bcc.n	4089e4 <__adddf3+0x124>
  4089ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4089b0:	d30c      	bcc.n	4089cc <__adddf3+0x10c>
  4089b2:	0849      	lsrs	r1, r1, #1
  4089b4:	ea5f 0030 	movs.w	r0, r0, rrx
  4089b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4089bc:	f104 0401 	add.w	r4, r4, #1
  4089c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4089c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4089c8:	f080 809a 	bcs.w	408b00 <__adddf3+0x240>
  4089cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4089d0:	bf08      	it	eq
  4089d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4089d6:	f150 0000 	adcs.w	r0, r0, #0
  4089da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4089de:	ea41 0105 	orr.w	r1, r1, r5
  4089e2:	bd30      	pop	{r4, r5, pc}
  4089e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4089e8:	4140      	adcs	r0, r0
  4089ea:	eb41 0101 	adc.w	r1, r1, r1
  4089ee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4089f2:	f1a4 0401 	sub.w	r4, r4, #1
  4089f6:	d1e9      	bne.n	4089cc <__adddf3+0x10c>
  4089f8:	f091 0f00 	teq	r1, #0
  4089fc:	bf04      	itt	eq
  4089fe:	4601      	moveq	r1, r0
  408a00:	2000      	moveq	r0, #0
  408a02:	fab1 f381 	clz	r3, r1
  408a06:	bf08      	it	eq
  408a08:	3320      	addeq	r3, #32
  408a0a:	f1a3 030b 	sub.w	r3, r3, #11
  408a0e:	f1b3 0220 	subs.w	r2, r3, #32
  408a12:	da0c      	bge.n	408a2e <__adddf3+0x16e>
  408a14:	320c      	adds	r2, #12
  408a16:	dd08      	ble.n	408a2a <__adddf3+0x16a>
  408a18:	f102 0c14 	add.w	ip, r2, #20
  408a1c:	f1c2 020c 	rsb	r2, r2, #12
  408a20:	fa01 f00c 	lsl.w	r0, r1, ip
  408a24:	fa21 f102 	lsr.w	r1, r1, r2
  408a28:	e00c      	b.n	408a44 <__adddf3+0x184>
  408a2a:	f102 0214 	add.w	r2, r2, #20
  408a2e:	bfd8      	it	le
  408a30:	f1c2 0c20 	rsble	ip, r2, #32
  408a34:	fa01 f102 	lsl.w	r1, r1, r2
  408a38:	fa20 fc0c 	lsr.w	ip, r0, ip
  408a3c:	bfdc      	itt	le
  408a3e:	ea41 010c 	orrle.w	r1, r1, ip
  408a42:	4090      	lslle	r0, r2
  408a44:	1ae4      	subs	r4, r4, r3
  408a46:	bfa2      	ittt	ge
  408a48:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  408a4c:	4329      	orrge	r1, r5
  408a4e:	bd30      	popge	{r4, r5, pc}
  408a50:	ea6f 0404 	mvn.w	r4, r4
  408a54:	3c1f      	subs	r4, #31
  408a56:	da1c      	bge.n	408a92 <__adddf3+0x1d2>
  408a58:	340c      	adds	r4, #12
  408a5a:	dc0e      	bgt.n	408a7a <__adddf3+0x1ba>
  408a5c:	f104 0414 	add.w	r4, r4, #20
  408a60:	f1c4 0220 	rsb	r2, r4, #32
  408a64:	fa20 f004 	lsr.w	r0, r0, r4
  408a68:	fa01 f302 	lsl.w	r3, r1, r2
  408a6c:	ea40 0003 	orr.w	r0, r0, r3
  408a70:	fa21 f304 	lsr.w	r3, r1, r4
  408a74:	ea45 0103 	orr.w	r1, r5, r3
  408a78:	bd30      	pop	{r4, r5, pc}
  408a7a:	f1c4 040c 	rsb	r4, r4, #12
  408a7e:	f1c4 0220 	rsb	r2, r4, #32
  408a82:	fa20 f002 	lsr.w	r0, r0, r2
  408a86:	fa01 f304 	lsl.w	r3, r1, r4
  408a8a:	ea40 0003 	orr.w	r0, r0, r3
  408a8e:	4629      	mov	r1, r5
  408a90:	bd30      	pop	{r4, r5, pc}
  408a92:	fa21 f004 	lsr.w	r0, r1, r4
  408a96:	4629      	mov	r1, r5
  408a98:	bd30      	pop	{r4, r5, pc}
  408a9a:	f094 0f00 	teq	r4, #0
  408a9e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  408aa2:	bf06      	itte	eq
  408aa4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  408aa8:	3401      	addeq	r4, #1
  408aaa:	3d01      	subne	r5, #1
  408aac:	e74e      	b.n	40894c <__adddf3+0x8c>
  408aae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408ab2:	bf18      	it	ne
  408ab4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408ab8:	d029      	beq.n	408b0e <__adddf3+0x24e>
  408aba:	ea94 0f05 	teq	r4, r5
  408abe:	bf08      	it	eq
  408ac0:	ea90 0f02 	teqeq	r0, r2
  408ac4:	d005      	beq.n	408ad2 <__adddf3+0x212>
  408ac6:	ea54 0c00 	orrs.w	ip, r4, r0
  408aca:	bf04      	itt	eq
  408acc:	4619      	moveq	r1, r3
  408ace:	4610      	moveq	r0, r2
  408ad0:	bd30      	pop	{r4, r5, pc}
  408ad2:	ea91 0f03 	teq	r1, r3
  408ad6:	bf1e      	ittt	ne
  408ad8:	2100      	movne	r1, #0
  408ada:	2000      	movne	r0, #0
  408adc:	bd30      	popne	{r4, r5, pc}
  408ade:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  408ae2:	d105      	bne.n	408af0 <__adddf3+0x230>
  408ae4:	0040      	lsls	r0, r0, #1
  408ae6:	4149      	adcs	r1, r1
  408ae8:	bf28      	it	cs
  408aea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  408aee:	bd30      	pop	{r4, r5, pc}
  408af0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  408af4:	bf3c      	itt	cc
  408af6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  408afa:	bd30      	popcc	{r4, r5, pc}
  408afc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408b00:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  408b04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408b08:	f04f 0000 	mov.w	r0, #0
  408b0c:	bd30      	pop	{r4, r5, pc}
  408b0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408b12:	bf1a      	itte	ne
  408b14:	4619      	movne	r1, r3
  408b16:	4610      	movne	r0, r2
  408b18:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  408b1c:	bf1c      	itt	ne
  408b1e:	460b      	movne	r3, r1
  408b20:	4602      	movne	r2, r0
  408b22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408b26:	bf06      	itte	eq
  408b28:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  408b2c:	ea91 0f03 	teqeq	r1, r3
  408b30:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  408b34:	bd30      	pop	{r4, r5, pc}
  408b36:	bf00      	nop

00408b38 <__aeabi_ui2d>:
  408b38:	f090 0f00 	teq	r0, #0
  408b3c:	bf04      	itt	eq
  408b3e:	2100      	moveq	r1, #0
  408b40:	4770      	bxeq	lr
  408b42:	b530      	push	{r4, r5, lr}
  408b44:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408b48:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408b4c:	f04f 0500 	mov.w	r5, #0
  408b50:	f04f 0100 	mov.w	r1, #0
  408b54:	e750      	b.n	4089f8 <__adddf3+0x138>
  408b56:	bf00      	nop

00408b58 <__aeabi_i2d>:
  408b58:	f090 0f00 	teq	r0, #0
  408b5c:	bf04      	itt	eq
  408b5e:	2100      	moveq	r1, #0
  408b60:	4770      	bxeq	lr
  408b62:	b530      	push	{r4, r5, lr}
  408b64:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408b68:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408b6c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  408b70:	bf48      	it	mi
  408b72:	4240      	negmi	r0, r0
  408b74:	f04f 0100 	mov.w	r1, #0
  408b78:	e73e      	b.n	4089f8 <__adddf3+0x138>
  408b7a:	bf00      	nop

00408b7c <__aeabi_f2d>:
  408b7c:	0042      	lsls	r2, r0, #1
  408b7e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  408b82:	ea4f 0131 	mov.w	r1, r1, rrx
  408b86:	ea4f 7002 	mov.w	r0, r2, lsl #28
  408b8a:	bf1f      	itttt	ne
  408b8c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  408b90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408b94:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  408b98:	4770      	bxne	lr
  408b9a:	f092 0f00 	teq	r2, #0
  408b9e:	bf14      	ite	ne
  408ba0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408ba4:	4770      	bxeq	lr
  408ba6:	b530      	push	{r4, r5, lr}
  408ba8:	f44f 7460 	mov.w	r4, #896	; 0x380
  408bac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408bb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408bb4:	e720      	b.n	4089f8 <__adddf3+0x138>
  408bb6:	bf00      	nop

00408bb8 <__aeabi_ul2d>:
  408bb8:	ea50 0201 	orrs.w	r2, r0, r1
  408bbc:	bf08      	it	eq
  408bbe:	4770      	bxeq	lr
  408bc0:	b530      	push	{r4, r5, lr}
  408bc2:	f04f 0500 	mov.w	r5, #0
  408bc6:	e00a      	b.n	408bde <__aeabi_l2d+0x16>

00408bc8 <__aeabi_l2d>:
  408bc8:	ea50 0201 	orrs.w	r2, r0, r1
  408bcc:	bf08      	it	eq
  408bce:	4770      	bxeq	lr
  408bd0:	b530      	push	{r4, r5, lr}
  408bd2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  408bd6:	d502      	bpl.n	408bde <__aeabi_l2d+0x16>
  408bd8:	4240      	negs	r0, r0
  408bda:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408bde:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408be2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408be6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  408bea:	f43f aedc 	beq.w	4089a6 <__adddf3+0xe6>
  408bee:	f04f 0203 	mov.w	r2, #3
  408bf2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408bf6:	bf18      	it	ne
  408bf8:	3203      	addne	r2, #3
  408bfa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408bfe:	bf18      	it	ne
  408c00:	3203      	addne	r2, #3
  408c02:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  408c06:	f1c2 0320 	rsb	r3, r2, #32
  408c0a:	fa00 fc03 	lsl.w	ip, r0, r3
  408c0e:	fa20 f002 	lsr.w	r0, r0, r2
  408c12:	fa01 fe03 	lsl.w	lr, r1, r3
  408c16:	ea40 000e 	orr.w	r0, r0, lr
  408c1a:	fa21 f102 	lsr.w	r1, r1, r2
  408c1e:	4414      	add	r4, r2
  408c20:	e6c1      	b.n	4089a6 <__adddf3+0xe6>
  408c22:	bf00      	nop

00408c24 <__aeabi_dmul>:
  408c24:	b570      	push	{r4, r5, r6, lr}
  408c26:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408c2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408c2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408c32:	bf1d      	ittte	ne
  408c34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408c38:	ea94 0f0c 	teqne	r4, ip
  408c3c:	ea95 0f0c 	teqne	r5, ip
  408c40:	f000 f8de 	bleq	408e00 <__aeabi_dmul+0x1dc>
  408c44:	442c      	add	r4, r5
  408c46:	ea81 0603 	eor.w	r6, r1, r3
  408c4a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  408c4e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  408c52:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  408c56:	bf18      	it	ne
  408c58:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  408c5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  408c64:	d038      	beq.n	408cd8 <__aeabi_dmul+0xb4>
  408c66:	fba0 ce02 	umull	ip, lr, r0, r2
  408c6a:	f04f 0500 	mov.w	r5, #0
  408c6e:	fbe1 e502 	umlal	lr, r5, r1, r2
  408c72:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  408c76:	fbe0 e503 	umlal	lr, r5, r0, r3
  408c7a:	f04f 0600 	mov.w	r6, #0
  408c7e:	fbe1 5603 	umlal	r5, r6, r1, r3
  408c82:	f09c 0f00 	teq	ip, #0
  408c86:	bf18      	it	ne
  408c88:	f04e 0e01 	orrne.w	lr, lr, #1
  408c8c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  408c90:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  408c94:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  408c98:	d204      	bcs.n	408ca4 <__aeabi_dmul+0x80>
  408c9a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  408c9e:	416d      	adcs	r5, r5
  408ca0:	eb46 0606 	adc.w	r6, r6, r6
  408ca4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  408ca8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  408cac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  408cb0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  408cb4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  408cb8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408cbc:	bf88      	it	hi
  408cbe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408cc2:	d81e      	bhi.n	408d02 <__aeabi_dmul+0xde>
  408cc4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  408cc8:	bf08      	it	eq
  408cca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  408cce:	f150 0000 	adcs.w	r0, r0, #0
  408cd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408cd6:	bd70      	pop	{r4, r5, r6, pc}
  408cd8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  408cdc:	ea46 0101 	orr.w	r1, r6, r1
  408ce0:	ea40 0002 	orr.w	r0, r0, r2
  408ce4:	ea81 0103 	eor.w	r1, r1, r3
  408ce8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408cec:	bfc2      	ittt	gt
  408cee:	ebd4 050c 	rsbsgt	r5, r4, ip
  408cf2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408cf6:	bd70      	popgt	{r4, r5, r6, pc}
  408cf8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408cfc:	f04f 0e00 	mov.w	lr, #0
  408d00:	3c01      	subs	r4, #1
  408d02:	f300 80ab 	bgt.w	408e5c <__aeabi_dmul+0x238>
  408d06:	f114 0f36 	cmn.w	r4, #54	; 0x36
  408d0a:	bfde      	ittt	le
  408d0c:	2000      	movle	r0, #0
  408d0e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  408d12:	bd70      	pople	{r4, r5, r6, pc}
  408d14:	f1c4 0400 	rsb	r4, r4, #0
  408d18:	3c20      	subs	r4, #32
  408d1a:	da35      	bge.n	408d88 <__aeabi_dmul+0x164>
  408d1c:	340c      	adds	r4, #12
  408d1e:	dc1b      	bgt.n	408d58 <__aeabi_dmul+0x134>
  408d20:	f104 0414 	add.w	r4, r4, #20
  408d24:	f1c4 0520 	rsb	r5, r4, #32
  408d28:	fa00 f305 	lsl.w	r3, r0, r5
  408d2c:	fa20 f004 	lsr.w	r0, r0, r4
  408d30:	fa01 f205 	lsl.w	r2, r1, r5
  408d34:	ea40 0002 	orr.w	r0, r0, r2
  408d38:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  408d3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408d40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408d44:	fa21 f604 	lsr.w	r6, r1, r4
  408d48:	eb42 0106 	adc.w	r1, r2, r6
  408d4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408d50:	bf08      	it	eq
  408d52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408d56:	bd70      	pop	{r4, r5, r6, pc}
  408d58:	f1c4 040c 	rsb	r4, r4, #12
  408d5c:	f1c4 0520 	rsb	r5, r4, #32
  408d60:	fa00 f304 	lsl.w	r3, r0, r4
  408d64:	fa20 f005 	lsr.w	r0, r0, r5
  408d68:	fa01 f204 	lsl.w	r2, r1, r4
  408d6c:	ea40 0002 	orr.w	r0, r0, r2
  408d70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408d74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408d78:	f141 0100 	adc.w	r1, r1, #0
  408d7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408d80:	bf08      	it	eq
  408d82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408d86:	bd70      	pop	{r4, r5, r6, pc}
  408d88:	f1c4 0520 	rsb	r5, r4, #32
  408d8c:	fa00 f205 	lsl.w	r2, r0, r5
  408d90:	ea4e 0e02 	orr.w	lr, lr, r2
  408d94:	fa20 f304 	lsr.w	r3, r0, r4
  408d98:	fa01 f205 	lsl.w	r2, r1, r5
  408d9c:	ea43 0302 	orr.w	r3, r3, r2
  408da0:	fa21 f004 	lsr.w	r0, r1, r4
  408da4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408da8:	fa21 f204 	lsr.w	r2, r1, r4
  408dac:	ea20 0002 	bic.w	r0, r0, r2
  408db0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408db4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408db8:	bf08      	it	eq
  408dba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408dbe:	bd70      	pop	{r4, r5, r6, pc}
  408dc0:	f094 0f00 	teq	r4, #0
  408dc4:	d10f      	bne.n	408de6 <__aeabi_dmul+0x1c2>
  408dc6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  408dca:	0040      	lsls	r0, r0, #1
  408dcc:	eb41 0101 	adc.w	r1, r1, r1
  408dd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408dd4:	bf08      	it	eq
  408dd6:	3c01      	subeq	r4, #1
  408dd8:	d0f7      	beq.n	408dca <__aeabi_dmul+0x1a6>
  408dda:	ea41 0106 	orr.w	r1, r1, r6
  408dde:	f095 0f00 	teq	r5, #0
  408de2:	bf18      	it	ne
  408de4:	4770      	bxne	lr
  408de6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  408dea:	0052      	lsls	r2, r2, #1
  408dec:	eb43 0303 	adc.w	r3, r3, r3
  408df0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408df4:	bf08      	it	eq
  408df6:	3d01      	subeq	r5, #1
  408df8:	d0f7      	beq.n	408dea <__aeabi_dmul+0x1c6>
  408dfa:	ea43 0306 	orr.w	r3, r3, r6
  408dfe:	4770      	bx	lr
  408e00:	ea94 0f0c 	teq	r4, ip
  408e04:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408e08:	bf18      	it	ne
  408e0a:	ea95 0f0c 	teqne	r5, ip
  408e0e:	d00c      	beq.n	408e2a <__aeabi_dmul+0x206>
  408e10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408e14:	bf18      	it	ne
  408e16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408e1a:	d1d1      	bne.n	408dc0 <__aeabi_dmul+0x19c>
  408e1c:	ea81 0103 	eor.w	r1, r1, r3
  408e20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408e24:	f04f 0000 	mov.w	r0, #0
  408e28:	bd70      	pop	{r4, r5, r6, pc}
  408e2a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408e2e:	bf06      	itte	eq
  408e30:	4610      	moveq	r0, r2
  408e32:	4619      	moveq	r1, r3
  408e34:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408e38:	d019      	beq.n	408e6e <__aeabi_dmul+0x24a>
  408e3a:	ea94 0f0c 	teq	r4, ip
  408e3e:	d102      	bne.n	408e46 <__aeabi_dmul+0x222>
  408e40:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  408e44:	d113      	bne.n	408e6e <__aeabi_dmul+0x24a>
  408e46:	ea95 0f0c 	teq	r5, ip
  408e4a:	d105      	bne.n	408e58 <__aeabi_dmul+0x234>
  408e4c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408e50:	bf1c      	itt	ne
  408e52:	4610      	movne	r0, r2
  408e54:	4619      	movne	r1, r3
  408e56:	d10a      	bne.n	408e6e <__aeabi_dmul+0x24a>
  408e58:	ea81 0103 	eor.w	r1, r1, r3
  408e5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408e60:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408e64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408e68:	f04f 0000 	mov.w	r0, #0
  408e6c:	bd70      	pop	{r4, r5, r6, pc}
  408e6e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408e72:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408e76:	bd70      	pop	{r4, r5, r6, pc}

00408e78 <__aeabi_ddiv>:
  408e78:	b570      	push	{r4, r5, r6, lr}
  408e7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408e7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408e82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408e86:	bf1d      	ittte	ne
  408e88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408e8c:	ea94 0f0c 	teqne	r4, ip
  408e90:	ea95 0f0c 	teqne	r5, ip
  408e94:	f000 f8a7 	bleq	408fe6 <__aeabi_ddiv+0x16e>
  408e98:	eba4 0405 	sub.w	r4, r4, r5
  408e9c:	ea81 0e03 	eor.w	lr, r1, r3
  408ea0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408ea4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408ea8:	f000 8088 	beq.w	408fbc <__aeabi_ddiv+0x144>
  408eac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408eb0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408eb4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408eb8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408ebc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408ec0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408ec4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408ec8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408ecc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408ed0:	429d      	cmp	r5, r3
  408ed2:	bf08      	it	eq
  408ed4:	4296      	cmpeq	r6, r2
  408ed6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408eda:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408ede:	d202      	bcs.n	408ee6 <__aeabi_ddiv+0x6e>
  408ee0:	085b      	lsrs	r3, r3, #1
  408ee2:	ea4f 0232 	mov.w	r2, r2, rrx
  408ee6:	1ab6      	subs	r6, r6, r2
  408ee8:	eb65 0503 	sbc.w	r5, r5, r3
  408eec:	085b      	lsrs	r3, r3, #1
  408eee:	ea4f 0232 	mov.w	r2, r2, rrx
  408ef2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408ef6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408efa:	ebb6 0e02 	subs.w	lr, r6, r2
  408efe:	eb75 0e03 	sbcs.w	lr, r5, r3
  408f02:	bf22      	ittt	cs
  408f04:	1ab6      	subcs	r6, r6, r2
  408f06:	4675      	movcs	r5, lr
  408f08:	ea40 000c 	orrcs.w	r0, r0, ip
  408f0c:	085b      	lsrs	r3, r3, #1
  408f0e:	ea4f 0232 	mov.w	r2, r2, rrx
  408f12:	ebb6 0e02 	subs.w	lr, r6, r2
  408f16:	eb75 0e03 	sbcs.w	lr, r5, r3
  408f1a:	bf22      	ittt	cs
  408f1c:	1ab6      	subcs	r6, r6, r2
  408f1e:	4675      	movcs	r5, lr
  408f20:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408f24:	085b      	lsrs	r3, r3, #1
  408f26:	ea4f 0232 	mov.w	r2, r2, rrx
  408f2a:	ebb6 0e02 	subs.w	lr, r6, r2
  408f2e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408f32:	bf22      	ittt	cs
  408f34:	1ab6      	subcs	r6, r6, r2
  408f36:	4675      	movcs	r5, lr
  408f38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408f3c:	085b      	lsrs	r3, r3, #1
  408f3e:	ea4f 0232 	mov.w	r2, r2, rrx
  408f42:	ebb6 0e02 	subs.w	lr, r6, r2
  408f46:	eb75 0e03 	sbcs.w	lr, r5, r3
  408f4a:	bf22      	ittt	cs
  408f4c:	1ab6      	subcs	r6, r6, r2
  408f4e:	4675      	movcs	r5, lr
  408f50:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408f54:	ea55 0e06 	orrs.w	lr, r5, r6
  408f58:	d018      	beq.n	408f8c <__aeabi_ddiv+0x114>
  408f5a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408f5e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408f62:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408f66:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408f6a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408f6e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408f72:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408f76:	d1c0      	bne.n	408efa <__aeabi_ddiv+0x82>
  408f78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408f7c:	d10b      	bne.n	408f96 <__aeabi_ddiv+0x11e>
  408f7e:	ea41 0100 	orr.w	r1, r1, r0
  408f82:	f04f 0000 	mov.w	r0, #0
  408f86:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408f8a:	e7b6      	b.n	408efa <__aeabi_ddiv+0x82>
  408f8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408f90:	bf04      	itt	eq
  408f92:	4301      	orreq	r1, r0
  408f94:	2000      	moveq	r0, #0
  408f96:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408f9a:	bf88      	it	hi
  408f9c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408fa0:	f63f aeaf 	bhi.w	408d02 <__aeabi_dmul+0xde>
  408fa4:	ebb5 0c03 	subs.w	ip, r5, r3
  408fa8:	bf04      	itt	eq
  408faa:	ebb6 0c02 	subseq.w	ip, r6, r2
  408fae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408fb2:	f150 0000 	adcs.w	r0, r0, #0
  408fb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408fba:	bd70      	pop	{r4, r5, r6, pc}
  408fbc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408fc0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408fc4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408fc8:	bfc2      	ittt	gt
  408fca:	ebd4 050c 	rsbsgt	r5, r4, ip
  408fce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408fd2:	bd70      	popgt	{r4, r5, r6, pc}
  408fd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408fd8:	f04f 0e00 	mov.w	lr, #0
  408fdc:	3c01      	subs	r4, #1
  408fde:	e690      	b.n	408d02 <__aeabi_dmul+0xde>
  408fe0:	ea45 0e06 	orr.w	lr, r5, r6
  408fe4:	e68d      	b.n	408d02 <__aeabi_dmul+0xde>
  408fe6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408fea:	ea94 0f0c 	teq	r4, ip
  408fee:	bf08      	it	eq
  408ff0:	ea95 0f0c 	teqeq	r5, ip
  408ff4:	f43f af3b 	beq.w	408e6e <__aeabi_dmul+0x24a>
  408ff8:	ea94 0f0c 	teq	r4, ip
  408ffc:	d10a      	bne.n	409014 <__aeabi_ddiv+0x19c>
  408ffe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  409002:	f47f af34 	bne.w	408e6e <__aeabi_dmul+0x24a>
  409006:	ea95 0f0c 	teq	r5, ip
  40900a:	f47f af25 	bne.w	408e58 <__aeabi_dmul+0x234>
  40900e:	4610      	mov	r0, r2
  409010:	4619      	mov	r1, r3
  409012:	e72c      	b.n	408e6e <__aeabi_dmul+0x24a>
  409014:	ea95 0f0c 	teq	r5, ip
  409018:	d106      	bne.n	409028 <__aeabi_ddiv+0x1b0>
  40901a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40901e:	f43f aefd 	beq.w	408e1c <__aeabi_dmul+0x1f8>
  409022:	4610      	mov	r0, r2
  409024:	4619      	mov	r1, r3
  409026:	e722      	b.n	408e6e <__aeabi_dmul+0x24a>
  409028:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40902c:	bf18      	it	ne
  40902e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409032:	f47f aec5 	bne.w	408dc0 <__aeabi_dmul+0x19c>
  409036:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40903a:	f47f af0d 	bne.w	408e58 <__aeabi_dmul+0x234>
  40903e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  409042:	f47f aeeb 	bne.w	408e1c <__aeabi_dmul+0x1f8>
  409046:	e712      	b.n	408e6e <__aeabi_dmul+0x24a>

00409048 <__gedf2>:
  409048:	f04f 3cff 	mov.w	ip, #4294967295
  40904c:	e006      	b.n	40905c <__cmpdf2+0x4>
  40904e:	bf00      	nop

00409050 <__ledf2>:
  409050:	f04f 0c01 	mov.w	ip, #1
  409054:	e002      	b.n	40905c <__cmpdf2+0x4>
  409056:	bf00      	nop

00409058 <__cmpdf2>:
  409058:	f04f 0c01 	mov.w	ip, #1
  40905c:	f84d cd04 	str.w	ip, [sp, #-4]!
  409060:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409064:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409068:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40906c:	bf18      	it	ne
  40906e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  409072:	d01b      	beq.n	4090ac <__cmpdf2+0x54>
  409074:	b001      	add	sp, #4
  409076:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40907a:	bf0c      	ite	eq
  40907c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  409080:	ea91 0f03 	teqne	r1, r3
  409084:	bf02      	ittt	eq
  409086:	ea90 0f02 	teqeq	r0, r2
  40908a:	2000      	moveq	r0, #0
  40908c:	4770      	bxeq	lr
  40908e:	f110 0f00 	cmn.w	r0, #0
  409092:	ea91 0f03 	teq	r1, r3
  409096:	bf58      	it	pl
  409098:	4299      	cmppl	r1, r3
  40909a:	bf08      	it	eq
  40909c:	4290      	cmpeq	r0, r2
  40909e:	bf2c      	ite	cs
  4090a0:	17d8      	asrcs	r0, r3, #31
  4090a2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4090a6:	f040 0001 	orr.w	r0, r0, #1
  4090aa:	4770      	bx	lr
  4090ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4090b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4090b4:	d102      	bne.n	4090bc <__cmpdf2+0x64>
  4090b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4090ba:	d107      	bne.n	4090cc <__cmpdf2+0x74>
  4090bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4090c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4090c4:	d1d6      	bne.n	409074 <__cmpdf2+0x1c>
  4090c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4090ca:	d0d3      	beq.n	409074 <__cmpdf2+0x1c>
  4090cc:	f85d 0b04 	ldr.w	r0, [sp], #4
  4090d0:	4770      	bx	lr
  4090d2:	bf00      	nop

004090d4 <__aeabi_cdrcmple>:
  4090d4:	4684      	mov	ip, r0
  4090d6:	4610      	mov	r0, r2
  4090d8:	4662      	mov	r2, ip
  4090da:	468c      	mov	ip, r1
  4090dc:	4619      	mov	r1, r3
  4090de:	4663      	mov	r3, ip
  4090e0:	e000      	b.n	4090e4 <__aeabi_cdcmpeq>
  4090e2:	bf00      	nop

004090e4 <__aeabi_cdcmpeq>:
  4090e4:	b501      	push	{r0, lr}
  4090e6:	f7ff ffb7 	bl	409058 <__cmpdf2>
  4090ea:	2800      	cmp	r0, #0
  4090ec:	bf48      	it	mi
  4090ee:	f110 0f00 	cmnmi.w	r0, #0
  4090f2:	bd01      	pop	{r0, pc}

004090f4 <__aeabi_dcmpeq>:
  4090f4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4090f8:	f7ff fff4 	bl	4090e4 <__aeabi_cdcmpeq>
  4090fc:	bf0c      	ite	eq
  4090fe:	2001      	moveq	r0, #1
  409100:	2000      	movne	r0, #0
  409102:	f85d fb08 	ldr.w	pc, [sp], #8
  409106:	bf00      	nop

00409108 <__aeabi_dcmplt>:
  409108:	f84d ed08 	str.w	lr, [sp, #-8]!
  40910c:	f7ff ffea 	bl	4090e4 <__aeabi_cdcmpeq>
  409110:	bf34      	ite	cc
  409112:	2001      	movcc	r0, #1
  409114:	2000      	movcs	r0, #0
  409116:	f85d fb08 	ldr.w	pc, [sp], #8
  40911a:	bf00      	nop

0040911c <__aeabi_dcmple>:
  40911c:	f84d ed08 	str.w	lr, [sp, #-8]!
  409120:	f7ff ffe0 	bl	4090e4 <__aeabi_cdcmpeq>
  409124:	bf94      	ite	ls
  409126:	2001      	movls	r0, #1
  409128:	2000      	movhi	r0, #0
  40912a:	f85d fb08 	ldr.w	pc, [sp], #8
  40912e:	bf00      	nop

00409130 <__aeabi_dcmpge>:
  409130:	f84d ed08 	str.w	lr, [sp, #-8]!
  409134:	f7ff ffce 	bl	4090d4 <__aeabi_cdrcmple>
  409138:	bf94      	ite	ls
  40913a:	2001      	movls	r0, #1
  40913c:	2000      	movhi	r0, #0
  40913e:	f85d fb08 	ldr.w	pc, [sp], #8
  409142:	bf00      	nop

00409144 <__aeabi_dcmpgt>:
  409144:	f84d ed08 	str.w	lr, [sp, #-8]!
  409148:	f7ff ffc4 	bl	4090d4 <__aeabi_cdrcmple>
  40914c:	bf34      	ite	cc
  40914e:	2001      	movcc	r0, #1
  409150:	2000      	movcs	r0, #0
  409152:	f85d fb08 	ldr.w	pc, [sp], #8
  409156:	bf00      	nop

00409158 <__aeabi_dcmpun>:
  409158:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40915c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409160:	d102      	bne.n	409168 <__aeabi_dcmpun+0x10>
  409162:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409166:	d10a      	bne.n	40917e <__aeabi_dcmpun+0x26>
  409168:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40916c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409170:	d102      	bne.n	409178 <__aeabi_dcmpun+0x20>
  409172:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409176:	d102      	bne.n	40917e <__aeabi_dcmpun+0x26>
  409178:	f04f 0000 	mov.w	r0, #0
  40917c:	4770      	bx	lr
  40917e:	f04f 0001 	mov.w	r0, #1
  409182:	4770      	bx	lr

00409184 <__aeabi_d2iz>:
  409184:	ea4f 0241 	mov.w	r2, r1, lsl #1
  409188:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40918c:	d215      	bcs.n	4091ba <__aeabi_d2iz+0x36>
  40918e:	d511      	bpl.n	4091b4 <__aeabi_d2iz+0x30>
  409190:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  409194:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  409198:	d912      	bls.n	4091c0 <__aeabi_d2iz+0x3c>
  40919a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40919e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4091a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4091a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4091aa:	fa23 f002 	lsr.w	r0, r3, r2
  4091ae:	bf18      	it	ne
  4091b0:	4240      	negne	r0, r0
  4091b2:	4770      	bx	lr
  4091b4:	f04f 0000 	mov.w	r0, #0
  4091b8:	4770      	bx	lr
  4091ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4091be:	d105      	bne.n	4091cc <__aeabi_d2iz+0x48>
  4091c0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4091c4:	bf08      	it	eq
  4091c6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4091ca:	4770      	bx	lr
  4091cc:	f04f 0000 	mov.w	r0, #0
  4091d0:	4770      	bx	lr
  4091d2:	bf00      	nop

004091d4 <__aeabi_uldivmod>:
  4091d4:	b953      	cbnz	r3, 4091ec <__aeabi_uldivmod+0x18>
  4091d6:	b94a      	cbnz	r2, 4091ec <__aeabi_uldivmod+0x18>
  4091d8:	2900      	cmp	r1, #0
  4091da:	bf08      	it	eq
  4091dc:	2800      	cmpeq	r0, #0
  4091de:	bf1c      	itt	ne
  4091e0:	f04f 31ff 	movne.w	r1, #4294967295
  4091e4:	f04f 30ff 	movne.w	r0, #4294967295
  4091e8:	f000 b97e 	b.w	4094e8 <__aeabi_idiv0>
  4091ec:	f1ad 0c08 	sub.w	ip, sp, #8
  4091f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4091f4:	f000 f806 	bl	409204 <__udivmoddi4>
  4091f8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4091fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409200:	b004      	add	sp, #16
  409202:	4770      	bx	lr

00409204 <__udivmoddi4>:
  409204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409208:	468c      	mov	ip, r1
  40920a:	460e      	mov	r6, r1
  40920c:	4604      	mov	r4, r0
  40920e:	9d08      	ldr	r5, [sp, #32]
  409210:	2b00      	cmp	r3, #0
  409212:	d150      	bne.n	4092b6 <__udivmoddi4+0xb2>
  409214:	428a      	cmp	r2, r1
  409216:	4617      	mov	r7, r2
  409218:	d96c      	bls.n	4092f4 <__udivmoddi4+0xf0>
  40921a:	fab2 fe82 	clz	lr, r2
  40921e:	f1be 0f00 	cmp.w	lr, #0
  409222:	d00b      	beq.n	40923c <__udivmoddi4+0x38>
  409224:	f1ce 0420 	rsb	r4, lr, #32
  409228:	fa20 f404 	lsr.w	r4, r0, r4
  40922c:	fa01 f60e 	lsl.w	r6, r1, lr
  409230:	ea44 0c06 	orr.w	ip, r4, r6
  409234:	fa02 f70e 	lsl.w	r7, r2, lr
  409238:	fa00 f40e 	lsl.w	r4, r0, lr
  40923c:	ea4f 4917 	mov.w	r9, r7, lsr #16
  409240:	0c22      	lsrs	r2, r4, #16
  409242:	fbbc f0f9 	udiv	r0, ip, r9
  409246:	fa1f f887 	uxth.w	r8, r7
  40924a:	fb09 c610 	mls	r6, r9, r0, ip
  40924e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  409252:	fb00 f308 	mul.w	r3, r0, r8
  409256:	42b3      	cmp	r3, r6
  409258:	d909      	bls.n	40926e <__udivmoddi4+0x6a>
  40925a:	19f6      	adds	r6, r6, r7
  40925c:	f100 32ff 	add.w	r2, r0, #4294967295
  409260:	f080 8122 	bcs.w	4094a8 <__udivmoddi4+0x2a4>
  409264:	42b3      	cmp	r3, r6
  409266:	f240 811f 	bls.w	4094a8 <__udivmoddi4+0x2a4>
  40926a:	3802      	subs	r0, #2
  40926c:	443e      	add	r6, r7
  40926e:	1af6      	subs	r6, r6, r3
  409270:	b2a2      	uxth	r2, r4
  409272:	fbb6 f3f9 	udiv	r3, r6, r9
  409276:	fb09 6613 	mls	r6, r9, r3, r6
  40927a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40927e:	fb03 f808 	mul.w	r8, r3, r8
  409282:	45a0      	cmp	r8, r4
  409284:	d909      	bls.n	40929a <__udivmoddi4+0x96>
  409286:	19e4      	adds	r4, r4, r7
  409288:	f103 32ff 	add.w	r2, r3, #4294967295
  40928c:	f080 810a 	bcs.w	4094a4 <__udivmoddi4+0x2a0>
  409290:	45a0      	cmp	r8, r4
  409292:	f240 8107 	bls.w	4094a4 <__udivmoddi4+0x2a0>
  409296:	3b02      	subs	r3, #2
  409298:	443c      	add	r4, r7
  40929a:	ebc8 0404 	rsb	r4, r8, r4
  40929e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4092a2:	2100      	movs	r1, #0
  4092a4:	2d00      	cmp	r5, #0
  4092a6:	d062      	beq.n	40936e <__udivmoddi4+0x16a>
  4092a8:	fa24 f40e 	lsr.w	r4, r4, lr
  4092ac:	2300      	movs	r3, #0
  4092ae:	602c      	str	r4, [r5, #0]
  4092b0:	606b      	str	r3, [r5, #4]
  4092b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4092b6:	428b      	cmp	r3, r1
  4092b8:	d907      	bls.n	4092ca <__udivmoddi4+0xc6>
  4092ba:	2d00      	cmp	r5, #0
  4092bc:	d055      	beq.n	40936a <__udivmoddi4+0x166>
  4092be:	2100      	movs	r1, #0
  4092c0:	e885 0041 	stmia.w	r5, {r0, r6}
  4092c4:	4608      	mov	r0, r1
  4092c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4092ca:	fab3 f183 	clz	r1, r3
  4092ce:	2900      	cmp	r1, #0
  4092d0:	f040 8090 	bne.w	4093f4 <__udivmoddi4+0x1f0>
  4092d4:	42b3      	cmp	r3, r6
  4092d6:	d302      	bcc.n	4092de <__udivmoddi4+0xda>
  4092d8:	4282      	cmp	r2, r0
  4092da:	f200 80f8 	bhi.w	4094ce <__udivmoddi4+0x2ca>
  4092de:	1a84      	subs	r4, r0, r2
  4092e0:	eb66 0603 	sbc.w	r6, r6, r3
  4092e4:	2001      	movs	r0, #1
  4092e6:	46b4      	mov	ip, r6
  4092e8:	2d00      	cmp	r5, #0
  4092ea:	d040      	beq.n	40936e <__udivmoddi4+0x16a>
  4092ec:	e885 1010 	stmia.w	r5, {r4, ip}
  4092f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4092f4:	b912      	cbnz	r2, 4092fc <__udivmoddi4+0xf8>
  4092f6:	2701      	movs	r7, #1
  4092f8:	fbb7 f7f2 	udiv	r7, r7, r2
  4092fc:	fab7 fe87 	clz	lr, r7
  409300:	f1be 0f00 	cmp.w	lr, #0
  409304:	d135      	bne.n	409372 <__udivmoddi4+0x16e>
  409306:	1bf3      	subs	r3, r6, r7
  409308:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40930c:	fa1f fc87 	uxth.w	ip, r7
  409310:	2101      	movs	r1, #1
  409312:	fbb3 f0f8 	udiv	r0, r3, r8
  409316:	0c22      	lsrs	r2, r4, #16
  409318:	fb08 3610 	mls	r6, r8, r0, r3
  40931c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  409320:	fb0c f300 	mul.w	r3, ip, r0
  409324:	42b3      	cmp	r3, r6
  409326:	d907      	bls.n	409338 <__udivmoddi4+0x134>
  409328:	19f6      	adds	r6, r6, r7
  40932a:	f100 32ff 	add.w	r2, r0, #4294967295
  40932e:	d202      	bcs.n	409336 <__udivmoddi4+0x132>
  409330:	42b3      	cmp	r3, r6
  409332:	f200 80ce 	bhi.w	4094d2 <__udivmoddi4+0x2ce>
  409336:	4610      	mov	r0, r2
  409338:	1af6      	subs	r6, r6, r3
  40933a:	b2a2      	uxth	r2, r4
  40933c:	fbb6 f3f8 	udiv	r3, r6, r8
  409340:	fb08 6613 	mls	r6, r8, r3, r6
  409344:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  409348:	fb0c fc03 	mul.w	ip, ip, r3
  40934c:	45a4      	cmp	ip, r4
  40934e:	d907      	bls.n	409360 <__udivmoddi4+0x15c>
  409350:	19e4      	adds	r4, r4, r7
  409352:	f103 32ff 	add.w	r2, r3, #4294967295
  409356:	d202      	bcs.n	40935e <__udivmoddi4+0x15a>
  409358:	45a4      	cmp	ip, r4
  40935a:	f200 80b5 	bhi.w	4094c8 <__udivmoddi4+0x2c4>
  40935e:	4613      	mov	r3, r2
  409360:	ebcc 0404 	rsb	r4, ip, r4
  409364:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  409368:	e79c      	b.n	4092a4 <__udivmoddi4+0xa0>
  40936a:	4629      	mov	r1, r5
  40936c:	4628      	mov	r0, r5
  40936e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409372:	f1ce 0120 	rsb	r1, lr, #32
  409376:	fa06 f30e 	lsl.w	r3, r6, lr
  40937a:	fa07 f70e 	lsl.w	r7, r7, lr
  40937e:	fa20 f901 	lsr.w	r9, r0, r1
  409382:	ea4f 4817 	mov.w	r8, r7, lsr #16
  409386:	40ce      	lsrs	r6, r1
  409388:	ea49 0903 	orr.w	r9, r9, r3
  40938c:	fbb6 faf8 	udiv	sl, r6, r8
  409390:	ea4f 4419 	mov.w	r4, r9, lsr #16
  409394:	fb08 661a 	mls	r6, r8, sl, r6
  409398:	fa1f fc87 	uxth.w	ip, r7
  40939c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  4093a0:	fb0a f20c 	mul.w	r2, sl, ip
  4093a4:	429a      	cmp	r2, r3
  4093a6:	fa00 f40e 	lsl.w	r4, r0, lr
  4093aa:	d90a      	bls.n	4093c2 <__udivmoddi4+0x1be>
  4093ac:	19db      	adds	r3, r3, r7
  4093ae:	f10a 31ff 	add.w	r1, sl, #4294967295
  4093b2:	f080 8087 	bcs.w	4094c4 <__udivmoddi4+0x2c0>
  4093b6:	429a      	cmp	r2, r3
  4093b8:	f240 8084 	bls.w	4094c4 <__udivmoddi4+0x2c0>
  4093bc:	f1aa 0a02 	sub.w	sl, sl, #2
  4093c0:	443b      	add	r3, r7
  4093c2:	1a9b      	subs	r3, r3, r2
  4093c4:	fa1f f989 	uxth.w	r9, r9
  4093c8:	fbb3 f1f8 	udiv	r1, r3, r8
  4093cc:	fb08 3311 	mls	r3, r8, r1, r3
  4093d0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  4093d4:	fb01 f60c 	mul.w	r6, r1, ip
  4093d8:	429e      	cmp	r6, r3
  4093da:	d907      	bls.n	4093ec <__udivmoddi4+0x1e8>
  4093dc:	19db      	adds	r3, r3, r7
  4093de:	f101 32ff 	add.w	r2, r1, #4294967295
  4093e2:	d26b      	bcs.n	4094bc <__udivmoddi4+0x2b8>
  4093e4:	429e      	cmp	r6, r3
  4093e6:	d969      	bls.n	4094bc <__udivmoddi4+0x2b8>
  4093e8:	3902      	subs	r1, #2
  4093ea:	443b      	add	r3, r7
  4093ec:	1b9b      	subs	r3, r3, r6
  4093ee:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  4093f2:	e78e      	b.n	409312 <__udivmoddi4+0x10e>
  4093f4:	f1c1 0e20 	rsb	lr, r1, #32
  4093f8:	fa22 f40e 	lsr.w	r4, r2, lr
  4093fc:	408b      	lsls	r3, r1
  4093fe:	4323      	orrs	r3, r4
  409400:	fa20 f70e 	lsr.w	r7, r0, lr
  409404:	fa06 f401 	lsl.w	r4, r6, r1
  409408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40940c:	fa26 f60e 	lsr.w	r6, r6, lr
  409410:	433c      	orrs	r4, r7
  409412:	fbb6 f9fc 	udiv	r9, r6, ip
  409416:	0c27      	lsrs	r7, r4, #16
  409418:	fb0c 6619 	mls	r6, ip, r9, r6
  40941c:	fa1f f883 	uxth.w	r8, r3
  409420:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  409424:	fb09 f708 	mul.w	r7, r9, r8
  409428:	42b7      	cmp	r7, r6
  40942a:	fa02 f201 	lsl.w	r2, r2, r1
  40942e:	fa00 fa01 	lsl.w	sl, r0, r1
  409432:	d908      	bls.n	409446 <__udivmoddi4+0x242>
  409434:	18f6      	adds	r6, r6, r3
  409436:	f109 30ff 	add.w	r0, r9, #4294967295
  40943a:	d241      	bcs.n	4094c0 <__udivmoddi4+0x2bc>
  40943c:	42b7      	cmp	r7, r6
  40943e:	d93f      	bls.n	4094c0 <__udivmoddi4+0x2bc>
  409440:	f1a9 0902 	sub.w	r9, r9, #2
  409444:	441e      	add	r6, r3
  409446:	1bf6      	subs	r6, r6, r7
  409448:	b2a0      	uxth	r0, r4
  40944a:	fbb6 f4fc 	udiv	r4, r6, ip
  40944e:	fb0c 6614 	mls	r6, ip, r4, r6
  409452:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  409456:	fb04 f808 	mul.w	r8, r4, r8
  40945a:	45b8      	cmp	r8, r7
  40945c:	d907      	bls.n	40946e <__udivmoddi4+0x26a>
  40945e:	18ff      	adds	r7, r7, r3
  409460:	f104 30ff 	add.w	r0, r4, #4294967295
  409464:	d228      	bcs.n	4094b8 <__udivmoddi4+0x2b4>
  409466:	45b8      	cmp	r8, r7
  409468:	d926      	bls.n	4094b8 <__udivmoddi4+0x2b4>
  40946a:	3c02      	subs	r4, #2
  40946c:	441f      	add	r7, r3
  40946e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  409472:	ebc8 0707 	rsb	r7, r8, r7
  409476:	fba0 8902 	umull	r8, r9, r0, r2
  40947a:	454f      	cmp	r7, r9
  40947c:	4644      	mov	r4, r8
  40947e:	464e      	mov	r6, r9
  409480:	d314      	bcc.n	4094ac <__udivmoddi4+0x2a8>
  409482:	d029      	beq.n	4094d8 <__udivmoddi4+0x2d4>
  409484:	b365      	cbz	r5, 4094e0 <__udivmoddi4+0x2dc>
  409486:	ebba 0304 	subs.w	r3, sl, r4
  40948a:	eb67 0706 	sbc.w	r7, r7, r6
  40948e:	fa07 fe0e 	lsl.w	lr, r7, lr
  409492:	40cb      	lsrs	r3, r1
  409494:	40cf      	lsrs	r7, r1
  409496:	ea4e 0303 	orr.w	r3, lr, r3
  40949a:	e885 0088 	stmia.w	r5, {r3, r7}
  40949e:	2100      	movs	r1, #0
  4094a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4094a4:	4613      	mov	r3, r2
  4094a6:	e6f8      	b.n	40929a <__udivmoddi4+0x96>
  4094a8:	4610      	mov	r0, r2
  4094aa:	e6e0      	b.n	40926e <__udivmoddi4+0x6a>
  4094ac:	ebb8 0402 	subs.w	r4, r8, r2
  4094b0:	eb69 0603 	sbc.w	r6, r9, r3
  4094b4:	3801      	subs	r0, #1
  4094b6:	e7e5      	b.n	409484 <__udivmoddi4+0x280>
  4094b8:	4604      	mov	r4, r0
  4094ba:	e7d8      	b.n	40946e <__udivmoddi4+0x26a>
  4094bc:	4611      	mov	r1, r2
  4094be:	e795      	b.n	4093ec <__udivmoddi4+0x1e8>
  4094c0:	4681      	mov	r9, r0
  4094c2:	e7c0      	b.n	409446 <__udivmoddi4+0x242>
  4094c4:	468a      	mov	sl, r1
  4094c6:	e77c      	b.n	4093c2 <__udivmoddi4+0x1be>
  4094c8:	3b02      	subs	r3, #2
  4094ca:	443c      	add	r4, r7
  4094cc:	e748      	b.n	409360 <__udivmoddi4+0x15c>
  4094ce:	4608      	mov	r0, r1
  4094d0:	e70a      	b.n	4092e8 <__udivmoddi4+0xe4>
  4094d2:	3802      	subs	r0, #2
  4094d4:	443e      	add	r6, r7
  4094d6:	e72f      	b.n	409338 <__udivmoddi4+0x134>
  4094d8:	45c2      	cmp	sl, r8
  4094da:	d3e7      	bcc.n	4094ac <__udivmoddi4+0x2a8>
  4094dc:	463e      	mov	r6, r7
  4094de:	e7d1      	b.n	409484 <__udivmoddi4+0x280>
  4094e0:	4629      	mov	r1, r5
  4094e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4094e6:	bf00      	nop

004094e8 <__aeabi_idiv0>:
  4094e8:	4770      	bx	lr
  4094ea:	bf00      	nop
  4094ec:	454c4449 	.word	0x454c4449
  4094f0:	00000000 	.word	0x00000000
  4094f4:	09632509 	.word	0x09632509
  4094f8:	25097525 	.word	0x25097525
  4094fc:	75250975 	.word	0x75250975
  409500:	00000a0d 	.word	0x00000a0d
  409504:	51726d54 	.word	0x51726d54
  409508:	00000000 	.word	0x00000000
  40950c:	20726d54 	.word	0x20726d54
  409510:	00637653 	.word	0x00637653
  409514:	202d2d2d 	.word	0x202d2d2d
  409518:	6b736174 	.word	0x6b736174
  40951c:	20232320 	.word	0x20232320
  409520:	00007525 	.word	0x00007525
  409524:	63617473 	.word	0x63617473
  409528:	766f206b 	.word	0x766f206b
  40952c:	6c667265 	.word	0x6c667265
  409530:	2520776f 	.word	0x2520776f
  409534:	73252078 	.word	0x73252078
  409538:	00000a0d 	.word	0x00000a0d
  40953c:	46202d2d 	.word	0x46202d2d
  409540:	72656572 	.word	0x72656572
  409544:	20736f74 	.word	0x20736f74
  409548:	6d617845 	.word	0x6d617845
  40954c:	20656c70 	.word	0x20656c70
  409550:	0d0a2d2d 	.word	0x0d0a2d2d
  409554:	00000000 	.word	0x00000000
  409558:	454d4153 	.word	0x454d4153
  40955c:	582d3037 	.word	0x582d3037
  409560:	00444c50 	.word	0x00444c50
  409564:	25202d2d 	.word	0x25202d2d
  409568:	000d0a73 	.word	0x000d0a73
  40956c:	333a3631 	.word	0x333a3631
  409570:	38323a38 	.word	0x38323a38
  409574:	00000000 	.word	0x00000000
  409578:	2079614d 	.word	0x2079614d
  40957c:	32203232 	.word	0x32203232
  409580:	00373130 	.word	0x00373130
  409584:	43202d2d 	.word	0x43202d2d
  409588:	69706d6f 	.word	0x69706d6f
  40958c:	3a64656c 	.word	0x3a64656c
  409590:	20732520 	.word	0x20732520
  409594:	2d207325 	.word	0x2d207325
  409598:	000d0a2d 	.word	0x000d0a2d
  40959c:	696e6f4d 	.word	0x696e6f4d
  4095a0:	00726f74 	.word	0x00726f74
  4095a4:	6c696146 	.word	0x6c696146
  4095a8:	74206465 	.word	0x74206465
  4095ac:	7263206f 	.word	0x7263206f
  4095b0:	65746165 	.word	0x65746165
  4095b4:	6e6f4d20 	.word	0x6e6f4d20
  4095b8:	726f7469 	.word	0x726f7469
  4095bc:	73617420 	.word	0x73617420
  4095c0:	000a0d6b 	.word	0x000a0d6b
  4095c4:	0064654c 	.word	0x0064654c
  4095c8:	6c696146 	.word	0x6c696146
  4095cc:	74206465 	.word	0x74206465
  4095d0:	7263206f 	.word	0x7263206f
  4095d4:	65746165 	.word	0x65746165
  4095d8:	73657420 	.word	0x73657420
  4095dc:	656c2074 	.word	0x656c2074
  4095e0:	61742064 	.word	0x61742064
  4095e4:	0a0d6b73 	.word	0x0a0d6b73
  4095e8:	00000000 	.word	0x00000000
  4095ec:	6c696146 	.word	0x6c696146
  4095f0:	74206465 	.word	0x74206465
  4095f4:	7263206f 	.word	0x7263206f
  4095f8:	65746165 	.word	0x65746165
  4095fc:	73657420 	.word	0x73657420
  409600:	656c2074 	.word	0x656c2074
  409604:	74203164 	.word	0x74203164
  409608:	0d6b7361 	.word	0x0d6b7361
  40960c:	0000000a 	.word	0x0000000a
  409610:	00000043 	.word	0x00000043

00409614 <_global_impure_ptr>:
  409614:	20400010                                ..@ 

00409618 <zeroes.7035>:
  409618:	30303030 30303030 30303030 30303030     0000000000000000
  409628:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  409638:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  409648:	00000000 33323130 37363534 62613938     ....0123456789ab
  409658:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  409668:	00000030                                0...

0040966c <blanks.7034>:
  40966c:	20202020 20202020 20202020 20202020                     

0040967c <zeroes.6993>:
  40967c:	30303030 30303030 30303030 30303030     0000000000000000

0040968c <blanks.6992>:
  40968c:	20202020 20202020 20202020 20202020                     
  40969c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  4096ac:	49534f50 00000058 0000002e              POSIX.......

004096b8 <__mprec_tens>:
  4096b8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4096c8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4096d8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4096e8:	00000000 412e8480 00000000 416312d0     .......A......cA
  4096f8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409708:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409718:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409728:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  409738:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  409748:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  409758:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  409768:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  409778:	79d99db4 44ea7843                       ...yCx.D

00409780 <__mprec_bigtens>:
  409780:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  409790:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4097a0:	7f73bf3c 75154fdd                       <.s..O.u

004097a8 <p05.5373>:
  4097a8:	00000005 00000019 0000007d              ........}...

004097b4 <_init>:
  4097b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4097b6:	bf00      	nop
  4097b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4097ba:	bc08      	pop	{r3}
  4097bc:	469e      	mov	lr, r3
  4097be:	4770      	bx	lr

004097c0 <__init_array_start>:
  4097c0:	00405e61 	.word	0x00405e61

004097c4 <__frame_dummy_init_array_entry>:
  4097c4:	00400165                                e.@.

004097c8 <_fini>:
  4097c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4097ca:	bf00      	nop
  4097cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4097ce:	bc08      	pop	{r3}
  4097d0:	469e      	mov	lr, r3
  4097d2:	4770      	bx	lr

004097d4 <__fini_array_start>:
  4097d4:	00400141 	.word	0x00400141
