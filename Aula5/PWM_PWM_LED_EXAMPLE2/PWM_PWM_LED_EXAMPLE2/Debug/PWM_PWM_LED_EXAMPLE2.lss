
PWM_PWM_LED_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e20  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000084c  20400000  00402e20  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011c  2040084c  0040366c  0002084c  2**2
                  ALLOC
  3 .stack        00002000  20400968  00403788  0002084c  2**0
                  ALLOC
  4 .heap         00000200  20402968  00405788  0002084c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002087a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000da92  00000000  00000000  000208d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ee7  00000000  00000000  0002e365  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000050e9  00000000  00000000  0003024c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000af0  00000000  00000000  00035335  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ad8  00000000  00000000  00035e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001e2ae  00000000  00000000  000368fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ab3d  00000000  00000000  00054bab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008b2aa  00000000  00000000  0005f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002020  00000000  00000000  000ea994  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20402968 	.word	0x20402968
  400004:	00400a45 	.word	0x00400a45
  400008:	00400a41 	.word	0x00400a41
  40000c:	00400a41 	.word	0x00400a41
  400010:	00400a41 	.word	0x00400a41
  400014:	00400a41 	.word	0x00400a41
  400018:	00400a41 	.word	0x00400a41
	...
  40002c:	00400a41 	.word	0x00400a41
  400030:	00400a41 	.word	0x00400a41
  400034:	00000000 	.word	0x00000000
  400038:	00400a41 	.word	0x00400a41
  40003c:	00400a41 	.word	0x00400a41
  400040:	00400a41 	.word	0x00400a41
  400044:	00400a41 	.word	0x00400a41
  400048:	00400a41 	.word	0x00400a41
  40004c:	00400a41 	.word	0x00400a41
  400050:	00400a41 	.word	0x00400a41
  400054:	00400a41 	.word	0x00400a41
  400058:	00400a41 	.word	0x00400a41
  40005c:	00400a41 	.word	0x00400a41
  400060:	00400a41 	.word	0x00400a41
  400064:	00000000 	.word	0x00000000
  400068:	004004b9 	.word	0x004004b9
  40006c:	004004cd 	.word	0x004004cd
  400070:	004004e1 	.word	0x004004e1
  400074:	00400a41 	.word	0x00400a41
  400078:	00400a41 	.word	0x00400a41
  40007c:	00400a41 	.word	0x00400a41
  400080:	004004f5 	.word	0x004004f5
  400084:	00400509 	.word	0x00400509
  400088:	00400a41 	.word	0x00400a41
  40008c:	00400a41 	.word	0x00400a41
  400090:	00400a41 	.word	0x00400a41
  400094:	00400a41 	.word	0x00400a41
  400098:	00400a41 	.word	0x00400a41
  40009c:	00400a41 	.word	0x00400a41
  4000a0:	00400a41 	.word	0x00400a41
  4000a4:	00400a41 	.word	0x00400a41
  4000a8:	00400a41 	.word	0x00400a41
  4000ac:	00400a41 	.word	0x00400a41
  4000b0:	00400a41 	.word	0x00400a41
  4000b4:	00400a41 	.word	0x00400a41
  4000b8:	00400a41 	.word	0x00400a41
  4000bc:	00400ea1 	.word	0x00400ea1
  4000c0:	00400a41 	.word	0x00400a41
  4000c4:	00400a41 	.word	0x00400a41
  4000c8:	00400a41 	.word	0x00400a41
  4000cc:	00400a41 	.word	0x00400a41
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00400a41 	.word	0x00400a41
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00400a41 	.word	0x00400a41
  4000e0:	00400a41 	.word	0x00400a41
  4000e4:	00400a41 	.word	0x00400a41
  4000e8:	00400a41 	.word	0x00400a41
  4000ec:	00400a41 	.word	0x00400a41
  4000f0:	00400a41 	.word	0x00400a41
  4000f4:	00400a41 	.word	0x00400a41
  4000f8:	00400a41 	.word	0x00400a41
  4000fc:	00400a41 	.word	0x00400a41
  400100:	00400a41 	.word	0x00400a41
  400104:	00400a41 	.word	0x00400a41
  400108:	00400a41 	.word	0x00400a41
  40010c:	00400a41 	.word	0x00400a41
  400110:	00400a41 	.word	0x00400a41
	...
  400120:	00400a41 	.word	0x00400a41
  400124:	00400a41 	.word	0x00400a41
  400128:	00400a41 	.word	0x00400a41
  40012c:	00400a41 	.word	0x00400a41
  400130:	00400a41 	.word	0x00400a41
  400134:	00000000 	.word	0x00000000
  400138:	00400a41 	.word	0x00400a41
  40013c:	00400a41 	.word	0x00400a41

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040084c 	.word	0x2040084c
  40015c:	00000000 	.word	0x00000000
  400160:	00402e20 	.word	0x00402e20

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400850 	.word	0x20400850
  400190:	00402e20 	.word	0x00402e20
  400194:	00402e20 	.word	0x00402e20
  400198:	00000000 	.word	0x00000000

0040019c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40019c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40019e:	4810      	ldr	r0, [pc, #64]	; (4001e0 <sysclk_init+0x44>)
  4001a0:	4b10      	ldr	r3, [pc, #64]	; (4001e4 <sysclk_init+0x48>)
  4001a2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001a4:	213e      	movs	r1, #62	; 0x3e
  4001a6:	2000      	movs	r0, #0
  4001a8:	4b0f      	ldr	r3, [pc, #60]	; (4001e8 <sysclk_init+0x4c>)
  4001aa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001ac:	4c0f      	ldr	r4, [pc, #60]	; (4001ec <sysclk_init+0x50>)
  4001ae:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001b0:	2800      	cmp	r0, #0
  4001b2:	d0fc      	beq.n	4001ae <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001b4:	4b0e      	ldr	r3, [pc, #56]	; (4001f0 <sysclk_init+0x54>)
  4001b6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001b8:	4a0e      	ldr	r2, [pc, #56]	; (4001f4 <sysclk_init+0x58>)
  4001ba:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x5c>)
  4001bc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001be:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x60>)
  4001c0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001c2:	2800      	cmp	r0, #0
  4001c4:	d0fc      	beq.n	4001c0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001c6:	2002      	movs	r0, #2
  4001c8:	4b0d      	ldr	r3, [pc, #52]	; (400200 <sysclk_init+0x64>)
  4001ca:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001cc:	2000      	movs	r0, #0
  4001ce:	4b0d      	ldr	r3, [pc, #52]	; (400204 <sysclk_init+0x68>)
  4001d0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001d2:	4b0d      	ldr	r3, [pc, #52]	; (400208 <sysclk_init+0x6c>)
  4001d4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001d6:	4802      	ldr	r0, [pc, #8]	; (4001e0 <sysclk_init+0x44>)
  4001d8:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
  4001dc:	bd10      	pop	{r4, pc}
  4001de:	bf00      	nop
  4001e0:	11e1a300 	.word	0x11e1a300
  4001e4:	00400c31 	.word	0x00400c31
  4001e8:	004005c1 	.word	0x004005c1
  4001ec:	00400615 	.word	0x00400615
  4001f0:	00400625 	.word	0x00400625
  4001f4:	20183f01 	.word	0x20183f01
  4001f8:	400e0600 	.word	0x400e0600
  4001fc:	00400635 	.word	0x00400635
  400200:	0040051d 	.word	0x0040051d
  400204:	00400559 	.word	0x00400559
  400208:	00400b21 	.word	0x00400b21

0040020c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40020c:	b990      	cbnz	r0, 400234 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40020e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400212:	460c      	mov	r4, r1
  400214:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400216:	2a00      	cmp	r2, #0
  400218:	dd0f      	ble.n	40023a <_read+0x2e>
  40021a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40021c:	4e08      	ldr	r6, [pc, #32]	; (400240 <_read+0x34>)
  40021e:	4d09      	ldr	r5, [pc, #36]	; (400244 <_read+0x38>)
  400220:	6830      	ldr	r0, [r6, #0]
  400222:	4621      	mov	r1, r4
  400224:	682b      	ldr	r3, [r5, #0]
  400226:	4798      	blx	r3
		ptr++;
  400228:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40022a:	42a7      	cmp	r7, r4
  40022c:	d1f8      	bne.n	400220 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40022e:	4640      	mov	r0, r8
  400230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400234:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  400238:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40023a:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40023c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400240:	20400924 	.word	0x20400924
  400244:	2040091c 	.word	0x2040091c

00400248 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400248:	3801      	subs	r0, #1
  40024a:	2802      	cmp	r0, #2
  40024c:	d815      	bhi.n	40027a <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40024e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400252:	460e      	mov	r6, r1
  400254:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400256:	b19a      	cbz	r2, 400280 <_write+0x38>
  400258:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40025a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400294 <_write+0x4c>
  40025e:	4f0c      	ldr	r7, [pc, #48]	; (400290 <_write+0x48>)
  400260:	f8d8 0000 	ldr.w	r0, [r8]
  400264:	f815 1b01 	ldrb.w	r1, [r5], #1
  400268:	683b      	ldr	r3, [r7, #0]
  40026a:	4798      	blx	r3
  40026c:	2800      	cmp	r0, #0
  40026e:	db0a      	blt.n	400286 <_write+0x3e>
  400270:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400272:	3c01      	subs	r4, #1
  400274:	d1f4      	bne.n	400260 <_write+0x18>
  400276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40027a:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  40027e:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400280:	2000      	movs	r0, #0
  400282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400286:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40028a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40028e:	bf00      	nop
  400290:	20400920 	.word	0x20400920
  400294:	20400924 	.word	0x20400924

00400298 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40029a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40029e:	4b68      	ldr	r3, [pc, #416]	; (400440 <board_init+0x1a8>)
  4002a0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002a2:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4002a6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002aa:	4b66      	ldr	r3, [pc, #408]	; (400444 <board_init+0x1ac>)
  4002ac:	2200      	movs	r2, #0
  4002ae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002b2:	695a      	ldr	r2, [r3, #20]
  4002b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002b8:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002ba:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4002be:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002c2:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4002c6:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002ca:	f006 0707 	and.w	r7, r6, #7
  4002ce:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4002d0:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4002d4:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  4002d8:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002dc:	f3bf 8f4f 	dsb	sy

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4002e0:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4002e2:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4002e4:	fa05 f107 	lsl.w	r1, r5, r7
  4002e8:	fa03 f200 	lsl.w	r2, r3, r0
  4002ec:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  4002ee:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  4002f2:	3b01      	subs	r3, #1
  4002f4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002f8:	d1f6      	bne.n	4002e8 <board_init+0x50>
        } while(sets--);
  4002fa:	3d01      	subs	r5, #1
  4002fc:	f1b5 3fff 	cmp.w	r5, #4294967295
  400300:	d1ef      	bne.n	4002e2 <board_init+0x4a>
  400302:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400306:	4b4f      	ldr	r3, [pc, #316]	; (400444 <board_init+0x1ac>)
  400308:	695a      	ldr	r2, [r3, #20]
  40030a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40030e:	615a      	str	r2, [r3, #20]
  400310:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400314:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400318:	4a4b      	ldr	r2, [pc, #300]	; (400448 <board_init+0x1b0>)
  40031a:	494c      	ldr	r1, [pc, #304]	; (40044c <board_init+0x1b4>)
  40031c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40031e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400322:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400324:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400328:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40032c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400330:	f022 0201 	bic.w	r2, r2, #1
  400334:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400338:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40033c:	f022 0201 	bic.w	r2, r2, #1
  400340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400344:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400348:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40034c:	200a      	movs	r0, #10
  40034e:	4c40      	ldr	r4, [pc, #256]	; (400450 <board_init+0x1b8>)
  400350:	47a0      	blx	r4
  400352:	200b      	movs	r0, #11
  400354:	47a0      	blx	r4
  400356:	200c      	movs	r0, #12
  400358:	47a0      	blx	r4
  40035a:	2010      	movs	r0, #16
  40035c:	47a0      	blx	r4
  40035e:	2011      	movs	r0, #17
  400360:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400362:	4b3c      	ldr	r3, [pc, #240]	; (400454 <board_init+0x1bc>)
  400364:	f44f 7280 	mov.w	r2, #256	; 0x100
  400368:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40036a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40036e:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400370:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400374:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400378:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40037a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40037e:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400380:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400384:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  400386:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40038c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40038e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400392:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400394:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400396:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40039a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40039c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003a0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003ac:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003b2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003b4:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003bc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003c0:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003c2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003c4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003c8:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ca:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4003cc:	4922      	ldr	r1, [pc, #136]	; (400458 <board_init+0x1c0>)
  4003ce:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
  4003d2:	f042 0210 	orr.w	r2, r2, #16
  4003d6:	f8c1 2114 	str.w	r2, [r1, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003da:	4a20      	ldr	r2, [pc, #128]	; (40045c <board_init+0x1c4>)
  4003dc:	2110      	movs	r1, #16
  4003de:	6611      	str	r1, [r2, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003e0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003e4:	6551      	str	r1, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003e6:	6251      	str	r1, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003e8:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4003ec:	6f10      	ldr	r0, [r2, #112]	; 0x70
  4003ee:	4308      	orrs	r0, r1
  4003f0:	6710      	str	r0, [r2, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  4003f2:	6f50      	ldr	r0, [r2, #116]	; 0x74
  4003f4:	4308      	orrs	r0, r1
  4003f6:	6750      	str	r0, [r2, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003f8:	6051      	str	r1, [r2, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4003fe:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400400:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400404:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400406:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40040c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40040e:	4311      	orrs	r1, r2
  400410:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400412:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400414:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  400418:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40041a:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40041c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400420:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400426:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400428:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40042a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40042e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400430:	4311      	orrs	r1, r2
  400432:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400434:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400436:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
  40043a:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40043c:	605a      	str	r2, [r3, #4]
  40043e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400440:	400e1850 	.word	0x400e1850
  400444:	e000ed00 	.word	0xe000ed00
  400448:	400e0c00 	.word	0x400e0c00
  40044c:	5a00080c 	.word	0x5a00080c
  400450:	00400645 	.word	0x00400645
  400454:	400e1200 	.word	0x400e1200
  400458:	40088000 	.word	0x40088000
  40045c:	400e1000 	.word	0x400e1000

00400460 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400460:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400462:	4770      	bx	lr

00400464 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400464:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400466:	4770      	bx	lr

00400468 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40046c:	4604      	mov	r4, r0
  40046e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400470:	4b0e      	ldr	r3, [pc, #56]	; (4004ac <pio_handler_process+0x44>)
  400472:	4798      	blx	r3
  400474:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400476:	4620      	mov	r0, r4
  400478:	4b0d      	ldr	r3, [pc, #52]	; (4004b0 <pio_handler_process+0x48>)
  40047a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40047c:	4005      	ands	r5, r0
  40047e:	d013      	beq.n	4004a8 <pio_handler_process+0x40>
  400480:	4c0c      	ldr	r4, [pc, #48]	; (4004b4 <pio_handler_process+0x4c>)
  400482:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400486:	6823      	ldr	r3, [r4, #0]
  400488:	4543      	cmp	r3, r8
  40048a:	d108      	bne.n	40049e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40048c:	6861      	ldr	r1, [r4, #4]
  40048e:	4229      	tst	r1, r5
  400490:	d005      	beq.n	40049e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400492:	68e3      	ldr	r3, [r4, #12]
  400494:	4640      	mov	r0, r8
  400496:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400498:	6863      	ldr	r3, [r4, #4]
  40049a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40049e:	42b4      	cmp	r4, r6
  4004a0:	d002      	beq.n	4004a8 <pio_handler_process+0x40>
  4004a2:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4004a4:	2d00      	cmp	r5, #0
  4004a6:	d1ee      	bne.n	400486 <pio_handler_process+0x1e>
  4004a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004ac:	00400461 	.word	0x00400461
  4004b0:	00400465 	.word	0x00400465
  4004b4:	20400868 	.word	0x20400868

004004b8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4004b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4004ba:	210a      	movs	r1, #10
  4004bc:	4801      	ldr	r0, [pc, #4]	; (4004c4 <PIOA_Handler+0xc>)
  4004be:	4b02      	ldr	r3, [pc, #8]	; (4004c8 <PIOA_Handler+0x10>)
  4004c0:	4798      	blx	r3
  4004c2:	bd08      	pop	{r3, pc}
  4004c4:	400e0e00 	.word	0x400e0e00
  4004c8:	00400469 	.word	0x00400469

004004cc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4004cc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4004ce:	210b      	movs	r1, #11
  4004d0:	4801      	ldr	r0, [pc, #4]	; (4004d8 <PIOB_Handler+0xc>)
  4004d2:	4b02      	ldr	r3, [pc, #8]	; (4004dc <PIOB_Handler+0x10>)
  4004d4:	4798      	blx	r3
  4004d6:	bd08      	pop	{r3, pc}
  4004d8:	400e1000 	.word	0x400e1000
  4004dc:	00400469 	.word	0x00400469

004004e0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4004e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4004e2:	210c      	movs	r1, #12
  4004e4:	4801      	ldr	r0, [pc, #4]	; (4004ec <PIOC_Handler+0xc>)
  4004e6:	4b02      	ldr	r3, [pc, #8]	; (4004f0 <PIOC_Handler+0x10>)
  4004e8:	4798      	blx	r3
  4004ea:	bd08      	pop	{r3, pc}
  4004ec:	400e1200 	.word	0x400e1200
  4004f0:	00400469 	.word	0x00400469

004004f4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4004f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4004f6:	2110      	movs	r1, #16
  4004f8:	4801      	ldr	r0, [pc, #4]	; (400500 <PIOD_Handler+0xc>)
  4004fa:	4b02      	ldr	r3, [pc, #8]	; (400504 <PIOD_Handler+0x10>)
  4004fc:	4798      	blx	r3
  4004fe:	bd08      	pop	{r3, pc}
  400500:	400e1400 	.word	0x400e1400
  400504:	00400469 	.word	0x00400469

00400508 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400508:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40050a:	2111      	movs	r1, #17
  40050c:	4801      	ldr	r0, [pc, #4]	; (400514 <PIOE_Handler+0xc>)
  40050e:	4b02      	ldr	r3, [pc, #8]	; (400518 <PIOE_Handler+0x10>)
  400510:	4798      	blx	r3
  400512:	bd08      	pop	{r3, pc}
  400514:	400e1600 	.word	0x400e1600
  400518:	00400469 	.word	0x00400469

0040051c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40051c:	2803      	cmp	r0, #3
  40051e:	d007      	beq.n	400530 <pmc_mck_set_division+0x14>
  400520:	2804      	cmp	r0, #4
  400522:	d008      	beq.n	400536 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400524:	2802      	cmp	r0, #2
  400526:	bf0c      	ite	eq
  400528:	f44f 7280 	moveq.w	r2, #256	; 0x100
  40052c:	2200      	movne	r2, #0
  40052e:	e004      	b.n	40053a <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400530:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  400534:	e001      	b.n	40053a <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400536:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40053a:	4906      	ldr	r1, [pc, #24]	; (400554 <pmc_mck_set_division+0x38>)
  40053c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40053e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400542:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  400544:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400546:	460a      	mov	r2, r1
  400548:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40054a:	f013 0f08 	tst.w	r3, #8
  40054e:	d0fb      	beq.n	400548 <pmc_mck_set_division+0x2c>
}
  400550:	4770      	bx	lr
  400552:	bf00      	nop
  400554:	400e0600 	.word	0x400e0600

00400558 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400558:	4a18      	ldr	r2, [pc, #96]	; (4005bc <pmc_switch_mck_to_pllack+0x64>)
  40055a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40055c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400560:	4318      	orrs	r0, r3
  400562:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400564:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400566:	f013 0f08 	tst.w	r3, #8
  40056a:	d003      	beq.n	400574 <pmc_switch_mck_to_pllack+0x1c>
  40056c:	e009      	b.n	400582 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40056e:	3b01      	subs	r3, #1
  400570:	d103      	bne.n	40057a <pmc_switch_mck_to_pllack+0x22>
  400572:	e01e      	b.n	4005b2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400578:	4910      	ldr	r1, [pc, #64]	; (4005bc <pmc_switch_mck_to_pllack+0x64>)
  40057a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40057c:	f012 0f08 	tst.w	r2, #8
  400580:	d0f5      	beq.n	40056e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400582:	4a0e      	ldr	r2, [pc, #56]	; (4005bc <pmc_switch_mck_to_pllack+0x64>)
  400584:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400586:	f023 0303 	bic.w	r3, r3, #3
  40058a:	f043 0302 	orr.w	r3, r3, #2
  40058e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400590:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400592:	f010 0008 	ands.w	r0, r0, #8
  400596:	d004      	beq.n	4005a2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400598:	2000      	movs	r0, #0
  40059a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40059c:	3b01      	subs	r3, #1
  40059e:	d103      	bne.n	4005a8 <pmc_switch_mck_to_pllack+0x50>
  4005a0:	e009      	b.n	4005b6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4005a6:	4905      	ldr	r1, [pc, #20]	; (4005bc <pmc_switch_mck_to_pllack+0x64>)
  4005a8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005aa:	f012 0f08 	tst.w	r2, #8
  4005ae:	d0f5      	beq.n	40059c <pmc_switch_mck_to_pllack+0x44>
  4005b0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4005b2:	2001      	movs	r0, #1
  4005b4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4005b6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4005b8:	4770      	bx	lr
  4005ba:	bf00      	nop
  4005bc:	400e0600 	.word	0x400e0600

004005c0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4005c0:	b138      	cbz	r0, 4005d2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4005c2:	490e      	ldr	r1, [pc, #56]	; (4005fc <pmc_switch_mainck_to_xtal+0x3c>)
  4005c4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4005c6:	4a0e      	ldr	r2, [pc, #56]	; (400600 <pmc_switch_mainck_to_xtal+0x40>)
  4005c8:	401a      	ands	r2, r3
  4005ca:	4b0e      	ldr	r3, [pc, #56]	; (400604 <pmc_switch_mainck_to_xtal+0x44>)
  4005cc:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4005ce:	620b      	str	r3, [r1, #32]
  4005d0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005d2:	480a      	ldr	r0, [pc, #40]	; (4005fc <pmc_switch_mainck_to_xtal+0x3c>)
  4005d4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4005d6:	0209      	lsls	r1, r1, #8
  4005d8:	b289      	uxth	r1, r1
  4005da:	4a0b      	ldr	r2, [pc, #44]	; (400608 <pmc_switch_mainck_to_xtal+0x48>)
  4005dc:	401a      	ands	r2, r3
  4005de:	4b0b      	ldr	r3, [pc, #44]	; (40060c <pmc_switch_mainck_to_xtal+0x4c>)
  4005e0:	4313      	orrs	r3, r2
  4005e2:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005e4:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4005e6:	4602      	mov	r2, r0
  4005e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005ea:	f013 0f01 	tst.w	r3, #1
  4005ee:	d0fb      	beq.n	4005e8 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4005f0:	4a02      	ldr	r2, [pc, #8]	; (4005fc <pmc_switch_mainck_to_xtal+0x3c>)
  4005f2:	6a11      	ldr	r1, [r2, #32]
  4005f4:	4b06      	ldr	r3, [pc, #24]	; (400610 <pmc_switch_mainck_to_xtal+0x50>)
  4005f6:	430b      	orrs	r3, r1
  4005f8:	6213      	str	r3, [r2, #32]
  4005fa:	4770      	bx	lr
  4005fc:	400e0600 	.word	0x400e0600
  400600:	fec8fffc 	.word	0xfec8fffc
  400604:	01370002 	.word	0x01370002
  400608:	ffc8fffc 	.word	0xffc8fffc
  40060c:	00370001 	.word	0x00370001
  400610:	01370000 	.word	0x01370000

00400614 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400614:	4b02      	ldr	r3, [pc, #8]	; (400620 <pmc_osc_is_ready_mainck+0xc>)
  400616:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400618:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40061c:	4770      	bx	lr
  40061e:	bf00      	nop
  400620:	400e0600 	.word	0x400e0600

00400624 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400624:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400628:	4b01      	ldr	r3, [pc, #4]	; (400630 <pmc_disable_pllack+0xc>)
  40062a:	629a      	str	r2, [r3, #40]	; 0x28
  40062c:	4770      	bx	lr
  40062e:	bf00      	nop
  400630:	400e0600 	.word	0x400e0600

00400634 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400634:	4b02      	ldr	r3, [pc, #8]	; (400640 <pmc_is_locked_pllack+0xc>)
  400636:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400638:	f000 0002 	and.w	r0, r0, #2
  40063c:	4770      	bx	lr
  40063e:	bf00      	nop
  400640:	400e0600 	.word	0x400e0600

00400644 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400644:	283f      	cmp	r0, #63	; 0x3f
  400646:	d81e      	bhi.n	400686 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400648:	281f      	cmp	r0, #31
  40064a:	d80c      	bhi.n	400666 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40064c:	4b11      	ldr	r3, [pc, #68]	; (400694 <pmc_enable_periph_clk+0x50>)
  40064e:	699a      	ldr	r2, [r3, #24]
  400650:	2301      	movs	r3, #1
  400652:	4083      	lsls	r3, r0
  400654:	4393      	bics	r3, r2
  400656:	d018      	beq.n	40068a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400658:	2301      	movs	r3, #1
  40065a:	fa03 f000 	lsl.w	r0, r3, r0
  40065e:	4b0d      	ldr	r3, [pc, #52]	; (400694 <pmc_enable_periph_clk+0x50>)
  400660:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400662:	2000      	movs	r0, #0
  400664:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400666:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400668:	4b0a      	ldr	r3, [pc, #40]	; (400694 <pmc_enable_periph_clk+0x50>)
  40066a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40066e:	2301      	movs	r3, #1
  400670:	4083      	lsls	r3, r0
  400672:	4393      	bics	r3, r2
  400674:	d00b      	beq.n	40068e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400676:	2301      	movs	r3, #1
  400678:	fa03 f000 	lsl.w	r0, r3, r0
  40067c:	4b05      	ldr	r3, [pc, #20]	; (400694 <pmc_enable_periph_clk+0x50>)
  40067e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400682:	2000      	movs	r0, #0
  400684:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400686:	2001      	movs	r0, #1
  400688:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40068a:	2000      	movs	r0, #0
  40068c:	4770      	bx	lr
  40068e:	2000      	movs	r0, #0
}
  400690:	4770      	bx	lr
  400692:	bf00      	nop
  400694:	400e0600 	.word	0x400e0600

00400698 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  400698:	b4f0      	push	{r4, r5, r6, r7}
  40069a:	b08c      	sub	sp, #48	; 0x30
  40069c:	4607      	mov	r7, r0
  40069e:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4006a0:	ac01      	add	r4, sp, #4
  4006a2:	4d11      	ldr	r5, [pc, #68]	; (4006e8 <pwm_clocks_generate+0x50>)
  4006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4006ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4006b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4006b4:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4006b6:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4006b8:	f852 3b04 	ldr.w	r3, [r2], #4
  4006bc:	fbb6 f3f3 	udiv	r3, r6, r3
  4006c0:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4006c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4006c8:	d905      	bls.n	4006d6 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  4006ca:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4006cc:	280b      	cmp	r0, #11
  4006ce:	d1f3      	bne.n	4006b8 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  4006d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4006d4:	e005      	b.n	4006e2 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4006d6:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  4006d8:	bf94      	ite	ls
  4006da:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  4006de:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  4006e2:	b00c      	add	sp, #48	; 0x30
  4006e4:	bcf0      	pop	{r4, r5, r6, r7}
  4006e6:	4770      	bx	lr
  4006e8:	00402d74 	.word	0x00402d74

004006ec <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  4006ec:	b570      	push	{r4, r5, r6, lr}
  4006ee:	4606      	mov	r6, r0
  4006f0:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  4006f2:	6808      	ldr	r0, [r1, #0]
  4006f4:	b140      	cbz	r0, 400708 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  4006f6:	6889      	ldr	r1, [r1, #8]
  4006f8:	4b0e      	ldr	r3, [pc, #56]	; (400734 <pwm_init+0x48>)
  4006fa:	4798      	blx	r3
  4006fc:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  4006fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400702:	4298      	cmp	r0, r3
  400704:	d101      	bne.n	40070a <pwm_init+0x1e>
  400706:	e00e      	b.n	400726 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  400708:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  40070a:	6860      	ldr	r0, [r4, #4]
  40070c:	b140      	cbz	r0, 400720 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  40070e:	68a1      	ldr	r1, [r4, #8]
  400710:	4b08      	ldr	r3, [pc, #32]	; (400734 <pwm_init+0x48>)
  400712:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  400714:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400718:	4298      	cmp	r0, r3
  40071a:	d007      	beq.n	40072c <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  40071c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  400720:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  400722:	2000      	movs	r0, #0
  400724:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  400726:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40072a:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  40072c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  400730:	bd70      	pop	{r4, r5, r6, pc}
  400732:	bf00      	nop
  400734:	00400699 	.word	0x00400699

00400738 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  400738:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  40073a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40073c:	684a      	ldr	r2, [r1, #4]
  40073e:	f002 020f 	and.w	r2, r2, #15
  400742:	8a8c      	ldrh	r4, [r1, #20]
  400744:	4322      	orrs	r2, r4
  400746:	890c      	ldrh	r4, [r1, #8]
  400748:	4322      	orrs	r2, r4
  40074a:	7a8c      	ldrb	r4, [r1, #10]
  40074c:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  400750:	7d8c      	ldrb	r4, [r1, #22]
  400752:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  400756:	7dcc      	ldrb	r4, [r1, #23]
  400758:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  40075c:	7e0c      	ldrb	r4, [r1, #24]
  40075e:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  400762:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  400766:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  40076a:	68ca      	ldr	r2, [r1, #12]
  40076c:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  400770:	690a      	ldr	r2, [r1, #16]
  400772:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  400776:	7d8a      	ldrb	r2, [r1, #22]
  400778:	b13a      	cbz	r2, 40078a <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  40077a:	8b8c      	ldrh	r4, [r1, #28]
  40077c:	8b4a      	ldrh	r2, [r1, #26]
  40077e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  400782:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  400786:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  40078a:	6c84      	ldr	r4, [r0, #72]	; 0x48
  40078c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  400790:	409a      	lsls	r2, r3
  400792:	43d2      	mvns	r2, r2
  400794:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  400798:	7fcc      	ldrb	r4, [r1, #31]
  40079a:	fa04 f603 	lsl.w	r6, r4, r3
  40079e:	7f8c      	ldrb	r4, [r1, #30]
  4007a0:	409c      	lsls	r4, r3
  4007a2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  4007a6:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  4007a8:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  4007aa:	6c44      	ldr	r4, [r0, #68]	; 0x44
  4007ac:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  4007ae:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  4007b2:	fa04 f503 	lsl.w	r5, r4, r3
  4007b6:	f891 4020 	ldrb.w	r4, [r1, #32]
  4007ba:	409c      	lsls	r4, r3
  4007bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4007c0:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  4007c2:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  4007c4:	2201      	movs	r2, #1
  4007c6:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  4007c8:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  4007cc:	b11c      	cbz	r4, 4007d6 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  4007ce:	6a04      	ldr	r4, [r0, #32]
  4007d0:	4314      	orrs	r4, r2
  4007d2:	6204      	str	r4, [r0, #32]
  4007d4:	e003      	b.n	4007de <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  4007d6:	6a04      	ldr	r4, [r0, #32]
  4007d8:	ea24 0402 	bic.w	r4, r4, r2
  4007dc:	6204      	str	r4, [r0, #32]
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  4007de:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  4007e2:	2c02      	cmp	r4, #2
  4007e4:	d105      	bne.n	4007f2 <pwm_channel_init+0xba>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  4007e6:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  4007ea:	4314      	orrs	r4, r2
  4007ec:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
  4007f0:	e00d      	b.n	40080e <pwm_channel_init+0xd6>
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  4007f2:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  4007f6:	43d5      	mvns	r5, r2
  4007f8:	402c      	ands	r4, r5
  4007fa:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  4007fe:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  400802:	2c01      	cmp	r4, #1
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  400804:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400806:	bf0c      	ite	eq
  400808:	4314      	orreq	r4, r2
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  40080a:	402c      	andne	r4, r5
  40080c:	6684      	str	r4, [r0, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  40080e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  400812:	2c02      	cmp	r4, #2
  400814:	d106      	bne.n	400824 <pwm_channel_init+0xec>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  400816:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  40081a:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40081e:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
  400822:	e011      	b.n	400848 <pwm_channel_init+0x110>
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  400824:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  400828:	0412      	lsls	r2, r2, #16
  40082a:	43d5      	mvns	r5, r2
  40082c:	402c      	ands	r4, r5
  40082e:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  400832:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  400836:	2c01      	cmp	r4, #1
  400838:	d103      	bne.n	400842 <pwm_channel_init+0x10a>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  40083a:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40083c:	4322      	orrs	r2, r4
  40083e:	6682      	str	r2, [r0, #104]	; 0x68
  400840:	e002      	b.n	400848 <pwm_channel_init+0x110>
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  400842:	6e82      	ldr	r2, [r0, #104]	; 0x68
  400844:	402a      	ands	r2, r5
  400846:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  400848:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  40084a:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  40084c:	22ff      	movs	r2, #255	; 0xff
  40084e:	409a      	lsls	r2, r3
  400850:	ea25 0402 	bic.w	r4, r5, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  400854:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
  400858:	409a      	lsls	r2, r3
  40085a:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  40085c:	66c2      	str	r2, [r0, #108]	; 0x6c
	}
	p_pwm->PWM_CH_NUM_0X400[ch_num].PWM_CAE =
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (!ch_num) {
  40085e:	b953      	cbnz	r3, 400876 <pwm_channel_init+0x13e>
		if (p_channel->spread_spectrum_mode ==
  400860:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
  400864:	2a01      	cmp	r2, #1
		PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  400866:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  400868:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  40086c:	bf08      	it	eq
  40086e:	f042 7280 	orreq.w	r2, r2, #16777216	; 0x1000000
			PWM_SSPR_SPRDM;
			} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  400872:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  400876:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		}
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
  40087a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  40087e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  400882:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
  400886:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
  40088a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  40088c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  400890:	4313      	orrs	r3, r2
  400892:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
#endif

	return 0;
}
  400896:	2000      	movs	r0, #0
  400898:	bc70      	pop	{r4, r5, r6}
  40089a:	4770      	bx	lr

0040089c <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  40089c:	690b      	ldr	r3, [r1, #16]
  40089e:	4293      	cmp	r3, r2
  4008a0:	d307      	bcc.n	4008b2 <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  4008a2:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  4008a4:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  4008a6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4008aa:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  4008ae:	2000      	movs	r0, #0
  4008b0:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  4008b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  4008b6:	4770      	bx	lr

004008b8 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  4008b8:	2301      	movs	r3, #1
  4008ba:	fa03 f101 	lsl.w	r1, r3, r1
  4008be:	6041      	str	r1, [r0, #4]
  4008c0:	4770      	bx	lr
  4008c2:	bf00      	nop

004008c4 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  4008c4:	2301      	movs	r3, #1
  4008c6:	fa03 f101 	lsl.w	r1, r3, r1
  4008ca:	6081      	str	r1, [r0, #8]
  4008cc:	4770      	bx	lr
  4008ce:	bf00      	nop

004008d0 <pwm_channel_get_interrupt_status>:
uint32_t pwm_channel_get_interrupt_status(Pwm *p_pwm)
{
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	return p_pwm->PWM_ISR;
#else
	return p_pwm->PWM_ISR1;
  4008d0:	69c0      	ldr	r0, [r0, #28]
#endif
}
  4008d2:	4770      	bx	lr

004008d4 <pwm_channel_enable_interrupt>:
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IER = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IER1 = (1 << ul_event) | (1 << (ul_fault + 16));
  4008d4:	3210      	adds	r2, #16
  4008d6:	2301      	movs	r3, #1
  4008d8:	fa03 f202 	lsl.w	r2, r3, r2
  4008dc:	fa03 f101 	lsl.w	r1, r3, r1
  4008e0:	4311      	orrs	r1, r2
  4008e2:	6101      	str	r1, [r0, #16]
  4008e4:	4770      	bx	lr
  4008e6:	bf00      	nop

004008e8 <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
  4008e8:	3210      	adds	r2, #16
  4008ea:	2301      	movs	r3, #1
  4008ec:	fa03 f202 	lsl.w	r2, r3, r2
  4008f0:	fa03 f101 	lsl.w	r1, r3, r1
  4008f4:	4311      	orrs	r1, r2
  4008f6:	6141      	str	r1, [r0, #20]
  4008f8:	4770      	bx	lr
  4008fa:	bf00      	nop

004008fc <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4008fc:	6943      	ldr	r3, [r0, #20]
  4008fe:	f013 0f02 	tst.w	r3, #2
  400902:	d002      	beq.n	40090a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400904:	61c1      	str	r1, [r0, #28]
	return 0;
  400906:	2000      	movs	r0, #0
  400908:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  40090a:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  40090c:	4770      	bx	lr
  40090e:	bf00      	nop

00400910 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400910:	6943      	ldr	r3, [r0, #20]
  400912:	f013 0f01 	tst.w	r3, #1
  400916:	d003      	beq.n	400920 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400918:	6983      	ldr	r3, [r0, #24]
  40091a:	700b      	strb	r3, [r1, #0]
	return 0;
  40091c:	2000      	movs	r0, #0
  40091e:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400920:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400922:	4770      	bx	lr

00400924 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400924:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400926:	010c      	lsls	r4, r1, #4
  400928:	4294      	cmp	r4, r2
  40092a:	d90f      	bls.n	40094c <usart_set_async_baudrate+0x28>
  40092c:	e01a      	b.n	400964 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  40092e:	6841      	ldr	r1, [r0, #4]
  400930:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400934:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400936:	0412      	lsls	r2, r2, #16
  400938:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40093c:	431a      	orrs	r2, r3
  40093e:	6202      	str	r2, [r0, #32]

	return 0;
  400940:	2000      	movs	r0, #0
  400942:	e01c      	b.n	40097e <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  400944:	2001      	movs	r0, #1
  400946:	e01a      	b.n	40097e <usart_set_async_baudrate+0x5a>
  400948:	2001      	movs	r0, #1
  40094a:	e018      	b.n	40097e <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40094c:	0863      	lsrs	r3, r4, #1
  40094e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400952:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  400956:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400958:	1e5c      	subs	r4, r3, #1
  40095a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40095e:	428c      	cmp	r4, r1
  400960:	d9e9      	bls.n	400936 <usart_set_async_baudrate+0x12>
  400962:	e7ef      	b.n	400944 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400964:	00c9      	lsls	r1, r1, #3
  400966:	084b      	lsrs	r3, r1, #1
  400968:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40096c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400970:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400972:	1e5c      	subs	r4, r3, #1
  400974:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400978:	428c      	cmp	r4, r1
  40097a:	d8e5      	bhi.n	400948 <usart_set_async_baudrate+0x24>
  40097c:	e7d7      	b.n	40092e <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  40097e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400982:	4770      	bx	lr

00400984 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400984:	4b08      	ldr	r3, [pc, #32]	; (4009a8 <usart_reset+0x24>)
  400986:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40098a:	2300      	movs	r3, #0
  40098c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40098e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400990:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400992:	2388      	movs	r3, #136	; 0x88
  400994:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400996:	2324      	movs	r3, #36	; 0x24
  400998:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  40099a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40099e:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  4009a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4009a4:	6003      	str	r3, [r0, #0]
  4009a6:	4770      	bx	lr
  4009a8:	55534100 	.word	0x55534100

004009ac <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4009ac:	b570      	push	{r4, r5, r6, lr}
  4009ae:	4605      	mov	r5, r0
  4009b0:	460c      	mov	r4, r1
  4009b2:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4009b4:	4b0f      	ldr	r3, [pc, #60]	; (4009f4 <usart_init_rs232+0x48>)
  4009b6:	4798      	blx	r3

	ul_reg_val = 0;
  4009b8:	2200      	movs	r2, #0
  4009ba:	4b0f      	ldr	r3, [pc, #60]	; (4009f8 <usart_init_rs232+0x4c>)
  4009bc:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4009be:	b19c      	cbz	r4, 4009e8 <usart_init_rs232+0x3c>
  4009c0:	4632      	mov	r2, r6
  4009c2:	6821      	ldr	r1, [r4, #0]
  4009c4:	4628      	mov	r0, r5
  4009c6:	4b0d      	ldr	r3, [pc, #52]	; (4009fc <usart_init_rs232+0x50>)
  4009c8:	4798      	blx	r3
  4009ca:	4602      	mov	r2, r0
  4009cc:	b970      	cbnz	r0, 4009ec <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4009ce:	6861      	ldr	r1, [r4, #4]
  4009d0:	68a3      	ldr	r3, [r4, #8]
  4009d2:	4319      	orrs	r1, r3
  4009d4:	6923      	ldr	r3, [r4, #16]
  4009d6:	4319      	orrs	r1, r3
  4009d8:	68e3      	ldr	r3, [r4, #12]
  4009da:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009dc:	4906      	ldr	r1, [pc, #24]	; (4009f8 <usart_init_rs232+0x4c>)
  4009de:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  4009e0:	6869      	ldr	r1, [r5, #4]
  4009e2:	430b      	orrs	r3, r1
  4009e4:	606b      	str	r3, [r5, #4]

	return 0;
  4009e6:	e002      	b.n	4009ee <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4009e8:	2201      	movs	r2, #1
  4009ea:	e000      	b.n	4009ee <usart_init_rs232+0x42>
  4009ec:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  4009ee:	4610      	mov	r0, r2
  4009f0:	bd70      	pop	{r4, r5, r6, pc}
  4009f2:	bf00      	nop
  4009f4:	00400985 	.word	0x00400985
  4009f8:	204008d8 	.word	0x204008d8
  4009fc:	00400925 	.word	0x00400925

00400a00 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  400a00:	2340      	movs	r3, #64	; 0x40
  400a02:	6003      	str	r3, [r0, #0]
  400a04:	4770      	bx	lr
  400a06:	bf00      	nop

00400a08 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  400a08:	2310      	movs	r3, #16
  400a0a:	6003      	str	r3, [r0, #0]
  400a0c:	4770      	bx	lr
  400a0e:	bf00      	nop

00400a10 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400a10:	6943      	ldr	r3, [r0, #20]
  400a12:	f013 0f02 	tst.w	r3, #2
  400a16:	d004      	beq.n	400a22 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400a18:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400a1c:	61c1      	str	r1, [r0, #28]
	return 0;
  400a1e:	2000      	movs	r0, #0
  400a20:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400a22:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400a24:	4770      	bx	lr
  400a26:	bf00      	nop

00400a28 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400a28:	6943      	ldr	r3, [r0, #20]
  400a2a:	f013 0f01 	tst.w	r3, #1
  400a2e:	d005      	beq.n	400a3c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a30:	6983      	ldr	r3, [r0, #24]
  400a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400a36:	600b      	str	r3, [r1, #0]

	return 0;
  400a38:	2000      	movs	r0, #0
  400a3a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400a3c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400a3e:	4770      	bx	lr

00400a40 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400a40:	e7fe      	b.n	400a40 <Dummy_Handler>
  400a42:	bf00      	nop

00400a44 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400a44:	b500      	push	{lr}
  400a46:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  400a48:	4b27      	ldr	r3, [pc, #156]	; (400ae8 <Reset_Handler+0xa4>)
  400a4a:	4a28      	ldr	r2, [pc, #160]	; (400aec <Reset_Handler+0xa8>)
  400a4c:	429a      	cmp	r2, r3
  400a4e:	d003      	beq.n	400a58 <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  400a50:	4b27      	ldr	r3, [pc, #156]	; (400af0 <Reset_Handler+0xac>)
  400a52:	4a25      	ldr	r2, [pc, #148]	; (400ae8 <Reset_Handler+0xa4>)
  400a54:	429a      	cmp	r2, r3
  400a56:	d304      	bcc.n	400a62 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400a58:	4b26      	ldr	r3, [pc, #152]	; (400af4 <Reset_Handler+0xb0>)
  400a5a:	4a27      	ldr	r2, [pc, #156]	; (400af8 <Reset_Handler+0xb4>)
  400a5c:	429a      	cmp	r2, r3
  400a5e:	d30f      	bcc.n	400a80 <Reset_Handler+0x3c>
  400a60:	e01a      	b.n	400a98 <Reset_Handler+0x54>
  400a62:	4921      	ldr	r1, [pc, #132]	; (400ae8 <Reset_Handler+0xa4>)
  400a64:	4b25      	ldr	r3, [pc, #148]	; (400afc <Reset_Handler+0xb8>)
  400a66:	1a5b      	subs	r3, r3, r1
  400a68:	f023 0303 	bic.w	r3, r3, #3
  400a6c:	3304      	adds	r3, #4
  400a6e:	4a1f      	ldr	r2, [pc, #124]	; (400aec <Reset_Handler+0xa8>)
  400a70:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  400a72:	f852 0b04 	ldr.w	r0, [r2], #4
  400a76:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  400a7a:	429a      	cmp	r2, r3
  400a7c:	d1f9      	bne.n	400a72 <Reset_Handler+0x2e>
  400a7e:	e7eb      	b.n	400a58 <Reset_Handler+0x14>
  400a80:	4b1f      	ldr	r3, [pc, #124]	; (400b00 <Reset_Handler+0xbc>)
  400a82:	4a20      	ldr	r2, [pc, #128]	; (400b04 <Reset_Handler+0xc0>)
  400a84:	1ad2      	subs	r2, r2, r3
  400a86:	f022 0203 	bic.w	r2, r2, #3
  400a8a:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400a8c:	3b04      	subs	r3, #4
                *pDest++ = 0;
  400a8e:	2100      	movs	r1, #0
  400a90:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400a94:	4293      	cmp	r3, r2
  400a96:	d1fb      	bne.n	400a90 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400a98:	4a1b      	ldr	r2, [pc, #108]	; (400b08 <Reset_Handler+0xc4>)
  400a9a:	4b1c      	ldr	r3, [pc, #112]	; (400b0c <Reset_Handler+0xc8>)
  400a9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400aa0:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400aa2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400aa6:	fab3 f383 	clz	r3, r3
  400aaa:	095b      	lsrs	r3, r3, #5
  400aac:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400aae:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400ab0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400ab4:	2200      	movs	r2, #0
  400ab6:	4b16      	ldr	r3, [pc, #88]	; (400b10 <Reset_Handler+0xcc>)
  400ab8:	701a      	strb	r2, [r3, #0]
	return flags;
  400aba:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400abc:	4a15      	ldr	r2, [pc, #84]	; (400b14 <Reset_Handler+0xd0>)
  400abe:	6813      	ldr	r3, [r2, #0]
  400ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400ac4:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400ac6:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400aca:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400ace:	b129      	cbz	r1, 400adc <Reset_Handler+0x98>
		cpu_irq_enable();
  400ad0:	2201      	movs	r2, #1
  400ad2:	4b0f      	ldr	r3, [pc, #60]	; (400b10 <Reset_Handler+0xcc>)
  400ad4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400ad6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400ada:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  400adc:	4b0e      	ldr	r3, [pc, #56]	; (400b18 <Reset_Handler+0xd4>)
  400ade:	4798      	blx	r3

        /* Branch to main function */
        main();
  400ae0:	4b0e      	ldr	r3, [pc, #56]	; (400b1c <Reset_Handler+0xd8>)
  400ae2:	4798      	blx	r3
  400ae4:	e7fe      	b.n	400ae4 <Reset_Handler+0xa0>
  400ae6:	bf00      	nop
  400ae8:	20400000 	.word	0x20400000
  400aec:	00402e20 	.word	0x00402e20
  400af0:	2040084c 	.word	0x2040084c
  400af4:	20400968 	.word	0x20400968
  400af8:	2040084c 	.word	0x2040084c
  400afc:	2040084b 	.word	0x2040084b
  400b00:	20400850 	.word	0x20400850
  400b04:	2040096b 	.word	0x2040096b
  400b08:	e000ed00 	.word	0xe000ed00
  400b0c:	00400000 	.word	0x00400000
  400b10:	20400000 	.word	0x20400000
  400b14:	e000ed88 	.word	0xe000ed88
  400b18:	004010a9 	.word	0x004010a9
  400b1c:	00400f29 	.word	0x00400f29

00400b20 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400b20:	4b3c      	ldr	r3, [pc, #240]	; (400c14 <SystemCoreClockUpdate+0xf4>)
  400b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b24:	f003 0303 	and.w	r3, r3, #3
  400b28:	2b01      	cmp	r3, #1
  400b2a:	d00f      	beq.n	400b4c <SystemCoreClockUpdate+0x2c>
  400b2c:	b113      	cbz	r3, 400b34 <SystemCoreClockUpdate+0x14>
  400b2e:	2b02      	cmp	r3, #2
  400b30:	d029      	beq.n	400b86 <SystemCoreClockUpdate+0x66>
  400b32:	e057      	b.n	400be4 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400b34:	4b38      	ldr	r3, [pc, #224]	; (400c18 <SystemCoreClockUpdate+0xf8>)
  400b36:	695b      	ldr	r3, [r3, #20]
  400b38:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b3c:	bf14      	ite	ne
  400b3e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400b42:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400b46:	4b35      	ldr	r3, [pc, #212]	; (400c1c <SystemCoreClockUpdate+0xfc>)
  400b48:	601a      	str	r2, [r3, #0]
  400b4a:	e04b      	b.n	400be4 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b4c:	4b31      	ldr	r3, [pc, #196]	; (400c14 <SystemCoreClockUpdate+0xf4>)
  400b4e:	6a1b      	ldr	r3, [r3, #32]
  400b50:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400b54:	d003      	beq.n	400b5e <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400b56:	4a32      	ldr	r2, [pc, #200]	; (400c20 <SystemCoreClockUpdate+0x100>)
  400b58:	4b30      	ldr	r3, [pc, #192]	; (400c1c <SystemCoreClockUpdate+0xfc>)
  400b5a:	601a      	str	r2, [r3, #0]
  400b5c:	e042      	b.n	400be4 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b5e:	4a31      	ldr	r2, [pc, #196]	; (400c24 <SystemCoreClockUpdate+0x104>)
  400b60:	4b2e      	ldr	r3, [pc, #184]	; (400c1c <SystemCoreClockUpdate+0xfc>)
  400b62:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400b64:	4b2b      	ldr	r3, [pc, #172]	; (400c14 <SystemCoreClockUpdate+0xf4>)
  400b66:	6a1b      	ldr	r3, [r3, #32]
  400b68:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b6c:	2b10      	cmp	r3, #16
  400b6e:	d002      	beq.n	400b76 <SystemCoreClockUpdate+0x56>
  400b70:	2b20      	cmp	r3, #32
  400b72:	d004      	beq.n	400b7e <SystemCoreClockUpdate+0x5e>
  400b74:	e036      	b.n	400be4 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  400b76:	4a2c      	ldr	r2, [pc, #176]	; (400c28 <SystemCoreClockUpdate+0x108>)
  400b78:	4b28      	ldr	r3, [pc, #160]	; (400c1c <SystemCoreClockUpdate+0xfc>)
  400b7a:	601a      	str	r2, [r3, #0]
          break;
  400b7c:	e032      	b.n	400be4 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  400b7e:	4a28      	ldr	r2, [pc, #160]	; (400c20 <SystemCoreClockUpdate+0x100>)
  400b80:	4b26      	ldr	r3, [pc, #152]	; (400c1c <SystemCoreClockUpdate+0xfc>)
  400b82:	601a      	str	r2, [r3, #0]
          break;
  400b84:	e02e      	b.n	400be4 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b86:	4b23      	ldr	r3, [pc, #140]	; (400c14 <SystemCoreClockUpdate+0xf4>)
  400b88:	6a1b      	ldr	r3, [r3, #32]
  400b8a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400b8e:	d003      	beq.n	400b98 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400b90:	4a23      	ldr	r2, [pc, #140]	; (400c20 <SystemCoreClockUpdate+0x100>)
  400b92:	4b22      	ldr	r3, [pc, #136]	; (400c1c <SystemCoreClockUpdate+0xfc>)
  400b94:	601a      	str	r2, [r3, #0]
  400b96:	e012      	b.n	400bbe <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b98:	4a22      	ldr	r2, [pc, #136]	; (400c24 <SystemCoreClockUpdate+0x104>)
  400b9a:	4b20      	ldr	r3, [pc, #128]	; (400c1c <SystemCoreClockUpdate+0xfc>)
  400b9c:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400b9e:	4b1d      	ldr	r3, [pc, #116]	; (400c14 <SystemCoreClockUpdate+0xf4>)
  400ba0:	6a1b      	ldr	r3, [r3, #32]
  400ba2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ba6:	2b10      	cmp	r3, #16
  400ba8:	d002      	beq.n	400bb0 <SystemCoreClockUpdate+0x90>
  400baa:	2b20      	cmp	r3, #32
  400bac:	d004      	beq.n	400bb8 <SystemCoreClockUpdate+0x98>
  400bae:	e006      	b.n	400bbe <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  400bb0:	4a1d      	ldr	r2, [pc, #116]	; (400c28 <SystemCoreClockUpdate+0x108>)
  400bb2:	4b1a      	ldr	r3, [pc, #104]	; (400c1c <SystemCoreClockUpdate+0xfc>)
  400bb4:	601a      	str	r2, [r3, #0]
          break;
  400bb6:	e002      	b.n	400bbe <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  400bb8:	4a19      	ldr	r2, [pc, #100]	; (400c20 <SystemCoreClockUpdate+0x100>)
  400bba:	4b18      	ldr	r3, [pc, #96]	; (400c1c <SystemCoreClockUpdate+0xfc>)
  400bbc:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400bbe:	4b15      	ldr	r3, [pc, #84]	; (400c14 <SystemCoreClockUpdate+0xf4>)
  400bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bc2:	f003 0303 	and.w	r3, r3, #3
  400bc6:	2b02      	cmp	r3, #2
  400bc8:	d10c      	bne.n	400be4 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400bca:	4a12      	ldr	r2, [pc, #72]	; (400c14 <SystemCoreClockUpdate+0xf4>)
  400bcc:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400bce:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400bd0:	4812      	ldr	r0, [pc, #72]	; (400c1c <SystemCoreClockUpdate+0xfc>)
  400bd2:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400bd6:	6803      	ldr	r3, [r0, #0]
  400bd8:	fb01 3303 	mla	r3, r1, r3, r3
  400bdc:	b2d2      	uxtb	r2, r2
  400bde:	fbb3 f3f2 	udiv	r3, r3, r2
  400be2:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400be4:	4b0b      	ldr	r3, [pc, #44]	; (400c14 <SystemCoreClockUpdate+0xf4>)
  400be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400bec:	2b70      	cmp	r3, #112	; 0x70
  400bee:	d107      	bne.n	400c00 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  400bf0:	4a0a      	ldr	r2, [pc, #40]	; (400c1c <SystemCoreClockUpdate+0xfc>)
  400bf2:	6813      	ldr	r3, [r2, #0]
  400bf4:	490d      	ldr	r1, [pc, #52]	; (400c2c <SystemCoreClockUpdate+0x10c>)
  400bf6:	fba1 1303 	umull	r1, r3, r1, r3
  400bfa:	085b      	lsrs	r3, r3, #1
  400bfc:	6013      	str	r3, [r2, #0]
  400bfe:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c00:	4b04      	ldr	r3, [pc, #16]	; (400c14 <SystemCoreClockUpdate+0xf4>)
  400c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c04:	4905      	ldr	r1, [pc, #20]	; (400c1c <SystemCoreClockUpdate+0xfc>)
  400c06:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400c0a:	680b      	ldr	r3, [r1, #0]
  400c0c:	40d3      	lsrs	r3, r2
  400c0e:	600b      	str	r3, [r1, #0]
  400c10:	4770      	bx	lr
  400c12:	bf00      	nop
  400c14:	400e0600 	.word	0x400e0600
  400c18:	400e1810 	.word	0x400e1810
  400c1c:	20400004 	.word	0x20400004
  400c20:	00b71b00 	.word	0x00b71b00
  400c24:	003d0900 	.word	0x003d0900
  400c28:	007a1200 	.word	0x007a1200
  400c2c:	aaaaaaab 	.word	0xaaaaaaab

00400c30 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400c30:	4b12      	ldr	r3, [pc, #72]	; (400c7c <system_init_flash+0x4c>)
  400c32:	4298      	cmp	r0, r3
  400c34:	d804      	bhi.n	400c40 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c3a:	4b11      	ldr	r3, [pc, #68]	; (400c80 <system_init_flash+0x50>)
  400c3c:	601a      	str	r2, [r3, #0]
  400c3e:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400c40:	4b10      	ldr	r3, [pc, #64]	; (400c84 <system_init_flash+0x54>)
  400c42:	4298      	cmp	r0, r3
  400c44:	d803      	bhi.n	400c4e <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c46:	4a10      	ldr	r2, [pc, #64]	; (400c88 <system_init_flash+0x58>)
  400c48:	4b0d      	ldr	r3, [pc, #52]	; (400c80 <system_init_flash+0x50>)
  400c4a:	601a      	str	r2, [r3, #0]
  400c4c:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400c4e:	4b0f      	ldr	r3, [pc, #60]	; (400c8c <system_init_flash+0x5c>)
  400c50:	4298      	cmp	r0, r3
  400c52:	d803      	bhi.n	400c5c <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400c54:	4a0e      	ldr	r2, [pc, #56]	; (400c90 <system_init_flash+0x60>)
  400c56:	4b0a      	ldr	r3, [pc, #40]	; (400c80 <system_init_flash+0x50>)
  400c58:	601a      	str	r2, [r3, #0]
  400c5a:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400c5c:	4b0d      	ldr	r3, [pc, #52]	; (400c94 <system_init_flash+0x64>)
  400c5e:	4298      	cmp	r0, r3
  400c60:	d803      	bhi.n	400c6a <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400c62:	4a0d      	ldr	r2, [pc, #52]	; (400c98 <system_init_flash+0x68>)
  400c64:	4b06      	ldr	r3, [pc, #24]	; (400c80 <system_init_flash+0x50>)
  400c66:	601a      	str	r2, [r3, #0]
  400c68:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400c6a:	4b0c      	ldr	r3, [pc, #48]	; (400c9c <system_init_flash+0x6c>)
  400c6c:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400c6e:	bf94      	ite	ls
  400c70:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400c74:	4a0a      	ldrhi	r2, [pc, #40]	; (400ca0 <system_init_flash+0x70>)
  400c76:	4b02      	ldr	r3, [pc, #8]	; (400c80 <system_init_flash+0x50>)
  400c78:	601a      	str	r2, [r3, #0]
  400c7a:	4770      	bx	lr
  400c7c:	01312cff 	.word	0x01312cff
  400c80:	400e0c00 	.word	0x400e0c00
  400c84:	026259ff 	.word	0x026259ff
  400c88:	04000100 	.word	0x04000100
  400c8c:	039386ff 	.word	0x039386ff
  400c90:	04000200 	.word	0x04000200
  400c94:	04c4b3ff 	.word	0x04c4b3ff
  400c98:	04000300 	.word	0x04000300
  400c9c:	05f5e0ff 	.word	0x05f5e0ff
  400ca0:	04000500 	.word	0x04000500

00400ca4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400ca4:	4b09      	ldr	r3, [pc, #36]	; (400ccc <_sbrk+0x28>)
  400ca6:	681b      	ldr	r3, [r3, #0]
  400ca8:	b913      	cbnz	r3, 400cb0 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400caa:	4a09      	ldr	r2, [pc, #36]	; (400cd0 <_sbrk+0x2c>)
  400cac:	4b07      	ldr	r3, [pc, #28]	; (400ccc <_sbrk+0x28>)
  400cae:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400cb0:	4b06      	ldr	r3, [pc, #24]	; (400ccc <_sbrk+0x28>)
  400cb2:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400cb4:	181a      	adds	r2, r3, r0
  400cb6:	4907      	ldr	r1, [pc, #28]	; (400cd4 <_sbrk+0x30>)
  400cb8:	4291      	cmp	r1, r2
  400cba:	db04      	blt.n	400cc6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400cbc:	4610      	mov	r0, r2
  400cbe:	4a03      	ldr	r2, [pc, #12]	; (400ccc <_sbrk+0x28>)
  400cc0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400cc2:	4618      	mov	r0, r3
  400cc4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400cc6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400cca:	4770      	bx	lr
  400ccc:	204008dc 	.word	0x204008dc
  400cd0:	20402b68 	.word	0x20402b68
  400cd4:	2045fffc 	.word	0x2045fffc

00400cd8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400cd8:	f04f 30ff 	mov.w	r0, #4294967295
  400cdc:	4770      	bx	lr
  400cde:	bf00      	nop

00400ce0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400ce4:	604b      	str	r3, [r1, #4]

	return 0;
}
  400ce6:	2000      	movs	r0, #0
  400ce8:	4770      	bx	lr
  400cea:	bf00      	nop

00400cec <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400cec:	2001      	movs	r0, #1
  400cee:	4770      	bx	lr

00400cf0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400cf0:	2000      	movs	r0, #0
  400cf2:	4770      	bx	lr

00400cf4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400cf6:	b083      	sub	sp, #12
  400cf8:	4605      	mov	r5, r0
  400cfa:	460c      	mov	r4, r1
	uint32_t val = 0;
  400cfc:	2300      	movs	r3, #0
  400cfe:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400d00:	4b29      	ldr	r3, [pc, #164]	; (400da8 <usart_serial_getchar+0xb4>)
  400d02:	4298      	cmp	r0, r3
  400d04:	d107      	bne.n	400d16 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400d06:	461f      	mov	r7, r3
  400d08:	4e28      	ldr	r6, [pc, #160]	; (400dac <usart_serial_getchar+0xb8>)
  400d0a:	4621      	mov	r1, r4
  400d0c:	4638      	mov	r0, r7
  400d0e:	47b0      	blx	r6
  400d10:	2800      	cmp	r0, #0
  400d12:	d1fa      	bne.n	400d0a <usart_serial_getchar+0x16>
  400d14:	e015      	b.n	400d42 <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400d16:	4b26      	ldr	r3, [pc, #152]	; (400db0 <usart_serial_getchar+0xbc>)
  400d18:	4298      	cmp	r0, r3
  400d1a:	d107      	bne.n	400d2c <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400d1c:	461f      	mov	r7, r3
  400d1e:	4e23      	ldr	r6, [pc, #140]	; (400dac <usart_serial_getchar+0xb8>)
  400d20:	4621      	mov	r1, r4
  400d22:	4638      	mov	r0, r7
  400d24:	47b0      	blx	r6
  400d26:	2800      	cmp	r0, #0
  400d28:	d1fa      	bne.n	400d20 <usart_serial_getchar+0x2c>
  400d2a:	e015      	b.n	400d58 <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400d2c:	4b21      	ldr	r3, [pc, #132]	; (400db4 <usart_serial_getchar+0xc0>)
  400d2e:	4298      	cmp	r0, r3
  400d30:	d107      	bne.n	400d42 <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  400d32:	461f      	mov	r7, r3
  400d34:	4e1d      	ldr	r6, [pc, #116]	; (400dac <usart_serial_getchar+0xb8>)
  400d36:	4621      	mov	r1, r4
  400d38:	4638      	mov	r0, r7
  400d3a:	47b0      	blx	r6
  400d3c:	2800      	cmp	r0, #0
  400d3e:	d1fa      	bne.n	400d36 <usart_serial_getchar+0x42>
  400d40:	e017      	b.n	400d72 <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400d42:	4b1d      	ldr	r3, [pc, #116]	; (400db8 <usart_serial_getchar+0xc4>)
  400d44:	429d      	cmp	r5, r3
  400d46:	d107      	bne.n	400d58 <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  400d48:	461f      	mov	r7, r3
  400d4a:	4e18      	ldr	r6, [pc, #96]	; (400dac <usart_serial_getchar+0xb8>)
  400d4c:	4621      	mov	r1, r4
  400d4e:	4638      	mov	r0, r7
  400d50:	47b0      	blx	r6
  400d52:	2800      	cmp	r0, #0
  400d54:	d1fa      	bne.n	400d4c <usart_serial_getchar+0x58>
  400d56:	e019      	b.n	400d8c <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400d58:	4b18      	ldr	r3, [pc, #96]	; (400dbc <usart_serial_getchar+0xc8>)
  400d5a:	429d      	cmp	r5, r3
  400d5c:	d109      	bne.n	400d72 <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  400d5e:	461e      	mov	r6, r3
  400d60:	4d17      	ldr	r5, [pc, #92]	; (400dc0 <usart_serial_getchar+0xcc>)
  400d62:	a901      	add	r1, sp, #4
  400d64:	4630      	mov	r0, r6
  400d66:	47a8      	blx	r5
  400d68:	2800      	cmp	r0, #0
  400d6a:	d1fa      	bne.n	400d62 <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  400d6c:	9b01      	ldr	r3, [sp, #4]
  400d6e:	7023      	strb	r3, [r4, #0]
  400d70:	e018      	b.n	400da4 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400d72:	4b14      	ldr	r3, [pc, #80]	; (400dc4 <usart_serial_getchar+0xd0>)
  400d74:	429d      	cmp	r5, r3
  400d76:	d109      	bne.n	400d8c <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  400d78:	461e      	mov	r6, r3
  400d7a:	4d11      	ldr	r5, [pc, #68]	; (400dc0 <usart_serial_getchar+0xcc>)
  400d7c:	a901      	add	r1, sp, #4
  400d7e:	4630      	mov	r0, r6
  400d80:	47a8      	blx	r5
  400d82:	2800      	cmp	r0, #0
  400d84:	d1fa      	bne.n	400d7c <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  400d86:	9b01      	ldr	r3, [sp, #4]
  400d88:	7023      	strb	r3, [r4, #0]
  400d8a:	e00b      	b.n	400da4 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400d8c:	4b0e      	ldr	r3, [pc, #56]	; (400dc8 <usart_serial_getchar+0xd4>)
  400d8e:	429d      	cmp	r5, r3
  400d90:	d108      	bne.n	400da4 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  400d92:	461e      	mov	r6, r3
  400d94:	4d0a      	ldr	r5, [pc, #40]	; (400dc0 <usart_serial_getchar+0xcc>)
  400d96:	a901      	add	r1, sp, #4
  400d98:	4630      	mov	r0, r6
  400d9a:	47a8      	blx	r5
  400d9c:	2800      	cmp	r0, #0
  400d9e:	d1fa      	bne.n	400d96 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  400da0:	9b01      	ldr	r3, [sp, #4]
  400da2:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400da4:	b003      	add	sp, #12
  400da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400da8:	400e0800 	.word	0x400e0800
  400dac:	00400911 	.word	0x00400911
  400db0:	400e0a00 	.word	0x400e0a00
  400db4:	400e1a00 	.word	0x400e1a00
  400db8:	400e1c00 	.word	0x400e1c00
  400dbc:	40024000 	.word	0x40024000
  400dc0:	00400a29 	.word	0x00400a29
  400dc4:	40028000 	.word	0x40028000
  400dc8:	4002c000 	.word	0x4002c000

00400dcc <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400dcc:	b570      	push	{r4, r5, r6, lr}
  400dce:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400dd0:	4b2a      	ldr	r3, [pc, #168]	; (400e7c <usart_serial_putchar+0xb0>)
  400dd2:	4298      	cmp	r0, r3
  400dd4:	d108      	bne.n	400de8 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400dd6:	461e      	mov	r6, r3
  400dd8:	4d29      	ldr	r5, [pc, #164]	; (400e80 <usart_serial_putchar+0xb4>)
  400dda:	4621      	mov	r1, r4
  400ddc:	4630      	mov	r0, r6
  400dde:	47a8      	blx	r5
  400de0:	2800      	cmp	r0, #0
  400de2:	d1fa      	bne.n	400dda <usart_serial_putchar+0xe>
		return 1;
  400de4:	2001      	movs	r0, #1
  400de6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400de8:	4b26      	ldr	r3, [pc, #152]	; (400e84 <usart_serial_putchar+0xb8>)
  400dea:	4298      	cmp	r0, r3
  400dec:	d108      	bne.n	400e00 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  400dee:	461e      	mov	r6, r3
  400df0:	4d23      	ldr	r5, [pc, #140]	; (400e80 <usart_serial_putchar+0xb4>)
  400df2:	4621      	mov	r1, r4
  400df4:	4630      	mov	r0, r6
  400df6:	47a8      	blx	r5
  400df8:	2800      	cmp	r0, #0
  400dfa:	d1fa      	bne.n	400df2 <usart_serial_putchar+0x26>
		return 1;
  400dfc:	2001      	movs	r0, #1
  400dfe:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400e00:	4b21      	ldr	r3, [pc, #132]	; (400e88 <usart_serial_putchar+0xbc>)
  400e02:	4298      	cmp	r0, r3
  400e04:	d108      	bne.n	400e18 <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400e06:	461e      	mov	r6, r3
  400e08:	4d1d      	ldr	r5, [pc, #116]	; (400e80 <usart_serial_putchar+0xb4>)
  400e0a:	4621      	mov	r1, r4
  400e0c:	4630      	mov	r0, r6
  400e0e:	47a8      	blx	r5
  400e10:	2800      	cmp	r0, #0
  400e12:	d1fa      	bne.n	400e0a <usart_serial_putchar+0x3e>
		return 1;
  400e14:	2001      	movs	r0, #1
  400e16:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400e18:	4b1c      	ldr	r3, [pc, #112]	; (400e8c <usart_serial_putchar+0xc0>)
  400e1a:	4298      	cmp	r0, r3
  400e1c:	d108      	bne.n	400e30 <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  400e1e:	461e      	mov	r6, r3
  400e20:	4d17      	ldr	r5, [pc, #92]	; (400e80 <usart_serial_putchar+0xb4>)
  400e22:	4621      	mov	r1, r4
  400e24:	4630      	mov	r0, r6
  400e26:	47a8      	blx	r5
  400e28:	2800      	cmp	r0, #0
  400e2a:	d1fa      	bne.n	400e22 <usart_serial_putchar+0x56>
		return 1;
  400e2c:	2001      	movs	r0, #1
  400e2e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400e30:	4b17      	ldr	r3, [pc, #92]	; (400e90 <usart_serial_putchar+0xc4>)
  400e32:	4298      	cmp	r0, r3
  400e34:	d108      	bne.n	400e48 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  400e36:	461e      	mov	r6, r3
  400e38:	4d16      	ldr	r5, [pc, #88]	; (400e94 <usart_serial_putchar+0xc8>)
  400e3a:	4621      	mov	r1, r4
  400e3c:	4630      	mov	r0, r6
  400e3e:	47a8      	blx	r5
  400e40:	2800      	cmp	r0, #0
  400e42:	d1fa      	bne.n	400e3a <usart_serial_putchar+0x6e>
		return 1;
  400e44:	2001      	movs	r0, #1
  400e46:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400e48:	4b13      	ldr	r3, [pc, #76]	; (400e98 <usart_serial_putchar+0xcc>)
  400e4a:	4298      	cmp	r0, r3
  400e4c:	d108      	bne.n	400e60 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  400e4e:	461e      	mov	r6, r3
  400e50:	4d10      	ldr	r5, [pc, #64]	; (400e94 <usart_serial_putchar+0xc8>)
  400e52:	4621      	mov	r1, r4
  400e54:	4630      	mov	r0, r6
  400e56:	47a8      	blx	r5
  400e58:	2800      	cmp	r0, #0
  400e5a:	d1fa      	bne.n	400e52 <usart_serial_putchar+0x86>
		return 1;
  400e5c:	2001      	movs	r0, #1
  400e5e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400e60:	4b0e      	ldr	r3, [pc, #56]	; (400e9c <usart_serial_putchar+0xd0>)
  400e62:	4298      	cmp	r0, r3
  400e64:	d108      	bne.n	400e78 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  400e66:	461e      	mov	r6, r3
  400e68:	4d0a      	ldr	r5, [pc, #40]	; (400e94 <usart_serial_putchar+0xc8>)
  400e6a:	4621      	mov	r1, r4
  400e6c:	4630      	mov	r0, r6
  400e6e:	47a8      	blx	r5
  400e70:	2800      	cmp	r0, #0
  400e72:	d1fa      	bne.n	400e6a <usart_serial_putchar+0x9e>
		return 1;
  400e74:	2001      	movs	r0, #1
  400e76:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400e78:	2000      	movs	r0, #0
}
  400e7a:	bd70      	pop	{r4, r5, r6, pc}
  400e7c:	400e0800 	.word	0x400e0800
  400e80:	004008fd 	.word	0x004008fd
  400e84:	400e0a00 	.word	0x400e0a00
  400e88:	400e1a00 	.word	0x400e1a00
  400e8c:	400e1c00 	.word	0x400e1c00
  400e90:	40024000 	.word	0x40024000
  400e94:	00400a11 	.word	0x00400a11
  400e98:	40028000 	.word	0x40028000
  400e9c:	4002c000 	.word	0x4002c000

00400ea0 <PWM0_Handler>:
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
void PWM0_Handler(void)
#else
void PWM_Handler(void)
#endif
{
  400ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint32_t ul_count = 0;  /* PWM counter value */
	static uint32_t ul_duty = INIT_DUTY_VALUE;  /* PWM duty cycle rate */
	static uint8_t fade_in = 1;  /* LED fade in flag */

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	uint32_t events = pwm_channel_get_interrupt_status(PWM0);
  400ea2:	481a      	ldr	r0, [pc, #104]	; (400f0c <PWM0_Handler+0x6c>)
  400ea4:	4b1a      	ldr	r3, [pc, #104]	; (400f10 <PWM0_Handler+0x70>)
  400ea6:	4798      	blx	r3
#else
	uint32_t events = pwm_channel_get_interrupt_status(PWM);
#endif

	/* Interrupt on PIN_PWM_LED0_CHANNEL */
	if ((events & (1 << PIN_PWM_LED0_CHANNEL)) ==
  400ea8:	f010 0f01 	tst.w	r0, #1
  400eac:	d02c      	beq.n	400f08 <PWM0_Handler+0x68>
	(1 << PIN_PWM_LED0_CHANNEL)) {
		ul_count++;
  400eae:	4a19      	ldr	r2, [pc, #100]	; (400f14 <PWM0_Handler+0x74>)
  400eb0:	6813      	ldr	r3, [r2, #0]
  400eb2:	3301      	adds	r3, #1
  400eb4:	6013      	str	r3, [r2, #0]

		/* Fade in/out */
		if (ul_count == (PWM_FREQUENCY / (PERIOD_VALUE - INIT_DUTY_VALUE))) {
  400eb6:	2b0a      	cmp	r3, #10
  400eb8:	d126      	bne.n	400f08 <PWM0_Handler+0x68>
			/* Fade in */
			if (fade_in) {
  400eba:	4b17      	ldr	r3, [pc, #92]	; (400f18 <PWM0_Handler+0x78>)
  400ebc:	781b      	ldrb	r3, [r3, #0]
  400ebe:	b14b      	cbz	r3, 400ed4 <PWM0_Handler+0x34>
				ul_duty++;
  400ec0:	4a16      	ldr	r2, [pc, #88]	; (400f1c <PWM0_Handler+0x7c>)
  400ec2:	6813      	ldr	r3, [r2, #0]
  400ec4:	3301      	adds	r3, #1
  400ec6:	6013      	str	r3, [r2, #0]
				if (ul_duty == PERIOD_VALUE) {
  400ec8:	2b64      	cmp	r3, #100	; 0x64
  400eca:	d10b      	bne.n	400ee4 <PWM0_Handler+0x44>
					fade_in = 0;
  400ecc:	2200      	movs	r2, #0
  400ece:	4b12      	ldr	r3, [pc, #72]	; (400f18 <PWM0_Handler+0x78>)
  400ed0:	701a      	strb	r2, [r3, #0]
  400ed2:	e007      	b.n	400ee4 <PWM0_Handler+0x44>
				}
				} else {
				/* Fade out */
				ul_duty--;
  400ed4:	4a11      	ldr	r2, [pc, #68]	; (400f1c <PWM0_Handler+0x7c>)
  400ed6:	6813      	ldr	r3, [r2, #0]
  400ed8:	3b01      	subs	r3, #1
  400eda:	6013      	str	r3, [r2, #0]
				if (ul_duty == INIT_DUTY_VALUE) {
  400edc:	b913      	cbnz	r3, 400ee4 <PWM0_Handler+0x44>
					fade_in = 1;
  400ede:	2201      	movs	r2, #1
  400ee0:	4b0d      	ldr	r3, [pc, #52]	; (400f18 <PWM0_Handler+0x78>)
  400ee2:	701a      	strb	r2, [r3, #0]
				}
			}

			/* Set new duty cycle */
			ul_count = 0;
  400ee4:	2300      	movs	r3, #0
  400ee6:	4a0b      	ldr	r2, [pc, #44]	; (400f14 <PWM0_Handler+0x74>)
  400ee8:	6013      	str	r3, [r2, #0]
			g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  400eea:	4c0d      	ldr	r4, [pc, #52]	; (400f20 <PWM0_Handler+0x80>)
  400eec:	6023      	str	r3, [r4, #0]
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ul_duty);
  400eee:	4f0b      	ldr	r7, [pc, #44]	; (400f1c <PWM0_Handler+0x7c>)
  400ef0:	4e06      	ldr	r6, [pc, #24]	; (400f0c <PWM0_Handler+0x6c>)
  400ef2:	683a      	ldr	r2, [r7, #0]
  400ef4:	4621      	mov	r1, r4
  400ef6:	4630      	mov	r0, r6
  400ef8:	4d0a      	ldr	r5, [pc, #40]	; (400f24 <PWM0_Handler+0x84>)
  400efa:	47a8      	blx	r5
#else
			pwm_channel_update_duty(PWM, &g_pwm_channel_led, ul_duty);
#endif
			g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
  400efc:	2301      	movs	r3, #1
  400efe:	6023      	str	r3, [r4, #0]
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ul_duty);
  400f00:	683a      	ldr	r2, [r7, #0]
  400f02:	4621      	mov	r1, r4
  400f04:	4630      	mov	r0, r6
  400f06:	47a8      	blx	r5
  400f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f0a:	bf00      	nop
  400f0c:	40020000 	.word	0x40020000
  400f10:	004008d1 	.word	0x004008d1
  400f14:	204008e4 	.word	0x204008e4
  400f18:	20400008 	.word	0x20400008
  400f1c:	204008e0 	.word	0x204008e0
  400f20:	20400928 	.word	0x20400928
  400f24:	0040089d 	.word	0x0040089d

00400f28 <main>:
 * Output PWM waves on LEDs to make them fade in and out.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400f2c:	b08a      	sub	sp, #40	; 0x28
	/* Initialize the SAM system */
	sysclk_init();
  400f2e:	4b43      	ldr	r3, [pc, #268]	; (40103c <main+0x114>)
  400f30:	4798      	blx	r3
	board_init();
  400f32:	4b43      	ldr	r3, [pc, #268]	; (401040 <main+0x118>)
  400f34:	4798      	blx	r3
  400f36:	200e      	movs	r0, #14
  400f38:	4e42      	ldr	r6, [pc, #264]	; (401044 <main+0x11c>)
  400f3a:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400f3c:	4d42      	ldr	r5, [pc, #264]	; (401048 <main+0x120>)
  400f3e:	4b43      	ldr	r3, [pc, #268]	; (40104c <main+0x124>)
  400f40:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400f42:	4a43      	ldr	r2, [pc, #268]	; (401050 <main+0x128>)
  400f44:	4b43      	ldr	r3, [pc, #268]	; (401054 <main+0x12c>)
  400f46:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400f48:	4a43      	ldr	r2, [pc, #268]	; (401058 <main+0x130>)
  400f4a:	4b44      	ldr	r3, [pc, #272]	; (40105c <main+0x134>)
  400f4c:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  400f4e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400f52:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
  400f54:	23c0      	movs	r3, #192	; 0xc0
  400f56:	9302      	str	r3, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
  400f58:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400f5c:	9303      	str	r3, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
  400f5e:	2400      	movs	r4, #0
  400f60:	9404      	str	r4, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400f62:	9405      	str	r4, [sp, #20]
  400f64:	200e      	movs	r0, #14
  400f66:	47b0      	blx	r6
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  400f68:	4a3d      	ldr	r2, [pc, #244]	; (401060 <main+0x138>)
  400f6a:	a901      	add	r1, sp, #4
  400f6c:	4628      	mov	r0, r5
  400f6e:	4b3d      	ldr	r3, [pc, #244]	; (401064 <main+0x13c>)
  400f70:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  400f72:	4628      	mov	r0, r5
  400f74:	4b3c      	ldr	r3, [pc, #240]	; (401068 <main+0x140>)
  400f76:	4798      	blx	r3
		usart_enable_rx(p_usart);
  400f78:	4628      	mov	r0, r5
  400f7a:	4b3c      	ldr	r3, [pc, #240]	; (40106c <main+0x144>)
  400f7c:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400f7e:	4f3c      	ldr	r7, [pc, #240]	; (401070 <main+0x148>)
  400f80:	683b      	ldr	r3, [r7, #0]
  400f82:	4621      	mov	r1, r4
  400f84:	6898      	ldr	r0, [r3, #8]
  400f86:	4d3b      	ldr	r5, [pc, #236]	; (401074 <main+0x14c>)
  400f88:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400f8a:	683b      	ldr	r3, [r7, #0]
  400f8c:	4621      	mov	r1, r4
  400f8e:	6858      	ldr	r0, [r3, #4]
  400f90:	47a8      	blx	r5

	/* Configure the console uart for debug information */
	configure_console();

	/* Output example information */
	puts(STRING_HEADER);
  400f92:	4839      	ldr	r0, [pc, #228]	; (401078 <main+0x150>)
  400f94:	4b39      	ldr	r3, [pc, #228]	; (40107c <main+0x154>)
  400f96:	4798      	blx	r3
	
	/* Enable PWM peripheral clock */
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pmc_enable_periph_clk(ID_PWM0);
  400f98:	201f      	movs	r0, #31
  400f9a:	47b0      	blx	r6
	pmc_enable_periph_clk(ID_PWM);
#endif

	/* Disable PWM channels for LEDs */
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  400f9c:	4e38      	ldr	r6, [pc, #224]	; (401080 <main+0x158>)
  400f9e:	4621      	mov	r1, r4
  400fa0:	4630      	mov	r0, r6
  400fa2:	4d38      	ldr	r5, [pc, #224]	; (401084 <main+0x15c>)
  400fa4:	47a8      	blx	r5
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);
  400fa6:	2101      	movs	r1, #1
  400fa8:	4630      	mov	r0, r6
  400faa:	47a8      	blx	r5
	pwm_channel_disable(PWM, PIN_PWM_LED0_CHANNEL);
	pwm_channel_disable(PWM, PIN_PWM_LED1_CHANNEL);
#endif

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  400fac:	4b36      	ldr	r3, [pc, #216]	; (401088 <main+0x160>)
  400fae:	9307      	str	r3, [sp, #28]
  400fb0:	9408      	str	r4, [sp, #32]
  400fb2:	f103 538f 	add.w	r3, r3, #299892736	; 0x11e00000
  400fb6:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
  400fba:	9309      	str	r3, [sp, #36]	; 0x24
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_init(PWM0, &clock_setting);
  400fbc:	a907      	add	r1, sp, #28
  400fbe:	4630      	mov	r0, r6
  400fc0:	4b32      	ldr	r3, [pc, #200]	; (40108c <main+0x164>)
  400fc2:	4798      	blx	r3
	pwm_init(PWM, &clock_setting);
#endif

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  400fc4:	4d32      	ldr	r5, [pc, #200]	; (401090 <main+0x168>)
  400fc6:	812c      	strh	r4, [r5, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led.polarity = PWM_LOW;
  400fc8:	72ac      	strb	r4, [r5, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  400fca:	f04f 0a0b 	mov.w	sl, #11
  400fce:	f8c5 a004 	str.w	sl, [r5, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  400fd2:	f04f 0964 	mov.w	r9, #100	; 0x64
  400fd6:	f8c5 9010 	str.w	r9, [r5, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  400fda:	60ec      	str	r4, [r5, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  400fdc:	602c      	str	r4, [r5, #0]
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  400fde:	4629      	mov	r1, r5
  400fe0:	4630      	mov	r0, r6
  400fe2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 4010a4 <main+0x17c>
  400fe6:	47c0      	blx	r8
	pwm_channel_init(PWM, &g_pwm_channel_led);
#endif

	/* Enable channel counter event interrupt */
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_channel_enable_interrupt(PWM0, PIN_PWM_LED0_CHANNEL, 0);
  400fe8:	4622      	mov	r2, r4
  400fea:	4621      	mov	r1, r4
  400fec:	4630      	mov	r0, r6
  400fee:	4b29      	ldr	r3, [pc, #164]	; (401094 <main+0x16c>)
  400ff0:	4798      	blx	r3
	pwm_channel_enable_interrupt(PWM, PIN_PWM_LED0_CHANNEL, 0);
#endif

	/* Initialize PWM channel for LED1 */
	/* Period is center-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_CENTER;
  400ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ff6:	812b      	strh	r3, [r5, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  400ff8:	2701      	movs	r7, #1
  400ffa:	72af      	strb	r7, [r5, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  400ffc:	f8c5 a004 	str.w	sl, [r5, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  401000:	f8c5 9010 	str.w	r9, [r5, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  401004:	60ec      	str	r4, [r5, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
  401006:	602f      	str	r7, [r5, #0]
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  401008:	4629      	mov	r1, r5
  40100a:	4630      	mov	r0, r6
  40100c:	47c0      	blx	r8

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM0, PIN_PWM_LED1_CHANNEL, 0);
  40100e:	4622      	mov	r2, r4
  401010:	4639      	mov	r1, r7
  401012:	4630      	mov	r0, r6
  401014:	4b20      	ldr	r3, [pc, #128]	; (401098 <main+0x170>)
  401016:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401018:	4b20      	ldr	r3, [pc, #128]	; (40109c <main+0x174>)
  40101a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40101e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401022:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401026:	f883 431f 	strb.w	r4, [r3, #799]	; 0x31f
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40102a:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(PWM0_IRQn);
	NVIC_SetPriority(PWM0_IRQn, 0);
	NVIC_EnableIRQ(PWM0_IRQn);
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
  40102c:	4621      	mov	r1, r4
  40102e:	4630      	mov	r0, r6
  401030:	4c1b      	ldr	r4, [pc, #108]	; (4010a0 <main+0x178>)
  401032:	47a0      	blx	r4
	pwm_channel_enable(PWM0, PIN_PWM_LED1_CHANNEL);
  401034:	4639      	mov	r1, r7
  401036:	4630      	mov	r0, r6
  401038:	47a0      	blx	r4
  40103a:	e7fe      	b.n	40103a <main+0x112>
  40103c:	0040019d 	.word	0x0040019d
  401040:	00400299 	.word	0x00400299
  401044:	00400645 	.word	0x00400645
  401048:	40028000 	.word	0x40028000
  40104c:	20400924 	.word	0x20400924
  401050:	00400dcd 	.word	0x00400dcd
  401054:	20400920 	.word	0x20400920
  401058:	00400cf5 	.word	0x00400cf5
  40105c:	2040091c 	.word	0x2040091c
  401060:	08f0d180 	.word	0x08f0d180
  401064:	004009ad 	.word	0x004009ad
  401068:	00400a01 	.word	0x00400a01
  40106c:	00400a09 	.word	0x00400a09
  401070:	20400438 	.word	0x20400438
  401074:	0040120d 	.word	0x0040120d
  401078:	00402da0 	.word	0x00402da0
  40107c:	004011fd 	.word	0x004011fd
  401080:	40020000 	.word	0x40020000
  401084:	004008c5 	.word	0x004008c5
  401088:	000186a0 	.word	0x000186a0
  40108c:	004006ed 	.word	0x004006ed
  401090:	20400928 	.word	0x20400928
  401094:	004008d5 	.word	0x004008d5
  401098:	004008e9 	.word	0x004008e9
  40109c:	e000e100 	.word	0xe000e100
  4010a0:	004008b9 	.word	0x004008b9
  4010a4:	00400739 	.word	0x00400739

004010a8 <__libc_init_array>:
  4010a8:	b570      	push	{r4, r5, r6, lr}
  4010aa:	4e0f      	ldr	r6, [pc, #60]	; (4010e8 <__libc_init_array+0x40>)
  4010ac:	4d0f      	ldr	r5, [pc, #60]	; (4010ec <__libc_init_array+0x44>)
  4010ae:	1b76      	subs	r6, r6, r5
  4010b0:	10b6      	asrs	r6, r6, #2
  4010b2:	bf18      	it	ne
  4010b4:	2400      	movne	r4, #0
  4010b6:	d005      	beq.n	4010c4 <__libc_init_array+0x1c>
  4010b8:	3401      	adds	r4, #1
  4010ba:	f855 3b04 	ldr.w	r3, [r5], #4
  4010be:	4798      	blx	r3
  4010c0:	42a6      	cmp	r6, r4
  4010c2:	d1f9      	bne.n	4010b8 <__libc_init_array+0x10>
  4010c4:	4e0a      	ldr	r6, [pc, #40]	; (4010f0 <__libc_init_array+0x48>)
  4010c6:	4d0b      	ldr	r5, [pc, #44]	; (4010f4 <__libc_init_array+0x4c>)
  4010c8:	1b76      	subs	r6, r6, r5
  4010ca:	f001 fe97 	bl	402dfc <_init>
  4010ce:	10b6      	asrs	r6, r6, #2
  4010d0:	bf18      	it	ne
  4010d2:	2400      	movne	r4, #0
  4010d4:	d006      	beq.n	4010e4 <__libc_init_array+0x3c>
  4010d6:	3401      	adds	r4, #1
  4010d8:	f855 3b04 	ldr.w	r3, [r5], #4
  4010dc:	4798      	blx	r3
  4010de:	42a6      	cmp	r6, r4
  4010e0:	d1f9      	bne.n	4010d6 <__libc_init_array+0x2e>
  4010e2:	bd70      	pop	{r4, r5, r6, pc}
  4010e4:	bd70      	pop	{r4, r5, r6, pc}
  4010e6:	bf00      	nop
  4010e8:	00402e08 	.word	0x00402e08
  4010ec:	00402e08 	.word	0x00402e08
  4010f0:	00402e10 	.word	0x00402e10
  4010f4:	00402e08 	.word	0x00402e08

004010f8 <memset>:
  4010f8:	b470      	push	{r4, r5, r6}
  4010fa:	0784      	lsls	r4, r0, #30
  4010fc:	d046      	beq.n	40118c <memset+0x94>
  4010fe:	1e54      	subs	r4, r2, #1
  401100:	2a00      	cmp	r2, #0
  401102:	d041      	beq.n	401188 <memset+0x90>
  401104:	b2cd      	uxtb	r5, r1
  401106:	4603      	mov	r3, r0
  401108:	e002      	b.n	401110 <memset+0x18>
  40110a:	1e62      	subs	r2, r4, #1
  40110c:	b3e4      	cbz	r4, 401188 <memset+0x90>
  40110e:	4614      	mov	r4, r2
  401110:	f803 5b01 	strb.w	r5, [r3], #1
  401114:	079a      	lsls	r2, r3, #30
  401116:	d1f8      	bne.n	40110a <memset+0x12>
  401118:	2c03      	cmp	r4, #3
  40111a:	d92e      	bls.n	40117a <memset+0x82>
  40111c:	b2cd      	uxtb	r5, r1
  40111e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401122:	2c0f      	cmp	r4, #15
  401124:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401128:	d919      	bls.n	40115e <memset+0x66>
  40112a:	f103 0210 	add.w	r2, r3, #16
  40112e:	4626      	mov	r6, r4
  401130:	3e10      	subs	r6, #16
  401132:	2e0f      	cmp	r6, #15
  401134:	f842 5c10 	str.w	r5, [r2, #-16]
  401138:	f842 5c0c 	str.w	r5, [r2, #-12]
  40113c:	f842 5c08 	str.w	r5, [r2, #-8]
  401140:	f842 5c04 	str.w	r5, [r2, #-4]
  401144:	f102 0210 	add.w	r2, r2, #16
  401148:	d8f2      	bhi.n	401130 <memset+0x38>
  40114a:	f1a4 0210 	sub.w	r2, r4, #16
  40114e:	f022 020f 	bic.w	r2, r2, #15
  401152:	f004 040f 	and.w	r4, r4, #15
  401156:	3210      	adds	r2, #16
  401158:	2c03      	cmp	r4, #3
  40115a:	4413      	add	r3, r2
  40115c:	d90d      	bls.n	40117a <memset+0x82>
  40115e:	461e      	mov	r6, r3
  401160:	4622      	mov	r2, r4
  401162:	3a04      	subs	r2, #4
  401164:	2a03      	cmp	r2, #3
  401166:	f846 5b04 	str.w	r5, [r6], #4
  40116a:	d8fa      	bhi.n	401162 <memset+0x6a>
  40116c:	1f22      	subs	r2, r4, #4
  40116e:	f022 0203 	bic.w	r2, r2, #3
  401172:	3204      	adds	r2, #4
  401174:	4413      	add	r3, r2
  401176:	f004 0403 	and.w	r4, r4, #3
  40117a:	b12c      	cbz	r4, 401188 <memset+0x90>
  40117c:	b2c9      	uxtb	r1, r1
  40117e:	441c      	add	r4, r3
  401180:	f803 1b01 	strb.w	r1, [r3], #1
  401184:	42a3      	cmp	r3, r4
  401186:	d1fb      	bne.n	401180 <memset+0x88>
  401188:	bc70      	pop	{r4, r5, r6}
  40118a:	4770      	bx	lr
  40118c:	4614      	mov	r4, r2
  40118e:	4603      	mov	r3, r0
  401190:	e7c2      	b.n	401118 <memset+0x20>
  401192:	bf00      	nop

00401194 <_puts_r>:
  401194:	b5f0      	push	{r4, r5, r6, r7, lr}
  401196:	4605      	mov	r5, r0
  401198:	b089      	sub	sp, #36	; 0x24
  40119a:	4608      	mov	r0, r1
  40119c:	460c      	mov	r4, r1
  40119e:	f000 f8ef 	bl	401380 <strlen>
  4011a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4011a4:	4f14      	ldr	r7, [pc, #80]	; (4011f8 <_puts_r+0x64>)
  4011a6:	9404      	str	r4, [sp, #16]
  4011a8:	2601      	movs	r6, #1
  4011aa:	1c44      	adds	r4, r0, #1
  4011ac:	a904      	add	r1, sp, #16
  4011ae:	2202      	movs	r2, #2
  4011b0:	9403      	str	r4, [sp, #12]
  4011b2:	9005      	str	r0, [sp, #20]
  4011b4:	68ac      	ldr	r4, [r5, #8]
  4011b6:	9706      	str	r7, [sp, #24]
  4011b8:	9607      	str	r6, [sp, #28]
  4011ba:	9101      	str	r1, [sp, #4]
  4011bc:	9202      	str	r2, [sp, #8]
  4011be:	b1b3      	cbz	r3, 4011ee <_puts_r+0x5a>
  4011c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4011c4:	049a      	lsls	r2, r3, #18
  4011c6:	d406      	bmi.n	4011d6 <_puts_r+0x42>
  4011c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4011ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4011ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4011d2:	81a3      	strh	r3, [r4, #12]
  4011d4:	6662      	str	r2, [r4, #100]	; 0x64
  4011d6:	4621      	mov	r1, r4
  4011d8:	4628      	mov	r0, r5
  4011da:	aa01      	add	r2, sp, #4
  4011dc:	f000 fbda 	bl	401994 <__sfvwrite_r>
  4011e0:	2800      	cmp	r0, #0
  4011e2:	bf14      	ite	ne
  4011e4:	f04f 30ff 	movne.w	r0, #4294967295
  4011e8:	200a      	moveq	r0, #10
  4011ea:	b009      	add	sp, #36	; 0x24
  4011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4011ee:	4628      	mov	r0, r5
  4011f0:	f000 fa7c 	bl	4016ec <__sinit>
  4011f4:	e7e4      	b.n	4011c0 <_puts_r+0x2c>
  4011f6:	bf00      	nop
  4011f8:	00402df8 	.word	0x00402df8

004011fc <puts>:
  4011fc:	4b02      	ldr	r3, [pc, #8]	; (401208 <puts+0xc>)
  4011fe:	4601      	mov	r1, r0
  401200:	6818      	ldr	r0, [r3, #0]
  401202:	f7ff bfc7 	b.w	401194 <_puts_r>
  401206:	bf00      	nop
  401208:	20400438 	.word	0x20400438

0040120c <setbuf>:
  40120c:	2900      	cmp	r1, #0
  40120e:	bf0c      	ite	eq
  401210:	2202      	moveq	r2, #2
  401212:	2200      	movne	r2, #0
  401214:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401218:	f000 b800 	b.w	40121c <setvbuf>

0040121c <setvbuf>:
  40121c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401220:	4c51      	ldr	r4, [pc, #324]	; (401368 <setvbuf+0x14c>)
  401222:	6825      	ldr	r5, [r4, #0]
  401224:	b083      	sub	sp, #12
  401226:	4604      	mov	r4, r0
  401228:	460f      	mov	r7, r1
  40122a:	4690      	mov	r8, r2
  40122c:	461e      	mov	r6, r3
  40122e:	b115      	cbz	r5, 401236 <setvbuf+0x1a>
  401230:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401232:	2b00      	cmp	r3, #0
  401234:	d079      	beq.n	40132a <setvbuf+0x10e>
  401236:	f1b8 0f02 	cmp.w	r8, #2
  40123a:	d004      	beq.n	401246 <setvbuf+0x2a>
  40123c:	f1b8 0f01 	cmp.w	r8, #1
  401240:	d87f      	bhi.n	401342 <setvbuf+0x126>
  401242:	2e00      	cmp	r6, #0
  401244:	db7d      	blt.n	401342 <setvbuf+0x126>
  401246:	4621      	mov	r1, r4
  401248:	4628      	mov	r0, r5
  40124a:	f000 f9bb 	bl	4015c4 <_fflush_r>
  40124e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401250:	b141      	cbz	r1, 401264 <setvbuf+0x48>
  401252:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401256:	4299      	cmp	r1, r3
  401258:	d002      	beq.n	401260 <setvbuf+0x44>
  40125a:	4628      	mov	r0, r5
  40125c:	f000 fab2 	bl	4017c4 <_free_r>
  401260:	2300      	movs	r3, #0
  401262:	6323      	str	r3, [r4, #48]	; 0x30
  401264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401268:	2200      	movs	r2, #0
  40126a:	61a2      	str	r2, [r4, #24]
  40126c:	6062      	str	r2, [r4, #4]
  40126e:	061a      	lsls	r2, r3, #24
  401270:	d454      	bmi.n	40131c <setvbuf+0x100>
  401272:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401276:	f023 0303 	bic.w	r3, r3, #3
  40127a:	f1b8 0f02 	cmp.w	r8, #2
  40127e:	81a3      	strh	r3, [r4, #12]
  401280:	d039      	beq.n	4012f6 <setvbuf+0xda>
  401282:	ab01      	add	r3, sp, #4
  401284:	466a      	mov	r2, sp
  401286:	4621      	mov	r1, r4
  401288:	4628      	mov	r0, r5
  40128a:	f000 fd2f 	bl	401cec <__swhatbuf_r>
  40128e:	89a3      	ldrh	r3, [r4, #12]
  401290:	4318      	orrs	r0, r3
  401292:	81a0      	strh	r0, [r4, #12]
  401294:	b326      	cbz	r6, 4012e0 <setvbuf+0xc4>
  401296:	b327      	cbz	r7, 4012e2 <setvbuf+0xc6>
  401298:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40129a:	2b00      	cmp	r3, #0
  40129c:	d04d      	beq.n	40133a <setvbuf+0x11e>
  40129e:	9b00      	ldr	r3, [sp, #0]
  4012a0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4012a4:	6027      	str	r7, [r4, #0]
  4012a6:	429e      	cmp	r6, r3
  4012a8:	bf1c      	itt	ne
  4012aa:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4012ae:	81a0      	strhne	r0, [r4, #12]
  4012b0:	f1b8 0f01 	cmp.w	r8, #1
  4012b4:	bf08      	it	eq
  4012b6:	f040 0001 	orreq.w	r0, r0, #1
  4012ba:	b283      	uxth	r3, r0
  4012bc:	bf08      	it	eq
  4012be:	81a0      	strheq	r0, [r4, #12]
  4012c0:	f003 0008 	and.w	r0, r3, #8
  4012c4:	b280      	uxth	r0, r0
  4012c6:	6127      	str	r7, [r4, #16]
  4012c8:	6166      	str	r6, [r4, #20]
  4012ca:	b318      	cbz	r0, 401314 <setvbuf+0xf8>
  4012cc:	f013 0001 	ands.w	r0, r3, #1
  4012d0:	d02f      	beq.n	401332 <setvbuf+0x116>
  4012d2:	2000      	movs	r0, #0
  4012d4:	4276      	negs	r6, r6
  4012d6:	61a6      	str	r6, [r4, #24]
  4012d8:	60a0      	str	r0, [r4, #8]
  4012da:	b003      	add	sp, #12
  4012dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4012e0:	9e00      	ldr	r6, [sp, #0]
  4012e2:	4630      	mov	r0, r6
  4012e4:	f000 fd76 	bl	401dd4 <malloc>
  4012e8:	4607      	mov	r7, r0
  4012ea:	b368      	cbz	r0, 401348 <setvbuf+0x12c>
  4012ec:	89a3      	ldrh	r3, [r4, #12]
  4012ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4012f2:	81a3      	strh	r3, [r4, #12]
  4012f4:	e7d0      	b.n	401298 <setvbuf+0x7c>
  4012f6:	2000      	movs	r0, #0
  4012f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4012fc:	f043 0302 	orr.w	r3, r3, #2
  401300:	2500      	movs	r5, #0
  401302:	2101      	movs	r1, #1
  401304:	81a3      	strh	r3, [r4, #12]
  401306:	60a5      	str	r5, [r4, #8]
  401308:	6022      	str	r2, [r4, #0]
  40130a:	6122      	str	r2, [r4, #16]
  40130c:	6161      	str	r1, [r4, #20]
  40130e:	b003      	add	sp, #12
  401310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401314:	60a0      	str	r0, [r4, #8]
  401316:	b003      	add	sp, #12
  401318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40131c:	6921      	ldr	r1, [r4, #16]
  40131e:	4628      	mov	r0, r5
  401320:	f000 fa50 	bl	4017c4 <_free_r>
  401324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401328:	e7a3      	b.n	401272 <setvbuf+0x56>
  40132a:	4628      	mov	r0, r5
  40132c:	f000 f9de 	bl	4016ec <__sinit>
  401330:	e781      	b.n	401236 <setvbuf+0x1a>
  401332:	60a6      	str	r6, [r4, #8]
  401334:	b003      	add	sp, #12
  401336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40133a:	4628      	mov	r0, r5
  40133c:	f000 f9d6 	bl	4016ec <__sinit>
  401340:	e7ad      	b.n	40129e <setvbuf+0x82>
  401342:	f04f 30ff 	mov.w	r0, #4294967295
  401346:	e7e2      	b.n	40130e <setvbuf+0xf2>
  401348:	f8dd 9000 	ldr.w	r9, [sp]
  40134c:	45b1      	cmp	r9, r6
  40134e:	d006      	beq.n	40135e <setvbuf+0x142>
  401350:	4648      	mov	r0, r9
  401352:	f000 fd3f 	bl	401dd4 <malloc>
  401356:	4607      	mov	r7, r0
  401358:	b108      	cbz	r0, 40135e <setvbuf+0x142>
  40135a:	464e      	mov	r6, r9
  40135c:	e7c6      	b.n	4012ec <setvbuf+0xd0>
  40135e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401362:	f04f 30ff 	mov.w	r0, #4294967295
  401366:	e7c7      	b.n	4012f8 <setvbuf+0xdc>
  401368:	20400438 	.word	0x20400438
	...

00401380 <strlen>:
  401380:	f890 f000 	pld	[r0]
  401384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401388:	f020 0107 	bic.w	r1, r0, #7
  40138c:	f06f 0c00 	mvn.w	ip, #0
  401390:	f010 0407 	ands.w	r4, r0, #7
  401394:	f891 f020 	pld	[r1, #32]
  401398:	f040 8049 	bne.w	40142e <strlen+0xae>
  40139c:	f04f 0400 	mov.w	r4, #0
  4013a0:	f06f 0007 	mvn.w	r0, #7
  4013a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4013a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4013ac:	f100 0008 	add.w	r0, r0, #8
  4013b0:	fa82 f24c 	uadd8	r2, r2, ip
  4013b4:	faa4 f28c 	sel	r2, r4, ip
  4013b8:	fa83 f34c 	uadd8	r3, r3, ip
  4013bc:	faa2 f38c 	sel	r3, r2, ip
  4013c0:	bb4b      	cbnz	r3, 401416 <strlen+0x96>
  4013c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4013c6:	fa82 f24c 	uadd8	r2, r2, ip
  4013ca:	f100 0008 	add.w	r0, r0, #8
  4013ce:	faa4 f28c 	sel	r2, r4, ip
  4013d2:	fa83 f34c 	uadd8	r3, r3, ip
  4013d6:	faa2 f38c 	sel	r3, r2, ip
  4013da:	b9e3      	cbnz	r3, 401416 <strlen+0x96>
  4013dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4013e0:	fa82 f24c 	uadd8	r2, r2, ip
  4013e4:	f100 0008 	add.w	r0, r0, #8
  4013e8:	faa4 f28c 	sel	r2, r4, ip
  4013ec:	fa83 f34c 	uadd8	r3, r3, ip
  4013f0:	faa2 f38c 	sel	r3, r2, ip
  4013f4:	b97b      	cbnz	r3, 401416 <strlen+0x96>
  4013f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4013fa:	f101 0120 	add.w	r1, r1, #32
  4013fe:	fa82 f24c 	uadd8	r2, r2, ip
  401402:	f100 0008 	add.w	r0, r0, #8
  401406:	faa4 f28c 	sel	r2, r4, ip
  40140a:	fa83 f34c 	uadd8	r3, r3, ip
  40140e:	faa2 f38c 	sel	r3, r2, ip
  401412:	2b00      	cmp	r3, #0
  401414:	d0c6      	beq.n	4013a4 <strlen+0x24>
  401416:	2a00      	cmp	r2, #0
  401418:	bf04      	itt	eq
  40141a:	3004      	addeq	r0, #4
  40141c:	461a      	moveq	r2, r3
  40141e:	ba12      	rev	r2, r2
  401420:	fab2 f282 	clz	r2, r2
  401424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40142c:	4770      	bx	lr
  40142e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401432:	f004 0503 	and.w	r5, r4, #3
  401436:	f1c4 0000 	rsb	r0, r4, #0
  40143a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40143e:	f014 0f04 	tst.w	r4, #4
  401442:	f891 f040 	pld	[r1, #64]	; 0x40
  401446:	fa0c f505 	lsl.w	r5, ip, r5
  40144a:	ea62 0205 	orn	r2, r2, r5
  40144e:	bf1c      	itt	ne
  401450:	ea63 0305 	ornne	r3, r3, r5
  401454:	4662      	movne	r2, ip
  401456:	f04f 0400 	mov.w	r4, #0
  40145a:	e7a9      	b.n	4013b0 <strlen+0x30>

0040145c <register_fini>:
  40145c:	4b02      	ldr	r3, [pc, #8]	; (401468 <register_fini+0xc>)
  40145e:	b113      	cbz	r3, 401466 <register_fini+0xa>
  401460:	4802      	ldr	r0, [pc, #8]	; (40146c <register_fini+0x10>)
  401462:	f000 b805 	b.w	401470 <atexit>
  401466:	4770      	bx	lr
  401468:	00000000 	.word	0x00000000
  40146c:	00401701 	.word	0x00401701

00401470 <atexit>:
  401470:	2300      	movs	r3, #0
  401472:	4601      	mov	r1, r0
  401474:	461a      	mov	r2, r3
  401476:	4618      	mov	r0, r3
  401478:	f001 bb84 	b.w	402b84 <__register_exitproc>

0040147c <__sflush_r>:
  40147c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401480:	b29a      	uxth	r2, r3
  401482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401486:	460d      	mov	r5, r1
  401488:	0711      	lsls	r1, r2, #28
  40148a:	4680      	mov	r8, r0
  40148c:	d43c      	bmi.n	401508 <__sflush_r+0x8c>
  40148e:	686a      	ldr	r2, [r5, #4]
  401490:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401494:	2a00      	cmp	r2, #0
  401496:	81ab      	strh	r3, [r5, #12]
  401498:	dd73      	ble.n	401582 <__sflush_r+0x106>
  40149a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40149c:	2c00      	cmp	r4, #0
  40149e:	d04b      	beq.n	401538 <__sflush_r+0xbc>
  4014a0:	b29b      	uxth	r3, r3
  4014a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4014a6:	2100      	movs	r1, #0
  4014a8:	b292      	uxth	r2, r2
  4014aa:	f8d8 6000 	ldr.w	r6, [r8]
  4014ae:	f8c8 1000 	str.w	r1, [r8]
  4014b2:	2a00      	cmp	r2, #0
  4014b4:	d069      	beq.n	40158a <__sflush_r+0x10e>
  4014b6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4014b8:	075f      	lsls	r7, r3, #29
  4014ba:	d505      	bpl.n	4014c8 <__sflush_r+0x4c>
  4014bc:	6869      	ldr	r1, [r5, #4]
  4014be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4014c0:	1a52      	subs	r2, r2, r1
  4014c2:	b10b      	cbz	r3, 4014c8 <__sflush_r+0x4c>
  4014c4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4014c6:	1ad2      	subs	r2, r2, r3
  4014c8:	2300      	movs	r3, #0
  4014ca:	69e9      	ldr	r1, [r5, #28]
  4014cc:	4640      	mov	r0, r8
  4014ce:	47a0      	blx	r4
  4014d0:	1c44      	adds	r4, r0, #1
  4014d2:	d03c      	beq.n	40154e <__sflush_r+0xd2>
  4014d4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4014d8:	692a      	ldr	r2, [r5, #16]
  4014da:	602a      	str	r2, [r5, #0]
  4014dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4014e0:	2200      	movs	r2, #0
  4014e2:	81ab      	strh	r3, [r5, #12]
  4014e4:	04db      	lsls	r3, r3, #19
  4014e6:	606a      	str	r2, [r5, #4]
  4014e8:	d449      	bmi.n	40157e <__sflush_r+0x102>
  4014ea:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4014ec:	f8c8 6000 	str.w	r6, [r8]
  4014f0:	b311      	cbz	r1, 401538 <__sflush_r+0xbc>
  4014f2:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4014f6:	4299      	cmp	r1, r3
  4014f8:	d002      	beq.n	401500 <__sflush_r+0x84>
  4014fa:	4640      	mov	r0, r8
  4014fc:	f000 f962 	bl	4017c4 <_free_r>
  401500:	2000      	movs	r0, #0
  401502:	6328      	str	r0, [r5, #48]	; 0x30
  401504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401508:	692e      	ldr	r6, [r5, #16]
  40150a:	b1ae      	cbz	r6, 401538 <__sflush_r+0xbc>
  40150c:	682c      	ldr	r4, [r5, #0]
  40150e:	602e      	str	r6, [r5, #0]
  401510:	0790      	lsls	r0, r2, #30
  401512:	bf0c      	ite	eq
  401514:	696b      	ldreq	r3, [r5, #20]
  401516:	2300      	movne	r3, #0
  401518:	1ba4      	subs	r4, r4, r6
  40151a:	60ab      	str	r3, [r5, #8]
  40151c:	e00a      	b.n	401534 <__sflush_r+0xb8>
  40151e:	4623      	mov	r3, r4
  401520:	4632      	mov	r2, r6
  401522:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  401524:	69e9      	ldr	r1, [r5, #28]
  401526:	4640      	mov	r0, r8
  401528:	47b8      	blx	r7
  40152a:	2800      	cmp	r0, #0
  40152c:	eba4 0400 	sub.w	r4, r4, r0
  401530:	4406      	add	r6, r0
  401532:	dd04      	ble.n	40153e <__sflush_r+0xc2>
  401534:	2c00      	cmp	r4, #0
  401536:	dcf2      	bgt.n	40151e <__sflush_r+0xa2>
  401538:	2000      	movs	r0, #0
  40153a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40153e:	89ab      	ldrh	r3, [r5, #12]
  401540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401544:	81ab      	strh	r3, [r5, #12]
  401546:	f04f 30ff 	mov.w	r0, #4294967295
  40154a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40154e:	f8d8 2000 	ldr.w	r2, [r8]
  401552:	2a1d      	cmp	r2, #29
  401554:	d8f3      	bhi.n	40153e <__sflush_r+0xc2>
  401556:	4b1a      	ldr	r3, [pc, #104]	; (4015c0 <__sflush_r+0x144>)
  401558:	40d3      	lsrs	r3, r2
  40155a:	f003 0301 	and.w	r3, r3, #1
  40155e:	f083 0401 	eor.w	r4, r3, #1
  401562:	2b00      	cmp	r3, #0
  401564:	d0eb      	beq.n	40153e <__sflush_r+0xc2>
  401566:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40156a:	6929      	ldr	r1, [r5, #16]
  40156c:	6029      	str	r1, [r5, #0]
  40156e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401572:	04d9      	lsls	r1, r3, #19
  401574:	606c      	str	r4, [r5, #4]
  401576:	81ab      	strh	r3, [r5, #12]
  401578:	d5b7      	bpl.n	4014ea <__sflush_r+0x6e>
  40157a:	2a00      	cmp	r2, #0
  40157c:	d1b5      	bne.n	4014ea <__sflush_r+0x6e>
  40157e:	6528      	str	r0, [r5, #80]	; 0x50
  401580:	e7b3      	b.n	4014ea <__sflush_r+0x6e>
  401582:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401584:	2a00      	cmp	r2, #0
  401586:	dc88      	bgt.n	40149a <__sflush_r+0x1e>
  401588:	e7d6      	b.n	401538 <__sflush_r+0xbc>
  40158a:	2301      	movs	r3, #1
  40158c:	69e9      	ldr	r1, [r5, #28]
  40158e:	4640      	mov	r0, r8
  401590:	47a0      	blx	r4
  401592:	1c43      	adds	r3, r0, #1
  401594:	4602      	mov	r2, r0
  401596:	d002      	beq.n	40159e <__sflush_r+0x122>
  401598:	89ab      	ldrh	r3, [r5, #12]
  40159a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40159c:	e78c      	b.n	4014b8 <__sflush_r+0x3c>
  40159e:	f8d8 3000 	ldr.w	r3, [r8]
  4015a2:	2b00      	cmp	r3, #0
  4015a4:	d0f8      	beq.n	401598 <__sflush_r+0x11c>
  4015a6:	2b1d      	cmp	r3, #29
  4015a8:	d001      	beq.n	4015ae <__sflush_r+0x132>
  4015aa:	2b16      	cmp	r3, #22
  4015ac:	d102      	bne.n	4015b4 <__sflush_r+0x138>
  4015ae:	f8c8 6000 	str.w	r6, [r8]
  4015b2:	e7c1      	b.n	401538 <__sflush_r+0xbc>
  4015b4:	89ab      	ldrh	r3, [r5, #12]
  4015b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4015ba:	81ab      	strh	r3, [r5, #12]
  4015bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015c0:	20400001 	.word	0x20400001

004015c4 <_fflush_r>:
  4015c4:	b510      	push	{r4, lr}
  4015c6:	4604      	mov	r4, r0
  4015c8:	b082      	sub	sp, #8
  4015ca:	b108      	cbz	r0, 4015d0 <_fflush_r+0xc>
  4015cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4015ce:	b153      	cbz	r3, 4015e6 <_fflush_r+0x22>
  4015d0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4015d4:	b908      	cbnz	r0, 4015da <_fflush_r+0x16>
  4015d6:	b002      	add	sp, #8
  4015d8:	bd10      	pop	{r4, pc}
  4015da:	4620      	mov	r0, r4
  4015dc:	b002      	add	sp, #8
  4015de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4015e2:	f7ff bf4b 	b.w	40147c <__sflush_r>
  4015e6:	9101      	str	r1, [sp, #4]
  4015e8:	f000 f880 	bl	4016ec <__sinit>
  4015ec:	9901      	ldr	r1, [sp, #4]
  4015ee:	e7ef      	b.n	4015d0 <_fflush_r+0xc>

004015f0 <_cleanup_r>:
  4015f0:	4901      	ldr	r1, [pc, #4]	; (4015f8 <_cleanup_r+0x8>)
  4015f2:	f000 bb51 	b.w	401c98 <_fwalk_reent>
  4015f6:	bf00      	nop
  4015f8:	00402c4d 	.word	0x00402c4d

004015fc <__sinit.part.1>:
  4015fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401600:	4b35      	ldr	r3, [pc, #212]	; (4016d8 <__sinit.part.1+0xdc>)
  401602:	6845      	ldr	r5, [r0, #4]
  401604:	63c3      	str	r3, [r0, #60]	; 0x3c
  401606:	2400      	movs	r4, #0
  401608:	4607      	mov	r7, r0
  40160a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40160e:	2304      	movs	r3, #4
  401610:	2103      	movs	r1, #3
  401612:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  401616:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40161a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40161e:	b083      	sub	sp, #12
  401620:	602c      	str	r4, [r5, #0]
  401622:	606c      	str	r4, [r5, #4]
  401624:	60ac      	str	r4, [r5, #8]
  401626:	666c      	str	r4, [r5, #100]	; 0x64
  401628:	81ec      	strh	r4, [r5, #14]
  40162a:	612c      	str	r4, [r5, #16]
  40162c:	616c      	str	r4, [r5, #20]
  40162e:	61ac      	str	r4, [r5, #24]
  401630:	81ab      	strh	r3, [r5, #12]
  401632:	4621      	mov	r1, r4
  401634:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  401638:	2208      	movs	r2, #8
  40163a:	f7ff fd5d 	bl	4010f8 <memset>
  40163e:	68be      	ldr	r6, [r7, #8]
  401640:	f8df b098 	ldr.w	fp, [pc, #152]	; 4016dc <__sinit.part.1+0xe0>
  401644:	f8df a098 	ldr.w	sl, [pc, #152]	; 4016e0 <__sinit.part.1+0xe4>
  401648:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4016e4 <__sinit.part.1+0xe8>
  40164c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4016e8 <__sinit.part.1+0xec>
  401650:	f8c5 b020 	str.w	fp, [r5, #32]
  401654:	2301      	movs	r3, #1
  401656:	2209      	movs	r2, #9
  401658:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40165c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  401660:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401664:	61ed      	str	r5, [r5, #28]
  401666:	4621      	mov	r1, r4
  401668:	81f3      	strh	r3, [r6, #14]
  40166a:	81b2      	strh	r2, [r6, #12]
  40166c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  401670:	6034      	str	r4, [r6, #0]
  401672:	6074      	str	r4, [r6, #4]
  401674:	60b4      	str	r4, [r6, #8]
  401676:	6674      	str	r4, [r6, #100]	; 0x64
  401678:	6134      	str	r4, [r6, #16]
  40167a:	6174      	str	r4, [r6, #20]
  40167c:	61b4      	str	r4, [r6, #24]
  40167e:	2208      	movs	r2, #8
  401680:	9301      	str	r3, [sp, #4]
  401682:	f7ff fd39 	bl	4010f8 <memset>
  401686:	68fd      	ldr	r5, [r7, #12]
  401688:	61f6      	str	r6, [r6, #28]
  40168a:	2012      	movs	r0, #18
  40168c:	2202      	movs	r2, #2
  40168e:	f8c6 b020 	str.w	fp, [r6, #32]
  401692:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  401696:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40169a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40169e:	4621      	mov	r1, r4
  4016a0:	81a8      	strh	r0, [r5, #12]
  4016a2:	81ea      	strh	r2, [r5, #14]
  4016a4:	602c      	str	r4, [r5, #0]
  4016a6:	606c      	str	r4, [r5, #4]
  4016a8:	60ac      	str	r4, [r5, #8]
  4016aa:	666c      	str	r4, [r5, #100]	; 0x64
  4016ac:	612c      	str	r4, [r5, #16]
  4016ae:	616c      	str	r4, [r5, #20]
  4016b0:	61ac      	str	r4, [r5, #24]
  4016b2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4016b6:	2208      	movs	r2, #8
  4016b8:	f7ff fd1e 	bl	4010f8 <memset>
  4016bc:	9b01      	ldr	r3, [sp, #4]
  4016be:	61ed      	str	r5, [r5, #28]
  4016c0:	f8c5 b020 	str.w	fp, [r5, #32]
  4016c4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4016c8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4016cc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4016d0:	63bb      	str	r3, [r7, #56]	; 0x38
  4016d2:	b003      	add	sp, #12
  4016d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016d8:	004015f1 	.word	0x004015f1
  4016dc:	00402a09 	.word	0x00402a09
  4016e0:	00402a2d 	.word	0x00402a2d
  4016e4:	00402a69 	.word	0x00402a69
  4016e8:	00402a89 	.word	0x00402a89

004016ec <__sinit>:
  4016ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4016ee:	b103      	cbz	r3, 4016f2 <__sinit+0x6>
  4016f0:	4770      	bx	lr
  4016f2:	f7ff bf83 	b.w	4015fc <__sinit.part.1>
  4016f6:	bf00      	nop

004016f8 <__sfp_lock_acquire>:
  4016f8:	4770      	bx	lr
  4016fa:	bf00      	nop

004016fc <__sfp_lock_release>:
  4016fc:	4770      	bx	lr
  4016fe:	bf00      	nop

00401700 <__libc_fini_array>:
  401700:	b538      	push	{r3, r4, r5, lr}
  401702:	4d07      	ldr	r5, [pc, #28]	; (401720 <__libc_fini_array+0x20>)
  401704:	4c07      	ldr	r4, [pc, #28]	; (401724 <__libc_fini_array+0x24>)
  401706:	1b2c      	subs	r4, r5, r4
  401708:	10a4      	asrs	r4, r4, #2
  40170a:	d005      	beq.n	401718 <__libc_fini_array+0x18>
  40170c:	3c01      	subs	r4, #1
  40170e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  401712:	4798      	blx	r3
  401714:	2c00      	cmp	r4, #0
  401716:	d1f9      	bne.n	40170c <__libc_fini_array+0xc>
  401718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40171c:	f001 bb78 	b.w	402e10 <_fini>
  401720:	00402e20 	.word	0x00402e20
  401724:	00402e1c 	.word	0x00402e1c

00401728 <_malloc_trim_r>:
  401728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40172a:	4f23      	ldr	r7, [pc, #140]	; (4017b8 <_malloc_trim_r+0x90>)
  40172c:	460c      	mov	r4, r1
  40172e:	4606      	mov	r6, r0
  401730:	f000 ff64 	bl	4025fc <__malloc_lock>
  401734:	68bb      	ldr	r3, [r7, #8]
  401736:	685d      	ldr	r5, [r3, #4]
  401738:	f025 0503 	bic.w	r5, r5, #3
  40173c:	1b29      	subs	r1, r5, r4
  40173e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  401742:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  401746:	f021 010f 	bic.w	r1, r1, #15
  40174a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40174e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401752:	db07      	blt.n	401764 <_malloc_trim_r+0x3c>
  401754:	2100      	movs	r1, #0
  401756:	4630      	mov	r0, r6
  401758:	f001 f944 	bl	4029e4 <_sbrk_r>
  40175c:	68bb      	ldr	r3, [r7, #8]
  40175e:	442b      	add	r3, r5
  401760:	4298      	cmp	r0, r3
  401762:	d004      	beq.n	40176e <_malloc_trim_r+0x46>
  401764:	4630      	mov	r0, r6
  401766:	f000 ff4b 	bl	402600 <__malloc_unlock>
  40176a:	2000      	movs	r0, #0
  40176c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40176e:	4261      	negs	r1, r4
  401770:	4630      	mov	r0, r6
  401772:	f001 f937 	bl	4029e4 <_sbrk_r>
  401776:	3001      	adds	r0, #1
  401778:	d00d      	beq.n	401796 <_malloc_trim_r+0x6e>
  40177a:	4b10      	ldr	r3, [pc, #64]	; (4017bc <_malloc_trim_r+0x94>)
  40177c:	68ba      	ldr	r2, [r7, #8]
  40177e:	6819      	ldr	r1, [r3, #0]
  401780:	1b2d      	subs	r5, r5, r4
  401782:	f045 0501 	orr.w	r5, r5, #1
  401786:	4630      	mov	r0, r6
  401788:	1b09      	subs	r1, r1, r4
  40178a:	6055      	str	r5, [r2, #4]
  40178c:	6019      	str	r1, [r3, #0]
  40178e:	f000 ff37 	bl	402600 <__malloc_unlock>
  401792:	2001      	movs	r0, #1
  401794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401796:	2100      	movs	r1, #0
  401798:	4630      	mov	r0, r6
  40179a:	f001 f923 	bl	4029e4 <_sbrk_r>
  40179e:	68ba      	ldr	r2, [r7, #8]
  4017a0:	1a83      	subs	r3, r0, r2
  4017a2:	2b0f      	cmp	r3, #15
  4017a4:	ddde      	ble.n	401764 <_malloc_trim_r+0x3c>
  4017a6:	4c06      	ldr	r4, [pc, #24]	; (4017c0 <_malloc_trim_r+0x98>)
  4017a8:	4904      	ldr	r1, [pc, #16]	; (4017bc <_malloc_trim_r+0x94>)
  4017aa:	6824      	ldr	r4, [r4, #0]
  4017ac:	f043 0301 	orr.w	r3, r3, #1
  4017b0:	1b00      	subs	r0, r0, r4
  4017b2:	6053      	str	r3, [r2, #4]
  4017b4:	6008      	str	r0, [r1, #0]
  4017b6:	e7d5      	b.n	401764 <_malloc_trim_r+0x3c>
  4017b8:	2040043c 	.word	0x2040043c
  4017bc:	204008f4 	.word	0x204008f4
  4017c0:	20400848 	.word	0x20400848

004017c4 <_free_r>:
  4017c4:	2900      	cmp	r1, #0
  4017c6:	d045      	beq.n	401854 <_free_r+0x90>
  4017c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4017cc:	460d      	mov	r5, r1
  4017ce:	4680      	mov	r8, r0
  4017d0:	f000 ff14 	bl	4025fc <__malloc_lock>
  4017d4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4017d8:	496a      	ldr	r1, [pc, #424]	; (401984 <_free_r+0x1c0>)
  4017da:	f027 0301 	bic.w	r3, r7, #1
  4017de:	f1a5 0408 	sub.w	r4, r5, #8
  4017e2:	18e2      	adds	r2, r4, r3
  4017e4:	688e      	ldr	r6, [r1, #8]
  4017e6:	6850      	ldr	r0, [r2, #4]
  4017e8:	42b2      	cmp	r2, r6
  4017ea:	f020 0003 	bic.w	r0, r0, #3
  4017ee:	d062      	beq.n	4018b6 <_free_r+0xf2>
  4017f0:	07fe      	lsls	r6, r7, #31
  4017f2:	6050      	str	r0, [r2, #4]
  4017f4:	d40b      	bmi.n	40180e <_free_r+0x4a>
  4017f6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4017fa:	1be4      	subs	r4, r4, r7
  4017fc:	f101 0e08 	add.w	lr, r1, #8
  401800:	68a5      	ldr	r5, [r4, #8]
  401802:	4575      	cmp	r5, lr
  401804:	443b      	add	r3, r7
  401806:	d06f      	beq.n	4018e8 <_free_r+0x124>
  401808:	68e7      	ldr	r7, [r4, #12]
  40180a:	60ef      	str	r7, [r5, #12]
  40180c:	60bd      	str	r5, [r7, #8]
  40180e:	1815      	adds	r5, r2, r0
  401810:	686d      	ldr	r5, [r5, #4]
  401812:	07ed      	lsls	r5, r5, #31
  401814:	d542      	bpl.n	40189c <_free_r+0xd8>
  401816:	f043 0201 	orr.w	r2, r3, #1
  40181a:	6062      	str	r2, [r4, #4]
  40181c:	50e3      	str	r3, [r4, r3]
  40181e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401822:	d218      	bcs.n	401856 <_free_r+0x92>
  401824:	08db      	lsrs	r3, r3, #3
  401826:	1c5a      	adds	r2, r3, #1
  401828:	684d      	ldr	r5, [r1, #4]
  40182a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  40182e:	60a7      	str	r7, [r4, #8]
  401830:	2001      	movs	r0, #1
  401832:	109b      	asrs	r3, r3, #2
  401834:	fa00 f303 	lsl.w	r3, r0, r3
  401838:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  40183c:	431d      	orrs	r5, r3
  40183e:	3808      	subs	r0, #8
  401840:	60e0      	str	r0, [r4, #12]
  401842:	604d      	str	r5, [r1, #4]
  401844:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  401848:	60fc      	str	r4, [r7, #12]
  40184a:	4640      	mov	r0, r8
  40184c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401850:	f000 bed6 	b.w	402600 <__malloc_unlock>
  401854:	4770      	bx	lr
  401856:	0a5a      	lsrs	r2, r3, #9
  401858:	2a04      	cmp	r2, #4
  40185a:	d853      	bhi.n	401904 <_free_r+0x140>
  40185c:	099a      	lsrs	r2, r3, #6
  40185e:	f102 0739 	add.w	r7, r2, #57	; 0x39
  401862:	007f      	lsls	r7, r7, #1
  401864:	f102 0538 	add.w	r5, r2, #56	; 0x38
  401868:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  40186c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  401870:	4944      	ldr	r1, [pc, #272]	; (401984 <_free_r+0x1c0>)
  401872:	3808      	subs	r0, #8
  401874:	4290      	cmp	r0, r2
  401876:	d04d      	beq.n	401914 <_free_r+0x150>
  401878:	6851      	ldr	r1, [r2, #4]
  40187a:	f021 0103 	bic.w	r1, r1, #3
  40187e:	428b      	cmp	r3, r1
  401880:	d202      	bcs.n	401888 <_free_r+0xc4>
  401882:	6892      	ldr	r2, [r2, #8]
  401884:	4290      	cmp	r0, r2
  401886:	d1f7      	bne.n	401878 <_free_r+0xb4>
  401888:	68d0      	ldr	r0, [r2, #12]
  40188a:	60e0      	str	r0, [r4, #12]
  40188c:	60a2      	str	r2, [r4, #8]
  40188e:	6084      	str	r4, [r0, #8]
  401890:	60d4      	str	r4, [r2, #12]
  401892:	4640      	mov	r0, r8
  401894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401898:	f000 beb2 	b.w	402600 <__malloc_unlock>
  40189c:	6895      	ldr	r5, [r2, #8]
  40189e:	4f3a      	ldr	r7, [pc, #232]	; (401988 <_free_r+0x1c4>)
  4018a0:	42bd      	cmp	r5, r7
  4018a2:	4403      	add	r3, r0
  4018a4:	d03f      	beq.n	401926 <_free_r+0x162>
  4018a6:	68d0      	ldr	r0, [r2, #12]
  4018a8:	60e8      	str	r0, [r5, #12]
  4018aa:	f043 0201 	orr.w	r2, r3, #1
  4018ae:	6085      	str	r5, [r0, #8]
  4018b0:	6062      	str	r2, [r4, #4]
  4018b2:	50e3      	str	r3, [r4, r3]
  4018b4:	e7b3      	b.n	40181e <_free_r+0x5a>
  4018b6:	07ff      	lsls	r7, r7, #31
  4018b8:	4403      	add	r3, r0
  4018ba:	d407      	bmi.n	4018cc <_free_r+0x108>
  4018bc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4018c0:	1aa4      	subs	r4, r4, r2
  4018c2:	4413      	add	r3, r2
  4018c4:	68a0      	ldr	r0, [r4, #8]
  4018c6:	68e2      	ldr	r2, [r4, #12]
  4018c8:	60c2      	str	r2, [r0, #12]
  4018ca:	6090      	str	r0, [r2, #8]
  4018cc:	4a2f      	ldr	r2, [pc, #188]	; (40198c <_free_r+0x1c8>)
  4018ce:	6812      	ldr	r2, [r2, #0]
  4018d0:	f043 0001 	orr.w	r0, r3, #1
  4018d4:	4293      	cmp	r3, r2
  4018d6:	6060      	str	r0, [r4, #4]
  4018d8:	608c      	str	r4, [r1, #8]
  4018da:	d3b6      	bcc.n	40184a <_free_r+0x86>
  4018dc:	4b2c      	ldr	r3, [pc, #176]	; (401990 <_free_r+0x1cc>)
  4018de:	4640      	mov	r0, r8
  4018e0:	6819      	ldr	r1, [r3, #0]
  4018e2:	f7ff ff21 	bl	401728 <_malloc_trim_r>
  4018e6:	e7b0      	b.n	40184a <_free_r+0x86>
  4018e8:	1811      	adds	r1, r2, r0
  4018ea:	6849      	ldr	r1, [r1, #4]
  4018ec:	07c9      	lsls	r1, r1, #31
  4018ee:	d444      	bmi.n	40197a <_free_r+0x1b6>
  4018f0:	6891      	ldr	r1, [r2, #8]
  4018f2:	68d2      	ldr	r2, [r2, #12]
  4018f4:	60ca      	str	r2, [r1, #12]
  4018f6:	4403      	add	r3, r0
  4018f8:	f043 0001 	orr.w	r0, r3, #1
  4018fc:	6091      	str	r1, [r2, #8]
  4018fe:	6060      	str	r0, [r4, #4]
  401900:	50e3      	str	r3, [r4, r3]
  401902:	e7a2      	b.n	40184a <_free_r+0x86>
  401904:	2a14      	cmp	r2, #20
  401906:	d817      	bhi.n	401938 <_free_r+0x174>
  401908:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40190c:	007f      	lsls	r7, r7, #1
  40190e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  401912:	e7a9      	b.n	401868 <_free_r+0xa4>
  401914:	10aa      	asrs	r2, r5, #2
  401916:	684b      	ldr	r3, [r1, #4]
  401918:	2501      	movs	r5, #1
  40191a:	fa05 f202 	lsl.w	r2, r5, r2
  40191e:	4313      	orrs	r3, r2
  401920:	604b      	str	r3, [r1, #4]
  401922:	4602      	mov	r2, r0
  401924:	e7b1      	b.n	40188a <_free_r+0xc6>
  401926:	f043 0201 	orr.w	r2, r3, #1
  40192a:	614c      	str	r4, [r1, #20]
  40192c:	610c      	str	r4, [r1, #16]
  40192e:	60e5      	str	r5, [r4, #12]
  401930:	60a5      	str	r5, [r4, #8]
  401932:	6062      	str	r2, [r4, #4]
  401934:	50e3      	str	r3, [r4, r3]
  401936:	e788      	b.n	40184a <_free_r+0x86>
  401938:	2a54      	cmp	r2, #84	; 0x54
  40193a:	d806      	bhi.n	40194a <_free_r+0x186>
  40193c:	0b1a      	lsrs	r2, r3, #12
  40193e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  401942:	007f      	lsls	r7, r7, #1
  401944:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  401948:	e78e      	b.n	401868 <_free_r+0xa4>
  40194a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40194e:	d806      	bhi.n	40195e <_free_r+0x19a>
  401950:	0bda      	lsrs	r2, r3, #15
  401952:	f102 0778 	add.w	r7, r2, #120	; 0x78
  401956:	007f      	lsls	r7, r7, #1
  401958:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40195c:	e784      	b.n	401868 <_free_r+0xa4>
  40195e:	f240 5054 	movw	r0, #1364	; 0x554
  401962:	4282      	cmp	r2, r0
  401964:	d806      	bhi.n	401974 <_free_r+0x1b0>
  401966:	0c9a      	lsrs	r2, r3, #18
  401968:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40196c:	007f      	lsls	r7, r7, #1
  40196e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  401972:	e779      	b.n	401868 <_free_r+0xa4>
  401974:	27fe      	movs	r7, #254	; 0xfe
  401976:	257e      	movs	r5, #126	; 0x7e
  401978:	e776      	b.n	401868 <_free_r+0xa4>
  40197a:	f043 0201 	orr.w	r2, r3, #1
  40197e:	6062      	str	r2, [r4, #4]
  401980:	50e3      	str	r3, [r4, r3]
  401982:	e762      	b.n	40184a <_free_r+0x86>
  401984:	2040043c 	.word	0x2040043c
  401988:	20400444 	.word	0x20400444
  40198c:	20400844 	.word	0x20400844
  401990:	204008f0 	.word	0x204008f0

00401994 <__sfvwrite_r>:
  401994:	6893      	ldr	r3, [r2, #8]
  401996:	2b00      	cmp	r3, #0
  401998:	d076      	beq.n	401a88 <__sfvwrite_r+0xf4>
  40199a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40199e:	898b      	ldrh	r3, [r1, #12]
  4019a0:	b085      	sub	sp, #20
  4019a2:	460c      	mov	r4, r1
  4019a4:	0719      	lsls	r1, r3, #28
  4019a6:	9001      	str	r0, [sp, #4]
  4019a8:	4616      	mov	r6, r2
  4019aa:	d529      	bpl.n	401a00 <__sfvwrite_r+0x6c>
  4019ac:	6922      	ldr	r2, [r4, #16]
  4019ae:	b33a      	cbz	r2, 401a00 <__sfvwrite_r+0x6c>
  4019b0:	f003 0802 	and.w	r8, r3, #2
  4019b4:	fa1f f088 	uxth.w	r0, r8
  4019b8:	6835      	ldr	r5, [r6, #0]
  4019ba:	2800      	cmp	r0, #0
  4019bc:	d02f      	beq.n	401a1e <__sfvwrite_r+0x8a>
  4019be:	f04f 0900 	mov.w	r9, #0
  4019c2:	4fb4      	ldr	r7, [pc, #720]	; (401c94 <__sfvwrite_r+0x300>)
  4019c4:	46c8      	mov	r8, r9
  4019c6:	46b2      	mov	sl, r6
  4019c8:	45b8      	cmp	r8, r7
  4019ca:	4643      	mov	r3, r8
  4019cc:	464a      	mov	r2, r9
  4019ce:	bf28      	it	cs
  4019d0:	463b      	movcs	r3, r7
  4019d2:	9801      	ldr	r0, [sp, #4]
  4019d4:	f1b8 0f00 	cmp.w	r8, #0
  4019d8:	d050      	beq.n	401a7c <__sfvwrite_r+0xe8>
  4019da:	69e1      	ldr	r1, [r4, #28]
  4019dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4019de:	47b0      	blx	r6
  4019e0:	2800      	cmp	r0, #0
  4019e2:	dd71      	ble.n	401ac8 <__sfvwrite_r+0x134>
  4019e4:	f8da 3008 	ldr.w	r3, [sl, #8]
  4019e8:	1a1b      	subs	r3, r3, r0
  4019ea:	4481      	add	r9, r0
  4019ec:	ebc0 0808 	rsb	r8, r0, r8
  4019f0:	f8ca 3008 	str.w	r3, [sl, #8]
  4019f4:	2b00      	cmp	r3, #0
  4019f6:	d1e7      	bne.n	4019c8 <__sfvwrite_r+0x34>
  4019f8:	2000      	movs	r0, #0
  4019fa:	b005      	add	sp, #20
  4019fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a00:	4621      	mov	r1, r4
  401a02:	9801      	ldr	r0, [sp, #4]
  401a04:	f001 f85a 	bl	402abc <__swsetup_r>
  401a08:	2800      	cmp	r0, #0
  401a0a:	f040 813a 	bne.w	401c82 <__sfvwrite_r+0x2ee>
  401a0e:	89a3      	ldrh	r3, [r4, #12]
  401a10:	6835      	ldr	r5, [r6, #0]
  401a12:	f003 0802 	and.w	r8, r3, #2
  401a16:	fa1f f088 	uxth.w	r0, r8
  401a1a:	2800      	cmp	r0, #0
  401a1c:	d1cf      	bne.n	4019be <__sfvwrite_r+0x2a>
  401a1e:	f013 0901 	ands.w	r9, r3, #1
  401a22:	d15b      	bne.n	401adc <__sfvwrite_r+0x148>
  401a24:	464f      	mov	r7, r9
  401a26:	9602      	str	r6, [sp, #8]
  401a28:	b31f      	cbz	r7, 401a72 <__sfvwrite_r+0xde>
  401a2a:	059a      	lsls	r2, r3, #22
  401a2c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  401a30:	d52c      	bpl.n	401a8c <__sfvwrite_r+0xf8>
  401a32:	4547      	cmp	r7, r8
  401a34:	46c2      	mov	sl, r8
  401a36:	f0c0 80a4 	bcc.w	401b82 <__sfvwrite_r+0x1ee>
  401a3a:	f413 6f90 	tst.w	r3, #1152	; 0x480
  401a3e:	f040 80b1 	bne.w	401ba4 <__sfvwrite_r+0x210>
  401a42:	6820      	ldr	r0, [r4, #0]
  401a44:	4652      	mov	r2, sl
  401a46:	4649      	mov	r1, r9
  401a48:	f000 fd74 	bl	402534 <memmove>
  401a4c:	68a0      	ldr	r0, [r4, #8]
  401a4e:	6823      	ldr	r3, [r4, #0]
  401a50:	ebc8 0000 	rsb	r0, r8, r0
  401a54:	4453      	add	r3, sl
  401a56:	60a0      	str	r0, [r4, #8]
  401a58:	6023      	str	r3, [r4, #0]
  401a5a:	4638      	mov	r0, r7
  401a5c:	9a02      	ldr	r2, [sp, #8]
  401a5e:	6893      	ldr	r3, [r2, #8]
  401a60:	1a1b      	subs	r3, r3, r0
  401a62:	4481      	add	r9, r0
  401a64:	1a3f      	subs	r7, r7, r0
  401a66:	6093      	str	r3, [r2, #8]
  401a68:	2b00      	cmp	r3, #0
  401a6a:	d0c5      	beq.n	4019f8 <__sfvwrite_r+0x64>
  401a6c:	89a3      	ldrh	r3, [r4, #12]
  401a6e:	2f00      	cmp	r7, #0
  401a70:	d1db      	bne.n	401a2a <__sfvwrite_r+0x96>
  401a72:	f8d5 9000 	ldr.w	r9, [r5]
  401a76:	686f      	ldr	r7, [r5, #4]
  401a78:	3508      	adds	r5, #8
  401a7a:	e7d5      	b.n	401a28 <__sfvwrite_r+0x94>
  401a7c:	f8d5 9000 	ldr.w	r9, [r5]
  401a80:	f8d5 8004 	ldr.w	r8, [r5, #4]
  401a84:	3508      	adds	r5, #8
  401a86:	e79f      	b.n	4019c8 <__sfvwrite_r+0x34>
  401a88:	2000      	movs	r0, #0
  401a8a:	4770      	bx	lr
  401a8c:	6820      	ldr	r0, [r4, #0]
  401a8e:	6923      	ldr	r3, [r4, #16]
  401a90:	4298      	cmp	r0, r3
  401a92:	d803      	bhi.n	401a9c <__sfvwrite_r+0x108>
  401a94:	6961      	ldr	r1, [r4, #20]
  401a96:	428f      	cmp	r7, r1
  401a98:	f080 80b7 	bcs.w	401c0a <__sfvwrite_r+0x276>
  401a9c:	45b8      	cmp	r8, r7
  401a9e:	bf28      	it	cs
  401aa0:	46b8      	movcs	r8, r7
  401aa2:	4642      	mov	r2, r8
  401aa4:	4649      	mov	r1, r9
  401aa6:	f000 fd45 	bl	402534 <memmove>
  401aaa:	68a3      	ldr	r3, [r4, #8]
  401aac:	6822      	ldr	r2, [r4, #0]
  401aae:	ebc8 0303 	rsb	r3, r8, r3
  401ab2:	4442      	add	r2, r8
  401ab4:	60a3      	str	r3, [r4, #8]
  401ab6:	6022      	str	r2, [r4, #0]
  401ab8:	2b00      	cmp	r3, #0
  401aba:	d149      	bne.n	401b50 <__sfvwrite_r+0x1bc>
  401abc:	4621      	mov	r1, r4
  401abe:	9801      	ldr	r0, [sp, #4]
  401ac0:	f7ff fd80 	bl	4015c4 <_fflush_r>
  401ac4:	2800      	cmp	r0, #0
  401ac6:	d043      	beq.n	401b50 <__sfvwrite_r+0x1bc>
  401ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401ad0:	f04f 30ff 	mov.w	r0, #4294967295
  401ad4:	81a3      	strh	r3, [r4, #12]
  401ad6:	b005      	add	sp, #20
  401ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401adc:	4680      	mov	r8, r0
  401ade:	9002      	str	r0, [sp, #8]
  401ae0:	4682      	mov	sl, r0
  401ae2:	4681      	mov	r9, r0
  401ae4:	f1b9 0f00 	cmp.w	r9, #0
  401ae8:	d02a      	beq.n	401b40 <__sfvwrite_r+0x1ac>
  401aea:	9b02      	ldr	r3, [sp, #8]
  401aec:	2b00      	cmp	r3, #0
  401aee:	d04c      	beq.n	401b8a <__sfvwrite_r+0x1f6>
  401af0:	6820      	ldr	r0, [r4, #0]
  401af2:	6923      	ldr	r3, [r4, #16]
  401af4:	6962      	ldr	r2, [r4, #20]
  401af6:	45c8      	cmp	r8, r9
  401af8:	46c3      	mov	fp, r8
  401afa:	bf28      	it	cs
  401afc:	46cb      	movcs	fp, r9
  401afe:	4298      	cmp	r0, r3
  401b00:	465f      	mov	r7, fp
  401b02:	d904      	bls.n	401b0e <__sfvwrite_r+0x17a>
  401b04:	68a3      	ldr	r3, [r4, #8]
  401b06:	4413      	add	r3, r2
  401b08:	459b      	cmp	fp, r3
  401b0a:	f300 8090 	bgt.w	401c2e <__sfvwrite_r+0x29a>
  401b0e:	4593      	cmp	fp, r2
  401b10:	db20      	blt.n	401b54 <__sfvwrite_r+0x1c0>
  401b12:	4613      	mov	r3, r2
  401b14:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401b16:	69e1      	ldr	r1, [r4, #28]
  401b18:	9801      	ldr	r0, [sp, #4]
  401b1a:	4652      	mov	r2, sl
  401b1c:	47b8      	blx	r7
  401b1e:	1e07      	subs	r7, r0, #0
  401b20:	ddd2      	ble.n	401ac8 <__sfvwrite_r+0x134>
  401b22:	ebb8 0807 	subs.w	r8, r8, r7
  401b26:	d023      	beq.n	401b70 <__sfvwrite_r+0x1dc>
  401b28:	68b3      	ldr	r3, [r6, #8]
  401b2a:	1bdb      	subs	r3, r3, r7
  401b2c:	44ba      	add	sl, r7
  401b2e:	ebc7 0909 	rsb	r9, r7, r9
  401b32:	60b3      	str	r3, [r6, #8]
  401b34:	2b00      	cmp	r3, #0
  401b36:	f43f af5f 	beq.w	4019f8 <__sfvwrite_r+0x64>
  401b3a:	f1b9 0f00 	cmp.w	r9, #0
  401b3e:	d1d4      	bne.n	401aea <__sfvwrite_r+0x156>
  401b40:	2300      	movs	r3, #0
  401b42:	f8d5 a000 	ldr.w	sl, [r5]
  401b46:	f8d5 9004 	ldr.w	r9, [r5, #4]
  401b4a:	9302      	str	r3, [sp, #8]
  401b4c:	3508      	adds	r5, #8
  401b4e:	e7c9      	b.n	401ae4 <__sfvwrite_r+0x150>
  401b50:	4640      	mov	r0, r8
  401b52:	e783      	b.n	401a5c <__sfvwrite_r+0xc8>
  401b54:	465a      	mov	r2, fp
  401b56:	4651      	mov	r1, sl
  401b58:	f000 fcec 	bl	402534 <memmove>
  401b5c:	68a2      	ldr	r2, [r4, #8]
  401b5e:	6823      	ldr	r3, [r4, #0]
  401b60:	ebcb 0202 	rsb	r2, fp, r2
  401b64:	445b      	add	r3, fp
  401b66:	ebb8 0807 	subs.w	r8, r8, r7
  401b6a:	60a2      	str	r2, [r4, #8]
  401b6c:	6023      	str	r3, [r4, #0]
  401b6e:	d1db      	bne.n	401b28 <__sfvwrite_r+0x194>
  401b70:	4621      	mov	r1, r4
  401b72:	9801      	ldr	r0, [sp, #4]
  401b74:	f7ff fd26 	bl	4015c4 <_fflush_r>
  401b78:	2800      	cmp	r0, #0
  401b7a:	d1a5      	bne.n	401ac8 <__sfvwrite_r+0x134>
  401b7c:	f8cd 8008 	str.w	r8, [sp, #8]
  401b80:	e7d2      	b.n	401b28 <__sfvwrite_r+0x194>
  401b82:	6820      	ldr	r0, [r4, #0]
  401b84:	46b8      	mov	r8, r7
  401b86:	46ba      	mov	sl, r7
  401b88:	e75c      	b.n	401a44 <__sfvwrite_r+0xb0>
  401b8a:	464a      	mov	r2, r9
  401b8c:	210a      	movs	r1, #10
  401b8e:	4650      	mov	r0, sl
  401b90:	f000 fbe6 	bl	402360 <memchr>
  401b94:	2800      	cmp	r0, #0
  401b96:	d06f      	beq.n	401c78 <__sfvwrite_r+0x2e4>
  401b98:	3001      	adds	r0, #1
  401b9a:	2301      	movs	r3, #1
  401b9c:	ebca 0800 	rsb	r8, sl, r0
  401ba0:	9302      	str	r3, [sp, #8]
  401ba2:	e7a5      	b.n	401af0 <__sfvwrite_r+0x15c>
  401ba4:	6962      	ldr	r2, [r4, #20]
  401ba6:	6820      	ldr	r0, [r4, #0]
  401ba8:	6921      	ldr	r1, [r4, #16]
  401baa:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  401bae:	ebc1 0a00 	rsb	sl, r1, r0
  401bb2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  401bb6:	f10a 0001 	add.w	r0, sl, #1
  401bba:	ea4f 0868 	mov.w	r8, r8, asr #1
  401bbe:	4438      	add	r0, r7
  401bc0:	4540      	cmp	r0, r8
  401bc2:	4642      	mov	r2, r8
  401bc4:	bf84      	itt	hi
  401bc6:	4680      	movhi	r8, r0
  401bc8:	4642      	movhi	r2, r8
  401bca:	055b      	lsls	r3, r3, #21
  401bcc:	d542      	bpl.n	401c54 <__sfvwrite_r+0x2c0>
  401bce:	4611      	mov	r1, r2
  401bd0:	9801      	ldr	r0, [sp, #4]
  401bd2:	f000 f907 	bl	401de4 <_malloc_r>
  401bd6:	4683      	mov	fp, r0
  401bd8:	2800      	cmp	r0, #0
  401bda:	d055      	beq.n	401c88 <__sfvwrite_r+0x2f4>
  401bdc:	4652      	mov	r2, sl
  401bde:	6921      	ldr	r1, [r4, #16]
  401be0:	f000 fc0e 	bl	402400 <memcpy>
  401be4:	89a3      	ldrh	r3, [r4, #12]
  401be6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  401bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401bee:	81a3      	strh	r3, [r4, #12]
  401bf0:	ebca 0308 	rsb	r3, sl, r8
  401bf4:	eb0b 000a 	add.w	r0, fp, sl
  401bf8:	f8c4 8014 	str.w	r8, [r4, #20]
  401bfc:	f8c4 b010 	str.w	fp, [r4, #16]
  401c00:	6020      	str	r0, [r4, #0]
  401c02:	60a3      	str	r3, [r4, #8]
  401c04:	46b8      	mov	r8, r7
  401c06:	46ba      	mov	sl, r7
  401c08:	e71c      	b.n	401a44 <__sfvwrite_r+0xb0>
  401c0a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  401c0e:	42bb      	cmp	r3, r7
  401c10:	bf28      	it	cs
  401c12:	463b      	movcs	r3, r7
  401c14:	464a      	mov	r2, r9
  401c16:	fb93 f3f1 	sdiv	r3, r3, r1
  401c1a:	9801      	ldr	r0, [sp, #4]
  401c1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  401c1e:	fb01 f303 	mul.w	r3, r1, r3
  401c22:	69e1      	ldr	r1, [r4, #28]
  401c24:	47b0      	blx	r6
  401c26:	2800      	cmp	r0, #0
  401c28:	f73f af18 	bgt.w	401a5c <__sfvwrite_r+0xc8>
  401c2c:	e74c      	b.n	401ac8 <__sfvwrite_r+0x134>
  401c2e:	461a      	mov	r2, r3
  401c30:	4651      	mov	r1, sl
  401c32:	9303      	str	r3, [sp, #12]
  401c34:	f000 fc7e 	bl	402534 <memmove>
  401c38:	6822      	ldr	r2, [r4, #0]
  401c3a:	9b03      	ldr	r3, [sp, #12]
  401c3c:	9801      	ldr	r0, [sp, #4]
  401c3e:	441a      	add	r2, r3
  401c40:	6022      	str	r2, [r4, #0]
  401c42:	4621      	mov	r1, r4
  401c44:	f7ff fcbe 	bl	4015c4 <_fflush_r>
  401c48:	9b03      	ldr	r3, [sp, #12]
  401c4a:	2800      	cmp	r0, #0
  401c4c:	f47f af3c 	bne.w	401ac8 <__sfvwrite_r+0x134>
  401c50:	461f      	mov	r7, r3
  401c52:	e766      	b.n	401b22 <__sfvwrite_r+0x18e>
  401c54:	9801      	ldr	r0, [sp, #4]
  401c56:	f000 fcd5 	bl	402604 <_realloc_r>
  401c5a:	4683      	mov	fp, r0
  401c5c:	2800      	cmp	r0, #0
  401c5e:	d1c7      	bne.n	401bf0 <__sfvwrite_r+0x25c>
  401c60:	9d01      	ldr	r5, [sp, #4]
  401c62:	6921      	ldr	r1, [r4, #16]
  401c64:	4628      	mov	r0, r5
  401c66:	f7ff fdad 	bl	4017c4 <_free_r>
  401c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401c6e:	220c      	movs	r2, #12
  401c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401c74:	602a      	str	r2, [r5, #0]
  401c76:	e729      	b.n	401acc <__sfvwrite_r+0x138>
  401c78:	2301      	movs	r3, #1
  401c7a:	f109 0801 	add.w	r8, r9, #1
  401c7e:	9302      	str	r3, [sp, #8]
  401c80:	e736      	b.n	401af0 <__sfvwrite_r+0x15c>
  401c82:	f04f 30ff 	mov.w	r0, #4294967295
  401c86:	e6b8      	b.n	4019fa <__sfvwrite_r+0x66>
  401c88:	9a01      	ldr	r2, [sp, #4]
  401c8a:	230c      	movs	r3, #12
  401c8c:	6013      	str	r3, [r2, #0]
  401c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401c92:	e71b      	b.n	401acc <__sfvwrite_r+0x138>
  401c94:	7ffffc00 	.word	0x7ffffc00

00401c98 <_fwalk_reent>:
  401c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401c9c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401ca0:	d01f      	beq.n	401ce2 <_fwalk_reent+0x4a>
  401ca2:	4688      	mov	r8, r1
  401ca4:	4606      	mov	r6, r0
  401ca6:	f04f 0900 	mov.w	r9, #0
  401caa:	687d      	ldr	r5, [r7, #4]
  401cac:	68bc      	ldr	r4, [r7, #8]
  401cae:	3d01      	subs	r5, #1
  401cb0:	d411      	bmi.n	401cd6 <_fwalk_reent+0x3e>
  401cb2:	89a3      	ldrh	r3, [r4, #12]
  401cb4:	2b01      	cmp	r3, #1
  401cb6:	f105 35ff 	add.w	r5, r5, #4294967295
  401cba:	d908      	bls.n	401cce <_fwalk_reent+0x36>
  401cbc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401cc0:	3301      	adds	r3, #1
  401cc2:	4621      	mov	r1, r4
  401cc4:	4630      	mov	r0, r6
  401cc6:	d002      	beq.n	401cce <_fwalk_reent+0x36>
  401cc8:	47c0      	blx	r8
  401cca:	ea49 0900 	orr.w	r9, r9, r0
  401cce:	1c6b      	adds	r3, r5, #1
  401cd0:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401cd4:	d1ed      	bne.n	401cb2 <_fwalk_reent+0x1a>
  401cd6:	683f      	ldr	r7, [r7, #0]
  401cd8:	2f00      	cmp	r7, #0
  401cda:	d1e6      	bne.n	401caa <_fwalk_reent+0x12>
  401cdc:	4648      	mov	r0, r9
  401cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401ce2:	46b9      	mov	r9, r7
  401ce4:	4648      	mov	r0, r9
  401ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401cea:	bf00      	nop

00401cec <__swhatbuf_r>:
  401cec:	b570      	push	{r4, r5, r6, lr}
  401cee:	460d      	mov	r5, r1
  401cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401cf4:	2900      	cmp	r1, #0
  401cf6:	b090      	sub	sp, #64	; 0x40
  401cf8:	4614      	mov	r4, r2
  401cfa:	461e      	mov	r6, r3
  401cfc:	db14      	blt.n	401d28 <__swhatbuf_r+0x3c>
  401cfe:	aa01      	add	r2, sp, #4
  401d00:	f000 ffe6 	bl	402cd0 <_fstat_r>
  401d04:	2800      	cmp	r0, #0
  401d06:	db0f      	blt.n	401d28 <__swhatbuf_r+0x3c>
  401d08:	9a02      	ldr	r2, [sp, #8]
  401d0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401d0e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  401d12:	fab2 f282 	clz	r2, r2
  401d16:	0952      	lsrs	r2, r2, #5
  401d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401d1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  401d20:	6032      	str	r2, [r6, #0]
  401d22:	6023      	str	r3, [r4, #0]
  401d24:	b010      	add	sp, #64	; 0x40
  401d26:	bd70      	pop	{r4, r5, r6, pc}
  401d28:	89a8      	ldrh	r0, [r5, #12]
  401d2a:	f000 0080 	and.w	r0, r0, #128	; 0x80
  401d2e:	b282      	uxth	r2, r0
  401d30:	2000      	movs	r0, #0
  401d32:	6030      	str	r0, [r6, #0]
  401d34:	b11a      	cbz	r2, 401d3e <__swhatbuf_r+0x52>
  401d36:	2340      	movs	r3, #64	; 0x40
  401d38:	6023      	str	r3, [r4, #0]
  401d3a:	b010      	add	sp, #64	; 0x40
  401d3c:	bd70      	pop	{r4, r5, r6, pc}
  401d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401d42:	4610      	mov	r0, r2
  401d44:	6023      	str	r3, [r4, #0]
  401d46:	b010      	add	sp, #64	; 0x40
  401d48:	bd70      	pop	{r4, r5, r6, pc}
  401d4a:	bf00      	nop

00401d4c <__smakebuf_r>:
  401d4c:	898a      	ldrh	r2, [r1, #12]
  401d4e:	0792      	lsls	r2, r2, #30
  401d50:	460b      	mov	r3, r1
  401d52:	d506      	bpl.n	401d62 <__smakebuf_r+0x16>
  401d54:	f101 0243 	add.w	r2, r1, #67	; 0x43
  401d58:	2101      	movs	r1, #1
  401d5a:	601a      	str	r2, [r3, #0]
  401d5c:	611a      	str	r2, [r3, #16]
  401d5e:	6159      	str	r1, [r3, #20]
  401d60:	4770      	bx	lr
  401d62:	b5f0      	push	{r4, r5, r6, r7, lr}
  401d64:	b083      	sub	sp, #12
  401d66:	ab01      	add	r3, sp, #4
  401d68:	466a      	mov	r2, sp
  401d6a:	460c      	mov	r4, r1
  401d6c:	4605      	mov	r5, r0
  401d6e:	f7ff ffbd 	bl	401cec <__swhatbuf_r>
  401d72:	9900      	ldr	r1, [sp, #0]
  401d74:	4606      	mov	r6, r0
  401d76:	4628      	mov	r0, r5
  401d78:	f000 f834 	bl	401de4 <_malloc_r>
  401d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401d80:	b1d0      	cbz	r0, 401db8 <__smakebuf_r+0x6c>
  401d82:	9a01      	ldr	r2, [sp, #4]
  401d84:	4f12      	ldr	r7, [pc, #72]	; (401dd0 <__smakebuf_r+0x84>)
  401d86:	9900      	ldr	r1, [sp, #0]
  401d88:	63ef      	str	r7, [r5, #60]	; 0x3c
  401d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401d8e:	81a3      	strh	r3, [r4, #12]
  401d90:	6020      	str	r0, [r4, #0]
  401d92:	6120      	str	r0, [r4, #16]
  401d94:	6161      	str	r1, [r4, #20]
  401d96:	b91a      	cbnz	r2, 401da0 <__smakebuf_r+0x54>
  401d98:	4333      	orrs	r3, r6
  401d9a:	81a3      	strh	r3, [r4, #12]
  401d9c:	b003      	add	sp, #12
  401d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401da0:	4628      	mov	r0, r5
  401da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401da6:	f000 ffa7 	bl	402cf8 <_isatty_r>
  401daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401dae:	2800      	cmp	r0, #0
  401db0:	d0f2      	beq.n	401d98 <__smakebuf_r+0x4c>
  401db2:	f043 0301 	orr.w	r3, r3, #1
  401db6:	e7ef      	b.n	401d98 <__smakebuf_r+0x4c>
  401db8:	059a      	lsls	r2, r3, #22
  401dba:	d4ef      	bmi.n	401d9c <__smakebuf_r+0x50>
  401dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401dc0:	f043 0302 	orr.w	r3, r3, #2
  401dc4:	2101      	movs	r1, #1
  401dc6:	81a3      	strh	r3, [r4, #12]
  401dc8:	6022      	str	r2, [r4, #0]
  401dca:	6122      	str	r2, [r4, #16]
  401dcc:	6161      	str	r1, [r4, #20]
  401dce:	e7e5      	b.n	401d9c <__smakebuf_r+0x50>
  401dd0:	004015f1 	.word	0x004015f1

00401dd4 <malloc>:
  401dd4:	4b02      	ldr	r3, [pc, #8]	; (401de0 <malloc+0xc>)
  401dd6:	4601      	mov	r1, r0
  401dd8:	6818      	ldr	r0, [r3, #0]
  401dda:	f000 b803 	b.w	401de4 <_malloc_r>
  401dde:	bf00      	nop
  401de0:	20400438 	.word	0x20400438

00401de4 <_malloc_r>:
  401de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401de8:	f101 050b 	add.w	r5, r1, #11
  401dec:	2d16      	cmp	r5, #22
  401dee:	b083      	sub	sp, #12
  401df0:	4606      	mov	r6, r0
  401df2:	f240 809f 	bls.w	401f34 <_malloc_r+0x150>
  401df6:	f035 0507 	bics.w	r5, r5, #7
  401dfa:	f100 80bf 	bmi.w	401f7c <_malloc_r+0x198>
  401dfe:	42a9      	cmp	r1, r5
  401e00:	f200 80bc 	bhi.w	401f7c <_malloc_r+0x198>
  401e04:	f000 fbfa 	bl	4025fc <__malloc_lock>
  401e08:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  401e0c:	f0c0 829c 	bcc.w	402348 <_malloc_r+0x564>
  401e10:	0a6b      	lsrs	r3, r5, #9
  401e12:	f000 80ba 	beq.w	401f8a <_malloc_r+0x1a6>
  401e16:	2b04      	cmp	r3, #4
  401e18:	f200 8183 	bhi.w	402122 <_malloc_r+0x33e>
  401e1c:	09a8      	lsrs	r0, r5, #6
  401e1e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  401e22:	ea4f 034e 	mov.w	r3, lr, lsl #1
  401e26:	3038      	adds	r0, #56	; 0x38
  401e28:	4fc4      	ldr	r7, [pc, #784]	; (40213c <_malloc_r+0x358>)
  401e2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  401e2e:	f1a3 0108 	sub.w	r1, r3, #8
  401e32:	685c      	ldr	r4, [r3, #4]
  401e34:	42a1      	cmp	r1, r4
  401e36:	d107      	bne.n	401e48 <_malloc_r+0x64>
  401e38:	e0ac      	b.n	401f94 <_malloc_r+0x1b0>
  401e3a:	2a00      	cmp	r2, #0
  401e3c:	f280 80ac 	bge.w	401f98 <_malloc_r+0x1b4>
  401e40:	68e4      	ldr	r4, [r4, #12]
  401e42:	42a1      	cmp	r1, r4
  401e44:	f000 80a6 	beq.w	401f94 <_malloc_r+0x1b0>
  401e48:	6863      	ldr	r3, [r4, #4]
  401e4a:	f023 0303 	bic.w	r3, r3, #3
  401e4e:	1b5a      	subs	r2, r3, r5
  401e50:	2a0f      	cmp	r2, #15
  401e52:	ddf2      	ble.n	401e3a <_malloc_r+0x56>
  401e54:	49b9      	ldr	r1, [pc, #740]	; (40213c <_malloc_r+0x358>)
  401e56:	693c      	ldr	r4, [r7, #16]
  401e58:	f101 0e08 	add.w	lr, r1, #8
  401e5c:	4574      	cmp	r4, lr
  401e5e:	f000 81b3 	beq.w	4021c8 <_malloc_r+0x3e4>
  401e62:	6863      	ldr	r3, [r4, #4]
  401e64:	f023 0303 	bic.w	r3, r3, #3
  401e68:	1b5a      	subs	r2, r3, r5
  401e6a:	2a0f      	cmp	r2, #15
  401e6c:	f300 8199 	bgt.w	4021a2 <_malloc_r+0x3be>
  401e70:	2a00      	cmp	r2, #0
  401e72:	f8c1 e014 	str.w	lr, [r1, #20]
  401e76:	f8c1 e010 	str.w	lr, [r1, #16]
  401e7a:	f280 809e 	bge.w	401fba <_malloc_r+0x1d6>
  401e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401e82:	f080 8167 	bcs.w	402154 <_malloc_r+0x370>
  401e86:	08db      	lsrs	r3, r3, #3
  401e88:	f103 0c01 	add.w	ip, r3, #1
  401e8c:	2201      	movs	r2, #1
  401e8e:	109b      	asrs	r3, r3, #2
  401e90:	fa02 f303 	lsl.w	r3, r2, r3
  401e94:	684a      	ldr	r2, [r1, #4]
  401e96:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  401e9a:	f8c4 8008 	str.w	r8, [r4, #8]
  401e9e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  401ea2:	431a      	orrs	r2, r3
  401ea4:	f1a9 0308 	sub.w	r3, r9, #8
  401ea8:	60e3      	str	r3, [r4, #12]
  401eaa:	604a      	str	r2, [r1, #4]
  401eac:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  401eb0:	f8c8 400c 	str.w	r4, [r8, #12]
  401eb4:	1083      	asrs	r3, r0, #2
  401eb6:	2401      	movs	r4, #1
  401eb8:	409c      	lsls	r4, r3
  401eba:	4294      	cmp	r4, r2
  401ebc:	f200 808a 	bhi.w	401fd4 <_malloc_r+0x1f0>
  401ec0:	4214      	tst	r4, r2
  401ec2:	d106      	bne.n	401ed2 <_malloc_r+0xee>
  401ec4:	f020 0003 	bic.w	r0, r0, #3
  401ec8:	0064      	lsls	r4, r4, #1
  401eca:	4214      	tst	r4, r2
  401ecc:	f100 0004 	add.w	r0, r0, #4
  401ed0:	d0fa      	beq.n	401ec8 <_malloc_r+0xe4>
  401ed2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401ed6:	46cc      	mov	ip, r9
  401ed8:	4680      	mov	r8, r0
  401eda:	f8dc 100c 	ldr.w	r1, [ip, #12]
  401ede:	458c      	cmp	ip, r1
  401ee0:	d107      	bne.n	401ef2 <_malloc_r+0x10e>
  401ee2:	e173      	b.n	4021cc <_malloc_r+0x3e8>
  401ee4:	2a00      	cmp	r2, #0
  401ee6:	f280 8181 	bge.w	4021ec <_malloc_r+0x408>
  401eea:	68c9      	ldr	r1, [r1, #12]
  401eec:	458c      	cmp	ip, r1
  401eee:	f000 816d 	beq.w	4021cc <_malloc_r+0x3e8>
  401ef2:	684b      	ldr	r3, [r1, #4]
  401ef4:	f023 0303 	bic.w	r3, r3, #3
  401ef8:	1b5a      	subs	r2, r3, r5
  401efa:	2a0f      	cmp	r2, #15
  401efc:	ddf2      	ble.n	401ee4 <_malloc_r+0x100>
  401efe:	460c      	mov	r4, r1
  401f00:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  401f04:	f854 8f08 	ldr.w	r8, [r4, #8]!
  401f08:	194b      	adds	r3, r1, r5
  401f0a:	f045 0501 	orr.w	r5, r5, #1
  401f0e:	604d      	str	r5, [r1, #4]
  401f10:	f042 0101 	orr.w	r1, r2, #1
  401f14:	f8c8 c00c 	str.w	ip, [r8, #12]
  401f18:	4630      	mov	r0, r6
  401f1a:	f8cc 8008 	str.w	r8, [ip, #8]
  401f1e:	617b      	str	r3, [r7, #20]
  401f20:	613b      	str	r3, [r7, #16]
  401f22:	f8c3 e00c 	str.w	lr, [r3, #12]
  401f26:	f8c3 e008 	str.w	lr, [r3, #8]
  401f2a:	6059      	str	r1, [r3, #4]
  401f2c:	509a      	str	r2, [r3, r2]
  401f2e:	f000 fb67 	bl	402600 <__malloc_unlock>
  401f32:	e01f      	b.n	401f74 <_malloc_r+0x190>
  401f34:	2910      	cmp	r1, #16
  401f36:	d821      	bhi.n	401f7c <_malloc_r+0x198>
  401f38:	f000 fb60 	bl	4025fc <__malloc_lock>
  401f3c:	2510      	movs	r5, #16
  401f3e:	2306      	movs	r3, #6
  401f40:	2002      	movs	r0, #2
  401f42:	4f7e      	ldr	r7, [pc, #504]	; (40213c <_malloc_r+0x358>)
  401f44:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  401f48:	f1a3 0208 	sub.w	r2, r3, #8
  401f4c:	685c      	ldr	r4, [r3, #4]
  401f4e:	4294      	cmp	r4, r2
  401f50:	f000 8145 	beq.w	4021de <_malloc_r+0x3fa>
  401f54:	6863      	ldr	r3, [r4, #4]
  401f56:	68e1      	ldr	r1, [r4, #12]
  401f58:	68a5      	ldr	r5, [r4, #8]
  401f5a:	f023 0303 	bic.w	r3, r3, #3
  401f5e:	4423      	add	r3, r4
  401f60:	4630      	mov	r0, r6
  401f62:	685a      	ldr	r2, [r3, #4]
  401f64:	60e9      	str	r1, [r5, #12]
  401f66:	f042 0201 	orr.w	r2, r2, #1
  401f6a:	608d      	str	r5, [r1, #8]
  401f6c:	605a      	str	r2, [r3, #4]
  401f6e:	f000 fb47 	bl	402600 <__malloc_unlock>
  401f72:	3408      	adds	r4, #8
  401f74:	4620      	mov	r0, r4
  401f76:	b003      	add	sp, #12
  401f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f7c:	2400      	movs	r4, #0
  401f7e:	230c      	movs	r3, #12
  401f80:	4620      	mov	r0, r4
  401f82:	6033      	str	r3, [r6, #0]
  401f84:	b003      	add	sp, #12
  401f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f8a:	2380      	movs	r3, #128	; 0x80
  401f8c:	f04f 0e40 	mov.w	lr, #64	; 0x40
  401f90:	203f      	movs	r0, #63	; 0x3f
  401f92:	e749      	b.n	401e28 <_malloc_r+0x44>
  401f94:	4670      	mov	r0, lr
  401f96:	e75d      	b.n	401e54 <_malloc_r+0x70>
  401f98:	4423      	add	r3, r4
  401f9a:	68e1      	ldr	r1, [r4, #12]
  401f9c:	685a      	ldr	r2, [r3, #4]
  401f9e:	68a5      	ldr	r5, [r4, #8]
  401fa0:	f042 0201 	orr.w	r2, r2, #1
  401fa4:	60e9      	str	r1, [r5, #12]
  401fa6:	4630      	mov	r0, r6
  401fa8:	608d      	str	r5, [r1, #8]
  401faa:	605a      	str	r2, [r3, #4]
  401fac:	f000 fb28 	bl	402600 <__malloc_unlock>
  401fb0:	3408      	adds	r4, #8
  401fb2:	4620      	mov	r0, r4
  401fb4:	b003      	add	sp, #12
  401fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fba:	4423      	add	r3, r4
  401fbc:	4630      	mov	r0, r6
  401fbe:	685a      	ldr	r2, [r3, #4]
  401fc0:	f042 0201 	orr.w	r2, r2, #1
  401fc4:	605a      	str	r2, [r3, #4]
  401fc6:	f000 fb1b 	bl	402600 <__malloc_unlock>
  401fca:	3408      	adds	r4, #8
  401fcc:	4620      	mov	r0, r4
  401fce:	b003      	add	sp, #12
  401fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fd4:	68bc      	ldr	r4, [r7, #8]
  401fd6:	6863      	ldr	r3, [r4, #4]
  401fd8:	f023 0803 	bic.w	r8, r3, #3
  401fdc:	45a8      	cmp	r8, r5
  401fde:	d304      	bcc.n	401fea <_malloc_r+0x206>
  401fe0:	ebc5 0308 	rsb	r3, r5, r8
  401fe4:	2b0f      	cmp	r3, #15
  401fe6:	f300 808c 	bgt.w	402102 <_malloc_r+0x31e>
  401fea:	4b55      	ldr	r3, [pc, #340]	; (402140 <_malloc_r+0x35c>)
  401fec:	f8df 9160 	ldr.w	r9, [pc, #352]	; 402150 <_malloc_r+0x36c>
  401ff0:	681a      	ldr	r2, [r3, #0]
  401ff2:	f8d9 3000 	ldr.w	r3, [r9]
  401ff6:	3301      	adds	r3, #1
  401ff8:	442a      	add	r2, r5
  401ffa:	eb04 0a08 	add.w	sl, r4, r8
  401ffe:	f000 8160 	beq.w	4022c2 <_malloc_r+0x4de>
  402002:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  402006:	320f      	adds	r2, #15
  402008:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  40200c:	f022 020f 	bic.w	r2, r2, #15
  402010:	4611      	mov	r1, r2
  402012:	4630      	mov	r0, r6
  402014:	9201      	str	r2, [sp, #4]
  402016:	f000 fce5 	bl	4029e4 <_sbrk_r>
  40201a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40201e:	4683      	mov	fp, r0
  402020:	9a01      	ldr	r2, [sp, #4]
  402022:	f000 8158 	beq.w	4022d6 <_malloc_r+0x4f2>
  402026:	4582      	cmp	sl, r0
  402028:	f200 80fc 	bhi.w	402224 <_malloc_r+0x440>
  40202c:	4b45      	ldr	r3, [pc, #276]	; (402144 <_malloc_r+0x360>)
  40202e:	6819      	ldr	r1, [r3, #0]
  402030:	45da      	cmp	sl, fp
  402032:	4411      	add	r1, r2
  402034:	6019      	str	r1, [r3, #0]
  402036:	f000 8153 	beq.w	4022e0 <_malloc_r+0x4fc>
  40203a:	f8d9 0000 	ldr.w	r0, [r9]
  40203e:	f8df e110 	ldr.w	lr, [pc, #272]	; 402150 <_malloc_r+0x36c>
  402042:	3001      	adds	r0, #1
  402044:	bf1b      	ittet	ne
  402046:	ebca 0a0b 	rsbne	sl, sl, fp
  40204a:	4451      	addne	r1, sl
  40204c:	f8ce b000 	streq.w	fp, [lr]
  402050:	6019      	strne	r1, [r3, #0]
  402052:	f01b 0107 	ands.w	r1, fp, #7
  402056:	f000 8117 	beq.w	402288 <_malloc_r+0x4a4>
  40205a:	f1c1 0008 	rsb	r0, r1, #8
  40205e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402062:	4483      	add	fp, r0
  402064:	3108      	adds	r1, #8
  402066:	445a      	add	r2, fp
  402068:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40206c:	ebc2 0901 	rsb	r9, r2, r1
  402070:	4649      	mov	r1, r9
  402072:	4630      	mov	r0, r6
  402074:	9301      	str	r3, [sp, #4]
  402076:	f000 fcb5 	bl	4029e4 <_sbrk_r>
  40207a:	1c43      	adds	r3, r0, #1
  40207c:	9b01      	ldr	r3, [sp, #4]
  40207e:	f000 813f 	beq.w	402300 <_malloc_r+0x51c>
  402082:	ebcb 0200 	rsb	r2, fp, r0
  402086:	444a      	add	r2, r9
  402088:	f042 0201 	orr.w	r2, r2, #1
  40208c:	6819      	ldr	r1, [r3, #0]
  40208e:	f8c7 b008 	str.w	fp, [r7, #8]
  402092:	4449      	add	r1, r9
  402094:	42bc      	cmp	r4, r7
  402096:	f8cb 2004 	str.w	r2, [fp, #4]
  40209a:	6019      	str	r1, [r3, #0]
  40209c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 402144 <_malloc_r+0x360>
  4020a0:	d016      	beq.n	4020d0 <_malloc_r+0x2ec>
  4020a2:	f1b8 0f0f 	cmp.w	r8, #15
  4020a6:	f240 80fd 	bls.w	4022a4 <_malloc_r+0x4c0>
  4020aa:	6862      	ldr	r2, [r4, #4]
  4020ac:	f1a8 030c 	sub.w	r3, r8, #12
  4020b0:	f023 0307 	bic.w	r3, r3, #7
  4020b4:	18e0      	adds	r0, r4, r3
  4020b6:	f002 0201 	and.w	r2, r2, #1
  4020ba:	f04f 0e05 	mov.w	lr, #5
  4020be:	431a      	orrs	r2, r3
  4020c0:	2b0f      	cmp	r3, #15
  4020c2:	6062      	str	r2, [r4, #4]
  4020c4:	f8c0 e004 	str.w	lr, [r0, #4]
  4020c8:	f8c0 e008 	str.w	lr, [r0, #8]
  4020cc:	f200 811c 	bhi.w	402308 <_malloc_r+0x524>
  4020d0:	4b1d      	ldr	r3, [pc, #116]	; (402148 <_malloc_r+0x364>)
  4020d2:	68bc      	ldr	r4, [r7, #8]
  4020d4:	681a      	ldr	r2, [r3, #0]
  4020d6:	4291      	cmp	r1, r2
  4020d8:	bf88      	it	hi
  4020da:	6019      	strhi	r1, [r3, #0]
  4020dc:	4b1b      	ldr	r3, [pc, #108]	; (40214c <_malloc_r+0x368>)
  4020de:	681a      	ldr	r2, [r3, #0]
  4020e0:	4291      	cmp	r1, r2
  4020e2:	6862      	ldr	r2, [r4, #4]
  4020e4:	bf88      	it	hi
  4020e6:	6019      	strhi	r1, [r3, #0]
  4020e8:	f022 0203 	bic.w	r2, r2, #3
  4020ec:	4295      	cmp	r5, r2
  4020ee:	eba2 0305 	sub.w	r3, r2, r5
  4020f2:	d801      	bhi.n	4020f8 <_malloc_r+0x314>
  4020f4:	2b0f      	cmp	r3, #15
  4020f6:	dc04      	bgt.n	402102 <_malloc_r+0x31e>
  4020f8:	4630      	mov	r0, r6
  4020fa:	f000 fa81 	bl	402600 <__malloc_unlock>
  4020fe:	2400      	movs	r4, #0
  402100:	e738      	b.n	401f74 <_malloc_r+0x190>
  402102:	1962      	adds	r2, r4, r5
  402104:	f043 0301 	orr.w	r3, r3, #1
  402108:	f045 0501 	orr.w	r5, r5, #1
  40210c:	6065      	str	r5, [r4, #4]
  40210e:	4630      	mov	r0, r6
  402110:	60ba      	str	r2, [r7, #8]
  402112:	6053      	str	r3, [r2, #4]
  402114:	f000 fa74 	bl	402600 <__malloc_unlock>
  402118:	3408      	adds	r4, #8
  40211a:	4620      	mov	r0, r4
  40211c:	b003      	add	sp, #12
  40211e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402122:	2b14      	cmp	r3, #20
  402124:	d971      	bls.n	40220a <_malloc_r+0x426>
  402126:	2b54      	cmp	r3, #84	; 0x54
  402128:	f200 80a4 	bhi.w	402274 <_malloc_r+0x490>
  40212c:	0b28      	lsrs	r0, r5, #12
  40212e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  402132:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402136:	306e      	adds	r0, #110	; 0x6e
  402138:	e676      	b.n	401e28 <_malloc_r+0x44>
  40213a:	bf00      	nop
  40213c:	2040043c 	.word	0x2040043c
  402140:	204008f0 	.word	0x204008f0
  402144:	204008f4 	.word	0x204008f4
  402148:	204008ec 	.word	0x204008ec
  40214c:	204008e8 	.word	0x204008e8
  402150:	20400848 	.word	0x20400848
  402154:	0a5a      	lsrs	r2, r3, #9
  402156:	2a04      	cmp	r2, #4
  402158:	d95e      	bls.n	402218 <_malloc_r+0x434>
  40215a:	2a14      	cmp	r2, #20
  40215c:	f200 80b3 	bhi.w	4022c6 <_malloc_r+0x4e2>
  402160:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402164:	0049      	lsls	r1, r1, #1
  402166:	325b      	adds	r2, #91	; 0x5b
  402168:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  40216c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  402170:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 402350 <_malloc_r+0x56c>
  402174:	f1ac 0c08 	sub.w	ip, ip, #8
  402178:	458c      	cmp	ip, r1
  40217a:	f000 8088 	beq.w	40228e <_malloc_r+0x4aa>
  40217e:	684a      	ldr	r2, [r1, #4]
  402180:	f022 0203 	bic.w	r2, r2, #3
  402184:	4293      	cmp	r3, r2
  402186:	d202      	bcs.n	40218e <_malloc_r+0x3aa>
  402188:	6889      	ldr	r1, [r1, #8]
  40218a:	458c      	cmp	ip, r1
  40218c:	d1f7      	bne.n	40217e <_malloc_r+0x39a>
  40218e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  402192:	687a      	ldr	r2, [r7, #4]
  402194:	f8c4 c00c 	str.w	ip, [r4, #12]
  402198:	60a1      	str	r1, [r4, #8]
  40219a:	f8cc 4008 	str.w	r4, [ip, #8]
  40219e:	60cc      	str	r4, [r1, #12]
  4021a0:	e688      	b.n	401eb4 <_malloc_r+0xd0>
  4021a2:	1963      	adds	r3, r4, r5
  4021a4:	f042 0701 	orr.w	r7, r2, #1
  4021a8:	f045 0501 	orr.w	r5, r5, #1
  4021ac:	6065      	str	r5, [r4, #4]
  4021ae:	4630      	mov	r0, r6
  4021b0:	614b      	str	r3, [r1, #20]
  4021b2:	610b      	str	r3, [r1, #16]
  4021b4:	f8c3 e00c 	str.w	lr, [r3, #12]
  4021b8:	f8c3 e008 	str.w	lr, [r3, #8]
  4021bc:	605f      	str	r7, [r3, #4]
  4021be:	509a      	str	r2, [r3, r2]
  4021c0:	3408      	adds	r4, #8
  4021c2:	f000 fa1d 	bl	402600 <__malloc_unlock>
  4021c6:	e6d5      	b.n	401f74 <_malloc_r+0x190>
  4021c8:	684a      	ldr	r2, [r1, #4]
  4021ca:	e673      	b.n	401eb4 <_malloc_r+0xd0>
  4021cc:	f108 0801 	add.w	r8, r8, #1
  4021d0:	f018 0f03 	tst.w	r8, #3
  4021d4:	f10c 0c08 	add.w	ip, ip, #8
  4021d8:	f47f ae7f 	bne.w	401eda <_malloc_r+0xf6>
  4021dc:	e030      	b.n	402240 <_malloc_r+0x45c>
  4021de:	68dc      	ldr	r4, [r3, #12]
  4021e0:	42a3      	cmp	r3, r4
  4021e2:	bf08      	it	eq
  4021e4:	3002      	addeq	r0, #2
  4021e6:	f43f ae35 	beq.w	401e54 <_malloc_r+0x70>
  4021ea:	e6b3      	b.n	401f54 <_malloc_r+0x170>
  4021ec:	440b      	add	r3, r1
  4021ee:	460c      	mov	r4, r1
  4021f0:	685a      	ldr	r2, [r3, #4]
  4021f2:	68c9      	ldr	r1, [r1, #12]
  4021f4:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4021f8:	f042 0201 	orr.w	r2, r2, #1
  4021fc:	605a      	str	r2, [r3, #4]
  4021fe:	4630      	mov	r0, r6
  402200:	60e9      	str	r1, [r5, #12]
  402202:	608d      	str	r5, [r1, #8]
  402204:	f000 f9fc 	bl	402600 <__malloc_unlock>
  402208:	e6b4      	b.n	401f74 <_malloc_r+0x190>
  40220a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  40220e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  402212:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402216:	e607      	b.n	401e28 <_malloc_r+0x44>
  402218:	099a      	lsrs	r2, r3, #6
  40221a:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40221e:	0049      	lsls	r1, r1, #1
  402220:	3238      	adds	r2, #56	; 0x38
  402222:	e7a1      	b.n	402168 <_malloc_r+0x384>
  402224:	42bc      	cmp	r4, r7
  402226:	4b4a      	ldr	r3, [pc, #296]	; (402350 <_malloc_r+0x56c>)
  402228:	f43f af00 	beq.w	40202c <_malloc_r+0x248>
  40222c:	689c      	ldr	r4, [r3, #8]
  40222e:	6862      	ldr	r2, [r4, #4]
  402230:	f022 0203 	bic.w	r2, r2, #3
  402234:	e75a      	b.n	4020ec <_malloc_r+0x308>
  402236:	f859 3908 	ldr.w	r3, [r9], #-8
  40223a:	4599      	cmp	r9, r3
  40223c:	f040 8082 	bne.w	402344 <_malloc_r+0x560>
  402240:	f010 0f03 	tst.w	r0, #3
  402244:	f100 30ff 	add.w	r0, r0, #4294967295
  402248:	d1f5      	bne.n	402236 <_malloc_r+0x452>
  40224a:	687b      	ldr	r3, [r7, #4]
  40224c:	ea23 0304 	bic.w	r3, r3, r4
  402250:	607b      	str	r3, [r7, #4]
  402252:	0064      	lsls	r4, r4, #1
  402254:	429c      	cmp	r4, r3
  402256:	f63f aebd 	bhi.w	401fd4 <_malloc_r+0x1f0>
  40225a:	2c00      	cmp	r4, #0
  40225c:	f43f aeba 	beq.w	401fd4 <_malloc_r+0x1f0>
  402260:	421c      	tst	r4, r3
  402262:	4640      	mov	r0, r8
  402264:	f47f ae35 	bne.w	401ed2 <_malloc_r+0xee>
  402268:	0064      	lsls	r4, r4, #1
  40226a:	421c      	tst	r4, r3
  40226c:	f100 0004 	add.w	r0, r0, #4
  402270:	d0fa      	beq.n	402268 <_malloc_r+0x484>
  402272:	e62e      	b.n	401ed2 <_malloc_r+0xee>
  402274:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402278:	d818      	bhi.n	4022ac <_malloc_r+0x4c8>
  40227a:	0be8      	lsrs	r0, r5, #15
  40227c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  402280:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402284:	3077      	adds	r0, #119	; 0x77
  402286:	e5cf      	b.n	401e28 <_malloc_r+0x44>
  402288:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40228c:	e6eb      	b.n	402066 <_malloc_r+0x282>
  40228e:	2101      	movs	r1, #1
  402290:	f8d8 3004 	ldr.w	r3, [r8, #4]
  402294:	1092      	asrs	r2, r2, #2
  402296:	fa01 f202 	lsl.w	r2, r1, r2
  40229a:	431a      	orrs	r2, r3
  40229c:	f8c8 2004 	str.w	r2, [r8, #4]
  4022a0:	4661      	mov	r1, ip
  4022a2:	e777      	b.n	402194 <_malloc_r+0x3b0>
  4022a4:	2301      	movs	r3, #1
  4022a6:	f8cb 3004 	str.w	r3, [fp, #4]
  4022aa:	e725      	b.n	4020f8 <_malloc_r+0x314>
  4022ac:	f240 5254 	movw	r2, #1364	; 0x554
  4022b0:	4293      	cmp	r3, r2
  4022b2:	d820      	bhi.n	4022f6 <_malloc_r+0x512>
  4022b4:	0ca8      	lsrs	r0, r5, #18
  4022b6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  4022ba:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4022be:	307c      	adds	r0, #124	; 0x7c
  4022c0:	e5b2      	b.n	401e28 <_malloc_r+0x44>
  4022c2:	3210      	adds	r2, #16
  4022c4:	e6a4      	b.n	402010 <_malloc_r+0x22c>
  4022c6:	2a54      	cmp	r2, #84	; 0x54
  4022c8:	d826      	bhi.n	402318 <_malloc_r+0x534>
  4022ca:	0b1a      	lsrs	r2, r3, #12
  4022cc:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4022d0:	0049      	lsls	r1, r1, #1
  4022d2:	326e      	adds	r2, #110	; 0x6e
  4022d4:	e748      	b.n	402168 <_malloc_r+0x384>
  4022d6:	68bc      	ldr	r4, [r7, #8]
  4022d8:	6862      	ldr	r2, [r4, #4]
  4022da:	f022 0203 	bic.w	r2, r2, #3
  4022de:	e705      	b.n	4020ec <_malloc_r+0x308>
  4022e0:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4022e4:	2800      	cmp	r0, #0
  4022e6:	f47f aea8 	bne.w	40203a <_malloc_r+0x256>
  4022ea:	4442      	add	r2, r8
  4022ec:	68bb      	ldr	r3, [r7, #8]
  4022ee:	f042 0201 	orr.w	r2, r2, #1
  4022f2:	605a      	str	r2, [r3, #4]
  4022f4:	e6ec      	b.n	4020d0 <_malloc_r+0x2ec>
  4022f6:	23fe      	movs	r3, #254	; 0xfe
  4022f8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4022fc:	207e      	movs	r0, #126	; 0x7e
  4022fe:	e593      	b.n	401e28 <_malloc_r+0x44>
  402300:	2201      	movs	r2, #1
  402302:	f04f 0900 	mov.w	r9, #0
  402306:	e6c1      	b.n	40208c <_malloc_r+0x2a8>
  402308:	f104 0108 	add.w	r1, r4, #8
  40230c:	4630      	mov	r0, r6
  40230e:	f7ff fa59 	bl	4017c4 <_free_r>
  402312:	f8d9 1000 	ldr.w	r1, [r9]
  402316:	e6db      	b.n	4020d0 <_malloc_r+0x2ec>
  402318:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40231c:	d805      	bhi.n	40232a <_malloc_r+0x546>
  40231e:	0bda      	lsrs	r2, r3, #15
  402320:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402324:	0049      	lsls	r1, r1, #1
  402326:	3277      	adds	r2, #119	; 0x77
  402328:	e71e      	b.n	402168 <_malloc_r+0x384>
  40232a:	f240 5154 	movw	r1, #1364	; 0x554
  40232e:	428a      	cmp	r2, r1
  402330:	d805      	bhi.n	40233e <_malloc_r+0x55a>
  402332:	0c9a      	lsrs	r2, r3, #18
  402334:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402338:	0049      	lsls	r1, r1, #1
  40233a:	327c      	adds	r2, #124	; 0x7c
  40233c:	e714      	b.n	402168 <_malloc_r+0x384>
  40233e:	21fe      	movs	r1, #254	; 0xfe
  402340:	227e      	movs	r2, #126	; 0x7e
  402342:	e711      	b.n	402168 <_malloc_r+0x384>
  402344:	687b      	ldr	r3, [r7, #4]
  402346:	e784      	b.n	402252 <_malloc_r+0x46e>
  402348:	08e8      	lsrs	r0, r5, #3
  40234a:	1c43      	adds	r3, r0, #1
  40234c:	005b      	lsls	r3, r3, #1
  40234e:	e5f8      	b.n	401f42 <_malloc_r+0x15e>
  402350:	2040043c 	.word	0x2040043c
	...

00402360 <memchr>:
  402360:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402364:	2a10      	cmp	r2, #16
  402366:	db2b      	blt.n	4023c0 <memchr+0x60>
  402368:	f010 0f07 	tst.w	r0, #7
  40236c:	d008      	beq.n	402380 <memchr+0x20>
  40236e:	f810 3b01 	ldrb.w	r3, [r0], #1
  402372:	3a01      	subs	r2, #1
  402374:	428b      	cmp	r3, r1
  402376:	d02d      	beq.n	4023d4 <memchr+0x74>
  402378:	f010 0f07 	tst.w	r0, #7
  40237c:	b342      	cbz	r2, 4023d0 <memchr+0x70>
  40237e:	d1f6      	bne.n	40236e <memchr+0xe>
  402380:	b4f0      	push	{r4, r5, r6, r7}
  402382:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402386:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40238a:	f022 0407 	bic.w	r4, r2, #7
  40238e:	f07f 0700 	mvns.w	r7, #0
  402392:	2300      	movs	r3, #0
  402394:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402398:	3c08      	subs	r4, #8
  40239a:	ea85 0501 	eor.w	r5, r5, r1
  40239e:	ea86 0601 	eor.w	r6, r6, r1
  4023a2:	fa85 f547 	uadd8	r5, r5, r7
  4023a6:	faa3 f587 	sel	r5, r3, r7
  4023aa:	fa86 f647 	uadd8	r6, r6, r7
  4023ae:	faa5 f687 	sel	r6, r5, r7
  4023b2:	b98e      	cbnz	r6, 4023d8 <memchr+0x78>
  4023b4:	d1ee      	bne.n	402394 <memchr+0x34>
  4023b6:	bcf0      	pop	{r4, r5, r6, r7}
  4023b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4023bc:	f002 0207 	and.w	r2, r2, #7
  4023c0:	b132      	cbz	r2, 4023d0 <memchr+0x70>
  4023c2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4023c6:	3a01      	subs	r2, #1
  4023c8:	ea83 0301 	eor.w	r3, r3, r1
  4023cc:	b113      	cbz	r3, 4023d4 <memchr+0x74>
  4023ce:	d1f8      	bne.n	4023c2 <memchr+0x62>
  4023d0:	2000      	movs	r0, #0
  4023d2:	4770      	bx	lr
  4023d4:	3801      	subs	r0, #1
  4023d6:	4770      	bx	lr
  4023d8:	2d00      	cmp	r5, #0
  4023da:	bf06      	itte	eq
  4023dc:	4635      	moveq	r5, r6
  4023de:	3803      	subeq	r0, #3
  4023e0:	3807      	subne	r0, #7
  4023e2:	f015 0f01 	tst.w	r5, #1
  4023e6:	d107      	bne.n	4023f8 <memchr+0x98>
  4023e8:	3001      	adds	r0, #1
  4023ea:	f415 7f80 	tst.w	r5, #256	; 0x100
  4023ee:	bf02      	ittt	eq
  4023f0:	3001      	addeq	r0, #1
  4023f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4023f6:	3001      	addeq	r0, #1
  4023f8:	bcf0      	pop	{r4, r5, r6, r7}
  4023fa:	3801      	subs	r0, #1
  4023fc:	4770      	bx	lr
  4023fe:	bf00      	nop

00402400 <memcpy>:
  402400:	4684      	mov	ip, r0
  402402:	ea41 0300 	orr.w	r3, r1, r0
  402406:	f013 0303 	ands.w	r3, r3, #3
  40240a:	d16d      	bne.n	4024e8 <memcpy+0xe8>
  40240c:	3a40      	subs	r2, #64	; 0x40
  40240e:	d341      	bcc.n	402494 <memcpy+0x94>
  402410:	f851 3b04 	ldr.w	r3, [r1], #4
  402414:	f840 3b04 	str.w	r3, [r0], #4
  402418:	f851 3b04 	ldr.w	r3, [r1], #4
  40241c:	f840 3b04 	str.w	r3, [r0], #4
  402420:	f851 3b04 	ldr.w	r3, [r1], #4
  402424:	f840 3b04 	str.w	r3, [r0], #4
  402428:	f851 3b04 	ldr.w	r3, [r1], #4
  40242c:	f840 3b04 	str.w	r3, [r0], #4
  402430:	f851 3b04 	ldr.w	r3, [r1], #4
  402434:	f840 3b04 	str.w	r3, [r0], #4
  402438:	f851 3b04 	ldr.w	r3, [r1], #4
  40243c:	f840 3b04 	str.w	r3, [r0], #4
  402440:	f851 3b04 	ldr.w	r3, [r1], #4
  402444:	f840 3b04 	str.w	r3, [r0], #4
  402448:	f851 3b04 	ldr.w	r3, [r1], #4
  40244c:	f840 3b04 	str.w	r3, [r0], #4
  402450:	f851 3b04 	ldr.w	r3, [r1], #4
  402454:	f840 3b04 	str.w	r3, [r0], #4
  402458:	f851 3b04 	ldr.w	r3, [r1], #4
  40245c:	f840 3b04 	str.w	r3, [r0], #4
  402460:	f851 3b04 	ldr.w	r3, [r1], #4
  402464:	f840 3b04 	str.w	r3, [r0], #4
  402468:	f851 3b04 	ldr.w	r3, [r1], #4
  40246c:	f840 3b04 	str.w	r3, [r0], #4
  402470:	f851 3b04 	ldr.w	r3, [r1], #4
  402474:	f840 3b04 	str.w	r3, [r0], #4
  402478:	f851 3b04 	ldr.w	r3, [r1], #4
  40247c:	f840 3b04 	str.w	r3, [r0], #4
  402480:	f851 3b04 	ldr.w	r3, [r1], #4
  402484:	f840 3b04 	str.w	r3, [r0], #4
  402488:	f851 3b04 	ldr.w	r3, [r1], #4
  40248c:	f840 3b04 	str.w	r3, [r0], #4
  402490:	3a40      	subs	r2, #64	; 0x40
  402492:	d2bd      	bcs.n	402410 <memcpy+0x10>
  402494:	3230      	adds	r2, #48	; 0x30
  402496:	d311      	bcc.n	4024bc <memcpy+0xbc>
  402498:	f851 3b04 	ldr.w	r3, [r1], #4
  40249c:	f840 3b04 	str.w	r3, [r0], #4
  4024a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4024a4:	f840 3b04 	str.w	r3, [r0], #4
  4024a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4024ac:	f840 3b04 	str.w	r3, [r0], #4
  4024b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4024b4:	f840 3b04 	str.w	r3, [r0], #4
  4024b8:	3a10      	subs	r2, #16
  4024ba:	d2ed      	bcs.n	402498 <memcpy+0x98>
  4024bc:	320c      	adds	r2, #12
  4024be:	d305      	bcc.n	4024cc <memcpy+0xcc>
  4024c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4024c4:	f840 3b04 	str.w	r3, [r0], #4
  4024c8:	3a04      	subs	r2, #4
  4024ca:	d2f9      	bcs.n	4024c0 <memcpy+0xc0>
  4024cc:	3204      	adds	r2, #4
  4024ce:	d008      	beq.n	4024e2 <memcpy+0xe2>
  4024d0:	07d2      	lsls	r2, r2, #31
  4024d2:	bf1c      	itt	ne
  4024d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4024d8:	f800 3b01 	strbne.w	r3, [r0], #1
  4024dc:	d301      	bcc.n	4024e2 <memcpy+0xe2>
  4024de:	880b      	ldrh	r3, [r1, #0]
  4024e0:	8003      	strh	r3, [r0, #0]
  4024e2:	4660      	mov	r0, ip
  4024e4:	4770      	bx	lr
  4024e6:	bf00      	nop
  4024e8:	2a08      	cmp	r2, #8
  4024ea:	d313      	bcc.n	402514 <memcpy+0x114>
  4024ec:	078b      	lsls	r3, r1, #30
  4024ee:	d08d      	beq.n	40240c <memcpy+0xc>
  4024f0:	f010 0303 	ands.w	r3, r0, #3
  4024f4:	d08a      	beq.n	40240c <memcpy+0xc>
  4024f6:	f1c3 0304 	rsb	r3, r3, #4
  4024fa:	1ad2      	subs	r2, r2, r3
  4024fc:	07db      	lsls	r3, r3, #31
  4024fe:	bf1c      	itt	ne
  402500:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402504:	f800 3b01 	strbne.w	r3, [r0], #1
  402508:	d380      	bcc.n	40240c <memcpy+0xc>
  40250a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40250e:	f820 3b02 	strh.w	r3, [r0], #2
  402512:	e77b      	b.n	40240c <memcpy+0xc>
  402514:	3a04      	subs	r2, #4
  402516:	d3d9      	bcc.n	4024cc <memcpy+0xcc>
  402518:	3a01      	subs	r2, #1
  40251a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40251e:	f800 3b01 	strb.w	r3, [r0], #1
  402522:	d2f9      	bcs.n	402518 <memcpy+0x118>
  402524:	780b      	ldrb	r3, [r1, #0]
  402526:	7003      	strb	r3, [r0, #0]
  402528:	784b      	ldrb	r3, [r1, #1]
  40252a:	7043      	strb	r3, [r0, #1]
  40252c:	788b      	ldrb	r3, [r1, #2]
  40252e:	7083      	strb	r3, [r0, #2]
  402530:	4660      	mov	r0, ip
  402532:	4770      	bx	lr

00402534 <memmove>:
  402534:	4288      	cmp	r0, r1
  402536:	b5f0      	push	{r4, r5, r6, r7, lr}
  402538:	d90d      	bls.n	402556 <memmove+0x22>
  40253a:	188b      	adds	r3, r1, r2
  40253c:	4298      	cmp	r0, r3
  40253e:	d20a      	bcs.n	402556 <memmove+0x22>
  402540:	1881      	adds	r1, r0, r2
  402542:	2a00      	cmp	r2, #0
  402544:	d051      	beq.n	4025ea <memmove+0xb6>
  402546:	1a9a      	subs	r2, r3, r2
  402548:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40254c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  402550:	4293      	cmp	r3, r2
  402552:	d1f9      	bne.n	402548 <memmove+0x14>
  402554:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402556:	2a0f      	cmp	r2, #15
  402558:	d948      	bls.n	4025ec <memmove+0xb8>
  40255a:	ea41 0300 	orr.w	r3, r1, r0
  40255e:	079b      	lsls	r3, r3, #30
  402560:	d146      	bne.n	4025f0 <memmove+0xbc>
  402562:	f100 0410 	add.w	r4, r0, #16
  402566:	f101 0310 	add.w	r3, r1, #16
  40256a:	4615      	mov	r5, r2
  40256c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  402570:	f844 6c10 	str.w	r6, [r4, #-16]
  402574:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  402578:	f844 6c0c 	str.w	r6, [r4, #-12]
  40257c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  402580:	f844 6c08 	str.w	r6, [r4, #-8]
  402584:	3d10      	subs	r5, #16
  402586:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40258a:	f844 6c04 	str.w	r6, [r4, #-4]
  40258e:	2d0f      	cmp	r5, #15
  402590:	f103 0310 	add.w	r3, r3, #16
  402594:	f104 0410 	add.w	r4, r4, #16
  402598:	d8e8      	bhi.n	40256c <memmove+0x38>
  40259a:	f1a2 0310 	sub.w	r3, r2, #16
  40259e:	f023 030f 	bic.w	r3, r3, #15
  4025a2:	f002 0e0f 	and.w	lr, r2, #15
  4025a6:	3310      	adds	r3, #16
  4025a8:	f1be 0f03 	cmp.w	lr, #3
  4025ac:	4419      	add	r1, r3
  4025ae:	4403      	add	r3, r0
  4025b0:	d921      	bls.n	4025f6 <memmove+0xc2>
  4025b2:	1f1e      	subs	r6, r3, #4
  4025b4:	460d      	mov	r5, r1
  4025b6:	4674      	mov	r4, lr
  4025b8:	3c04      	subs	r4, #4
  4025ba:	f855 7b04 	ldr.w	r7, [r5], #4
  4025be:	f846 7f04 	str.w	r7, [r6, #4]!
  4025c2:	2c03      	cmp	r4, #3
  4025c4:	d8f8      	bhi.n	4025b8 <memmove+0x84>
  4025c6:	f1ae 0404 	sub.w	r4, lr, #4
  4025ca:	f024 0403 	bic.w	r4, r4, #3
  4025ce:	3404      	adds	r4, #4
  4025d0:	4423      	add	r3, r4
  4025d2:	4421      	add	r1, r4
  4025d4:	f002 0203 	and.w	r2, r2, #3
  4025d8:	b162      	cbz	r2, 4025f4 <memmove+0xc0>
  4025da:	3b01      	subs	r3, #1
  4025dc:	440a      	add	r2, r1
  4025de:	f811 4b01 	ldrb.w	r4, [r1], #1
  4025e2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4025e6:	428a      	cmp	r2, r1
  4025e8:	d1f9      	bne.n	4025de <memmove+0xaa>
  4025ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4025ec:	4603      	mov	r3, r0
  4025ee:	e7f3      	b.n	4025d8 <memmove+0xa4>
  4025f0:	4603      	mov	r3, r0
  4025f2:	e7f2      	b.n	4025da <memmove+0xa6>
  4025f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4025f6:	4672      	mov	r2, lr
  4025f8:	e7ee      	b.n	4025d8 <memmove+0xa4>
  4025fa:	bf00      	nop

004025fc <__malloc_lock>:
  4025fc:	4770      	bx	lr
  4025fe:	bf00      	nop

00402600 <__malloc_unlock>:
  402600:	4770      	bx	lr
  402602:	bf00      	nop

00402604 <_realloc_r>:
  402604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402608:	4617      	mov	r7, r2
  40260a:	b083      	sub	sp, #12
  40260c:	2900      	cmp	r1, #0
  40260e:	f000 80c1 	beq.w	402794 <_realloc_r+0x190>
  402612:	460e      	mov	r6, r1
  402614:	4681      	mov	r9, r0
  402616:	f107 050b 	add.w	r5, r7, #11
  40261a:	f7ff ffef 	bl	4025fc <__malloc_lock>
  40261e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  402622:	2d16      	cmp	r5, #22
  402624:	f02e 0403 	bic.w	r4, lr, #3
  402628:	f1a6 0808 	sub.w	r8, r6, #8
  40262c:	d840      	bhi.n	4026b0 <_realloc_r+0xac>
  40262e:	2210      	movs	r2, #16
  402630:	4615      	mov	r5, r2
  402632:	42af      	cmp	r7, r5
  402634:	d841      	bhi.n	4026ba <_realloc_r+0xb6>
  402636:	4294      	cmp	r4, r2
  402638:	da75      	bge.n	402726 <_realloc_r+0x122>
  40263a:	4bc9      	ldr	r3, [pc, #804]	; (402960 <_realloc_r+0x35c>)
  40263c:	6899      	ldr	r1, [r3, #8]
  40263e:	eb08 0004 	add.w	r0, r8, r4
  402642:	4288      	cmp	r0, r1
  402644:	6841      	ldr	r1, [r0, #4]
  402646:	f000 80d9 	beq.w	4027fc <_realloc_r+0x1f8>
  40264a:	f021 0301 	bic.w	r3, r1, #1
  40264e:	4403      	add	r3, r0
  402650:	685b      	ldr	r3, [r3, #4]
  402652:	07db      	lsls	r3, r3, #31
  402654:	d57d      	bpl.n	402752 <_realloc_r+0x14e>
  402656:	f01e 0f01 	tst.w	lr, #1
  40265a:	d035      	beq.n	4026c8 <_realloc_r+0xc4>
  40265c:	4639      	mov	r1, r7
  40265e:	4648      	mov	r0, r9
  402660:	f7ff fbc0 	bl	401de4 <_malloc_r>
  402664:	4607      	mov	r7, r0
  402666:	b1e0      	cbz	r0, 4026a2 <_realloc_r+0x9e>
  402668:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40266c:	f023 0301 	bic.w	r3, r3, #1
  402670:	4443      	add	r3, r8
  402672:	f1a0 0208 	sub.w	r2, r0, #8
  402676:	429a      	cmp	r2, r3
  402678:	f000 8144 	beq.w	402904 <_realloc_r+0x300>
  40267c:	1f22      	subs	r2, r4, #4
  40267e:	2a24      	cmp	r2, #36	; 0x24
  402680:	f200 8131 	bhi.w	4028e6 <_realloc_r+0x2e2>
  402684:	2a13      	cmp	r2, #19
  402686:	f200 8104 	bhi.w	402892 <_realloc_r+0x28e>
  40268a:	4603      	mov	r3, r0
  40268c:	4632      	mov	r2, r6
  40268e:	6811      	ldr	r1, [r2, #0]
  402690:	6019      	str	r1, [r3, #0]
  402692:	6851      	ldr	r1, [r2, #4]
  402694:	6059      	str	r1, [r3, #4]
  402696:	6892      	ldr	r2, [r2, #8]
  402698:	609a      	str	r2, [r3, #8]
  40269a:	4631      	mov	r1, r6
  40269c:	4648      	mov	r0, r9
  40269e:	f7ff f891 	bl	4017c4 <_free_r>
  4026a2:	4648      	mov	r0, r9
  4026a4:	f7ff ffac 	bl	402600 <__malloc_unlock>
  4026a8:	4638      	mov	r0, r7
  4026aa:	b003      	add	sp, #12
  4026ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026b0:	f025 0507 	bic.w	r5, r5, #7
  4026b4:	2d00      	cmp	r5, #0
  4026b6:	462a      	mov	r2, r5
  4026b8:	dabb      	bge.n	402632 <_realloc_r+0x2e>
  4026ba:	230c      	movs	r3, #12
  4026bc:	2000      	movs	r0, #0
  4026be:	f8c9 3000 	str.w	r3, [r9]
  4026c2:	b003      	add	sp, #12
  4026c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026c8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4026cc:	ebc3 0a08 	rsb	sl, r3, r8
  4026d0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4026d4:	f023 0c03 	bic.w	ip, r3, #3
  4026d8:	eb04 030c 	add.w	r3, r4, ip
  4026dc:	4293      	cmp	r3, r2
  4026de:	dbbd      	blt.n	40265c <_realloc_r+0x58>
  4026e0:	4657      	mov	r7, sl
  4026e2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4026e6:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4026ea:	1f22      	subs	r2, r4, #4
  4026ec:	2a24      	cmp	r2, #36	; 0x24
  4026ee:	60c1      	str	r1, [r0, #12]
  4026f0:	6088      	str	r0, [r1, #8]
  4026f2:	f200 8117 	bhi.w	402924 <_realloc_r+0x320>
  4026f6:	2a13      	cmp	r2, #19
  4026f8:	f240 8112 	bls.w	402920 <_realloc_r+0x31c>
  4026fc:	6831      	ldr	r1, [r6, #0]
  4026fe:	f8ca 1008 	str.w	r1, [sl, #8]
  402702:	6871      	ldr	r1, [r6, #4]
  402704:	f8ca 100c 	str.w	r1, [sl, #12]
  402708:	2a1b      	cmp	r2, #27
  40270a:	f200 812b 	bhi.w	402964 <_realloc_r+0x360>
  40270e:	3608      	adds	r6, #8
  402710:	f10a 0210 	add.w	r2, sl, #16
  402714:	6831      	ldr	r1, [r6, #0]
  402716:	6011      	str	r1, [r2, #0]
  402718:	6871      	ldr	r1, [r6, #4]
  40271a:	6051      	str	r1, [r2, #4]
  40271c:	68b1      	ldr	r1, [r6, #8]
  40271e:	6091      	str	r1, [r2, #8]
  402720:	463e      	mov	r6, r7
  402722:	461c      	mov	r4, r3
  402724:	46d0      	mov	r8, sl
  402726:	1b63      	subs	r3, r4, r5
  402728:	2b0f      	cmp	r3, #15
  40272a:	d81d      	bhi.n	402768 <_realloc_r+0x164>
  40272c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  402730:	f003 0301 	and.w	r3, r3, #1
  402734:	4323      	orrs	r3, r4
  402736:	4444      	add	r4, r8
  402738:	f8c8 3004 	str.w	r3, [r8, #4]
  40273c:	6863      	ldr	r3, [r4, #4]
  40273e:	f043 0301 	orr.w	r3, r3, #1
  402742:	6063      	str	r3, [r4, #4]
  402744:	4648      	mov	r0, r9
  402746:	f7ff ff5b 	bl	402600 <__malloc_unlock>
  40274a:	4630      	mov	r0, r6
  40274c:	b003      	add	sp, #12
  40274e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402752:	f021 0103 	bic.w	r1, r1, #3
  402756:	4421      	add	r1, r4
  402758:	4291      	cmp	r1, r2
  40275a:	db21      	blt.n	4027a0 <_realloc_r+0x19c>
  40275c:	68c3      	ldr	r3, [r0, #12]
  40275e:	6882      	ldr	r2, [r0, #8]
  402760:	460c      	mov	r4, r1
  402762:	60d3      	str	r3, [r2, #12]
  402764:	609a      	str	r2, [r3, #8]
  402766:	e7de      	b.n	402726 <_realloc_r+0x122>
  402768:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40276c:	eb08 0105 	add.w	r1, r8, r5
  402770:	f002 0201 	and.w	r2, r2, #1
  402774:	4315      	orrs	r5, r2
  402776:	f043 0201 	orr.w	r2, r3, #1
  40277a:	440b      	add	r3, r1
  40277c:	f8c8 5004 	str.w	r5, [r8, #4]
  402780:	604a      	str	r2, [r1, #4]
  402782:	685a      	ldr	r2, [r3, #4]
  402784:	f042 0201 	orr.w	r2, r2, #1
  402788:	3108      	adds	r1, #8
  40278a:	605a      	str	r2, [r3, #4]
  40278c:	4648      	mov	r0, r9
  40278e:	f7ff f819 	bl	4017c4 <_free_r>
  402792:	e7d7      	b.n	402744 <_realloc_r+0x140>
  402794:	4611      	mov	r1, r2
  402796:	b003      	add	sp, #12
  402798:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40279c:	f7ff bb22 	b.w	401de4 <_malloc_r>
  4027a0:	f01e 0f01 	tst.w	lr, #1
  4027a4:	f47f af5a 	bne.w	40265c <_realloc_r+0x58>
  4027a8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4027ac:	ebc3 0a08 	rsb	sl, r3, r8
  4027b0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4027b4:	f023 0c03 	bic.w	ip, r3, #3
  4027b8:	eb01 0e0c 	add.w	lr, r1, ip
  4027bc:	4596      	cmp	lr, r2
  4027be:	db8b      	blt.n	4026d8 <_realloc_r+0xd4>
  4027c0:	68c3      	ldr	r3, [r0, #12]
  4027c2:	6882      	ldr	r2, [r0, #8]
  4027c4:	4657      	mov	r7, sl
  4027c6:	60d3      	str	r3, [r2, #12]
  4027c8:	609a      	str	r2, [r3, #8]
  4027ca:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4027ce:	f8da 300c 	ldr.w	r3, [sl, #12]
  4027d2:	60cb      	str	r3, [r1, #12]
  4027d4:	1f22      	subs	r2, r4, #4
  4027d6:	2a24      	cmp	r2, #36	; 0x24
  4027d8:	6099      	str	r1, [r3, #8]
  4027da:	f200 8099 	bhi.w	402910 <_realloc_r+0x30c>
  4027de:	2a13      	cmp	r2, #19
  4027e0:	d962      	bls.n	4028a8 <_realloc_r+0x2a4>
  4027e2:	6833      	ldr	r3, [r6, #0]
  4027e4:	f8ca 3008 	str.w	r3, [sl, #8]
  4027e8:	6873      	ldr	r3, [r6, #4]
  4027ea:	f8ca 300c 	str.w	r3, [sl, #12]
  4027ee:	2a1b      	cmp	r2, #27
  4027f0:	f200 80a0 	bhi.w	402934 <_realloc_r+0x330>
  4027f4:	3608      	adds	r6, #8
  4027f6:	f10a 0310 	add.w	r3, sl, #16
  4027fa:	e056      	b.n	4028aa <_realloc_r+0x2a6>
  4027fc:	f021 0b03 	bic.w	fp, r1, #3
  402800:	44a3      	add	fp, r4
  402802:	f105 0010 	add.w	r0, r5, #16
  402806:	4583      	cmp	fp, r0
  402808:	da59      	bge.n	4028be <_realloc_r+0x2ba>
  40280a:	f01e 0f01 	tst.w	lr, #1
  40280e:	f47f af25 	bne.w	40265c <_realloc_r+0x58>
  402812:	f856 1c08 	ldr.w	r1, [r6, #-8]
  402816:	ebc1 0a08 	rsb	sl, r1, r8
  40281a:	f8da 1004 	ldr.w	r1, [sl, #4]
  40281e:	f021 0c03 	bic.w	ip, r1, #3
  402822:	44e3      	add	fp, ip
  402824:	4558      	cmp	r0, fp
  402826:	f73f af57 	bgt.w	4026d8 <_realloc_r+0xd4>
  40282a:	4657      	mov	r7, sl
  40282c:	f8da 100c 	ldr.w	r1, [sl, #12]
  402830:	f857 0f08 	ldr.w	r0, [r7, #8]!
  402834:	1f22      	subs	r2, r4, #4
  402836:	2a24      	cmp	r2, #36	; 0x24
  402838:	60c1      	str	r1, [r0, #12]
  40283a:	6088      	str	r0, [r1, #8]
  40283c:	f200 80b4 	bhi.w	4029a8 <_realloc_r+0x3a4>
  402840:	2a13      	cmp	r2, #19
  402842:	f240 80a5 	bls.w	402990 <_realloc_r+0x38c>
  402846:	6831      	ldr	r1, [r6, #0]
  402848:	f8ca 1008 	str.w	r1, [sl, #8]
  40284c:	6871      	ldr	r1, [r6, #4]
  40284e:	f8ca 100c 	str.w	r1, [sl, #12]
  402852:	2a1b      	cmp	r2, #27
  402854:	f200 80af 	bhi.w	4029b6 <_realloc_r+0x3b2>
  402858:	3608      	adds	r6, #8
  40285a:	f10a 0210 	add.w	r2, sl, #16
  40285e:	6831      	ldr	r1, [r6, #0]
  402860:	6011      	str	r1, [r2, #0]
  402862:	6871      	ldr	r1, [r6, #4]
  402864:	6051      	str	r1, [r2, #4]
  402866:	68b1      	ldr	r1, [r6, #8]
  402868:	6091      	str	r1, [r2, #8]
  40286a:	eb0a 0105 	add.w	r1, sl, r5
  40286e:	ebc5 020b 	rsb	r2, r5, fp
  402872:	f042 0201 	orr.w	r2, r2, #1
  402876:	6099      	str	r1, [r3, #8]
  402878:	604a      	str	r2, [r1, #4]
  40287a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40287e:	f003 0301 	and.w	r3, r3, #1
  402882:	431d      	orrs	r5, r3
  402884:	4648      	mov	r0, r9
  402886:	f8ca 5004 	str.w	r5, [sl, #4]
  40288a:	f7ff feb9 	bl	402600 <__malloc_unlock>
  40288e:	4638      	mov	r0, r7
  402890:	e75c      	b.n	40274c <_realloc_r+0x148>
  402892:	6833      	ldr	r3, [r6, #0]
  402894:	6003      	str	r3, [r0, #0]
  402896:	6873      	ldr	r3, [r6, #4]
  402898:	6043      	str	r3, [r0, #4]
  40289a:	2a1b      	cmp	r2, #27
  40289c:	d827      	bhi.n	4028ee <_realloc_r+0x2ea>
  40289e:	f100 0308 	add.w	r3, r0, #8
  4028a2:	f106 0208 	add.w	r2, r6, #8
  4028a6:	e6f2      	b.n	40268e <_realloc_r+0x8a>
  4028a8:	463b      	mov	r3, r7
  4028aa:	6832      	ldr	r2, [r6, #0]
  4028ac:	601a      	str	r2, [r3, #0]
  4028ae:	6872      	ldr	r2, [r6, #4]
  4028b0:	605a      	str	r2, [r3, #4]
  4028b2:	68b2      	ldr	r2, [r6, #8]
  4028b4:	609a      	str	r2, [r3, #8]
  4028b6:	463e      	mov	r6, r7
  4028b8:	4674      	mov	r4, lr
  4028ba:	46d0      	mov	r8, sl
  4028bc:	e733      	b.n	402726 <_realloc_r+0x122>
  4028be:	eb08 0105 	add.w	r1, r8, r5
  4028c2:	ebc5 0b0b 	rsb	fp, r5, fp
  4028c6:	f04b 0201 	orr.w	r2, fp, #1
  4028ca:	6099      	str	r1, [r3, #8]
  4028cc:	604a      	str	r2, [r1, #4]
  4028ce:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4028d2:	f003 0301 	and.w	r3, r3, #1
  4028d6:	431d      	orrs	r5, r3
  4028d8:	4648      	mov	r0, r9
  4028da:	f846 5c04 	str.w	r5, [r6, #-4]
  4028de:	f7ff fe8f 	bl	402600 <__malloc_unlock>
  4028e2:	4630      	mov	r0, r6
  4028e4:	e732      	b.n	40274c <_realloc_r+0x148>
  4028e6:	4631      	mov	r1, r6
  4028e8:	f7ff fe24 	bl	402534 <memmove>
  4028ec:	e6d5      	b.n	40269a <_realloc_r+0x96>
  4028ee:	68b3      	ldr	r3, [r6, #8]
  4028f0:	6083      	str	r3, [r0, #8]
  4028f2:	68f3      	ldr	r3, [r6, #12]
  4028f4:	60c3      	str	r3, [r0, #12]
  4028f6:	2a24      	cmp	r2, #36	; 0x24
  4028f8:	d028      	beq.n	40294c <_realloc_r+0x348>
  4028fa:	f100 0310 	add.w	r3, r0, #16
  4028fe:	f106 0210 	add.w	r2, r6, #16
  402902:	e6c4      	b.n	40268e <_realloc_r+0x8a>
  402904:	f850 3c04 	ldr.w	r3, [r0, #-4]
  402908:	f023 0303 	bic.w	r3, r3, #3
  40290c:	441c      	add	r4, r3
  40290e:	e70a      	b.n	402726 <_realloc_r+0x122>
  402910:	4631      	mov	r1, r6
  402912:	4638      	mov	r0, r7
  402914:	4674      	mov	r4, lr
  402916:	46d0      	mov	r8, sl
  402918:	f7ff fe0c 	bl	402534 <memmove>
  40291c:	463e      	mov	r6, r7
  40291e:	e702      	b.n	402726 <_realloc_r+0x122>
  402920:	463a      	mov	r2, r7
  402922:	e6f7      	b.n	402714 <_realloc_r+0x110>
  402924:	4631      	mov	r1, r6
  402926:	4638      	mov	r0, r7
  402928:	461c      	mov	r4, r3
  40292a:	46d0      	mov	r8, sl
  40292c:	f7ff fe02 	bl	402534 <memmove>
  402930:	463e      	mov	r6, r7
  402932:	e6f8      	b.n	402726 <_realloc_r+0x122>
  402934:	68b3      	ldr	r3, [r6, #8]
  402936:	f8ca 3010 	str.w	r3, [sl, #16]
  40293a:	68f3      	ldr	r3, [r6, #12]
  40293c:	f8ca 3014 	str.w	r3, [sl, #20]
  402940:	2a24      	cmp	r2, #36	; 0x24
  402942:	d01b      	beq.n	40297c <_realloc_r+0x378>
  402944:	3610      	adds	r6, #16
  402946:	f10a 0318 	add.w	r3, sl, #24
  40294a:	e7ae      	b.n	4028aa <_realloc_r+0x2a6>
  40294c:	6933      	ldr	r3, [r6, #16]
  40294e:	6103      	str	r3, [r0, #16]
  402950:	6973      	ldr	r3, [r6, #20]
  402952:	6143      	str	r3, [r0, #20]
  402954:	f106 0218 	add.w	r2, r6, #24
  402958:	f100 0318 	add.w	r3, r0, #24
  40295c:	e697      	b.n	40268e <_realloc_r+0x8a>
  40295e:	bf00      	nop
  402960:	2040043c 	.word	0x2040043c
  402964:	68b1      	ldr	r1, [r6, #8]
  402966:	f8ca 1010 	str.w	r1, [sl, #16]
  40296a:	68f1      	ldr	r1, [r6, #12]
  40296c:	f8ca 1014 	str.w	r1, [sl, #20]
  402970:	2a24      	cmp	r2, #36	; 0x24
  402972:	d00f      	beq.n	402994 <_realloc_r+0x390>
  402974:	3610      	adds	r6, #16
  402976:	f10a 0218 	add.w	r2, sl, #24
  40297a:	e6cb      	b.n	402714 <_realloc_r+0x110>
  40297c:	6933      	ldr	r3, [r6, #16]
  40297e:	f8ca 3018 	str.w	r3, [sl, #24]
  402982:	6973      	ldr	r3, [r6, #20]
  402984:	f8ca 301c 	str.w	r3, [sl, #28]
  402988:	3618      	adds	r6, #24
  40298a:	f10a 0320 	add.w	r3, sl, #32
  40298e:	e78c      	b.n	4028aa <_realloc_r+0x2a6>
  402990:	463a      	mov	r2, r7
  402992:	e764      	b.n	40285e <_realloc_r+0x25a>
  402994:	6932      	ldr	r2, [r6, #16]
  402996:	f8ca 2018 	str.w	r2, [sl, #24]
  40299a:	6972      	ldr	r2, [r6, #20]
  40299c:	f8ca 201c 	str.w	r2, [sl, #28]
  4029a0:	3618      	adds	r6, #24
  4029a2:	f10a 0220 	add.w	r2, sl, #32
  4029a6:	e6b5      	b.n	402714 <_realloc_r+0x110>
  4029a8:	4631      	mov	r1, r6
  4029aa:	4638      	mov	r0, r7
  4029ac:	9301      	str	r3, [sp, #4]
  4029ae:	f7ff fdc1 	bl	402534 <memmove>
  4029b2:	9b01      	ldr	r3, [sp, #4]
  4029b4:	e759      	b.n	40286a <_realloc_r+0x266>
  4029b6:	68b1      	ldr	r1, [r6, #8]
  4029b8:	f8ca 1010 	str.w	r1, [sl, #16]
  4029bc:	68f1      	ldr	r1, [r6, #12]
  4029be:	f8ca 1014 	str.w	r1, [sl, #20]
  4029c2:	2a24      	cmp	r2, #36	; 0x24
  4029c4:	d003      	beq.n	4029ce <_realloc_r+0x3ca>
  4029c6:	3610      	adds	r6, #16
  4029c8:	f10a 0218 	add.w	r2, sl, #24
  4029cc:	e747      	b.n	40285e <_realloc_r+0x25a>
  4029ce:	6932      	ldr	r2, [r6, #16]
  4029d0:	f8ca 2018 	str.w	r2, [sl, #24]
  4029d4:	6972      	ldr	r2, [r6, #20]
  4029d6:	f8ca 201c 	str.w	r2, [sl, #28]
  4029da:	3618      	adds	r6, #24
  4029dc:	f10a 0220 	add.w	r2, sl, #32
  4029e0:	e73d      	b.n	40285e <_realloc_r+0x25a>
  4029e2:	bf00      	nop

004029e4 <_sbrk_r>:
  4029e4:	b538      	push	{r3, r4, r5, lr}
  4029e6:	4c07      	ldr	r4, [pc, #28]	; (402a04 <_sbrk_r+0x20>)
  4029e8:	2300      	movs	r3, #0
  4029ea:	4605      	mov	r5, r0
  4029ec:	4608      	mov	r0, r1
  4029ee:	6023      	str	r3, [r4, #0]
  4029f0:	f7fe f958 	bl	400ca4 <_sbrk>
  4029f4:	1c43      	adds	r3, r0, #1
  4029f6:	d000      	beq.n	4029fa <_sbrk_r+0x16>
  4029f8:	bd38      	pop	{r3, r4, r5, pc}
  4029fa:	6823      	ldr	r3, [r4, #0]
  4029fc:	2b00      	cmp	r3, #0
  4029fe:	d0fb      	beq.n	4029f8 <_sbrk_r+0x14>
  402a00:	602b      	str	r3, [r5, #0]
  402a02:	bd38      	pop	{r3, r4, r5, pc}
  402a04:	20400964 	.word	0x20400964

00402a08 <__sread>:
  402a08:	b510      	push	{r4, lr}
  402a0a:	460c      	mov	r4, r1
  402a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a10:	f000 f99a 	bl	402d48 <_read_r>
  402a14:	2800      	cmp	r0, #0
  402a16:	db03      	blt.n	402a20 <__sread+0x18>
  402a18:	6d23      	ldr	r3, [r4, #80]	; 0x50
  402a1a:	4403      	add	r3, r0
  402a1c:	6523      	str	r3, [r4, #80]	; 0x50
  402a1e:	bd10      	pop	{r4, pc}
  402a20:	89a3      	ldrh	r3, [r4, #12]
  402a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402a26:	81a3      	strh	r3, [r4, #12]
  402a28:	bd10      	pop	{r4, pc}
  402a2a:	bf00      	nop

00402a2c <__swrite>:
  402a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a30:	4616      	mov	r6, r2
  402a32:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  402a36:	461f      	mov	r7, r3
  402a38:	05d3      	lsls	r3, r2, #23
  402a3a:	460c      	mov	r4, r1
  402a3c:	4605      	mov	r5, r0
  402a3e:	d507      	bpl.n	402a50 <__swrite+0x24>
  402a40:	2200      	movs	r2, #0
  402a42:	2302      	movs	r3, #2
  402a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a48:	f000 f968 	bl	402d1c <_lseek_r>
  402a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402a54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402a58:	81a2      	strh	r2, [r4, #12]
  402a5a:	463b      	mov	r3, r7
  402a5c:	4632      	mov	r2, r6
  402a5e:	4628      	mov	r0, r5
  402a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402a64:	f000 b814 	b.w	402a90 <_write_r>

00402a68 <__sseek>:
  402a68:	b510      	push	{r4, lr}
  402a6a:	460c      	mov	r4, r1
  402a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a70:	f000 f954 	bl	402d1c <_lseek_r>
  402a74:	89a3      	ldrh	r3, [r4, #12]
  402a76:	1c42      	adds	r2, r0, #1
  402a78:	bf0e      	itee	eq
  402a7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  402a7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  402a82:	6520      	strne	r0, [r4, #80]	; 0x50
  402a84:	81a3      	strh	r3, [r4, #12]
  402a86:	bd10      	pop	{r4, pc}

00402a88 <__sclose>:
  402a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a8c:	f000 b8cc 	b.w	402c28 <_close_r>

00402a90 <_write_r>:
  402a90:	b570      	push	{r4, r5, r6, lr}
  402a92:	460d      	mov	r5, r1
  402a94:	4c08      	ldr	r4, [pc, #32]	; (402ab8 <_write_r+0x28>)
  402a96:	4611      	mov	r1, r2
  402a98:	4606      	mov	r6, r0
  402a9a:	461a      	mov	r2, r3
  402a9c:	4628      	mov	r0, r5
  402a9e:	2300      	movs	r3, #0
  402aa0:	6023      	str	r3, [r4, #0]
  402aa2:	f7fd fbd1 	bl	400248 <_write>
  402aa6:	1c43      	adds	r3, r0, #1
  402aa8:	d000      	beq.n	402aac <_write_r+0x1c>
  402aaa:	bd70      	pop	{r4, r5, r6, pc}
  402aac:	6823      	ldr	r3, [r4, #0]
  402aae:	2b00      	cmp	r3, #0
  402ab0:	d0fb      	beq.n	402aaa <_write_r+0x1a>
  402ab2:	6033      	str	r3, [r6, #0]
  402ab4:	bd70      	pop	{r4, r5, r6, pc}
  402ab6:	bf00      	nop
  402ab8:	20400964 	.word	0x20400964

00402abc <__swsetup_r>:
  402abc:	b538      	push	{r3, r4, r5, lr}
  402abe:	4b30      	ldr	r3, [pc, #192]	; (402b80 <__swsetup_r+0xc4>)
  402ac0:	681b      	ldr	r3, [r3, #0]
  402ac2:	4605      	mov	r5, r0
  402ac4:	460c      	mov	r4, r1
  402ac6:	b113      	cbz	r3, 402ace <__swsetup_r+0x12>
  402ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402aca:	2a00      	cmp	r2, #0
  402acc:	d038      	beq.n	402b40 <__swsetup_r+0x84>
  402ace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402ad2:	b293      	uxth	r3, r2
  402ad4:	0718      	lsls	r0, r3, #28
  402ad6:	d50c      	bpl.n	402af2 <__swsetup_r+0x36>
  402ad8:	6920      	ldr	r0, [r4, #16]
  402ada:	b1a8      	cbz	r0, 402b08 <__swsetup_r+0x4c>
  402adc:	f013 0201 	ands.w	r2, r3, #1
  402ae0:	d01e      	beq.n	402b20 <__swsetup_r+0x64>
  402ae2:	6963      	ldr	r3, [r4, #20]
  402ae4:	2200      	movs	r2, #0
  402ae6:	425b      	negs	r3, r3
  402ae8:	61a3      	str	r3, [r4, #24]
  402aea:	60a2      	str	r2, [r4, #8]
  402aec:	b1f0      	cbz	r0, 402b2c <__swsetup_r+0x70>
  402aee:	2000      	movs	r0, #0
  402af0:	bd38      	pop	{r3, r4, r5, pc}
  402af2:	06d9      	lsls	r1, r3, #27
  402af4:	d53c      	bpl.n	402b70 <__swsetup_r+0xb4>
  402af6:	0758      	lsls	r0, r3, #29
  402af8:	d426      	bmi.n	402b48 <__swsetup_r+0x8c>
  402afa:	6920      	ldr	r0, [r4, #16]
  402afc:	f042 0308 	orr.w	r3, r2, #8
  402b00:	81a3      	strh	r3, [r4, #12]
  402b02:	b29b      	uxth	r3, r3
  402b04:	2800      	cmp	r0, #0
  402b06:	d1e9      	bne.n	402adc <__swsetup_r+0x20>
  402b08:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402b0c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402b10:	d0e4      	beq.n	402adc <__swsetup_r+0x20>
  402b12:	4628      	mov	r0, r5
  402b14:	4621      	mov	r1, r4
  402b16:	f7ff f919 	bl	401d4c <__smakebuf_r>
  402b1a:	89a3      	ldrh	r3, [r4, #12]
  402b1c:	6920      	ldr	r0, [r4, #16]
  402b1e:	e7dd      	b.n	402adc <__swsetup_r+0x20>
  402b20:	0799      	lsls	r1, r3, #30
  402b22:	bf58      	it	pl
  402b24:	6962      	ldrpl	r2, [r4, #20]
  402b26:	60a2      	str	r2, [r4, #8]
  402b28:	2800      	cmp	r0, #0
  402b2a:	d1e0      	bne.n	402aee <__swsetup_r+0x32>
  402b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b30:	061a      	lsls	r2, r3, #24
  402b32:	d5dd      	bpl.n	402af0 <__swsetup_r+0x34>
  402b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402b38:	81a3      	strh	r3, [r4, #12]
  402b3a:	f04f 30ff 	mov.w	r0, #4294967295
  402b3e:	bd38      	pop	{r3, r4, r5, pc}
  402b40:	4618      	mov	r0, r3
  402b42:	f7fe fdd3 	bl	4016ec <__sinit>
  402b46:	e7c2      	b.n	402ace <__swsetup_r+0x12>
  402b48:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402b4a:	b151      	cbz	r1, 402b62 <__swsetup_r+0xa6>
  402b4c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402b50:	4299      	cmp	r1, r3
  402b52:	d004      	beq.n	402b5e <__swsetup_r+0xa2>
  402b54:	4628      	mov	r0, r5
  402b56:	f7fe fe35 	bl	4017c4 <_free_r>
  402b5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402b5e:	2300      	movs	r3, #0
  402b60:	6323      	str	r3, [r4, #48]	; 0x30
  402b62:	2300      	movs	r3, #0
  402b64:	6920      	ldr	r0, [r4, #16]
  402b66:	6063      	str	r3, [r4, #4]
  402b68:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402b6c:	6020      	str	r0, [r4, #0]
  402b6e:	e7c5      	b.n	402afc <__swsetup_r+0x40>
  402b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402b74:	2309      	movs	r3, #9
  402b76:	602b      	str	r3, [r5, #0]
  402b78:	f04f 30ff 	mov.w	r0, #4294967295
  402b7c:	81a2      	strh	r2, [r4, #12]
  402b7e:	bd38      	pop	{r3, r4, r5, pc}
  402b80:	20400438 	.word	0x20400438

00402b84 <__register_exitproc>:
  402b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b88:	4c25      	ldr	r4, [pc, #148]	; (402c20 <__register_exitproc+0x9c>)
  402b8a:	6825      	ldr	r5, [r4, #0]
  402b8c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402b90:	4606      	mov	r6, r0
  402b92:	4688      	mov	r8, r1
  402b94:	4692      	mov	sl, r2
  402b96:	4699      	mov	r9, r3
  402b98:	b3c4      	cbz	r4, 402c0c <__register_exitproc+0x88>
  402b9a:	6860      	ldr	r0, [r4, #4]
  402b9c:	281f      	cmp	r0, #31
  402b9e:	dc17      	bgt.n	402bd0 <__register_exitproc+0x4c>
  402ba0:	1c43      	adds	r3, r0, #1
  402ba2:	b176      	cbz	r6, 402bc2 <__register_exitproc+0x3e>
  402ba4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402ba8:	2201      	movs	r2, #1
  402baa:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402bae:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  402bb2:	4082      	lsls	r2, r0
  402bb4:	4311      	orrs	r1, r2
  402bb6:	2e02      	cmp	r6, #2
  402bb8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  402bbc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402bc0:	d01e      	beq.n	402c00 <__register_exitproc+0x7c>
  402bc2:	3002      	adds	r0, #2
  402bc4:	6063      	str	r3, [r4, #4]
  402bc6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402bca:	2000      	movs	r0, #0
  402bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402bd0:	4b14      	ldr	r3, [pc, #80]	; (402c24 <__register_exitproc+0xa0>)
  402bd2:	b303      	cbz	r3, 402c16 <__register_exitproc+0x92>
  402bd4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402bd8:	f7ff f8fc 	bl	401dd4 <malloc>
  402bdc:	4604      	mov	r4, r0
  402bde:	b1d0      	cbz	r0, 402c16 <__register_exitproc+0x92>
  402be0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402be4:	2700      	movs	r7, #0
  402be6:	e880 0088 	stmia.w	r0, {r3, r7}
  402bea:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402bee:	4638      	mov	r0, r7
  402bf0:	2301      	movs	r3, #1
  402bf2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402bf6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402bfa:	2e00      	cmp	r6, #0
  402bfc:	d0e1      	beq.n	402bc2 <__register_exitproc+0x3e>
  402bfe:	e7d1      	b.n	402ba4 <__register_exitproc+0x20>
  402c00:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402c04:	430a      	orrs	r2, r1
  402c06:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402c0a:	e7da      	b.n	402bc2 <__register_exitproc+0x3e>
  402c0c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402c10:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402c14:	e7c1      	b.n	402b9a <__register_exitproc+0x16>
  402c16:	f04f 30ff 	mov.w	r0, #4294967295
  402c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c1e:	bf00      	nop
  402c20:	00402df4 	.word	0x00402df4
  402c24:	00401dd5 	.word	0x00401dd5

00402c28 <_close_r>:
  402c28:	b538      	push	{r3, r4, r5, lr}
  402c2a:	4c07      	ldr	r4, [pc, #28]	; (402c48 <_close_r+0x20>)
  402c2c:	2300      	movs	r3, #0
  402c2e:	4605      	mov	r5, r0
  402c30:	4608      	mov	r0, r1
  402c32:	6023      	str	r3, [r4, #0]
  402c34:	f7fe f850 	bl	400cd8 <_close>
  402c38:	1c43      	adds	r3, r0, #1
  402c3a:	d000      	beq.n	402c3e <_close_r+0x16>
  402c3c:	bd38      	pop	{r3, r4, r5, pc}
  402c3e:	6823      	ldr	r3, [r4, #0]
  402c40:	2b00      	cmp	r3, #0
  402c42:	d0fb      	beq.n	402c3c <_close_r+0x14>
  402c44:	602b      	str	r3, [r5, #0]
  402c46:	bd38      	pop	{r3, r4, r5, pc}
  402c48:	20400964 	.word	0x20400964

00402c4c <_fclose_r>:
  402c4c:	2900      	cmp	r1, #0
  402c4e:	d03d      	beq.n	402ccc <_fclose_r+0x80>
  402c50:	b570      	push	{r4, r5, r6, lr}
  402c52:	4605      	mov	r5, r0
  402c54:	460c      	mov	r4, r1
  402c56:	b108      	cbz	r0, 402c5c <_fclose_r+0x10>
  402c58:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402c5a:	b37b      	cbz	r3, 402cbc <_fclose_r+0x70>
  402c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402c60:	b90b      	cbnz	r3, 402c66 <_fclose_r+0x1a>
  402c62:	2000      	movs	r0, #0
  402c64:	bd70      	pop	{r4, r5, r6, pc}
  402c66:	4621      	mov	r1, r4
  402c68:	4628      	mov	r0, r5
  402c6a:	f7fe fc07 	bl	40147c <__sflush_r>
  402c6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402c70:	4606      	mov	r6, r0
  402c72:	b133      	cbz	r3, 402c82 <_fclose_r+0x36>
  402c74:	69e1      	ldr	r1, [r4, #28]
  402c76:	4628      	mov	r0, r5
  402c78:	4798      	blx	r3
  402c7a:	2800      	cmp	r0, #0
  402c7c:	bfb8      	it	lt
  402c7e:	f04f 36ff 	movlt.w	r6, #4294967295
  402c82:	89a3      	ldrh	r3, [r4, #12]
  402c84:	061b      	lsls	r3, r3, #24
  402c86:	d41c      	bmi.n	402cc2 <_fclose_r+0x76>
  402c88:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402c8a:	b141      	cbz	r1, 402c9e <_fclose_r+0x52>
  402c8c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402c90:	4299      	cmp	r1, r3
  402c92:	d002      	beq.n	402c9a <_fclose_r+0x4e>
  402c94:	4628      	mov	r0, r5
  402c96:	f7fe fd95 	bl	4017c4 <_free_r>
  402c9a:	2300      	movs	r3, #0
  402c9c:	6323      	str	r3, [r4, #48]	; 0x30
  402c9e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402ca0:	b121      	cbz	r1, 402cac <_fclose_r+0x60>
  402ca2:	4628      	mov	r0, r5
  402ca4:	f7fe fd8e 	bl	4017c4 <_free_r>
  402ca8:	2300      	movs	r3, #0
  402caa:	6463      	str	r3, [r4, #68]	; 0x44
  402cac:	f7fe fd24 	bl	4016f8 <__sfp_lock_acquire>
  402cb0:	2300      	movs	r3, #0
  402cb2:	81a3      	strh	r3, [r4, #12]
  402cb4:	f7fe fd22 	bl	4016fc <__sfp_lock_release>
  402cb8:	4630      	mov	r0, r6
  402cba:	bd70      	pop	{r4, r5, r6, pc}
  402cbc:	f7fe fd16 	bl	4016ec <__sinit>
  402cc0:	e7cc      	b.n	402c5c <_fclose_r+0x10>
  402cc2:	6921      	ldr	r1, [r4, #16]
  402cc4:	4628      	mov	r0, r5
  402cc6:	f7fe fd7d 	bl	4017c4 <_free_r>
  402cca:	e7dd      	b.n	402c88 <_fclose_r+0x3c>
  402ccc:	2000      	movs	r0, #0
  402cce:	4770      	bx	lr

00402cd0 <_fstat_r>:
  402cd0:	b538      	push	{r3, r4, r5, lr}
  402cd2:	460b      	mov	r3, r1
  402cd4:	4c07      	ldr	r4, [pc, #28]	; (402cf4 <_fstat_r+0x24>)
  402cd6:	4605      	mov	r5, r0
  402cd8:	4611      	mov	r1, r2
  402cda:	4618      	mov	r0, r3
  402cdc:	2300      	movs	r3, #0
  402cde:	6023      	str	r3, [r4, #0]
  402ce0:	f7fd fffe 	bl	400ce0 <_fstat>
  402ce4:	1c43      	adds	r3, r0, #1
  402ce6:	d000      	beq.n	402cea <_fstat_r+0x1a>
  402ce8:	bd38      	pop	{r3, r4, r5, pc}
  402cea:	6823      	ldr	r3, [r4, #0]
  402cec:	2b00      	cmp	r3, #0
  402cee:	d0fb      	beq.n	402ce8 <_fstat_r+0x18>
  402cf0:	602b      	str	r3, [r5, #0]
  402cf2:	bd38      	pop	{r3, r4, r5, pc}
  402cf4:	20400964 	.word	0x20400964

00402cf8 <_isatty_r>:
  402cf8:	b538      	push	{r3, r4, r5, lr}
  402cfa:	4c07      	ldr	r4, [pc, #28]	; (402d18 <_isatty_r+0x20>)
  402cfc:	2300      	movs	r3, #0
  402cfe:	4605      	mov	r5, r0
  402d00:	4608      	mov	r0, r1
  402d02:	6023      	str	r3, [r4, #0]
  402d04:	f7fd fff2 	bl	400cec <_isatty>
  402d08:	1c43      	adds	r3, r0, #1
  402d0a:	d000      	beq.n	402d0e <_isatty_r+0x16>
  402d0c:	bd38      	pop	{r3, r4, r5, pc}
  402d0e:	6823      	ldr	r3, [r4, #0]
  402d10:	2b00      	cmp	r3, #0
  402d12:	d0fb      	beq.n	402d0c <_isatty_r+0x14>
  402d14:	602b      	str	r3, [r5, #0]
  402d16:	bd38      	pop	{r3, r4, r5, pc}
  402d18:	20400964 	.word	0x20400964

00402d1c <_lseek_r>:
  402d1c:	b570      	push	{r4, r5, r6, lr}
  402d1e:	460d      	mov	r5, r1
  402d20:	4c08      	ldr	r4, [pc, #32]	; (402d44 <_lseek_r+0x28>)
  402d22:	4611      	mov	r1, r2
  402d24:	4606      	mov	r6, r0
  402d26:	461a      	mov	r2, r3
  402d28:	4628      	mov	r0, r5
  402d2a:	2300      	movs	r3, #0
  402d2c:	6023      	str	r3, [r4, #0]
  402d2e:	f7fd ffdf 	bl	400cf0 <_lseek>
  402d32:	1c43      	adds	r3, r0, #1
  402d34:	d000      	beq.n	402d38 <_lseek_r+0x1c>
  402d36:	bd70      	pop	{r4, r5, r6, pc}
  402d38:	6823      	ldr	r3, [r4, #0]
  402d3a:	2b00      	cmp	r3, #0
  402d3c:	d0fb      	beq.n	402d36 <_lseek_r+0x1a>
  402d3e:	6033      	str	r3, [r6, #0]
  402d40:	bd70      	pop	{r4, r5, r6, pc}
  402d42:	bf00      	nop
  402d44:	20400964 	.word	0x20400964

00402d48 <_read_r>:
  402d48:	b570      	push	{r4, r5, r6, lr}
  402d4a:	460d      	mov	r5, r1
  402d4c:	4c08      	ldr	r4, [pc, #32]	; (402d70 <_read_r+0x28>)
  402d4e:	4611      	mov	r1, r2
  402d50:	4606      	mov	r6, r0
  402d52:	461a      	mov	r2, r3
  402d54:	4628      	mov	r0, r5
  402d56:	2300      	movs	r3, #0
  402d58:	6023      	str	r3, [r4, #0]
  402d5a:	f7fd fa57 	bl	40020c <_read>
  402d5e:	1c43      	adds	r3, r0, #1
  402d60:	d000      	beq.n	402d64 <_read_r+0x1c>
  402d62:	bd70      	pop	{r4, r5, r6, pc}
  402d64:	6823      	ldr	r3, [r4, #0]
  402d66:	2b00      	cmp	r3, #0
  402d68:	d0fb      	beq.n	402d62 <_read_r+0x1a>
  402d6a:	6033      	str	r3, [r6, #0]
  402d6c:	bd70      	pop	{r4, r5, r6, pc}
  402d6e:	bf00      	nop
  402d70:	20400964 	.word	0x20400964
  402d74:	00000001 	.word	0x00000001
  402d78:	00000002 	.word	0x00000002
  402d7c:	00000004 	.word	0x00000004
  402d80:	00000008 	.word	0x00000008
  402d84:	00000010 	.word	0x00000010
  402d88:	00000020 	.word	0x00000020
  402d8c:	00000040 	.word	0x00000040
  402d90:	00000080 	.word	0x00000080
  402d94:	00000100 	.word	0x00000100
  402d98:	00000200 	.word	0x00000200
  402d9c:	00000400 	.word	0x00000400
  402da0:	50202d2d 	.word	0x50202d2d
  402da4:	4c204d57 	.word	0x4c204d57
  402da8:	45204445 	.word	0x45204445
  402dac:	706d6178 	.word	0x706d6178
  402db0:	2d20656c 	.word	0x2d20656c
  402db4:	2d0a0d2d 	.word	0x2d0a0d2d
  402db8:	4153202d 	.word	0x4153202d
  402dbc:	3037454d 	.word	0x3037454d
  402dc0:	4c50582d 	.word	0x4c50582d
  402dc4:	2d2d2044 	.word	0x2d2d2044
  402dc8:	2d2d0a0d 	.word	0x2d2d0a0d
  402dcc:	6d6f4320 	.word	0x6d6f4320
  402dd0:	656c6970 	.word	0x656c6970
  402dd4:	41203a64 	.word	0x41203a64
  402dd8:	31207270 	.word	0x31207270
  402ddc:	30322032 	.word	0x30322032
  402de0:	32203731 	.word	0x32203731
  402de4:	31303a30 	.word	0x31303a30
  402de8:	2039343a 	.word	0x2039343a
  402dec:	000d2d2d 	.word	0x000d2d2d
  402df0:	00000043 	.word	0x00000043

00402df4 <_global_impure_ptr>:
  402df4:	20400010 0000000a                       ..@ ....

00402dfc <_init>:
  402dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402dfe:	bf00      	nop
  402e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402e02:	bc08      	pop	{r3}
  402e04:	469e      	mov	lr, r3
  402e06:	4770      	bx	lr

00402e08 <__init_array_start>:
  402e08:	0040145d 	.word	0x0040145d

00402e0c <__frame_dummy_init_array_entry>:
  402e0c:	00400165                                e.@.

00402e10 <_fini>:
  402e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402e12:	bf00      	nop
  402e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402e16:	bc08      	pop	{r3}
  402e18:	469e      	mov	lr, r3
  402e1a:	4770      	bx	lr

00402e1c <__fini_array_start>:
  402e1c:	00400141 	.word	0x00400141
